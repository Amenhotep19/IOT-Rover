

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Feb 16 17:07:19 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataBANK0
    58  0014BE                     __pidataBANK0:
    59                           	opt stack 0
    60                           
    61                           ;initializer for ___cgram
    62  0014BE  0C                 	db	12
    63  0014BF  12                 	db	18
    64  0014C0  12                 	db	18
    65  0014C1  0C                 	db	12
    66  0014C2  00                 	db	0
    67  0014C3  00                 	db	0
    68  0014C4  00                 	db	0
    69  0014C5  00                 	db	0
    70  0014C6  00                 	db	0
    71  0014C7  04                 	db	4
    72  0014C8  0E                 	db	14
    73  0014C9  1F                 	db	31
    74  0014CA  0E                 	db	14
    75  0014CB  04                 	db	4
    76  0014CC  00                 	db	0
    77  0014CD  00                 	db	0
    78  0014CE  04                 	db	4
    79  0014CF  04                 	db	4
    80  0014D0  04                 	db	4
    81  0014D1  04                 	db	4
    82  0014D2  1F                 	db	31
    83  0014D3  0E                 	db	14
    84  0014D4  04                 	db	4
    85  0014D5  00                 	db	0
    86  0014D6  0A                 	db	10
    87  0014D7  15                 	db	21
    88  0014D8  11                 	db	17
    89  0014D9  0A                 	db	10
    90  0014DA  04                 	db	4
    91  0014DB  00                 	db	0
    92  0014DC  00                 	db	0
    93  0014DD  00                 	db	0
    94  0014DE  0A                 	db	10
    95  0014DF  1F                 	db	31
    96  0014E0  1F                 	db	31
    97  0014E1  0E                 	db	14
    98  0014E2  04                 	db	4
    99  0014E3  00                 	db	0
   100  0014E4  00                 	db	0
   101  0014E5  00                 	db	0
   102  0014E6  00                 	db	0
   103  0014E7  00                 	db	0
   104  0014E8  00                 	db	0
   105  0014E9  00                 	db	0
   106  0014EA  00                 	db	0
   107  0014EB  00                 	db	0
   108  0014EC  00                 	db	0
   109  0014ED  00                 	db	0
   110  0014EE  00                 	db	0
   111  0014EF  00                 	db	0
   112  0014F0  00                 	db	0
   113  0014F1  00                 	db	0
   114  0014F2  00                 	db	0
   115  0014F3  00                 	db	0
   116  0014F4  00                 	db	0
   117  0014F5  00                 	db	0
   118  0014F6  00                 	db	0
   119  0014F7  00                 	db	0
   120  0014F8  00                 	db	0
   121  0014F9  00                 	db	0
   122  0014FA  00                 	db	0
   123  0014FB  00                 	db	0
   124  0014FC  00                 	db	0
   125  0014FD  00                 	db	0
   126  0000                     _ADCON1	set	4033
   127  0000                     _ADCON2	set	4032
   128  0000                     _ADRESH	set	4036
   129  0000                     _ADRESL	set	4035
   130  0000                     _PIE1bits	set	3997
   131  0000                     _PIR1bits	set	3998
   132  0000                     _PORTD	set	3971
   133  0000                     _RCREG	set	4014
   134  0000                     _RCSTA	set	4011
   135  0000                     _RCSTAbits	set	4011
   136  0000                     _SPBRG	set	4015
   137  0000                     _SPBRGH	set	4016
   138  0000                     _TMR0H	set	4055
   139  0000                     _TMR0L	set	4054
   140  0000                     _TRISC	set	3988
   141  0000                     _TRISCbits	set	3988
   142  0000                     _TRISD	set	3989
   143  0000                     _TRISDbits	set	3989
   144  0000                     _TXREG	set	4013
   145  0000                     _TXSTA	set	4012
   146  0000                     _TXSTAbits	set	4012
   147  0000                     _ADIE	set	31982
   148  0000                     _ADIF	set	31990
   149  0000                     _ADON	set	32272
   150  0000                     _ANS0	set	31728
   151  0000                     _ANS1	set	31729
   152  0000                     _ANS2	set	31730
   153  0000                     _ANS3	set	31731
   154  0000                     _CHS0	set	32274
   155  0000                     _CHS1	set	32275
   156  0000                     _CHS2	set	32276
   157  0000                     _CHS3	set	32277
   158  0000                     _GIE	set	32663
   159  0000                     _GO	set	32273
   160  0000                     _PEIE	set	32662
   161  0000                     _PSA	set	32427
   162  0000                     _RC0	set	31760
   163  0000                     _RC1	set	31761
   164  0000                     _RC2	set	31762
   165  0000                     _RC3	set	31763
   166  0000                     _RC4	set	31764
   167  0000                     _RC5	set	31765
   168  0000                     _RCIF	set	31989
   169  0000                     _RD4	set	31772
   170  0000                     _RD5	set	31773
   171  0000                     _RD6	set	31774
   172  0000                     _T08BIT	set	32430
   173  0000                     _T0CS	set	32429
   174  0000                     _T0PS0	set	32424
   175  0000                     _T0PS1	set	32425
   176  0000                     _T0PS2	set	32426
   177  0000                     _TMR0IE	set	32661
   178  0000                     _TMR0IF	set	32658
   179  0000                     _TMR0ON	set	32431
   180  0000                     _TRISA0	set	31888
   181  0000                     _TRISA1	set	31889
   182  0000                     _TRISA2	set	31890
   183  0000                     _TRISA3	set	31891
   184                           
   185                           	psect	smallconst
   186  000600                     __psmallconst:
   187                           	opt stack 0
   188  000600  00                 	db	0
   189  000601                     STR_2:
   190  000601  0A                 	db	10
   191  000602  0D                 	db	13
   192  000603  0A                 	db	10
   193  000604  0D                 	db	13
   194  000605  57                 	db	87	;'W'
   195  000606  72                 	db	114	;'r'
   196  000607  69                 	db	105	;'i'
   197  000608  74                 	db	116	;'t'
   198  000609  65                 	db	101	;'e'
   199  00060A  3A                 	db	58	;':'
   200  00060B  20                 	db	32
   201  00060C  00                 	db	0
   202  00060D                     STR_1:
   203  00060D  0A                 	db	10
   204  00060E  0D                 	db	13
   205  00060F  45                 	db	69	;'E'
   206  000610  63                 	db	99	;'c'
   207  000611  68                 	db	104	;'h'
   208  000612  6F                 	db	111	;'o'
   209  000613  3A                 	db	58	;':'
   210  000614  20                 	db	32
   211  000615  00                 	db	0
   212  000616                     STR_3:
   213  000616  31                 	db	49	;'1'
   214  000617  00                 	db	0
   215  000618                     STR_4:
   216  000618  32                 	db	50	;'2'
   217  000619  00                 	db	0
   218  00061A                     STR_5:
   219  00061A  33                 	db	51	;'3'
   220  00061B  00                 	db	0
   221  00061C                     STR_6:
   222  00061C  34                 	db	52	;'4'
   223  00061D  00                 	db	0
   224  00061E                     STR_7:
   225  00061E  35                 	db	53	;'5'
   226  00061F  00                 	db	0
   227  000620                     STR_8:
   228  000620  36                 	db	54	;'6'
   229  000621  00                 	db	0
   230  000622                     STR_9:
   231  000622  37                 	db	55	;'7'
   232  000623  00                 	db	0
   233  000624                     STR_10:
   234  000624  38                 	db	56	;'8'
   235  000625  00                 	db	0
   236                           
   237                           ; #config settings
   238  000626  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           	psect	cinit
   241  0013B2                     __pcinit:
   242                           	opt stack 0
   243  0013B2                     start_initialization:
   244                           	opt stack 0
   245  0013B2                     __initialization:
   246                           	opt stack 0
   247                           
   248                           ; Clear objects allocated to BANK0 (11 bytes)
   249  0013B2  EE00  F0B8         	lfsr	0,__pbssBANK0
   250  0013B6  0E0B               	movlw	11
   251  0013B8                     clear_0:
   252  0013B8  6AEE               	clrf	postinc0,c
   253  0013BA  06E8               	decf	wreg,f,c
   254  0013BC  E1FD               	bnz	clear_0
   255                           
   256                           ; Clear objects allocated to COMRAM (15 bytes)
   257  0013BE  EE00  F04D         	lfsr	0,__pbssCOMRAM
   258  0013C2  0E0F               	movlw	15
   259  0013C4                     clear_1:
   260  0013C4  6AEE               	clrf	postinc0,c
   261  0013C6  06E8               	decf	wreg,f,c
   262  0013C8  E1FD               	bnz	clear_1
   263                           
   264                           ; Initialize objects allocated to BANK0 (64 bytes)
   265                           ; load TBLPTR registers with __pidataBANK0
   266  0013CA  0EBE               	movlw	low __pidataBANK0
   267  0013CC  6EF6               	movwf	tblptrl,c
   268  0013CE  0E14               	movlw	high __pidataBANK0
   269  0013D0  6EF7               	movwf	tblptrh,c
   270  0013D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   271  0013D4  6EF8               	movwf	tblptru,c
   272  0013D6  EE00  F060         	lfsr	0,__pdataBANK0
   273  0013DA  EE10 F040          	lfsr	1,64
   274  0013DE                     copy_data0:
   275  0013DE  0009               	tblrd		*+
   276  0013E0  CFF5 FFEE          	movff	tablat,postinc0
   277  0013E4  50E5               	movf	postdec1,w,c
   278  0013E6  50E1               	movf	fsr1l,w,c
   279  0013E8  E1FA               	bnz	copy_data0
   280  0013EA                     end_of_initialization:
   281                           	opt stack 0
   282  0013EA                     __end_of__initialization:
   283                           	opt stack 0
   284  0013EA  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   285  0013EC  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   286  0013EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   287  0013F0  6EF8               	movwf	tblptru,c
   288  0013F2  0100               	movlb	0
   289  0013F4  EF20  F008         	goto	_main	;jump to C main() function
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssCOMRAM
   300  00004D                     __pbssCOMRAM:
   301                           	opt stack 0
   302  00004D                     _Battery:
   303                           	opt stack 0
   304  00004D                     	ds	2
   305  00004F                     _PWMLeft:
   306                           	opt stack 0
   307  00004F                     	ds	2
   308  000051                     _PWMRight:
   309                           	opt stack 0
   310  000051                     	ds	2
   311  000053                     isr@PWMLeft:
   312                           	opt stack 0
   313  000053                     	ds	2
   314  000055                     isr@PWMRight:
   315                           	opt stack 0
   316  000055                     	ds	2
   317  000057                     isr@Readport:
   318                           	opt stack 0
   319  000057                     	ds	2
   320  000059                     isr@iteration:
   321                           	opt stack 0
   322  000059                     	ds	2
   323  00005B                     _USART_Status:
   324                           	opt stack 0
   325  00005B                     	ds	1
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           tblptrl	equ	0xFF6
   329                           tablat	equ	0xFF5
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           postdec1	equ	0xFE5
   333                           fsr1l	equ	0xFE1
   334                           
   335                           	psect	bssBANK0
   336  0000B8                     __pbssBANK0:
   337                           	opt stack 0
   338  0000B8                     LCDWriteInt@F4236:
   339                           	opt stack 0
   340  0000B8                     	ds	5
   341  0000BD                     _DistanceCentral:
   342                           	opt stack 0
   343  0000BD                     	ds	2
   344  0000BF                     _DistanceLeft:
   345                           	opt stack 0
   346  0000BF                     	ds	2
   347  0000C1                     _DistanceRight:
   348                           	opt stack 0
   349  0000C1                     	ds	2
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	dataBANK0
   360  000060                     __pdataBANK0:
   361                           	opt stack 0
   362  000060                     ___cgram:
   363                           	opt stack 0
   364  000060                     	ds	64
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	cstackBANK0
   375  0000A0                     __pcstackBANK0:
   376                           	opt stack 0
   377  0000A0                     ?_ReadDistanceCentral:
   378                           	opt stack 0
   379  0000A0                     ?_abs:
   380                           	opt stack 0
   381  0000A0                     ?_ReadDistanceLeft:
   382                           	opt stack 0
   383  0000A0                     ?_ReadDistanceRight:
   384                           	opt stack 0
   385  0000A0                     ?___awdiv:
   386                           	opt stack 0
   387  0000A0                     ?___awmod:
   388                           	opt stack 0
   389  0000A0                     ?___lwdiv:
   390                           	opt stack 0
   391  0000A0                     LCDBusyLoop@busy:
   392                           	opt stack 0
   393  0000A0                     OpenUSART@spbrg:
   394                           	opt stack 0
   395  0000A0                     abs@a:
   396                           	opt stack 0
   397  0000A0                     ___awdiv@dividend:
   398                           	opt stack 0
   399  0000A0                     ___awmod@dividend:
   400                           	opt stack 0
   401  0000A0                     ___lwdiv@dividend:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x0
   405  0000A0                     	ds	1
   406  0000A1                     LCDBusyLoop@temp:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x1
   410  0000A1                     	ds	1
   411  0000A2                     ??_abs:
   412  0000A2                     LCDBusyLoop@status:
   413                           	opt stack 0
   414  0000A2                     OpenUSART@config:
   415                           	opt stack 0
   416  0000A2                     ___awdiv@divisor:
   417                           	opt stack 0
   418  0000A2                     ___awmod@divisor:
   419                           	opt stack 0
   420  0000A2                     ___lwdiv@divisor:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  0000A2                     	ds	1
   425  0000A3                     LCDByte@isdata:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x3
   429  0000A3                     	ds	1
   430  0000A4                     LCDByte@hn:
   431                           	opt stack 0
   432  0000A4                     ___awdiv@counter:
   433                           	opt stack 0
   434  0000A4                     ___awmod@counter:
   435                           	opt stack 0
   436  0000A4                     ___lwdiv@quotient:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x4
   440  0000A4                     	ds	1
   441  0000A5                     LCDByte@ln:
   442                           	opt stack 0
   443  0000A5                     ___awdiv@sign:
   444                           	opt stack 0
   445  0000A5                     ___awmod@sign:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x5
   449  0000A5                     	ds	1
   450  0000A6                     LCDByte@c:
   451                           	opt stack 0
   452  0000A6                     ___lwdiv@counter:
   453                           	opt stack 0
   454  0000A6                     ___awdiv@quotient:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x6
   458  0000A6                     	ds	1
   459  0000A7                     LCDByte@temp:
   460                           	opt stack 0
   461  0000A7                     SetPWMMotorLeft@percentage:
   462                           	opt stack 0
   463  0000A7                     SetPWMMotorRight@percentage:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x7
   467  0000A7                     	ds	1
   468  0000A8                     ??_LCDInit:
   469  0000A8                     LCDWriteString@msg:
   470                           	opt stack 0
   471  0000A8                     LCDWriteInt@val:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x8
   475  0000A8                     	ds	1
   476  0000A9                     LCDInit@style:
   477                           	opt stack 0
   478  0000A9                     SetMotorLeft@speed:
   479                           	opt stack 0
   480  0000A9                     SetMotorRight@speed:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x9
   484  0000A9                     	ds	1
   485  0000AA                     LCDInit@__i:
   486                           	opt stack 0
   487  0000AA                     LCDWriteString@cc:
   488                           	opt stack 0
   489  0000AA                     LCDWriteInt@field_length:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0xA
   493  0000AA                     	ds	1
   494  0000AB                     ??_LCDWriteInt:
   495                           
   496                           ; 1 bytes @ 0xB
   497  0000AB                     	ds	2
   498  0000AD                     LCDWriteInt@str:
   499                           	opt stack 0
   500                           
   501                           ; 5 bytes @ 0xD
   502  0000AD                     	ds	5
   503  0000B2                     LCDWriteInt@j:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x12
   507  0000B2                     	ds	2
   508  0000B4                     LCDWriteInt@i:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x14
   512  0000B4                     	ds	2
   513  0000B6                     main@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x16
   517  0000B6                     	ds	2
   518                           tblptru	equ	0xFF8
   519                           tblptrh	equ	0xFF7
   520                           tblptrl	equ	0xFF6
   521                           tablat	equ	0xFF5
   522                           postinc0	equ	0xFEE
   523                           wreg	equ	0xFE8
   524                           postdec1	equ	0xFE5
   525                           fsr1l	equ	0xFE1
   526                           
   527                           	psect	cstackCOMRAM
   528  000001                     __pcstackCOMRAM:
   529                           	opt stack 0
   530  000001                     ?_ADCGetOutput:
   531                           	opt stack 0
   532  000001                     ?_ReadPWMMotorRight:
   533                           	opt stack 0
   534  000001                     ?_ReadPWMMotorLeft:
   535                           	opt stack 0
   536  000001                     ?___ftpack:
   537                           	opt stack 0
   538  000001                     ReadUSART@data:
   539                           	opt stack 0
   540  000001                     WriteUSART@data:
   541                           	opt stack 0
   542  000001                     ___ftpack@arg:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x0
   546  000001                     	ds	1
   547  000002                     putsUSART@data:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x1
   551  000002                     	ds	1
   552  000003                     ??_ADCGetOutput:
   553  000003                     
   554                           ; 1 bytes @ 0x2
   555  000003                     	ds	1
   556  000004                     ___ftpack@exp:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x3
   560  000004                     	ds	1
   561  000005                     ___ftpack@sign:
   562                           	opt stack 0
   563  000005                     ADCGetOutput@temp:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	1
   568  000006                     ??___ftpack:
   569                           
   570                           ; 1 bytes @ 0x5
   571  000006                     	ds	3
   572  000009                     ?___lwtoft:
   573                           	opt stack 0
   574  000009                     ___lwtoft@c:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x8
   578  000009                     	ds	3
   579  00000C                     ?___ftmul:
   580                           	opt stack 0
   581  00000C                     ___ftmul@f1:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0xB
   585  00000C                     	ds	3
   586  00000F                     ___ftmul@f2:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0xE
   590  00000F                     	ds	3
   591  000012                     ??___ftmul:
   592                           
   593                           ; 1 bytes @ 0x11
   594  000012                     	ds	3
   595  000015                     ___ftmul@exp:
   596                           	opt stack 0
   597                           
   598                           ; 1 bytes @ 0x14
   599  000015                     	ds	1
   600  000016                     ___ftmul@f3_as_product:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x15
   604  000016                     	ds	3
   605  000019                     ___ftmul@cntr:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x18
   609  000019                     	ds	1
   610  00001A                     ___ftmul@sign:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x19
   614  00001A                     	ds	1
   615  00001B                     ?___ftadd:
   616                           	opt stack 0
   617  00001B                     ___ftadd@f1:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x1A
   621  00001B                     	ds	3
   622  00001E                     ___ftadd@f2:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x1D
   626  00001E                     	ds	3
   627  000021                     ??___ftadd:
   628                           
   629                           ; 1 bytes @ 0x20
   630  000021                     	ds	3
   631  000024                     ___ftadd@sign:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x23
   635  000024                     	ds	1
   636  000025                     ___ftadd@exp2:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x24
   640  000025                     	ds	1
   641  000026                     ___ftadd@exp1:
   642                           	opt stack 0
   643                           
   644                           ; 1 bytes @ 0x25
   645  000026                     	ds	1
   646  000027                     ?___fttol:
   647                           	opt stack 0
   648  000027                     ___fttol@f1:
   649                           	opt stack 0
   650                           
   651                           ; 3 bytes @ 0x26
   652  000027                     	ds	4
   653  00002B                     ??___fttol:
   654                           
   655                           ; 1 bytes @ 0x2A
   656  00002B                     	ds	5
   657  000030                     ___fttol@sign1:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x2F
   661  000030                     	ds	1
   662  000031                     ___fttol@lval:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x30
   666  000031                     	ds	4
   667  000035                     ___fttol@exp1:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x34
   671  000035                     	ds	1
   672  000036                     SetDistanceLeft@lecture:
   673                           	opt stack 0
   674  000036                     SetDistanceRight@lecture:
   675                           	opt stack 0
   676  000036                     SetDistanceCentral@lecture:
   677                           	opt stack 0
   678  000036                     SetBattery@lecture:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x35
   682  000036                     	ds	2
   683  000038                     ??_SetDistanceLeft:
   684  000038                     ??_SetDistanceCentral:
   685  000038                     ??_SetDistanceRight:
   686  000038                     
   687                           ; 1 bytes @ 0x37
   688  000038                     	ds	2
   689  00003A                     ??_isr:
   690                           
   691                           ; 1 bytes @ 0x39
   692  00003A                     	ds	16
   693  00004A                     isr@CharRx:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x49
   697  00004A                     	ds	1
   698  00004B                     isr@read:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x4A
   702  00004B                     	ds	2
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712 ;;
   713 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   714 ;;
   715 ;; *************** function _main *****************
   716 ;; Defined at:
   717 ;;		line 10 in file "main.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  i               2   22[BANK0 ] int 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  1    wreg      void 
   724 ;; Registers used:
   725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   731 ;;      Params:         0       0       0       0       0       0       0
   732 ;;      Locals:         0       2       0       0       0       0       0
   733 ;;      Temps:          0       0       0       0       0       0       0
   734 ;;      Totals:         0       2       0       0       0       0       0
   735 ;;Total ram usage:        2 bytes
   736 ;; Hardware stack levels required when called:    8
   737 ;; This function calls:
   738 ;;		_ADCInit
   739 ;;		_ADCInitiateConversion
   740 ;;		_Go
   741 ;;		_LCDByte
   742 ;;		_LCDInit
   743 ;;		_LCDWriteInt
   744 ;;		_MotorInit
   745 ;;		_ReadDistanceCentral
   746 ;;		_SerialInit
   747 ;;		_SetMotorLeft
   748 ;;		_SetMotorRight
   749 ;;		_TimerPWMInit
   750 ;; This function is called by:
   751 ;;		Startup code after reset
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text0
   756  001040                     __ptext0:
   757                           	opt stack 0
   758  001040                     _main:
   759                           	opt stack 23
   760                           
   761                           ;main.c: 12: ADCInit();
   762                           
   763                           ;incstack = 0
   764  001040  ECE1  F00A         	call	_ADCInit	;wreg free
   765                           
   766                           ;main.c: 17: MotorInit();
   767  001044  EC5B  F00B         	call	_MotorInit	;wreg free
   768                           
   769                           ;main.c: 18: SerialInit();
   770  001048  EC30  F00B         	call	_SerialInit	;wreg free
   771                           
   772                           ;main.c: 19: TimerPWMInit();
   773  00104C  EC05  F00B         	call	_TimerPWMInit	;wreg free
   774                           
   775                           ;main.c: 20: SetMotorLeft(40);
   776  001050  0E00               	movlw	0
   777  001052  0100               	movlb	0	; () banked
   778  001054  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
   779  001056  0E28               	movlw	40
   780  001058  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
   781  00105A  EC1D  F00A         	call	_SetMotorLeft	;wreg free
   782                           
   783                           ;main.c: 21: SetMotorRight(-95);
   784  00105E  0EFF               	movlw	255
   785  001060  0100               	movlb	0	; () banked
   786  001062  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
   787  001064  0EA1               	movlw	161
   788  001066  6FA9               	movwf	SetMotorRight@speed& (0+255),b
   789  001068  ECFC  F009         	call	_SetMotorRight	;wreg free
   790                           
   791                           ;main.c: 22: LCDInit(0B00000000);
   792  00106C  0E00               	movlw	0
   793  00106E  ECD7  F007         	call	_LCDInit
   794  001072                     l2644:
   795                           
   796                           ;main.c: 27: ADCInitiateConversion();
   797  001072  EC5E  F00B         	call	_ADCInitiateConversion	;wreg free
   798                           
   799                           ;main.c: 28: Go();
   800  001076  EC14  F003         	call	_Go	;wreg free
   801                           
   802                           ;main.c: 30: (LCDByte(0b00000001,0));
   803  00107A  0E00               	movlw	0
   804  00107C  0100               	movlb	0	; () banked
   805  00107E  6FA3               	movwf	LCDByte@isdata& (0+255),b
   806  001080  0E01               	movlw	1
   807  001082  EC83  F009         	call	_LCDByte
   808                           
   809                           ;main.c: 31: LCDWriteInt(ReadDistanceCentral(),2);
   810  001086  EC4C  F00B         	call	_ReadDistanceCentral	;wreg free
   811  00108A  C0A0  F0A8         	movff	?_ReadDistanceCentral,LCDWriteInt@val
   812  00108E  C0A1  F0A9         	movff	?_ReadDistanceCentral+1,LCDWriteInt@val+1
   813  001092  0E02               	movlw	2
   814  001094  0100               	movlb	0	; () banked
   815  001096  6FAA               	movwf	LCDWriteInt@field_length& (0+255),b
   816  001098  ECEE  F004         	call	_LCDWriteInt	;wreg free
   817                           
   818                           ;main.c: 32: for(int i=1;i<1000; i++){
   819  00109C  0E00               	movlw	0
   820  00109E  0100               	movlb	0	; () banked
   821  0010A0  6FB7               	movwf	(main@i+1)& (0+255),b
   822  0010A2  0E01               	movlw	1
   823  0010A4  6FB6               	movwf	main@i& (0+255),b
   824  0010A6                     l2654:
   825                           
   826                           ; BSR set to: 0
   827  0010A6  0100               	movlb	0	; () banked
   828  0010A8  BFB7               	btfsc	(main@i+1)& (0+255),7,b
   829  0010AA  D008               	goto	l2658
   830  0010AC  0EE8               	movlw	232
   831  0010AE  0100               	movlb	0	; () banked
   832  0010B0  5DB6               	subwf	main@i& (0+255),w,b
   833  0010B2  0E03               	movlw	3
   834  0010B4  0100               	movlb	0	; () banked
   835  0010B6  59B7               	subwfb	(main@i+1)& (0+255),w,b
   836  0010B8  B0D8               	btfsc	status,0,c
   837  0010BA  D7DB               	goto	l2644
   838  0010BC                     l2658:
   839                           
   840                           ; BSR set to: 0
   841  0010BC  0100               	movlb	0	; () banked
   842  0010BE  4BB6               	infsnz	main@i& (0+255),f,b
   843  0010C0  2BB7               	incf	(main@i+1)& (0+255),f,b
   844  0010C2  D7F1               	goto	l2654
   845  0010C4                     __end_of_main:
   846                           	opt stack 0
   847                           tblptru	equ	0xFF8
   848                           tblptrh	equ	0xFF7
   849                           tblptrl	equ	0xFF6
   850                           tablat	equ	0xFF5
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           status	equ	0xFD8
   856                           
   857 ;; *************** function _TimerPWMInit *****************
   858 ;; Defined at:
   859 ;;		line 14 in file "TimerPWM.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, status,2
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   873 ;;      Params:         0       0       0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0
   876 ;;      Totals:         0       0       0       0       0       0       0
   877 ;;Total ram usage:        0 bytes
   878 ;; Hardware stack levels used:    1
   879 ;; Hardware stack levels required when called:    4
   880 ;; This function calls:
   881 ;;		Nothing
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text1
   888  00160A                     __ptext1:
   889                           	opt stack 0
   890  00160A                     _TimerPWMInit:
   891                           	opt stack 26
   892                           
   893                           ;TimerPWM.c: 15: GIE=1;
   894                           
   895                           ; BSR set to: 0
   896                           ;incstack = 0
   897  00160A  8EF2               	bsf	intcon,7,c	;volatile
   898                           
   899                           ;TimerPWM.c: 16: TMR0IE=1;
   900  00160C  8AF2               	bsf	intcon,5,c	;volatile
   901                           
   902                           ;TimerPWM.c: 17: T08BIT=1;
   903  00160E  8CD5               	bsf	4053,6,c	;volatile
   904                           
   905                           ;TimerPWM.c: 18: T0CS=0;
   906  001610  9AD5               	bcf	4053,5,c	;volatile
   907                           
   908                           ;TimerPWM.c: 19: PSA=1;
   909  001612  86D5               	bsf	4053,3,c	;volatile
   910                           
   911                           ;TimerPWM.c: 20: T0PS2=0;
   912  001614  94D5               	bcf	4053,2,c	;volatile
   913                           
   914                           ;TimerPWM.c: 21: T0PS1=0;
   915  001616  92D5               	bcf	4053,1,c	;volatile
   916                           
   917                           ;TimerPWM.c: 22: T0PS0=1;
   918  001618  80D5               	bsf	4053,0,c	;volatile
   919                           
   920                           ;TimerPWM.c: 24: TMR0IF=0;
   921  00161A  94F2               	bcf	intcon,2,c	;volatile
   922                           
   923                           ;TimerPWM.c: 25: TMR0H=0x00;
   924  00161C  0E00               	movlw	0
   925  00161E  6ED7               	movwf	4055,c	;volatile
   926                           
   927                           ;TimerPWM.c: 26: TMR0L=156;
   928  001620  0E9C               	movlw	156
   929  001622  6ED6               	movwf	4054,c	;volatile
   930                           
   931                           ;TimerPWM.c: 27: TMR0ON=1;
   932  001624  8ED5               	bsf	4053,7,c	;volatile
   933  001626  0012               	return		;funcret
   934  001628                     __end_of_TimerPWMInit:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           intcon	equ	0xFF2
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postdec1	equ	0xFE5
   944                           fsr1l	equ	0xFE1
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function _SerialInit *****************
   948 ;; Defined at:
   949 ;;		line 13 in file "serial.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;		None
   954 ;; Return value:  Size  Location     Type
   955 ;;                  1    wreg      void 
   956 ;; Registers used:
   957 ;;		wreg, status,2, cstack
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   963 ;;      Params:         0       0       0       0       0       0       0
   964 ;;      Locals:         0       0       0       0       0       0       0
   965 ;;      Temps:          0       0       0       0       0       0       0
   966 ;;      Totals:         0       0       0       0       0       0       0
   967 ;;Total ram usage:        0 bytes
   968 ;; Hardware stack levels used:    1
   969 ;; Hardware stack levels required when called:    5
   970 ;; This function calls:
   971 ;;		_OpenUSART
   972 ;; This function is called by:
   973 ;;		_main
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text2
   978  001660                     __ptext2:
   979                           	opt stack 0
   980  001660                     _SerialInit:
   981                           	opt stack 25
   982                           
   983                           ;serial.c: 15: OpenUSART(0b01111111 &
   984                           ;serial.c: 16: 0b11111111 &
   985                           ;serial.c: 17: 0b11111110 &
   986                           ;serial.c: 18: 0b11111101 &
   987                           ;serial.c: 19: 0b11111111 &
   988                           ;serial.c: 20: 0b11111111, 6);
   989                           
   990                           ;incstack = 0
   991  001660  0E00               	movlw	0
   992  001662  0100               	movlb	0	; () banked
   993  001664  6FA1               	movwf	(OpenUSART@spbrg+1)& (0+255),b
   994  001666  0E06               	movlw	6
   995  001668  6FA0               	movwf	OpenUSART@spbrg& (0+255),b
   996  00166A  0E7C               	movlw	124
   997  00166C  EC9E  F008         	call	_OpenUSART
   998  001670  0012               	return		;funcret
   999  001672                     __end_of_SerialInit:
  1000                           	opt stack 0
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           intcon	equ	0xFF2
  1006                           postinc0	equ	0xFEE
  1007                           wreg	equ	0xFE8
  1008                           postdec1	equ	0xFE5
  1009                           fsr1l	equ	0xFE1
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _OpenUSART *****************
  1013 ;; Defined at:
  1014 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uopen.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;  config          1    wreg     unsigned char 
  1017 ;;  spbrg           2    0[BANK0 ] unsigned int 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;  config          1    2[BANK0 ] unsigned char 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, status,2
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1029 ;;      Params:         0       2       0       0       0       0       0
  1030 ;;      Locals:         0       1       0       0       0       0       0
  1031 ;;      Temps:          0       0       0       0       0       0       0
  1032 ;;      Totals:         0       3       0       0       0       0       0
  1033 ;;Total ram usage:        3 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    4
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_SerialInit
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text3
  1044  00113C                     __ptext3:
  1045                           	opt stack 0
  1046  00113C                     _OpenUSART:
  1047                           	opt stack 25
  1048                           
  1049                           ;incstack = 0
  1050                           ;OpenUSART@config stored from wreg
  1051  00113C  0100               	movlb	0	; () banked
  1052  00113E  6FA2               	movwf	OpenUSART@config& (0+255),b
  1053  001140  0E00               	movlw	0
  1054  001142  6EAC               	movwf	4012,c	;volatile
  1055  001144  0E00               	movlw	0
  1056  001146  6EAB               	movwf	4011,c	;volatile
  1057  001148  0100               	movlb	0	; () banked
  1058  00114A  B1A2               	btfsc	OpenUSART@config& (0+255),0,b
  1059                           
  1060                           ; BSR set to: 0
  1061  00114C  88AC               	bsf	4012,4,c	;volatile
  1062                           
  1063                           ; BSR set to: 0
  1064                           
  1065                           ; BSR set to: 0
  1066  00114E  0100               	movlb	0	; () banked
  1067  001150  A3A2               	btfss	OpenUSART@config& (0+255),1,b
  1068  001152  D002               	goto	l2098
  1069                           
  1070                           ; BSR set to: 0
  1071  001154  8CAC               	bsf	4012,6,c	;volatile
  1072  001156  8CAB               	bsf	4011,6,c	;volatile
  1073  001158                     l2098:
  1074                           
  1075                           ; BSR set to: 0
  1076  001158  0100               	movlb	0	; () banked
  1077  00115A  B5A2               	btfsc	OpenUSART@config& (0+255),2,b
  1078                           
  1079                           ; BSR set to: 0
  1080  00115C  8EAC               	bsf	4012,7,c	;volatile
  1081                           
  1082                           ; BSR set to: 0
  1083                           
  1084                           ; BSR set to: 0
  1085  00115E  0100               	movlb	0	; () banked
  1086  001160  A7A2               	btfss	OpenUSART@config& (0+255),3,b
  1087  001162  D002               	goto	l397
  1088                           
  1089                           ; BSR set to: 0
  1090  001164  88AB               	bsf	4011,4,c	;volatile
  1091  001166  D001               	goto	l2106
  1092  001168                     l397:
  1093                           
  1094                           ; BSR set to: 0
  1095  001168  8AAB               	bsf	4011,5,c	;volatile
  1096  00116A                     l2106:
  1097                           
  1098                           ; BSR set to: 0
  1099  00116A  0100               	movlb	0	; () banked
  1100  00116C  B9A2               	btfsc	OpenUSART@config& (0+255),4,b
  1101                           
  1102                           ; BSR set to: 0
  1103  00116E  84AC               	bsf	4012,2,c	;volatile
  1104                           
  1105                           ; BSR set to: 0
  1106  001170  989E               	bcf	3998,4,c	;volatile
  1107                           
  1108                           ; BSR set to: 0
  1109  001172  0100               	movlb	0	; () banked
  1110  001174  BBA2               	btfsc	OpenUSART@config& (0+255),5,b
  1111                           
  1112                           ; BSR set to: 0
  1113  001176  86AB               	bsf	4011,3,c	;volatile
  1114                           
  1115                           ; BSR set to: 0
  1116                           
  1117                           ; BSR set to: 0
  1118  001178  0100               	movlb	0	; () banked
  1119  00117A  ADA2               	btfss	OpenUSART@config& (0+255),6,b
  1120  00117C  D002               	goto	l401
  1121                           
  1122                           ; BSR set to: 0
  1123  00117E  8A9D               	bsf	3997,5,c	;volatile
  1124  001180  D001               	goto	l402
  1125  001182                     l401:
  1126                           
  1127                           ; BSR set to: 0
  1128  001182  9A9D               	bcf	3997,5,c	;volatile
  1129  001184                     l402:
  1130                           
  1131                           ; BSR set to: 0
  1132  001184  9A9E               	bcf	3998,5,c	;volatile
  1133                           
  1134                           ; BSR set to: 0
  1135  001186  0100               	movlb	0	; () banked
  1136  001188  AFA2               	btfss	OpenUSART@config& (0+255),7,b
  1137  00118A  D002               	goto	l403
  1138                           
  1139                           ; BSR set to: 0
  1140  00118C  889D               	bsf	3997,4,c	;volatile
  1141  00118E  D001               	goto	l404
  1142  001190                     l403:
  1143                           
  1144                           ; BSR set to: 0
  1145  001190  989D               	bcf	3997,4,c	;volatile
  1146  001192                     l404:
  1147                           
  1148                           ; BSR set to: 0
  1149  001192  C0A0  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  1150                           
  1151                           ; BSR set to: 0
  1152  001196  0100               	movlb	0	; () banked
  1153  001198  51A1               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
  1154  00119A  6EB0               	movwf	4016,c	;volatile
  1155                           
  1156                           ; BSR set to: 0
  1157  00119C  8AAC               	bsf	4012,5,c	;volatile
  1158                           
  1159                           ; BSR set to: 0
  1160  00119E  8EAB               	bsf	4011,7,c	;volatile
  1161                           
  1162                           ; BSR set to: 0
  1163  0011A0  9C94               	bcf	3988,6,c	;volatile
  1164                           
  1165                           ; BSR set to: 0
  1166  0011A2  8E94               	bsf	3988,7,c	;volatile
  1167                           
  1168                           ; BSR set to: 0
  1169  0011A4  A8AC               	btfss	4012,4,c	;volatile
  1170  0011A6  0012               	return	
  1171                           
  1172                           ; BSR set to: 0
  1173  0011A8  BEAC               	btfsc	4012,7,c	;volatile
  1174  0011AA  0012               	return	
  1175                           
  1176                           ; BSR set to: 0
  1177  0011AC  8C94               	bsf	3988,6,c	;volatile
  1178  0011AE  0012               	return	
  1179  0011B0                     __end_of_OpenUSART:
  1180                           	opt stack 0
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           intcon	equ	0xFF2
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           status	equ	0xFD8
  1191                           
  1192 ;; *************** function _MotorInit *****************
  1193 ;; Defined at:
  1194 ;;		line 23 in file "motors.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, status,2
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1208 ;;      Params:         0       0       0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0
  1211 ;;      Totals:         0       0       0       0       0       0       0
  1212 ;;Total ram usage:        0 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    4
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text4
  1223  0016B6                     __ptext4:
  1224                           	opt stack 0
  1225  0016B6                     _MotorInit:
  1226                           	opt stack 26
  1227                           
  1228                           ;motors.c: 24: TRISC = 0b11000000;
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;incstack = 0
  1232  0016B6  0EC0               	movlw	192
  1233  0016B8  6E94               	movwf	3988,c	;volatile
  1234  0016BA  0012               	return		;funcret
  1235  0016BC                     __end_of_MotorInit:
  1236                           	opt stack 0
  1237                           tblptru	equ	0xFF8
  1238                           tblptrh	equ	0xFF7
  1239                           tblptrl	equ	0xFF6
  1240                           tablat	equ	0xFF5
  1241                           intcon	equ	0xFF2
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function _LCDWriteInt *****************
  1249 ;; Defined at:
  1250 ;;		line 310 in file "lcd_hd44780_pic16.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  val             2    8[BANK0 ] int 
  1253 ;;  field_length    1   10[BANK0 ] char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  str             5   13[BANK0 ] unsigned char [5]
  1256 ;;  i               2   20[BANK0 ] int 
  1257 ;;  j               2   18[BANK0 ] int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1267 ;;      Params:         0       3       0       0       0       0       0
  1268 ;;      Locals:         0       9       0       0       0       0       0
  1269 ;;      Temps:          0       2       0       0       0       0       0
  1270 ;;      Totals:         0      14       0       0       0       0       0
  1271 ;;Total ram usage:       14 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    6
  1274 ;; This function calls:
  1275 ;;		_LCDByte
  1276 ;;		___awdiv
  1277 ;;		___awmod
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text5
  1284  0009DC                     __ptext5:
  1285                           	opt stack 0
  1286  0009DC                     _LCDWriteInt:
  1287                           	opt stack 24
  1288                           
  1289                           ;lcd_hd44780_pic16.c: 323: char str[5]={0,0,0,0,0};
  1290                           
  1291                           ;incstack = 0
  1292  0009DC  EE20  F0B8         	lfsr	2,LCDWriteInt@F4236
  1293  0009E0  EE10  F0AD         	lfsr	1,LCDWriteInt@str
  1294  0009E4  0E04               	movlw	4
  1295  0009E6                     u2061:
  1296  0009E6  CFDB FFE3          	movff	plusw2,plusw1
  1297  0009EA  06E8               	decf	wreg,f,c
  1298  0009EC  E2FC               	bc	u2061
  1299                           
  1300                           ;lcd_hd44780_pic16.c: 324: int i=4,j=0;
  1301  0009EE  0E00               	movlw	0
  1302  0009F0  0100               	movlb	0	; () banked
  1303  0009F2  6FB5               	movwf	(LCDWriteInt@i+1)& (0+255),b
  1304  0009F4  0E04               	movlw	4
  1305  0009F6  6FB4               	movwf	LCDWriteInt@i& (0+255),b
  1306                           
  1307                           ; BSR set to: 0
  1308  0009F8  0E00               	movlw	0
  1309  0009FA  0100               	movlb	0	; () banked
  1310  0009FC  6FB3               	movwf	(LCDWriteInt@j+1)& (0+255),b
  1311  0009FE  0E00               	movlw	0
  1312  000A00  6FB2               	movwf	LCDWriteInt@j& (0+255),b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  1316  000A02  0100               	movlb	0	; () banked
  1317  000A04  AFA9               	btfss	(LCDWriteInt@val+1)& (0+255),7,b
  1318  000A06  D035               	goto	l2546
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;lcd_hd44780_pic16.c: 328: {
  1322                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  1323  000A08  0E01               	movlw	1
  1324  000A0A  0100               	movlb	0	; () banked
  1325  000A0C  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1326  000A0E  0E2D               	movlw	45
  1327  000A10  EC83  F009         	call	_LCDByte
  1328                           
  1329                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  1330  000A14  0100               	movlb	0	; () banked
  1331  000A16  6DA8               	negf	LCDWriteInt@val& (0+255),b
  1332  000A18  1FA9               	comf	(LCDWriteInt@val+1)& (0+255),f,b
  1333  000A1A  B0D8               	btfsc	status,0,c
  1334  000A1C  2BA9               	incf	(LCDWriteInt@val+1)& (0+255),f,b
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;lcd_hd44780_pic16.c: 331: }
  1338                           ;lcd_hd44780_pic16.c: 333: while(val)
  1339  000A1E  D029               	goto	l2546
  1340  000A20                     l2540:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;lcd_hd44780_pic16.c: 334: {
  1344                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  1345  000A20  0EAD               	movlw	low LCDWriteInt@str
  1346  000A22  0100               	movlb	0	; () banked
  1347  000A24  25B4               	addwf	LCDWriteInt@i& (0+255),w,b
  1348  000A26  6ED9               	movwf	fsr2l,c
  1349  000A28  0E00               	movlw	high LCDWriteInt@str
  1350  000A2A  0100               	movlb	0	; () banked
  1351  000A2C  21B5               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  1352  000A2E  6EDA               	movwf	fsr2h,c
  1353  000A30  C0A8  F0A0         	movff	LCDWriteInt@val,___awmod@dividend
  1354  000A34  C0A9  F0A1         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  1355  000A38  0E00               	movlw	0
  1356  000A3A  0100               	movlb	0	; () banked
  1357  000A3C  6FA3               	movwf	(___awmod@divisor+1)& (0+255),b
  1358  000A3E  0E0A               	movlw	10
  1359  000A40  6FA2               	movwf	___awmod@divisor& (0+255),b
  1360  000A42  EC35  F007         	call	___awmod	;wreg free
  1361  000A46  0100               	movlb	0	; () banked
  1362  000A48  51A0               	movf	?___awmod& (0+255),w,b
  1363  000A4A  6EDF               	movwf	indf2,c
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  1367  000A4C  C0A8  F0A0         	movff	LCDWriteInt@val,___awdiv@dividend
  1368  000A50  C0A9  F0A1         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  1369  000A54  0E00               	movlw	0
  1370  000A56  0100               	movlb	0	; () banked
  1371  000A58  6FA3               	movwf	(___awdiv@divisor+1)& (0+255),b
  1372  000A5A  0E0A               	movlw	10
  1373  000A5C  6FA2               	movwf	___awdiv@divisor& (0+255),b
  1374  000A5E  EC7F  F006         	call	___awdiv	;wreg free
  1375  000A62  C0A0  F0A8         	movff	?___awdiv,LCDWriteInt@val
  1376  000A66  C0A1  F0A9         	movff	?___awdiv+1,LCDWriteInt@val+1
  1377                           
  1378                           ;lcd_hd44780_pic16.c: 337: i--;
  1379  000A6A  0100               	movlb	0	; () banked
  1380  000A6C  07B4               	decf	LCDWriteInt@i& (0+255),f,b
  1381  000A6E  A0D8               	btfss	status,0,c
  1382  000A70  07B5               	decf	(LCDWriteInt@i+1)& (0+255),f,b
  1383  000A72                     l2546:
  1384                           
  1385                           ; BSR set to: 0
  1386  000A72  0100               	movlb	0	; () banked
  1387  000A74  51A8               	movf	LCDWriteInt@val& (0+255),w,b
  1388  000A76  0100               	movlb	0	; () banked
  1389  000A78  11A9               	iorwf	(LCDWriteInt@val+1)& (0+255),w,b
  1390  000A7A  A4D8               	btfss	status,2,c
  1391  000A7C  D7D1               	goto	l2540
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;lcd_hd44780_pic16.c: 338: }
  1395                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  1396                           
  1397                           ; BSR set to: 0
  1398  000A7E  0100               	movlb	0	; () banked
  1399  000A80  29AA               	incf	LCDWriteInt@field_length& (0+255),w,b
  1400  000A82  B4D8               	btfsc	status,2,c
  1401  000A84  D004               	goto	l2554
  1402  000A86  D00F               	goto	l2556
  1403  000A88                     l2552:
  1404                           
  1405                           ; BSR set to: 0
  1406  000A88  0100               	movlb	0	; () banked
  1407  000A8A  4BB2               	infsnz	LCDWriteInt@j& (0+255),f,b
  1408  000A8C  2BB3               	incf	(LCDWriteInt@j+1)& (0+255),f,b
  1409  000A8E                     l2554:
  1410                           
  1411                           ; BSR set to: 0
  1412  000A8E  0EAD               	movlw	low LCDWriteInt@str
  1413  000A90  0100               	movlb	0	; () banked
  1414  000A92  25B2               	addwf	LCDWriteInt@j& (0+255),w,b
  1415  000A94  6ED9               	movwf	fsr2l,c
  1416  000A96  0E00               	movlw	high LCDWriteInt@str
  1417  000A98  0100               	movlb	0	; () banked
  1418  000A9A  21B3               	addwfc	(LCDWriteInt@j+1)& (0+255),w,b
  1419  000A9C  6EDA               	movwf	fsr2h,c
  1420  000A9E  50DF               	movf	indf2,w,c
  1421  000AA0  A4D8               	btfss	status,2,c
  1422  000AA2  D016               	goto	l2558
  1423  000AA4  D7F1               	goto	l2552
  1424  000AA6                     l2556:
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;lcd_hd44780_pic16.c: 341: else
  1428                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  1429  000AA6  C0AA  F0AB         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  1430  000AAA  0100               	movlb	0	; () banked
  1431  000AAC  6BAC               	clrf	(??_LCDWriteInt+1)& (0+255),b
  1432  000AAE  BFAB               	btfsc	??_LCDWriteInt& (0+255),7,b
  1433  000AB0  07AC               	decf	(??_LCDWriteInt+1)& (0+255),f,b
  1434  000AB2  0100               	movlb	0	; () banked
  1435  000AB4  1FAB               	comf	??_LCDWriteInt& (0+255),f,b
  1436  000AB6  1FAC               	comf	(??_LCDWriteInt+1)& (0+255),f,b
  1437  000AB8  4BAB               	infsnz	??_LCDWriteInt& (0+255),f,b
  1438  000ABA  2BAC               	incf	(??_LCDWriteInt+1)& (0+255),f,b
  1439  000ABC  0E05               	movlw	5
  1440  000ABE  0100               	movlb	0	; () banked
  1441  000AC0  25AB               	addwf	??_LCDWriteInt& (0+255),w,b
  1442  000AC2  0100               	movlb	0	; () banked
  1443  000AC4  6FB2               	movwf	LCDWriteInt@j& (0+255),b
  1444  000AC6  0E00               	movlw	0
  1445  000AC8  0100               	movlb	0	; () banked
  1446  000ACA  21AC               	addwfc	(??_LCDWriteInt+1)& (0+255),w,b
  1447  000ACC  0100               	movlb	0	; () banked
  1448  000ACE  6FB3               	movwf	(LCDWriteInt@j+1)& (0+255),b
  1449  000AD0                     l2558:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  1453  000AD0  C0B2  F0B4         	movff	LCDWriteInt@j,LCDWriteInt@i
  1454  000AD4  C0B3  F0B5         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  1455  000AD8  0100               	movlb	0	; () banked
  1456  000ADA  BFB5               	btfsc	(LCDWriteInt@i+1)& (0+255),7,b
  1457  000ADC  D008               	goto	l2562
  1458  000ADE  0100               	movlb	0	; () banked
  1459  000AE0  51B5               	movf	(LCDWriteInt@i+1)& (0+255),w,b
  1460  000AE2  E118               	bnz	l284
  1461  000AE4  0E05               	movlw	5
  1462  000AE6  0100               	movlb	0	; () banked
  1463  000AE8  5DB4               	subwf	LCDWriteInt@i& (0+255),w,b
  1464  000AEA  B0D8               	btfsc	status,0,c
  1465  000AEC  0012               	return	
  1466  000AEE                     l2562:
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;lcd_hd44780_pic16.c: 346: {
  1470                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  1471  000AEE  0E01               	movlw	1
  1472  000AF0  0100               	movlb	0	; () banked
  1473  000AF2  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1474  000AF4  0EAD               	movlw	low LCDWriteInt@str
  1475  000AF6  0100               	movlb	0	; () banked
  1476  000AF8  25B4               	addwf	LCDWriteInt@i& (0+255),w,b
  1477  000AFA  6ED9               	movwf	fsr2l,c
  1478  000AFC  0E00               	movlw	high LCDWriteInt@str
  1479  000AFE  0100               	movlb	0	; () banked
  1480  000B00  21B5               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  1481  000B02  6EDA               	movwf	fsr2h,c
  1482  000B04  50DF               	movf	indf2,w,c
  1483  000B06  0F30               	addlw	48
  1484  000B08  EC83  F009         	call	_LCDByte
  1485  000B0C  0100               	movlb	0	; () banked
  1486  000B0E  4BB4               	infsnz	LCDWriteInt@i& (0+255),f,b
  1487  000B10  2BB5               	incf	(LCDWriteInt@i+1)& (0+255),f,b
  1488  000B12  D7E2               	goto	L1
  1489  000B14                     l284:
  1490                           
  1491                           ; BSR set to: 0
  1492  000B14  0012               	return		;funcret
  1493  000B16                     __end_of_LCDWriteInt:
  1494                           	opt stack 0
  1495                           tblptru	equ	0xFF8
  1496                           tblptrh	equ	0xFF7
  1497                           tblptrl	equ	0xFF6
  1498                           tablat	equ	0xFF5
  1499                           intcon	equ	0xFF2
  1500                           postinc0	equ	0xFEE
  1501                           wreg	equ	0xFE8
  1502                           postdec1	equ	0xFE5
  1503                           plusw1	equ	0xFE3
  1504                           fsr1l	equ	0xFE1
  1505                           indf2	equ	0xFDF
  1506                           plusw2	equ	0xFDB
  1507                           fsr2h	equ	0xFDA
  1508                           fsr2l	equ	0xFD9
  1509                           status	equ	0xFD8
  1510                           
  1511 ;; *************** function ___awmod *****************
  1512 ;; Defined at:
  1513 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  dividend        2    0[BANK0 ] int 
  1516 ;;  divisor         2    2[BANK0 ] int 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  sign            1    5[BANK0 ] unsigned char 
  1519 ;;  counter         1    4[BANK0 ] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  2    0[BANK0 ] int 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1529 ;;      Params:         0       4       0       0       0       0       0
  1530 ;;      Locals:         0       2       0       0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0
  1532 ;;      Totals:         0       6       0       0       0       0       0
  1533 ;;Total ram usage:        6 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    4
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_LCDWriteInt
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text6
  1544  000E6A                     __ptext6:
  1545                           	opt stack 0
  1546  000E6A                     ___awmod:
  1547                           	opt stack 25
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;incstack = 0
  1551  000E6A  0E00               	movlw	0
  1552  000E6C  0100               	movlb	0	; () banked
  1553  000E6E  6FA5               	movwf	___awmod@sign& (0+255),b
  1554                           
  1555                           ; BSR set to: 0
  1556  000E70  0100               	movlb	0	; () banked
  1557  000E72  AFA1               	btfss	(___awmod@dividend+1)& (0+255),7,b
  1558  000E74  D008               	goto	l2308
  1559                           
  1560                           ; BSR set to: 0
  1561  000E76  0100               	movlb	0	; () banked
  1562  000E78  6DA0               	negf	___awmod@dividend& (0+255),b
  1563  000E7A  1FA1               	comf	(___awmod@dividend+1)& (0+255),f,b
  1564  000E7C  B0D8               	btfsc	status,0,c
  1565  000E7E  2BA1               	incf	(___awmod@dividend+1)& (0+255),f,b
  1566                           
  1567                           ; BSR set to: 0
  1568  000E80  0E01               	movlw	1
  1569  000E82  0100               	movlb	0	; () banked
  1570  000E84  6FA5               	movwf	___awmod@sign& (0+255),b
  1571  000E86                     l2308:
  1572                           
  1573                           ; BSR set to: 0
  1574  000E86  0100               	movlb	0	; () banked
  1575  000E88  AFA3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1576  000E8A  D005               	goto	l2312
  1577                           
  1578                           ; BSR set to: 0
  1579  000E8C  0100               	movlb	0	; () banked
  1580  000E8E  6DA2               	negf	___awmod@divisor& (0+255),b
  1581  000E90  1FA3               	comf	(___awmod@divisor+1)& (0+255),f,b
  1582  000E92  B0D8               	btfsc	status,0,c
  1583  000E94  2BA3               	incf	(___awmod@divisor+1)& (0+255),f,b
  1584  000E96                     l2312:
  1585                           
  1586                           ; BSR set to: 0
  1587  000E96  0100               	movlb	0	; () banked
  1588  000E98  51A2               	movf	___awmod@divisor& (0+255),w,b
  1589  000E9A  0100               	movlb	0	; () banked
  1590  000E9C  11A3               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  1591  000E9E  B4D8               	btfsc	status,2,c
  1592  000EA0  D026               	goto	l2328
  1593                           
  1594                           ; BSR set to: 0
  1595  000EA2  0E01               	movlw	1
  1596  000EA4  0100               	movlb	0	; () banked
  1597  000EA6  6FA4               	movwf	___awmod@counter& (0+255),b
  1598  000EA8  D006               	goto	l2318
  1599  000EAA                     l2316:
  1600                           
  1601                           ; BSR set to: 0
  1602  000EAA  0100               	movlb	0	; () banked
  1603  000EAC  90D8               	bcf	status,0,c
  1604  000EAE  37A2               	rlcf	___awmod@divisor& (0+255),f,b
  1605  000EB0  37A3               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  1606  000EB2  0100               	movlb	0	; () banked
  1607  000EB4  2BA4               	incf	___awmod@counter& (0+255),f,b
  1608  000EB6                     l2318:
  1609                           
  1610                           ; BSR set to: 0
  1611  000EB6  0100               	movlb	0	; () banked
  1612  000EB8  AFA3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  1613  000EBA  D7F7               	goto	l2316
  1614  000EBC                     l2320:
  1615                           
  1616                           ; BSR set to: 0
  1617  000EBC  0100               	movlb	0	; () banked
  1618  000EBE  51A2               	movf	___awmod@divisor& (0+255),w,b
  1619  000EC0  0100               	movlb	0	; () banked
  1620  000EC2  5DA0               	subwf	___awmod@dividend& (0+255),w,b
  1621  000EC4  0100               	movlb	0	; () banked
  1622  000EC6  51A3               	movf	(___awmod@divisor+1)& (0+255),w,b
  1623  000EC8  0100               	movlb	0	; () banked
  1624  000ECA  59A1               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  1625  000ECC  A0D8               	btfss	status,0,c
  1626  000ECE  D008               	goto	l2324
  1627                           
  1628                           ; BSR set to: 0
  1629  000ED0  0100               	movlb	0	; () banked
  1630  000ED2  51A2               	movf	___awmod@divisor& (0+255),w,b
  1631  000ED4  0100               	movlb	0	; () banked
  1632  000ED6  5FA0               	subwf	___awmod@dividend& (0+255),f,b
  1633  000ED8  0100               	movlb	0	; () banked
  1634  000EDA  51A3               	movf	(___awmod@divisor+1)& (0+255),w,b
  1635  000EDC  0100               	movlb	0	; () banked
  1636  000EDE  5BA1               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  1637  000EE0                     l2324:
  1638                           
  1639                           ; BSR set to: 0
  1640  000EE0  0100               	movlb	0	; () banked
  1641  000EE2  90D8               	bcf	status,0,c
  1642  000EE4  33A3               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  1643  000EE6  33A2               	rrcf	___awmod@divisor& (0+255),f,b
  1644                           
  1645                           ; BSR set to: 0
  1646  000EE8  0100               	movlb	0	; () banked
  1647  000EEA  2FA4               	decfsz	___awmod@counter& (0+255),f,b
  1648  000EEC  D7E7               	goto	l2320
  1649  000EEE                     l2328:
  1650                           
  1651                           ; BSR set to: 0
  1652  000EEE  0100               	movlb	0	; () banked
  1653  000EF0  51A5               	movf	___awmod@sign& (0+255),w,b
  1654  000EF2  0100               	movlb	0	; () banked
  1655  000EF4  B4D8               	btfsc	status,2,c
  1656  000EF6  D005               	goto	l2332
  1657                           
  1658                           ; BSR set to: 0
  1659  000EF8  0100               	movlb	0	; () banked
  1660  000EFA  6DA0               	negf	___awmod@dividend& (0+255),b
  1661  000EFC  1FA1               	comf	(___awmod@dividend+1)& (0+255),f,b
  1662  000EFE  B0D8               	btfsc	status,0,c
  1663  000F00  2BA1               	incf	(___awmod@dividend+1)& (0+255),f,b
  1664  000F02                     l2332:
  1665                           
  1666                           ; BSR set to: 0
  1667  000F02  C0A0  F0A0         	movff	___awmod@dividend,?___awmod
  1668  000F06  C0A1  F0A1         	movff	___awmod@dividend+1,?___awmod+1
  1669  000F0A  0012               	return	
  1670  000F0C                     __end_of___awmod:
  1671                           	opt stack 0
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           intcon	equ	0xFF2
  1677                           postinc0	equ	0xFEE
  1678                           wreg	equ	0xFE8
  1679                           postdec1	equ	0xFE5
  1680                           plusw1	equ	0xFE3
  1681                           fsr1l	equ	0xFE1
  1682                           indf2	equ	0xFDF
  1683                           plusw2	equ	0xFDB
  1684                           fsr2h	equ	0xFDA
  1685                           fsr2l	equ	0xFD9
  1686                           status	equ	0xFD8
  1687                           
  1688 ;; *************** function ___awdiv *****************
  1689 ;; Defined at:
  1690 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  dividend        2    0[BANK0 ] int 
  1693 ;;  divisor         2    2[BANK0 ] int 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  quotient        2    6[BANK0 ] int 
  1696 ;;  sign            1    5[BANK0 ] unsigned char 
  1697 ;;  counter         1    4[BANK0 ] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  2    0[BANK0 ] int 
  1700 ;; Registers used:
  1701 ;;		wreg, status,2, status,0
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1707 ;;      Params:         0       4       0       0       0       0       0
  1708 ;;      Locals:         0       4       0       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0       0       0
  1710 ;;      Totals:         0       8       0       0       0       0       0
  1711 ;;Total ram usage:        8 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    4
  1714 ;; This function calls:
  1715 ;;		Nothing
  1716 ;; This function is called by:
  1717 ;;		_LCDWriteInt
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text7
  1722  000CFE                     __ptext7:
  1723                           	opt stack 0
  1724  000CFE                     ___awdiv:
  1725                           	opt stack 25
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;incstack = 0
  1729  000CFE  0E00               	movlw	0
  1730  000D00  0100               	movlb	0	; () banked
  1731  000D02  6FA5               	movwf	___awdiv@sign& (0+255),b
  1732                           
  1733                           ; BSR set to: 0
  1734  000D04  0100               	movlb	0	; () banked
  1735  000D06  AFA3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1736  000D08  D008               	goto	l2264
  1737                           
  1738                           ; BSR set to: 0
  1739  000D0A  0100               	movlb	0	; () banked
  1740  000D0C  6DA2               	negf	___awdiv@divisor& (0+255),b
  1741  000D0E  1FA3               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1742  000D10  B0D8               	btfsc	status,0,c
  1743  000D12  2BA3               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1744                           
  1745                           ; BSR set to: 0
  1746  000D14  0E01               	movlw	1
  1747  000D16  0100               	movlb	0	; () banked
  1748  000D18  6FA5               	movwf	___awdiv@sign& (0+255),b
  1749  000D1A                     l2264:
  1750                           
  1751                           ; BSR set to: 0
  1752  000D1A  0100               	movlb	0	; () banked
  1753  000D1C  AFA1               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1754  000D1E  D008               	goto	l2270
  1755                           
  1756                           ; BSR set to: 0
  1757  000D20  0100               	movlb	0	; () banked
  1758  000D22  6DA0               	negf	___awdiv@dividend& (0+255),b
  1759  000D24  1FA1               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1760  000D26  B0D8               	btfsc	status,0,c
  1761  000D28  2BA1               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1762                           
  1763                           ; BSR set to: 0
  1764  000D2A  0E01               	movlw	1
  1765  000D2C  0100               	movlb	0	; () banked
  1766  000D2E  1BA5               	xorwf	___awdiv@sign& (0+255),f,b
  1767  000D30                     l2270:
  1768                           
  1769                           ; BSR set to: 0
  1770  000D30  0E00               	movlw	0
  1771  000D32  0100               	movlb	0	; () banked
  1772  000D34  6FA7               	movwf	(___awdiv@quotient+1)& (0+255),b
  1773  000D36  0E00               	movlw	0
  1774  000D38  6FA6               	movwf	___awdiv@quotient& (0+255),b
  1775                           
  1776                           ; BSR set to: 0
  1777  000D3A  0100               	movlb	0	; () banked
  1778  000D3C  51A2               	movf	___awdiv@divisor& (0+255),w,b
  1779  000D3E  0100               	movlb	0	; () banked
  1780  000D40  11A3               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1781  000D42  B4D8               	btfsc	status,2,c
  1782  000D44  D02C               	goto	l2292
  1783                           
  1784                           ; BSR set to: 0
  1785  000D46  0E01               	movlw	1
  1786  000D48  0100               	movlb	0	; () banked
  1787  000D4A  6FA4               	movwf	___awdiv@counter& (0+255),b
  1788  000D4C  D006               	goto	l2278
  1789  000D4E                     l2276:
  1790                           
  1791                           ; BSR set to: 0
  1792  000D4E  0100               	movlb	0	; () banked
  1793  000D50  90D8               	bcf	status,0,c
  1794  000D52  37A2               	rlcf	___awdiv@divisor& (0+255),f,b
  1795  000D54  37A3               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1796  000D56  0100               	movlb	0	; () banked
  1797  000D58  2BA4               	incf	___awdiv@counter& (0+255),f,b
  1798  000D5A                     l2278:
  1799                           
  1800                           ; BSR set to: 0
  1801  000D5A  0100               	movlb	0	; () banked
  1802  000D5C  AFA3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1803  000D5E  D7F7               	goto	l2276
  1804  000D60                     l2280:
  1805                           
  1806                           ; BSR set to: 0
  1807  000D60  0100               	movlb	0	; () banked
  1808  000D62  90D8               	bcf	status,0,c
  1809  000D64  37A6               	rlcf	___awdiv@quotient& (0+255),f,b
  1810  000D66  37A7               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1811                           
  1812                           ; BSR set to: 0
  1813  000D68  0100               	movlb	0	; () banked
  1814  000D6A  51A2               	movf	___awdiv@divisor& (0+255),w,b
  1815  000D6C  0100               	movlb	0	; () banked
  1816  000D6E  5DA0               	subwf	___awdiv@dividend& (0+255),w,b
  1817  000D70  0100               	movlb	0	; () banked
  1818  000D72  51A3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1819  000D74  0100               	movlb	0	; () banked
  1820  000D76  59A1               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1821  000D78  A0D8               	btfss	status,0,c
  1822  000D7A  D00A               	goto	l2288
  1823                           
  1824                           ; BSR set to: 0
  1825  000D7C  0100               	movlb	0	; () banked
  1826  000D7E  51A2               	movf	___awdiv@divisor& (0+255),w,b
  1827  000D80  0100               	movlb	0	; () banked
  1828  000D82  5FA0               	subwf	___awdiv@dividend& (0+255),f,b
  1829  000D84  0100               	movlb	0	; () banked
  1830  000D86  51A3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1831  000D88  0100               	movlb	0	; () banked
  1832  000D8A  5BA1               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1833                           
  1834                           ; BSR set to: 0
  1835  000D8C  0100               	movlb	0	; () banked
  1836  000D8E  81A6               	bsf	___awdiv@quotient& (0+255),0,b
  1837  000D90                     l2288:
  1838                           
  1839                           ; BSR set to: 0
  1840  000D90  0100               	movlb	0	; () banked
  1841  000D92  90D8               	bcf	status,0,c
  1842  000D94  33A3               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1843  000D96  33A2               	rrcf	___awdiv@divisor& (0+255),f,b
  1844                           
  1845                           ; BSR set to: 0
  1846  000D98  0100               	movlb	0	; () banked
  1847  000D9A  2FA4               	decfsz	___awdiv@counter& (0+255),f,b
  1848  000D9C  D7E1               	goto	l2280
  1849  000D9E                     l2292:
  1850                           
  1851                           ; BSR set to: 0
  1852  000D9E  0100               	movlb	0	; () banked
  1853  000DA0  51A5               	movf	___awdiv@sign& (0+255),w,b
  1854  000DA2  0100               	movlb	0	; () banked
  1855  000DA4  B4D8               	btfsc	status,2,c
  1856  000DA6  D005               	goto	l2296
  1857                           
  1858                           ; BSR set to: 0
  1859  000DA8  0100               	movlb	0	; () banked
  1860  000DAA  6DA6               	negf	___awdiv@quotient& (0+255),b
  1861  000DAC  1FA7               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1862  000DAE  B0D8               	btfsc	status,0,c
  1863  000DB0  2BA7               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1864  000DB2                     l2296:
  1865                           
  1866                           ; BSR set to: 0
  1867  000DB2  C0A6  F0A0         	movff	___awdiv@quotient,?___awdiv
  1868  000DB6  C0A7  F0A1         	movff	___awdiv@quotient+1,?___awdiv+1
  1869  000DBA  0012               	return	
  1870  000DBC                     __end_of___awdiv:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           intcon	equ	0xFF2
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postdec1	equ	0xFE5
  1880                           plusw1	equ	0xFE3
  1881                           fsr1l	equ	0xFE1
  1882                           indf2	equ	0xFDF
  1883                           plusw2	equ	0xFDB
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _LCDInit *****************
  1889 ;; Defined at:
  1890 ;;		line 196 in file "lcd_hd44780_pic16.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  style           1    wreg     unsigned char 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  style           1    9[BANK0 ] unsigned char 
  1895 ;;  __i             1   10[BANK0 ] unsigned char 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1905 ;;      Params:         0       0       0       0       0       0       0
  1906 ;;      Locals:         0       2       0       0       0       0       0
  1907 ;;      Temps:          0       1       0       0       0       0       0
  1908 ;;      Totals:         0       3       0       0       0       0       0
  1909 ;;Total ram usage:        3 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    6
  1912 ;; This function calls:
  1913 ;;		_LCDBusyLoop
  1914 ;;		_LCDByte
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text8
  1921  000FAE                     __ptext8:
  1922                           	opt stack 0
  1923  000FAE                     _LCDInit:
  1924                           	opt stack 24
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;incstack = 0
  1928                           ;LCDInit@style stored from wreg
  1929  000FAE  0100               	movlb	0	; () banked
  1930  000FB0  6FA9               	movwf	LCDInit@style& (0+255),b
  1931                           
  1932                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((30)*(1000000/4000.0)));
  1933  000FB2  0E0A               	movlw	10
  1934  000FB4  0100               	movlb	0	; () banked
  1935  000FB6  6FA8               	movwf	??_LCDInit& (0+255),b
  1936  000FB8  0EBC               	movlw	188
  1937  000FBA                     u2257:
  1938  000FBA  2EE8               	decfsz	wreg,f,c
  1939  000FBC  D7FE               	goto	u2257
  1940  000FBE  2FA8               	decfsz	??_LCDInit& (0+255),f,b
  1941  000FC0  D7FC               	goto	u2257
  1942  000FC2  F000 F000          	nop2	
  1943                           
  1944                           ;lcd_hd44780_pic16.c: 215: TRISD&=(~(0x0F<<0));
  1945  000FC6  0EF0               	movlw	240
  1946  000FC8  1695               	andwf	3989,f,c	;volatile
  1947                           
  1948                           ;lcd_hd44780_pic16.c: 217: TRISDbits.TRISD6=0;
  1949  000FCA  9C95               	bcf	3989,6,c	;volatile
  1950                           
  1951                           ;lcd_hd44780_pic16.c: 218: TRISDbits.TRISD4=0;
  1952  000FCC  9895               	bcf	3989,4,c	;volatile
  1953                           
  1954                           ;lcd_hd44780_pic16.c: 219: TRISDbits.TRISD5=0;
  1955  000FCE  9A95               	bcf	3989,5,c	;volatile
  1956                           
  1957                           ;lcd_hd44780_pic16.c: 221: PORTD&=(~(0x0F<<0));
  1958  000FD0  0EF0               	movlw	240
  1959  000FD2  1683               	andwf	3971,f,c	;volatile
  1960                           
  1961                           ;lcd_hd44780_pic16.c: 223: (RD6=0);
  1962  000FD4  9C83               	bcf	3971,6,c	;volatile
  1963                           
  1964                           ;lcd_hd44780_pic16.c: 224: (RD5=0);
  1965  000FD6  9A83               	bcf	3971,5,c	;volatile
  1966                           
  1967                           ;lcd_hd44780_pic16.c: 225: (RD4=0);
  1968  000FD8  9883               	bcf	3971,4,c	;volatile
  1969                           
  1970                           ;lcd_hd44780_pic16.c: 230: (RD6=1);
  1971                           
  1972                           ;lcd_hd44780_pic16.c: 228: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1973  000FDA  8C83               	bsf	3971,6,c	;volatile
  1974                           
  1975                           ;lcd_hd44780_pic16.c: 231: PORTD|=((0b00000010)<<0);
  1976  000FDC  8283               	bsf	3971,1,c	;volatile
  1977                           
  1978                           ;lcd_hd44780_pic16.c: 233: (RD6=0);
  1979                           
  1980                           ;lcd_hd44780_pic16.c: 232: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1981  000FDE  9C83               	bcf	3971,6,c	;volatile
  1982                           
  1983                           ;lcd_hd44780_pic16.c: 237: LCDBusyLoop();
  1984                           
  1985                           ;lcd_hd44780_pic16.c: 234: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1986  000FE0  ECAE  F009         	call	_LCDBusyLoop	;wreg free
  1987                           
  1988                           ;lcd_hd44780_pic16.c: 242: (LCDByte(0b00101000,0));
  1989  000FE4  0E00               	movlw	0
  1990  000FE6  0100               	movlb	0	; () banked
  1991  000FE8  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1992  000FEA  0E28               	movlw	40
  1993  000FEC  EC83  F009         	call	_LCDByte
  1994                           
  1995                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00001100|style,0));
  1996  000FF0  0E00               	movlw	0
  1997  000FF2  0100               	movlb	0	; () banked
  1998  000FF4  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1999  000FF6  0100               	movlb	0	; () banked
  2000  000FF8  51A9               	movf	LCDInit@style& (0+255),w,b
  2001  000FFA  090C               	iorlw	12
  2002  000FFC  EC83  F009         	call	_LCDByte
  2003                           
  2004                           ;lcd_hd44780_pic16.c: 246: (LCDByte(0b01000000,0));
  2005  001000  0E00               	movlw	0
  2006  001002  0100               	movlb	0	; () banked
  2007  001004  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2008  001006  0E40               	movlw	64
  2009  001008  EC83  F009         	call	_LCDByte
  2010                           
  2011                           ;lcd_hd44780_pic16.c: 248: uint8_t __i;
  2012                           ;lcd_hd44780_pic16.c: 249: for(__i=0;__i<sizeof(__cgram);__i++)
  2013  00100C  0E00               	movlw	0
  2014  00100E  0100               	movlb	0	; () banked
  2015  001010  6FAA               	movwf	LCDInit@__i& (0+255),b
  2016  001012                     l2470:
  2017                           
  2018                           ; BSR set to: 0
  2019  001012  0E3F               	movlw	63
  2020  001014  0100               	movlb	0	; () banked
  2021  001016  65AA               	cpfsgt	LCDInit@__i& (0+255),b
  2022  001018  D001               	goto	l2474
  2023  00101A  0012               	return	
  2024  00101C                     l2474:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;lcd_hd44780_pic16.c: 250: (LCDByte(__cgram[__i],1));
  2028  00101C  0E01               	movlw	1
  2029  00101E  0100               	movlb	0	; () banked
  2030  001020  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2031  001022  0100               	movlb	0	; () banked
  2032  001024  51AA               	movf	LCDInit@__i& (0+255),w,b
  2033  001026  0D01               	mullw	1
  2034  001028  0E60               	movlw	low ___cgram
  2035  00102A  24F3               	addwf	prodl,w,c
  2036  00102C  6ED9               	movwf	fsr2l,c
  2037  00102E  0E00               	movlw	high ___cgram
  2038  001030  20F4               	addwfc	prodh,w,c
  2039  001032  6EDA               	movwf	fsr2h,c
  2040  001034  50DF               	movf	indf2,w,c
  2041  001036  EC83  F009         	call	_LCDByte
  2042  00103A  0100               	movlb	0	; () banked
  2043  00103C  2BAA               	incf	LCDInit@__i& (0+255),f,b
  2044  00103E  D7E9               	goto	l2470
  2045  001040                     __end_of_LCDInit:
  2046                           	opt stack 0
  2047                           tblptru	equ	0xFF8
  2048                           tblptrh	equ	0xFF7
  2049                           tblptrl	equ	0xFF6
  2050                           tablat	equ	0xFF5
  2051                           prodh	equ	0xFF4
  2052                           prodl	equ	0xFF3
  2053                           intcon	equ	0xFF2
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           postdec1	equ	0xFE5
  2057                           plusw1	equ	0xFE3
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           plusw2	equ	0xFDB
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _Go *****************
  2066 ;; Defined at:
  2067 ;;		line 14 in file "driver.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2081 ;;      Params:         0       0       0       0       0       0       0
  2082 ;;      Locals:         0       0       0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       0       0       0
  2084 ;;      Totals:         0       0       0       0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    7
  2088 ;; This function calls:
  2089 ;;		_LCDByte
  2090 ;;		_LCDWriteString
  2091 ;;		_ReadDistanceCentral
  2092 ;;		_ReadDistanceLeft
  2093 ;;		_ReadDistanceRight
  2094 ;;		_SetMotorLeft
  2095 ;;		_SetMotorRight
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text9
  2102  000628                     __ptext9:
  2103                           	opt stack 0
  2104  000628                     _Go:
  2105                           	opt stack 23
  2106                           
  2107                           ;driver.c: 15: (LCDByte(0b00000001,0));
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;incstack = 0
  2111  000628  0E00               	movlw	0
  2112  00062A  0100               	movlb	0	; () banked
  2113  00062C  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2114  00062E  0E01               	movlw	1
  2115  000630  EC83  F009         	call	_LCDByte
  2116                           
  2117                           ;driver.c: 16: if (ReadDistanceCentral()>30){
  2118  000634  EC4C  F00B         	call	_ReadDistanceCentral	;wreg free
  2119  000638  0100               	movlb	0	; () banked
  2120  00063A  51A1               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  2121  00063C  E105               	bnz	u1990
  2122  00063E  0E1F               	movlw	31
  2123  000640  0100               	movlb	0	; () banked
  2124  000642  5DA0               	subwf	?_ReadDistanceCentral& (0+255),w,b
  2125  000644  A0D8               	btfss	status,0,c
  2126  000646  D07A               	goto	l2506
  2127  000648                     u1990:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;driver.c: 17: if (ReadDistanceRight()>30){
  2131  000648  EC42  F00B         	call	_ReadDistanceRight	;wreg free
  2132  00064C  0100               	movlb	0	; () banked
  2133  00064E  51A1               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  2134  000650  E105               	bnz	u2000
  2135  000652  0E1F               	movlw	31
  2136  000654  0100               	movlb	0	; () banked
  2137  000656  5DA0               	subwf	?_ReadDistanceRight& (0+255),w,b
  2138  000658  A0D8               	btfss	status,0,c
  2139  00065A  D038               	goto	l2496
  2140  00065C                     u2000:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;driver.c: 18: if (ReadDistanceLeft()>30){
  2144  00065C  EC47  F00B         	call	_ReadDistanceLeft	;wreg free
  2145  000660  0100               	movlb	0	; () banked
  2146  000662  51A1               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  2147  000664  E105               	bnz	u2010
  2148  000666  0E1F               	movlw	31
  2149  000668  0100               	movlb	0	; () banked
  2150  00066A  5DA0               	subwf	?_ReadDistanceLeft& (0+255),w,b
  2151  00066C  A0D8               	btfss	status,0,c
  2152  00066E  D017               	goto	l2492
  2153  000670                     u2010:
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;driver.c: 19: SetMotorLeft(100);
  2157  000670  0E00               	movlw	0
  2158  000672  0100               	movlb	0	; () banked
  2159  000674  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2160  000676  0E64               	movlw	100
  2161  000678  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2162  00067A  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2163                           
  2164                           ;driver.c: 20: SetMotorRight(100);
  2165  00067E  0E00               	movlw	0
  2166  000680  0100               	movlb	0	; () banked
  2167  000682  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2168  000684  0E64               	movlw	100
  2169  000686  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2170  000688  ECFC  F009         	call	_SetMotorRight	;wreg free
  2171                           
  2172                           ;driver.c: 21: LCDWriteString("1");
  2173  00068C  0E16               	movlw	low STR_3
  2174  00068E  0100               	movlb	0	; () banked
  2175  000690  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2176  000692  0E06               	movlw	high STR_3
  2177  000694  0100               	movlb	0	; () banked
  2178  000696  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2179  000698  EC86  F007         	call	_LCDWriteString	;wreg free
  2180                           
  2181                           ;driver.c: 22: }else{
  2182  00069C  0012               	return	
  2183  00069E                     l2492:
  2184                           
  2185                           ;driver.c: 23: SetMotorLeft(100);
  2186  00069E  0E00               	movlw	0
  2187  0006A0  0100               	movlb	0	; () banked
  2188  0006A2  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2189  0006A4  0E64               	movlw	100
  2190  0006A6  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2191  0006A8  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2192                           
  2193                           ;driver.c: 24: SetMotorRight(50);
  2194  0006AC  0E00               	movlw	0
  2195  0006AE  0100               	movlb	0	; () banked
  2196  0006B0  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2197  0006B2  0E32               	movlw	50
  2198  0006B4  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2199  0006B6  ECFC  F009         	call	_SetMotorRight	;wreg free
  2200                           
  2201                           ;driver.c: 25: LCDWriteString("2");
  2202  0006BA  0E18               	movlw	low STR_4
  2203  0006BC  0100               	movlb	0	; () banked
  2204  0006BE  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2205  0006C0  0E06               	movlw	high STR_4
  2206  0006C2  0100               	movlb	0	; () banked
  2207  0006C4  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2208  0006C6  EC86  F007         	call	_LCDWriteString	;wreg free
  2209                           
  2210                           ;driver.c: 26: }
  2211                           ;driver.c: 27: }else{
  2212  0006CA  0012               	return	
  2213  0006CC                     l2496:
  2214                           
  2215                           ;driver.c: 28: if (ReadDistanceLeft()>30){
  2216  0006CC  EC47  F00B         	call	_ReadDistanceLeft	;wreg free
  2217  0006D0  0100               	movlb	0	; () banked
  2218  0006D2  51A1               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  2219  0006D4  E105               	bnz	u2020
  2220  0006D6  0E1F               	movlw	31
  2221  0006D8  0100               	movlb	0	; () banked
  2222  0006DA  5DA0               	subwf	?_ReadDistanceLeft& (0+255),w,b
  2223  0006DC  A0D8               	btfss	status,0,c
  2224  0006DE  D017               	goto	l2502
  2225  0006E0                     u2020:
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;driver.c: 29: SetMotorLeft(50);
  2229  0006E0  0E00               	movlw	0
  2230  0006E2  0100               	movlb	0	; () banked
  2231  0006E4  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2232  0006E6  0E32               	movlw	50
  2233  0006E8  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2234  0006EA  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2235                           
  2236                           ;driver.c: 30: SetMotorRight(100);
  2237  0006EE  0E00               	movlw	0
  2238  0006F0  0100               	movlb	0	; () banked
  2239  0006F2  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2240  0006F4  0E64               	movlw	100
  2241  0006F6  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2242  0006F8  ECFC  F009         	call	_SetMotorRight	;wreg free
  2243                           
  2244                           ;driver.c: 31: LCDWriteString("3");
  2245  0006FC  0E1A               	movlw	low STR_5
  2246  0006FE  0100               	movlb	0	; () banked
  2247  000700  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2248  000702  0E06               	movlw	high STR_5
  2249  000704  0100               	movlb	0	; () banked
  2250  000706  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2251  000708  EC86  F007         	call	_LCDWriteString	;wreg free
  2252                           
  2253                           ;driver.c: 32: }else{
  2254  00070C  0012               	return	
  2255  00070E                     l2502:
  2256                           
  2257                           ;driver.c: 33: SetMotorLeft(-50);
  2258  00070E  0EFF               	movlw	255
  2259  000710  0100               	movlb	0	; () banked
  2260  000712  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2261  000714  0ECE               	movlw	206
  2262  000716  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2263  000718  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2264                           
  2265                           ;driver.c: 34: SetMotorRight(50);
  2266  00071C  0E00               	movlw	0
  2267  00071E  0100               	movlb	0	; () banked
  2268  000720  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2269  000722  0E32               	movlw	50
  2270  000724  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2271  000726  ECFC  F009         	call	_SetMotorRight	;wreg free
  2272                           
  2273                           ;driver.c: 35: LCDWriteString("4");
  2274  00072A  0E1C               	movlw	low STR_6
  2275  00072C  0100               	movlb	0	; () banked
  2276  00072E  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2277  000730  0E06               	movlw	high STR_6
  2278  000732  0100               	movlb	0	; () banked
  2279  000734  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2280  000736  EC86  F007         	call	_LCDWriteString	;wreg free
  2281                           
  2282                           ;driver.c: 36: }
  2283                           ;driver.c: 37: }
  2284                           ;driver.c: 38: }else{
  2285  00073A  0012               	return	
  2286  00073C                     l2506:
  2287                           
  2288                           ;driver.c: 39: if (ReadDistanceRight()>30){
  2289  00073C  EC42  F00B         	call	_ReadDistanceRight	;wreg free
  2290  000740  0100               	movlb	0	; () banked
  2291  000742  51A1               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  2292  000744  E105               	bnz	u2030
  2293  000746  0E1F               	movlw	31
  2294  000748  0100               	movlb	0	; () banked
  2295  00074A  5DA0               	subwf	?_ReadDistanceRight& (0+255),w,b
  2296  00074C  A0D8               	btfss	status,0,c
  2297  00074E  D038               	goto	l2518
  2298  000750                     u2030:
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;driver.c: 40: if (ReadDistanceLeft()>30){
  2302  000750  EC47  F00B         	call	_ReadDistanceLeft	;wreg free
  2303  000754  0100               	movlb	0	; () banked
  2304  000756  51A1               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  2305  000758  E105               	bnz	u2040
  2306  00075A  0E1F               	movlw	31
  2307  00075C  0100               	movlb	0	; () banked
  2308  00075E  5DA0               	subwf	?_ReadDistanceLeft& (0+255),w,b
  2309  000760  A0D8               	btfss	status,0,c
  2310  000762  D017               	goto	l2514
  2311  000764                     u2040:
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;driver.c: 41: SetMotorLeft(50);
  2315  000764  0E00               	movlw	0
  2316  000766  0100               	movlb	0	; () banked
  2317  000768  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2318  00076A  0E32               	movlw	50
  2319  00076C  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2320  00076E  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2321                           
  2322                           ;driver.c: 42: SetMotorRight(-50);
  2323  000772  0EFF               	movlw	255
  2324  000774  0100               	movlb	0	; () banked
  2325  000776  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2326  000778  0ECE               	movlw	206
  2327  00077A  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2328  00077C  ECFC  F009         	call	_SetMotorRight	;wreg free
  2329                           
  2330                           ;driver.c: 43: LCDWriteString("5");
  2331  000780  0E1E               	movlw	low STR_7
  2332  000782  0100               	movlb	0	; () banked
  2333  000784  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2334  000786  0E06               	movlw	high STR_7
  2335  000788  0100               	movlb	0	; () banked
  2336  00078A  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2337  00078C  EC86  F007         	call	_LCDWriteString	;wreg free
  2338                           
  2339                           ;driver.c: 44: }else{
  2340  000790  0012               	return	
  2341  000792                     l2514:
  2342                           
  2343                           ;driver.c: 45: SetMotorLeft(50);
  2344  000792  0E00               	movlw	0
  2345  000794  0100               	movlb	0	; () banked
  2346  000796  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2347  000798  0E32               	movlw	50
  2348  00079A  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2349  00079C  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2350                           
  2351                           ;driver.c: 46: SetMotorRight(-50);
  2352  0007A0  0EFF               	movlw	255
  2353  0007A2  0100               	movlb	0	; () banked
  2354  0007A4  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2355  0007A6  0ECE               	movlw	206
  2356  0007A8  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2357  0007AA  ECFC  F009         	call	_SetMotorRight	;wreg free
  2358                           
  2359                           ;driver.c: 47: LCDWriteString("6");
  2360  0007AE  0E20               	movlw	low STR_8
  2361  0007B0  0100               	movlb	0	; () banked
  2362  0007B2  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2363  0007B4  0E06               	movlw	high STR_8
  2364  0007B6  0100               	movlb	0	; () banked
  2365  0007B8  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2366  0007BA  EC86  F007         	call	_LCDWriteString	;wreg free
  2367                           
  2368                           ;driver.c: 48: }
  2369                           ;driver.c: 49: }else{
  2370  0007BE  0012               	return	
  2371  0007C0                     l2518:
  2372                           
  2373                           ;driver.c: 50: if (ReadDistanceLeft()>30){
  2374  0007C0  EC47  F00B         	call	_ReadDistanceLeft	;wreg free
  2375  0007C4  0100               	movlb	0	; () banked
  2376  0007C6  51A1               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  2377  0007C8  E105               	bnz	u2050
  2378  0007CA  0E1F               	movlw	31
  2379  0007CC  0100               	movlb	0	; () banked
  2380  0007CE  5DA0               	subwf	?_ReadDistanceLeft& (0+255),w,b
  2381  0007D0  A0D8               	btfss	status,0,c
  2382  0007D2  D017               	goto	l2524
  2383  0007D4                     u2050:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;driver.c: 51: SetMotorLeft(50);
  2387  0007D4  0E00               	movlw	0
  2388  0007D6  0100               	movlb	0	; () banked
  2389  0007D8  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2390  0007DA  0E32               	movlw	50
  2391  0007DC  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2392  0007DE  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2393                           
  2394                           ;driver.c: 52: SetMotorRight(100);
  2395  0007E2  0E00               	movlw	0
  2396  0007E4  0100               	movlb	0	; () banked
  2397  0007E6  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2398  0007E8  0E64               	movlw	100
  2399  0007EA  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2400  0007EC  ECFC  F009         	call	_SetMotorRight	;wreg free
  2401                           
  2402                           ;driver.c: 53: LCDWriteString("7");
  2403  0007F0  0E22               	movlw	low STR_9
  2404  0007F2  0100               	movlb	0	; () banked
  2405  0007F4  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2406  0007F6  0E06               	movlw	high STR_9
  2407  0007F8  0100               	movlb	0	; () banked
  2408  0007FA  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2409  0007FC  EC86  F007         	call	_LCDWriteString	;wreg free
  2410                           
  2411                           ;driver.c: 54: }else{
  2412  000800  0012               	return	
  2413  000802                     l2524:
  2414                           
  2415                           ;driver.c: 55: SetMotorLeft(-100);
  2416  000802  0EFF               	movlw	255
  2417  000804  0100               	movlb	0	; () banked
  2418  000806  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2419  000808  0E9C               	movlw	156
  2420  00080A  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
  2421  00080C  EC1D  F00A         	call	_SetMotorLeft	;wreg free
  2422                           
  2423                           ;driver.c: 56: SetMotorRight(-80);
  2424  000810  0EFF               	movlw	255
  2425  000812  0100               	movlb	0	; () banked
  2426  000814  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2427  000816  0EB0               	movlw	176
  2428  000818  6FA9               	movwf	SetMotorRight@speed& (0+255),b
  2429  00081A  ECFC  F009         	call	_SetMotorRight	;wreg free
  2430                           
  2431                           ;driver.c: 57: LCDWriteString("8");
  2432  00081E  0E24               	movlw	low STR_10
  2433  000820  0100               	movlb	0	; () banked
  2434  000822  6FA8               	movwf	LCDWriteString@msg& (0+255),b
  2435  000824  0E06               	movlw	high STR_10
  2436  000826  0100               	movlb	0	; () banked
  2437  000828  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
  2438  00082A  EC86  F007         	call	_LCDWriteString	;wreg free
  2439  00082E  0012               	return	
  2440  000830                     __end_of_Go:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           prodh	equ	0xFF4
  2447                           prodl	equ	0xFF3
  2448                           intcon	equ	0xFF2
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           plusw1	equ	0xFE3
  2453                           fsr1l	equ	0xFE1
  2454                           indf2	equ	0xFDF
  2455                           plusw2	equ	0xFDB
  2456                           fsr2h	equ	0xFDA
  2457                           fsr2l	equ	0xFD9
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function _SetMotorRight *****************
  2461 ;; Defined at:
  2462 ;;		line 47 in file "motors.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  speed           2    9[BANK0 ] int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2476 ;;      Params:         0       2       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0
  2479 ;;      Totals:         0       2       0       0       0       0       0
  2480 ;;Total ram usage:        2 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    6
  2483 ;; This function calls:
  2484 ;;		_SetPWMMotorRight
  2485 ;;		_abs
  2486 ;; This function is called by:
  2487 ;;		_main
  2488 ;;		_Go
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text10
  2493  0013F8                     __ptext10:
  2494                           	opt stack 0
  2495  0013F8                     _SetMotorRight:
  2496                           	opt stack 24
  2497                           
  2498                           ;motors.c: 50: if(speed>0){
  2499                           
  2500                           ;incstack = 0
  2501  0013F8  0100               	movlb	0	; () banked
  2502  0013FA  BFAA               	btfsc	(SetMotorRight@speed+1)& (0+255),7,b
  2503  0013FC  D009               	goto	l2052
  2504  0013FE  0100               	movlb	0	; () banked
  2505  001400  51AA               	movf	(SetMotorRight@speed+1)& (0+255),w,b
  2506  001402  E104               	bnz	u1320
  2507  001404  0100               	movlb	0	; () banked
  2508  001406  05A9               	decf	SetMotorRight@speed& (0+255),w,b
  2509  001408  A0D8               	btfss	status,0,c
  2510  00140A  D002               	goto	l2052
  2511  00140C                     u1320:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;motors.c: 52: RC2=1;
  2515  00140C  8482               	bsf	3970,2,c	;volatile
  2516  00140E  D007               	goto	L2
  2517  001410                     l2052:
  2518                           
  2519                           ; BSR set to: 0
  2520  001410  0100               	movlb	0	; () banked
  2521  001412  AFAA               	btfss	(SetMotorRight@speed+1)& (0+255),7,b
  2522  001414  D003               	goto	l223
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;motors.c: 56: RC2=0;
  2526  001416  9482               	bcf	3970,2,c	;volatile
  2527                           
  2528                           ;motors.c: 57: RC3=1;
  2529  001418  8682               	bsf	3970,3,c	;volatile
  2530                           
  2531                           ;motors.c: 58: }else{
  2532  00141A  D002               	goto	l2056
  2533  00141C                     l223:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;motors.c: 60: RC2=0;
  2537  00141C  9482               	bcf	3970,2,c	;volatile
  2538  00141E                     L2:
  2539                           
  2540                           ;motors.c: 61: RC3=0;
  2541  00141E  9682               	bcf	3970,3,c	;volatile
  2542  001420                     l2056:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;motors.c: 62: }
  2546                           ;motors.c: 65: SetPWMMotorRight(abs(speed));
  2547  001420  C0A9  F0A0         	movff	SetMotorRight@speed,abs@a
  2548  001424  C0AA  F0A1         	movff	SetMotorRight@speed+1,abs@a+1
  2549  001428  ECB5  F00A         	call	_abs	;wreg free
  2550  00142C  C0A0  F0A7         	movff	?_abs,SetPWMMotorRight@percentage
  2551  001430  C0A1  F0A8         	movff	?_abs+1,SetPWMMotorRight@percentage+1
  2552  001434  EC7F  F00A         	call	_SetPWMMotorRight	;wreg free
  2553  001438  0012               	return		;funcret
  2554  00143A                     __end_of_SetMotorRight:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           intcon	equ	0xFF2
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           postdec1	equ	0xFE5
  2566                           plusw1	equ	0xFE3
  2567                           fsr1l	equ	0xFE1
  2568                           indf2	equ	0xFDF
  2569                           plusw2	equ	0xFDB
  2570                           fsr2h	equ	0xFDA
  2571                           fsr2l	equ	0xFD9
  2572                           status	equ	0xFD8
  2573                           
  2574 ;; *************** function _SetPWMMotorRight *****************
  2575 ;; Defined at:
  2576 ;;		line 34 in file "TimerPWM.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  percentage      2    7[BANK0 ] unsigned int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2590 ;;      Params:         0       2       0       0       0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0
  2593 ;;      Totals:         0       2       0       0       0       0       0
  2594 ;;Total ram usage:        2 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    5
  2597 ;; This function calls:
  2598 ;;		___lwdiv
  2599 ;; This function is called by:
  2600 ;;		_SetMotorRight
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text11
  2605  0014FE                     __ptext11:
  2606                           	opt stack 0
  2607  0014FE                     _SetPWMMotorRight:
  2608                           	opt stack 24
  2609                           
  2610                           ;TimerPWM.c: 35: PWMRight=20-percentage/5;
  2611                           
  2612                           ;incstack = 0
  2613  0014FE  C0A7  F0A0         	movff	SetPWMMotorRight@percentage,___lwdiv@dividend
  2614  001502  C0A8  F0A1         	movff	SetPWMMotorRight@percentage+1,___lwdiv@dividend+1
  2615  001506  0E00               	movlw	0
  2616  001508  0100               	movlb	0	; () banked
  2617  00150A  6FA3               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2618  00150C  0E05               	movlw	5
  2619  00150E  6FA2               	movwf	___lwdiv@divisor& (0+255),b
  2620  001510  EC62  F008         	call	___lwdiv	;wreg free
  2621  001514  0100               	movlb	0	; () banked
  2622  001516  1FA0               	comf	?___lwdiv& (0+255),f,b
  2623  001518  0100               	movlb	0	; () banked
  2624  00151A  1FA1               	comf	(?___lwdiv+1)& (0+255),f,b
  2625  00151C  0100               	movlb	0	; () banked
  2626  00151E  4BA0               	infsnz	?___lwdiv& (0+255),f,b
  2627  001520  2BA1               	incf	(?___lwdiv+1)& (0+255),f,b
  2628  001522  0E14               	movlw	20
  2629  001524  0100               	movlb	0	; () banked
  2630  001526  25A0               	addwf	?___lwdiv& (0+255),w,b
  2631  001528  6E51               	movwf	_PWMRight,c
  2632  00152A  0E00               	movlw	0
  2633  00152C  0100               	movlb	0	; () banked
  2634  00152E  21A1               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2635  001530  6E52               	movwf	_PWMRight+1,c
  2636                           
  2637                           ; BSR set to: 0
  2638  001532  0012               	return		;funcret
  2639  001534                     __end_of_SetPWMMotorRight:
  2640                           	opt stack 0
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           intcon	equ	0xFF2
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           postdec1	equ	0xFE5
  2651                           plusw1	equ	0xFE3
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           plusw2	equ	0xFDB
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8
  2658                           
  2659 ;; *************** function _SetMotorLeft *****************
  2660 ;; Defined at:
  2661 ;;		line 27 in file "motors.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  speed           2    9[BANK0 ] int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         0       2       0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0
  2678 ;;      Totals:         0       2       0       0       0       0       0
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    6
  2682 ;; This function calls:
  2683 ;;		_SetPWMMotorLeft
  2684 ;;		_abs
  2685 ;; This function is called by:
  2686 ;;		_main
  2687 ;;		_Go
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text12
  2692  00143A                     __ptext12:
  2693                           	opt stack 0
  2694  00143A                     _SetMotorLeft:
  2695                           	opt stack 24
  2696                           
  2697                           ;motors.c: 30: if(speed>0){
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;incstack = 0
  2701  00143A  0100               	movlb	0	; () banked
  2702  00143C  BFAA               	btfsc	(SetMotorLeft@speed+1)& (0+255),7,b
  2703  00143E  D009               	goto	l2042
  2704  001440  0100               	movlb	0	; () banked
  2705  001442  51AA               	movf	(SetMotorLeft@speed+1)& (0+255),w,b
  2706  001444  E104               	bnz	u1300
  2707  001446  0100               	movlb	0	; () banked
  2708  001448  05A9               	decf	SetMotorLeft@speed& (0+255),w,b
  2709  00144A  A0D8               	btfss	status,0,c
  2710  00144C  D002               	goto	l2042
  2711  00144E                     u1300:
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;motors.c: 32: RC0=1;
  2715  00144E  8082               	bsf	3970,0,c	;volatile
  2716  001450  D007               	goto	L3
  2717  001452                     l2042:
  2718                           
  2719                           ; BSR set to: 0
  2720  001452  0100               	movlb	0	; () banked
  2721  001454  AFAA               	btfss	(SetMotorLeft@speed+1)& (0+255),7,b
  2722  001456  D003               	goto	l216
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;motors.c: 36: RC0=0;
  2726  001458  9082               	bcf	3970,0,c	;volatile
  2727                           
  2728                           ;motors.c: 37: RC1=1;
  2729  00145A  8282               	bsf	3970,1,c	;volatile
  2730                           
  2731                           ;motors.c: 38: }else{
  2732  00145C  D002               	goto	l2046
  2733  00145E                     l216:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;motors.c: 40: RC0=0;
  2737  00145E  9082               	bcf	3970,0,c	;volatile
  2738  001460                     L3:
  2739                           
  2740                           ;motors.c: 41: RC1=0;
  2741  001460  9282               	bcf	3970,1,c	;volatile
  2742  001462                     l2046:
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;motors.c: 42: }
  2746                           ;motors.c: 45: SetPWMMotorLeft(abs(speed));
  2747  001462  C0A9  F0A0         	movff	SetMotorLeft@speed,abs@a
  2748  001466  C0AA  F0A1         	movff	SetMotorLeft@speed+1,abs@a+1
  2749  00146A  ECB5  F00A         	call	_abs	;wreg free
  2750  00146E  C0A0  F0A7         	movff	?_abs,SetPWMMotorLeft@percentage
  2751  001472  C0A1  F0A8         	movff	?_abs+1,SetPWMMotorLeft@percentage+1
  2752  001476  EC9A  F00A         	call	_SetPWMMotorLeft	;wreg free
  2753  00147A  0012               	return		;funcret
  2754  00147C                     __end_of_SetMotorLeft:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           intcon	equ	0xFF2
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           plusw1	equ	0xFE3
  2767                           fsr1l	equ	0xFE1
  2768                           indf2	equ	0xFDF
  2769                           plusw2	equ	0xFDB
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _abs *****************
  2775 ;; Defined at:
  2776 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\abs.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  a               2    0[BANK0 ] int 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  2    0[BANK0 ] int 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2, status,0
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2790 ;;      Params:         0       2       0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0
  2792 ;;      Temps:          0       2       0       0       0       0       0
  2793 ;;      Totals:         0       4       0       0       0       0       0
  2794 ;;Total ram usage:        4 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    4
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_SetMotorLeft
  2801 ;;		_SetMotorRight
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text13
  2806  00156A                     __ptext13:
  2807                           	opt stack 0
  2808  00156A                     _abs:
  2809                           	opt stack 25
  2810                           
  2811                           ;incstack = 0
  2812  00156A  0100               	movlb	0	; () banked
  2813  00156C  AFA1               	btfss	(abs@a+1)& (0+255),7,b
  2814  00156E  D00E               	goto	l492
  2815                           
  2816                           ; BSR set to: 0
  2817  001570  C0A0  F0A2         	movff	abs@a,??_abs
  2818  001574  C0A1  F0A3         	movff	abs@a+1,??_abs+1
  2819  001578  0100               	movlb	0	; () banked
  2820  00157A  1FA2               	comf	??_abs& (0+255),f,b
  2821  00157C  1FA3               	comf	(??_abs+1)& (0+255),f,b
  2822  00157E  4BA2               	infsnz	??_abs& (0+255),f,b
  2823  001580  2BA3               	incf	(??_abs+1)& (0+255),f,b
  2824  001582  C0A2  F0A0         	movff	??_abs,?_abs
  2825  001586  C0A3  F0A1         	movff	??_abs+1,?_abs+1
  2826  00158A  0012               	return	
  2827  00158C                     l492:
  2828                           
  2829                           ; BSR set to: 0
  2830  00158C  C0A0  F0A0         	movff	abs@a,?_abs
  2831  001590  C0A1  F0A1         	movff	abs@a+1,?_abs+1
  2832                           
  2833                           ; BSR set to: 0
  2834  001594  0012               	return		;funcret
  2835  001596                     __end_of_abs:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           postinc0	equ	0xFEE
  2845                           wreg	equ	0xFE8
  2846                           postdec1	equ	0xFE5
  2847                           plusw1	equ	0xFE3
  2848                           fsr1l	equ	0xFE1
  2849                           indf2	equ	0xFDF
  2850                           plusw2	equ	0xFDB
  2851                           fsr2h	equ	0xFDA
  2852                           fsr2l	equ	0xFD9
  2853                           status	equ	0xFD8
  2854                           
  2855 ;; *************** function _SetPWMMotorLeft *****************
  2856 ;; Defined at:
  2857 ;;		line 30 in file "TimerPWM.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;  percentage      2    7[BANK0 ] unsigned int 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		wreg, status,2, status,0, cstack
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2871 ;;      Params:         0       2       0       0       0       0       0
  2872 ;;      Locals:         0       0       0       0       0       0       0
  2873 ;;      Temps:          0       0       0       0       0       0       0
  2874 ;;      Totals:         0       2       0       0       0       0       0
  2875 ;;Total ram usage:        2 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    5
  2878 ;; This function calls:
  2879 ;;		___lwdiv
  2880 ;; This function is called by:
  2881 ;;		_SetMotorLeft
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text14
  2886  001534                     __ptext14:
  2887                           	opt stack 0
  2888  001534                     _SetPWMMotorLeft:
  2889                           	opt stack 24
  2890                           
  2891                           ;TimerPWM.c: 31: PWMLeft=20-percentage/5;
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;incstack = 0
  2895  001534  C0A7  F0A0         	movff	SetPWMMotorLeft@percentage,___lwdiv@dividend
  2896  001538  C0A8  F0A1         	movff	SetPWMMotorLeft@percentage+1,___lwdiv@dividend+1
  2897  00153C  0E00               	movlw	0
  2898  00153E  0100               	movlb	0	; () banked
  2899  001540  6FA3               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2900  001542  0E05               	movlw	5
  2901  001544  6FA2               	movwf	___lwdiv@divisor& (0+255),b
  2902  001546  EC62  F008         	call	___lwdiv	;wreg free
  2903  00154A  0100               	movlb	0	; () banked
  2904  00154C  1FA0               	comf	?___lwdiv& (0+255),f,b
  2905  00154E  0100               	movlb	0	; () banked
  2906  001550  1FA1               	comf	(?___lwdiv+1)& (0+255),f,b
  2907  001552  0100               	movlb	0	; () banked
  2908  001554  4BA0               	infsnz	?___lwdiv& (0+255),f,b
  2909  001556  2BA1               	incf	(?___lwdiv+1)& (0+255),f,b
  2910  001558  0E14               	movlw	20
  2911  00155A  0100               	movlb	0	; () banked
  2912  00155C  25A0               	addwf	?___lwdiv& (0+255),w,b
  2913  00155E  6E4F               	movwf	_PWMLeft,c
  2914  001560  0E00               	movlw	0
  2915  001562  0100               	movlb	0	; () banked
  2916  001564  21A1               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2917  001566  6E50               	movwf	_PWMLeft+1,c
  2918                           
  2919                           ; BSR set to: 0
  2920  001568  0012               	return		;funcret
  2921  00156A                     __end_of_SetPWMMotorLeft:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           postinc0	equ	0xFEE
  2931                           wreg	equ	0xFE8
  2932                           postdec1	equ	0xFE5
  2933                           plusw1	equ	0xFE3
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           plusw2	equ	0xFDB
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function ___lwdiv *****************
  2942 ;; Defined at:
  2943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  dividend        2    0[BANK0 ] unsigned int 
  2946 ;;  divisor         2    2[BANK0 ] unsigned int 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  quotient        2    4[BANK0 ] unsigned int 
  2949 ;;  counter         1    6[BANK0 ] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2    0[BANK0 ] unsigned int 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2959 ;;      Params:         0       4       0       0       0       0       0
  2960 ;;      Locals:         0       3       0       0       0       0       0
  2961 ;;      Temps:          0       0       0       0       0       0       0
  2962 ;;      Totals:         0       7       0       0       0       0       0
  2963 ;;Total ram usage:        7 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    4
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_SetPWMMotorLeft
  2970 ;;		_SetPWMMotorRight
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text15
  2975  0010C4                     __ptext15:
  2976                           	opt stack 0
  2977  0010C4                     ___lwdiv:
  2978                           	opt stack 24
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;incstack = 0
  2982  0010C4  0E00               	movlw	0
  2983  0010C6  0100               	movlb	0	; () banked
  2984  0010C8  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2985  0010CA  0E00               	movlw	0
  2986  0010CC  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989  0010CE  0100               	movlb	0	; () banked
  2990  0010D0  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2991  0010D2  0100               	movlb	0	; () banked
  2992  0010D4  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2993  0010D6  B4D8               	btfsc	status,2,c
  2994  0010D8  D02C               	goto	l849
  2995                           
  2996                           ; BSR set to: 0
  2997  0010DA  0E01               	movlw	1
  2998  0010DC  0100               	movlb	0	; () banked
  2999  0010DE  6FA6               	movwf	___lwdiv@counter& (0+255),b
  3000  0010E0  D006               	goto	l1952
  3001  0010E2                     l1950:
  3002                           
  3003                           ; BSR set to: 0
  3004  0010E2  0100               	movlb	0	; () banked
  3005  0010E4  90D8               	bcf	status,0,c
  3006  0010E6  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  3007  0010E8  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3008  0010EA  0100               	movlb	0	; () banked
  3009  0010EC  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  3010  0010EE                     l1952:
  3011                           
  3012                           ; BSR set to: 0
  3013  0010EE  0100               	movlb	0	; () banked
  3014  0010F0  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3015  0010F2  D7F7               	goto	l1950
  3016  0010F4                     l1954:
  3017                           
  3018                           ; BSR set to: 0
  3019  0010F4  0100               	movlb	0	; () banked
  3020  0010F6  90D8               	bcf	status,0,c
  3021  0010F8  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  3022  0010FA  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3023                           
  3024                           ; BSR set to: 0
  3025  0010FC  0100               	movlb	0	; () banked
  3026  0010FE  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  3027  001100  0100               	movlb	0	; () banked
  3028  001102  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  3029  001104  0100               	movlb	0	; () banked
  3030  001106  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3031  001108  0100               	movlb	0	; () banked
  3032  00110A  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3033  00110C  A0D8               	btfss	status,0,c
  3034  00110E  D00A               	goto	l1962
  3035                           
  3036                           ; BSR set to: 0
  3037  001110  0100               	movlb	0	; () banked
  3038  001112  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  3039  001114  0100               	movlb	0	; () banked
  3040  001116  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  3041  001118  0100               	movlb	0	; () banked
  3042  00111A  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3043  00111C  0100               	movlb	0	; () banked
  3044  00111E  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3045                           
  3046                           ; BSR set to: 0
  3047  001120  0100               	movlb	0	; () banked
  3048  001122  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  3049  001124                     l1962:
  3050                           
  3051                           ; BSR set to: 0
  3052  001124  0100               	movlb	0	; () banked
  3053  001126  90D8               	bcf	status,0,c
  3054  001128  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3055  00112A  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058  00112C  0100               	movlb	0	; () banked
  3059  00112E  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  3060  001130  D7E1               	goto	l1954
  3061  001132                     l849:
  3062                           
  3063                           ; BSR set to: 0
  3064  001132  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  3065  001136  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3066                           
  3067                           ; BSR set to: 0
  3068  00113A  0012               	return		;funcret
  3069  00113C                     __end_of___lwdiv:
  3070                           	opt stack 0
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           postdec1	equ	0xFE5
  3081                           plusw1	equ	0xFE3
  3082                           fsr1l	equ	0xFE1
  3083                           indf2	equ	0xFDF
  3084                           plusw2	equ	0xFDB
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _ReadDistanceRight *****************
  3090 ;; Defined at:
  3091 ;;		line 64 in file "ADC.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;		None
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  2    0[BANK0 ] unsigned int 
  3098 ;; Registers used:
  3099 ;;		None
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3105 ;;      Params:         0       2       0       0       0       0       0
  3106 ;;      Locals:         0       0       0       0       0       0       0
  3107 ;;      Temps:          0       0       0       0       0       0       0
  3108 ;;      Totals:         0       2       0       0       0       0       0
  3109 ;;Total ram usage:        2 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    4
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_Go
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text16
  3120  001684                     __ptext16:
  3121                           	opt stack 0
  3122  001684                     _ReadDistanceRight:
  3123                           	opt stack 25
  3124                           
  3125                           ;ADC.c: 65: return DistanceRight;
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;incstack = 0
  3129  001684  C0C1  F0A0         	movff	_DistanceRight,?_ReadDistanceRight
  3130  001688  C0C2  F0A1         	movff	_DistanceRight+1,?_ReadDistanceRight+1
  3131  00168C  0012               	return		;funcret
  3132  00168E                     __end_of_ReadDistanceRight:
  3133                           	opt stack 0
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           intcon	equ	0xFF2
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           postdec1	equ	0xFE5
  3144                           plusw1	equ	0xFE3
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           plusw2	equ	0xFDB
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _ReadDistanceLeft *****************
  3153 ;; Defined at:
  3154 ;;		line 56 in file "ADC.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  2    0[BANK0 ] unsigned int 
  3161 ;; Registers used:
  3162 ;;		None
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3168 ;;      Params:         0       2       0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0
  3171 ;;      Totals:         0       2       0       0       0       0       0
  3172 ;;Total ram usage:        2 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    4
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_Go
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text17
  3183  00168E                     __ptext17:
  3184                           	opt stack 0
  3185  00168E                     _ReadDistanceLeft:
  3186                           	opt stack 25
  3187                           
  3188                           ;ADC.c: 57: return DistanceLeft;
  3189                           
  3190                           ;incstack = 0
  3191  00168E  C0BF  F0A0         	movff	_DistanceLeft,?_ReadDistanceLeft
  3192  001692  C0C0  F0A1         	movff	_DistanceLeft+1,?_ReadDistanceLeft+1
  3193  001696  0012               	return		;funcret
  3194  001698                     __end_of_ReadDistanceLeft:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           postinc0	equ	0xFEE
  3204                           wreg	equ	0xFE8
  3205                           postdec1	equ	0xFE5
  3206                           plusw1	equ	0xFE3
  3207                           fsr1l	equ	0xFE1
  3208                           indf2	equ	0xFDF
  3209                           plusw2	equ	0xFDB
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _ReadDistanceCentral *****************
  3215 ;; Defined at:
  3216 ;;		line 72 in file "ADC.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;		None
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;		None
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  2    0[BANK0 ] unsigned int 
  3223 ;; Registers used:
  3224 ;;		None
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3230 ;;      Params:         0       2       0       0       0       0       0
  3231 ;;      Locals:         0       0       0       0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0
  3233 ;;      Totals:         0       2       0       0       0       0       0
  3234 ;;Total ram usage:        2 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    4
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_main
  3241 ;;		_Go
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text18
  3246  001698                     __ptext18:
  3247                           	opt stack 0
  3248  001698                     _ReadDistanceCentral:
  3249                           	opt stack 26
  3250                           
  3251                           ;ADC.c: 73: return DistanceCentral;
  3252                           
  3253                           ;incstack = 0
  3254  001698  C0BD  F0A0         	movff	_DistanceCentral,?_ReadDistanceCentral
  3255  00169C  C0BE  F0A1         	movff	_DistanceCentral+1,?_ReadDistanceCentral+1
  3256  0016A0  0012               	return		;funcret
  3257  0016A2                     __end_of_ReadDistanceCentral:
  3258                           	opt stack 0
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           prodh	equ	0xFF4
  3264                           prodl	equ	0xFF3
  3265                           intcon	equ	0xFF2
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           plusw1	equ	0xFE3
  3270                           fsr1l	equ	0xFE1
  3271                           indf2	equ	0xFDF
  3272                           plusw2	equ	0xFDB
  3273                           fsr2h	equ	0xFDA
  3274                           fsr2l	equ	0xFD9
  3275                           status	equ	0xFD8
  3276                           
  3277 ;; *************** function _LCDWriteString *****************
  3278 ;; Defined at:
  3279 ;;		line 254 in file "lcd_hd44780_pic16.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  msg             2    8[BANK0 ] PTR const unsigned char 
  3282 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
  3283 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;  cc              1   10[BANK0 ] char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3295 ;;      Params:         0       2       0       0       0       0       0
  3296 ;;      Locals:         0       1       0       0       0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0
  3298 ;;      Totals:         0       3       0       0       0       0       0
  3299 ;;Total ram usage:        3 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:    6
  3302 ;; This function calls:
  3303 ;;		_LCDByte
  3304 ;; This function is called by:
  3305 ;;		_Go
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           	psect	text19
  3310  000F0C                     __ptext19:
  3311                           	opt stack 0
  3312  000F0C                     _LCDWriteString:
  3313                           	opt stack 23
  3314                           
  3315                           ;lcd_hd44780_pic16.c: 284: while(*msg!='\0')
  3316                           
  3317                           ;incstack = 0
  3318  000F0C  D046               	goto	l2086
  3319  000F0E                     l2066:
  3320                           
  3321                           ;lcd_hd44780_pic16.c: 285: {
  3322                           ;lcd_hd44780_pic16.c: 287: if(*msg=='%')
  3323  000F0E  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  3324  000F12  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  3325  000F16                     	if	0	;tblptru may be non-zero
  3326  000F16                     	endif
  3327  000F16                     	if	0	;tblptru may be non-zero
  3328  000F16                     	endif
  3329  000F16  0008               	tblrd		*
  3330  000F18  50F5               	movf	tablat,w,c
  3331  000F1A  0A25               	xorlw	37
  3332  000F1C  A4D8               	btfss	status,2,c
  3333  000F1E  D02F               	goto	l2082
  3334                           
  3335                           ;lcd_hd44780_pic16.c: 288: {
  3336                           ;lcd_hd44780_pic16.c: 289: msg++;
  3337  000F20  0100               	movlb	0	; () banked
  3338  000F22  4BA8               	infsnz	LCDWriteString@msg& (0+255),f,b
  3339  000F24  2BA9               	incf	(LCDWriteString@msg+1)& (0+255),f,b
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;lcd_hd44780_pic16.c: 290: int8_t cc=*msg-'0';
  3343  000F26  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  3344  000F2A  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  3345  000F2E                     	if	0	;tblptru may be non-zero
  3346  000F2E                     	endif
  3347  000F2E                     	if	0	;tblptru may be non-zero
  3348  000F2E                     	endif
  3349  000F2E  0008               	tblrd		*
  3350  000F30  50F5               	movf	tablat,w,c
  3351  000F32  0FD0               	addlw	208
  3352  000F34  0100               	movlb	0	; () banked
  3353  000F36  6FAA               	movwf	LCDWriteString@cc& (0+255),b
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;lcd_hd44780_pic16.c: 292: if(cc>=0 && cc<=7)
  3357  000F38  0100               	movlb	0	; () banked
  3358  000F3A  BFAA               	btfsc	LCDWriteString@cc& (0+255),7,b
  3359  000F3C  D00E               	goto	l2078
  3360                           
  3361                           ; BSR set to: 0
  3362  000F3E  0100               	movlb	0	; () banked
  3363  000F40  51AA               	movf	LCDWriteString@cc& (0+255),w,b
  3364  000F42  0A80               	xorlw	128
  3365  000F44  0F78               	addlw	-136
  3366  000F46  B0D8               	btfsc	status,0,c
  3367  000F48  D008               	goto	l2078
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;lcd_hd44780_pic16.c: 293: {
  3371                           ;lcd_hd44780_pic16.c: 294: (LCDByte(cc,1));
  3372  000F4A  0E01               	movlw	1
  3373  000F4C  0100               	movlb	0	; () banked
  3374  000F4E  6FA3               	movwf	LCDByte@isdata& (0+255),b
  3375  000F50  0100               	movlb	0	; () banked
  3376  000F52  51AA               	movf	LCDWriteString@cc& (0+255),w,b
  3377  000F54  EC83  F009         	call	_LCDByte
  3378                           
  3379                           ;lcd_hd44780_pic16.c: 295: }
  3380  000F58  D01D               	goto	l2084
  3381  000F5A                     l2078:
  3382                           
  3383                           ;lcd_hd44780_pic16.c: 296: else
  3384                           ;lcd_hd44780_pic16.c: 297: {
  3385                           ;lcd_hd44780_pic16.c: 298: (LCDByte('%',1));
  3386  000F5A  0E01               	movlw	1
  3387  000F5C  0100               	movlb	0	; () banked
  3388  000F5E  6FA3               	movwf	LCDByte@isdata& (0+255),b
  3389  000F60  0E25               	movlw	37
  3390  000F62  EC83  F009         	call	_LCDByte
  3391                           
  3392                           ;lcd_hd44780_pic16.c: 299: (LCDByte(*msg,1));
  3393  000F66  0E01               	movlw	1
  3394  000F68  0100               	movlb	0	; () banked
  3395  000F6A  6FA3               	movwf	LCDByte@isdata& (0+255),b
  3396  000F6C  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  3397  000F70  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  3398  000F74                     	if	0	;tblptru may be non-zero
  3399  000F74                     	endif
  3400  000F74                     	if	0	;tblptru may be non-zero
  3401  000F74                     	endif
  3402  000F74  0008               	tblrd		*
  3403  000F76  50F5               	movf	tablat,w,c
  3404  000F78  EC83  F009         	call	_LCDByte
  3405                           
  3406                           ;lcd_hd44780_pic16.c: 300: }
  3407                           ;lcd_hd44780_pic16.c: 301: }
  3408  000F7C  D00B               	goto	l2084
  3409  000F7E                     l2082:
  3410                           
  3411                           ;lcd_hd44780_pic16.c: 302: else
  3412                           ;lcd_hd44780_pic16.c: 303: {
  3413                           ;lcd_hd44780_pic16.c: 304: (LCDByte(*msg,1));
  3414  000F7E  0E01               	movlw	1
  3415  000F80  0100               	movlb	0	; () banked
  3416  000F82  6FA3               	movwf	LCDByte@isdata& (0+255),b
  3417  000F84  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  3418  000F88  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  3419  000F8C                     	if	0	;tblptru may be non-zero
  3420  000F8C                     	endif
  3421  000F8C                     	if	0	;tblptru may be non-zero
  3422  000F8C                     	endif
  3423  000F8C  0008               	tblrd		*
  3424  000F8E  50F5               	movf	tablat,w,c
  3425  000F90  EC83  F009         	call	_LCDByte
  3426  000F94                     l2084:
  3427                           
  3428                           ;lcd_hd44780_pic16.c: 305: }
  3429                           ;lcd_hd44780_pic16.c: 306: msg++;
  3430  000F94  0100               	movlb	0	; () banked
  3431  000F96  4BA8               	infsnz	LCDWriteString@msg& (0+255),f,b
  3432  000F98  2BA9               	incf	(LCDWriteString@msg+1)& (0+255),f,b
  3433  000F9A                     l2086:
  3434  000F9A  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  3435  000F9E  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  3436  000FA2                     	if	0	;tblptru may be non-zero
  3437  000FA2                     	endif
  3438  000FA2                     	if	0	;tblptru may be non-zero
  3439  000FA2                     	endif
  3440  000FA2  0008               	tblrd		*
  3441  000FA4  50F5               	movf	tablat,w,c
  3442  000FA6  0900               	iorlw	0
  3443  000FA8  B4D8               	btfsc	status,2,c
  3444  000FAA  0012               	return	
  3445  000FAC  D7B0               	goto	l2066
  3446  000FAE                     __end_of_LCDWriteString:
  3447                           	opt stack 0
  3448                           tblptru	equ	0xFF8
  3449                           tblptrh	equ	0xFF7
  3450                           tblptrl	equ	0xFF6
  3451                           tablat	equ	0xFF5
  3452                           prodh	equ	0xFF4
  3453                           prodl	equ	0xFF3
  3454                           intcon	equ	0xFF2
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           postdec1	equ	0xFE5
  3458                           plusw1	equ	0xFE3
  3459                           fsr1l	equ	0xFE1
  3460                           indf2	equ	0xFDF
  3461                           plusw2	equ	0xFDB
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _LCDByte *****************
  3467 ;; Defined at:
  3468 ;;		line 83 in file "lcd_hd44780_pic16.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  c               1    wreg     unsigned char 
  3471 ;;  isdata          1    3[BANK0 ] unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  c               1    6[BANK0 ] unsigned char 
  3474 ;;  temp            1    7[BANK0 ] unsigned char 
  3475 ;;  ln              1    5[BANK0 ] unsigned char 
  3476 ;;  hn              1    4[BANK0 ] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         0       1       0       0       0       0       0
  3487 ;;      Locals:         0       4       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         0       5       0       0       0       0       0
  3490 ;;Total ram usage:        5 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    5
  3493 ;; This function calls:
  3494 ;;		_LCDBusyLoop
  3495 ;; This function is called by:
  3496 ;;		_main
  3497 ;;		_LCDInit
  3498 ;;		_LCDWriteString
  3499 ;;		_LCDWriteInt
  3500 ;;		_Go
  3501 ;;		_LCDGotoXY
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text20
  3506  001306                     __ptext20:
  3507                           	opt stack 0
  3508  001306                     _LCDByte:
  3509                           	opt stack 24
  3510                           
  3511                           ;incstack = 0
  3512                           ;LCDByte@c stored from wreg
  3513  001306  0100               	movlb	0	; () banked
  3514  001308  6FA6               	movwf	LCDByte@c& (0+255),b
  3515                           
  3516                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  3517                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  3518                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  3519  00130A  0100               	movlb	0	; () banked
  3520  00130C  39A6               	swapf	LCDByte@c& (0+255),w,b
  3521  00130E  0B0F               	andlw	15
  3522  001310  0100               	movlb	0	; () banked
  3523  001312  6FA4               	movwf	LCDByte@hn& (0+255),b
  3524                           
  3525                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  3526  001314  0100               	movlb	0	; () banked
  3527  001316  51A6               	movf	LCDByte@c& (0+255),w,b
  3528  001318  0B0F               	andlw	15
  3529  00131A  0100               	movlb	0	; () banked
  3530  00131C  6FA5               	movwf	LCDByte@ln& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  3534  00131E  0100               	movlb	0	; () banked
  3535  001320  51A3               	movf	LCDByte@isdata& (0+255),w,b
  3536  001322  0100               	movlb	0	; () banked
  3537  001324  A4D8               	btfss	status,2,c
  3538  001326  D002               	goto	l246
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  3542  001328  9883               	bcf	3971,4,c	;volatile
  3543  00132A  D001               	goto	l247
  3544  00132C                     l246:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;lcd_hd44780_pic16.c: 100: else
  3548                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  3549  00132C  8883               	bsf	3971,4,c	;volatile
  3550  00132E                     l247:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3554                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  3555  00132E  8C83               	bsf	3971,6,c	;volatile
  3556                           
  3557                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  3558  001330  5083               	movf	3971,w,c	;volatile
  3559  001332  0BF0               	andlw	240
  3560  001334  0100               	movlb	0	; () banked
  3561  001336  11A4               	iorwf	LCDByte@hn& (0+255),w,b
  3562  001338  0100               	movlb	0	; () banked
  3563  00133A  6FA7               	movwf	LCDByte@temp& (0+255),b
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  3567  00133C  C0A7  FF83         	movff	LCDByte@temp,3971	;volatile
  3568                           
  3569                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3573  001340  9C83               	bcf	3971,6,c	;volatile
  3574                           
  3575                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  3576                           
  3577                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3578  001342  8C83               	bsf	3971,6,c	;volatile
  3579                           
  3580                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  3581  001344  5083               	movf	3971,w,c	;volatile
  3582  001346  0BF0               	andlw	240
  3583  001348  0100               	movlb	0	; () banked
  3584  00134A  11A5               	iorwf	LCDByte@ln& (0+255),w,b
  3585  00134C  0100               	movlb	0	; () banked
  3586  00134E  6FA7               	movwf	LCDByte@temp& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  3590  001350  C0A7  FF83         	movff	LCDByte@temp,3971	;volatile
  3591                           
  3592                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3596  001354  9C83               	bcf	3971,6,c	;volatile
  3597                           
  3598                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  3599                           
  3600                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3601  001356  ECAE  F009         	call	_LCDBusyLoop	;wreg free
  3602  00135A  0012               	return		;funcret
  3603  00135C                     __end_of_LCDByte:
  3604                           	opt stack 0
  3605                           tblptru	equ	0xFF8
  3606                           tblptrh	equ	0xFF7
  3607                           tblptrl	equ	0xFF6
  3608                           tablat	equ	0xFF5
  3609                           prodh	equ	0xFF4
  3610                           prodl	equ	0xFF3
  3611                           intcon	equ	0xFF2
  3612                           postinc0	equ	0xFEE
  3613                           wreg	equ	0xFE8
  3614                           postdec1	equ	0xFE5
  3615                           plusw1	equ	0xFE3
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           plusw2	equ	0xFDB
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _LCDBusyLoop *****************
  3624 ;; Defined at:
  3625 ;;		line 138 in file "lcd_hd44780_pic16.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;		None
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  status          1    2[BANK0 ] unsigned char 
  3630 ;;  temp            1    1[BANK0 ] unsigned char 
  3631 ;;  busy            1    0[BANK0 ] unsigned char 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      void 
  3634 ;; Registers used:
  3635 ;;		wreg, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3641 ;;      Params:         0       0       0       0       0       0       0
  3642 ;;      Locals:         0       3       0       0       0       0       0
  3643 ;;      Temps:          0       0       0       0       0       0       0
  3644 ;;      Totals:         0       3       0       0       0       0       0
  3645 ;;Total ram usage:        3 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    4
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_LCDByte
  3652 ;;		_LCDInit
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text21
  3657  00135C                     __ptext21:
  3658                           	opt stack 0
  3659  00135C                     _LCDBusyLoop:
  3660                           	opt stack 24
  3661                           
  3662                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  3663                           
  3664                           ;incstack = 0
  3665  00135C  0E00               	movlw	0
  3666  00135E  0100               	movlb	0	; () banked
  3667  001360  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  3671  001362  0E0F               	movlw	15
  3672  001364  1295               	iorwf	3989,f,c	;volatile
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  3676  001366  8A83               	bsf	3971,5,c	;volatile
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  3680  001368  9883               	bcf	3971,4,c	;volatile
  3681  00136A                     l1908:
  3682                           
  3683                           ;lcd_hd44780_pic16.c: 157: {
  3684                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  3685  00136A  8C83               	bsf	3971,6,c	;volatile
  3686                           
  3687                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  3688                           
  3689                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3690  00136C  CF83 F0A2          	movff	3971,LCDBusyLoop@status	;volatile
  3691                           
  3692                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  3693  001370  0100               	movlb	0	; () banked
  3694  001372  39A2               	swapf	LCDBusyLoop@status& (0+255),w,b
  3695  001374  0BF0               	andlw	240
  3696  001376  0100               	movlb	0	; () banked
  3697  001378  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  3698                           
  3699                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3703  00137A  9C83               	bcf	3971,6,c	;volatile
  3704                           
  3705                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  3706                           
  3707                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3708  00137C  8C83               	bsf	3971,6,c	;volatile
  3709                           
  3710                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  3711                           
  3712                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3713  00137E  CF83 F0A1          	movff	3971,LCDBusyLoop@temp	;volatile
  3714                           
  3715                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  3716  001382  0E0F               	movlw	15
  3717  001384  0100               	movlb	0	; () banked
  3718  001386  17A1               	andwf	LCDBusyLoop@temp& (0+255),f,b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  3722  001388  0100               	movlb	0	; () banked
  3723  00138A  51A2               	movf	LCDBusyLoop@status& (0+255),w,b
  3724  00138C  0100               	movlb	0	; () banked
  3725  00138E  11A1               	iorwf	LCDBusyLoop@temp& (0+255),w,b
  3726  001390  0100               	movlb	0	; () banked
  3727  001392  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  3731  001394  0100               	movlb	0	; () banked
  3732  001396  51A2               	movf	LCDBusyLoop@status& (0+255),w,b
  3733  001398  0B80               	andlw	128
  3734  00139A  0100               	movlb	0	; () banked
  3735  00139C  6FA0               	movwf	LCDBusyLoop@busy& (0+255),b
  3736                           
  3737                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3741  00139E  9C83               	bcf	3971,6,c	;volatile
  3742                           
  3743                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  3744                           
  3745                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3746  0013A0  0100               	movlb	0	; () banked
  3747  0013A2  51A0               	movf	LCDBusyLoop@busy& (0+255),w,b
  3748  0013A4  0100               	movlb	0	; () banked
  3749  0013A6  A4D8               	btfss	status,2,c
  3750  0013A8  D7E0               	goto	l1908
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  3754  0013AA  9A83               	bcf	3971,5,c	;volatile
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  3758  0013AC  0EF0               	movlw	240
  3759  0013AE  1695               	andwf	3989,f,c	;volatile
  3760                           
  3761                           ; BSR set to: 0
  3762  0013B0  0012               	return		;funcret
  3763  0013B2                     __end_of_LCDBusyLoop:
  3764                           	opt stack 0
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           intcon	equ	0xFF2
  3772                           postinc0	equ	0xFEE
  3773                           wreg	equ	0xFE8
  3774                           postdec1	equ	0xFE5
  3775                           plusw1	equ	0xFE3
  3776                           fsr1l	equ	0xFE1
  3777                           indf2	equ	0xFDF
  3778                           plusw2	equ	0xFDB
  3779                           fsr2h	equ	0xFDA
  3780                           fsr2l	equ	0xFD9
  3781                           status	equ	0xFD8
  3782                           
  3783 ;; *************** function _ADCInitiateConversion *****************
  3784 ;; Defined at:
  3785 ;;		line 32 in file "ADC.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		None
  3794 ;; Tracked objects:
  3795 ;;		On entry : 0/0
  3796 ;;		On exit  : 0/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3799 ;;      Params:         0       0       0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0       0       0
  3801 ;;      Temps:          0       0       0       0       0       0       0
  3802 ;;      Totals:         0       0       0       0       0       0       0
  3803 ;;Total ram usage:        0 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    4
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           	psect	text22
  3814  0016BC                     __ptext22:
  3815                           	opt stack 0
  3816  0016BC                     _ADCInitiateConversion:
  3817                           	opt stack 26
  3818                           
  3819                           ;ADC.c: 33: GO = 1;
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;incstack = 0
  3823  0016BC  82C2               	bsf	4034,1,c	;volatile
  3824  0016BE  0012               	return		;funcret
  3825  0016C0                     __end_of_ADCInitiateConversion:
  3826                           	opt stack 0
  3827                           tblptru	equ	0xFF8
  3828                           tblptrh	equ	0xFF7
  3829                           tblptrl	equ	0xFF6
  3830                           tablat	equ	0xFF5
  3831                           prodh	equ	0xFF4
  3832                           prodl	equ	0xFF3
  3833                           intcon	equ	0xFF2
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           plusw1	equ	0xFE3
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           plusw2	equ	0xFDB
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _ADCInit *****************
  3846 ;; Defined at:
  3847 ;;		line 8 in file "ADC.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;		None
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;		None
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  1    wreg      void 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3861 ;;      Params:         0       0       0       0       0       0       0
  3862 ;;      Locals:         0       0       0       0       0       0       0
  3863 ;;      Temps:          0       0       0       0       0       0       0
  3864 ;;      Totals:         0       0       0       0       0       0       0
  3865 ;;Total ram usage:        0 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    4
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text23
  3876  0015C2                     __ptext23:
  3877                           	opt stack 0
  3878  0015C2                     _ADCInit:
  3879                           	opt stack 26
  3880                           
  3881                           ;ADC.c: 11: TRISA0 = 1;
  3882                           
  3883                           ;incstack = 0
  3884  0015C2  8092               	bsf	3986,0,c	;volatile
  3885                           
  3886                           ;ADC.c: 12: TRISA1 = 1;
  3887  0015C4  8292               	bsf	3986,1,c	;volatile
  3888                           
  3889                           ;ADC.c: 13: TRISA2 = 1;
  3890  0015C6  8492               	bsf	3986,2,c	;volatile
  3891                           
  3892                           ;ADC.c: 14: TRISA3 = 1;
  3893  0015C8  8692               	bsf	3986,3,c	;volatile
  3894                           
  3895                           ;ADC.c: 16: ANS0 = 1;
  3896  0015CA  807E               	bsf	3966,0,c	;volatile
  3897                           
  3898                           ;ADC.c: 17: ANS1 = 1;
  3899  0015CC  827E               	bsf	3966,1,c	;volatile
  3900                           
  3901                           ;ADC.c: 18: ANS2 = 1;
  3902  0015CE  847E               	bsf	3966,2,c	;volatile
  3903                           
  3904                           ;ADC.c: 19: ANS3 = 1;
  3905  0015D0  867E               	bsf	3966,3,c	;volatile
  3906                           
  3907                           ;ADC.c: 21: ADON = 1;
  3908  0015D2  80C2               	bsf	4034,0,c	;volatile
  3909                           
  3910                           ;ADC.c: 22: ADCON1 = 0;
  3911  0015D4  0E00               	movlw	0
  3912  0015D6  6EC1               	movwf	4033,c	;volatile
  3913                           
  3914                           ;ADC.c: 23: ADCON2 = 0x91;
  3915  0015D8  0E91               	movlw	145
  3916  0015DA  6EC0               	movwf	4032,c	;volatile
  3917                           
  3918                           ;ADC.c: 24: ADIF = 0;
  3919  0015DC  9C9E               	bcf	3998,6,c	;volatile
  3920                           
  3921                           ;ADC.c: 25: ADIE = 1;
  3922  0015DE  8C9D               	bsf	3997,6,c	;volatile
  3923                           
  3924                           ;ADC.c: 27: PEIE = 1;
  3925  0015E0  8CF2               	bsf	intcon,6,c	;volatile
  3926                           
  3927                           ;ADC.c: 28: GIE = 1;
  3928  0015E2  8EF2               	bsf	intcon,7,c	;volatile
  3929  0015E4  0012               	return		;funcret
  3930  0015E6                     __end_of_ADCInit:
  3931                           	opt stack 0
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           intcon	equ	0xFF2
  3939                           postinc0	equ	0xFEE
  3940                           wreg	equ	0xFE8
  3941                           postdec1	equ	0xFE5
  3942                           plusw1	equ	0xFE3
  3943                           fsr1l	equ	0xFE1
  3944                           indf2	equ	0xFDF
  3945                           plusw2	equ	0xFDB
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _isr *****************
  3951 ;; Defined at:
  3952 ;;		line 9 in file "interrupts.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  CharRx          1   73[COMRAM] unsigned char 
  3957 ;;  read            2   74[COMRAM] unsigned int 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3967 ;;      Params:         0       0       0       0       0       0       0
  3968 ;;      Locals:         3       0       0       0       0       0       0
  3969 ;;      Temps:         16       0       0       0       0       0       0
  3970 ;;      Totals:        19       0       0       0       0       0       0
  3971 ;;Total ram usage:       19 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; Hardware stack levels required when called:    3
  3974 ;; This function calls:
  3975 ;;		_ADCGetOutput
  3976 ;;		_ReadPWMMotorLeft
  3977 ;;		_ReadPWMMotorRight
  3978 ;;		_ReadUSART
  3979 ;;		_SetBattery
  3980 ;;		_SetDistanceCentral
  3981 ;;		_SetDistanceLeft
  3982 ;;		_SetDistanceRight
  3983 ;;		_WriteUSART
  3984 ;;		_putsUSART
  3985 ;; This function is called by:
  3986 ;;		Interrupt level 2
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	intcode
  3991  000008                     __pintcode:
  3992                           	opt stack 0
  3993  000008                     _isr:
  3994                           	opt stack 23
  3995                           
  3996                           ;incstack = 0
  3997  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3998  00000A  CFFA F03C          	movff	pclath,??_isr+2
  3999  00000E  CFFB F03D          	movff	pclatu,??_isr+3
  4000  000012  CFE9 F03E          	movff	fsr0l,??_isr+4
  4001  000016  CFEA F03F          	movff	fsr0h,??_isr+5
  4002  00001A  CFE1 F040          	movff	fsr1l,??_isr+6
  4003  00001E  CFE2 F041          	movff	fsr1h,??_isr+7
  4004  000022  CFD9 F042          	movff	fsr2l,??_isr+8
  4005  000026  CFDA F043          	movff	fsr2h,??_isr+9
  4006  00002A  CFF3 F044          	movff	prodl,??_isr+10
  4007  00002E  CFF4 F045          	movff	prodh,??_isr+11
  4008  000032  CFF6 F046          	movff	tblptrl,??_isr+12
  4009  000036  CFF7 F047          	movff	tblptrh,??_isr+13
  4010  00003A  CFF8 F048          	movff	tblptru,??_isr+14
  4011  00003E  CFF5 F049          	movff	tablat,??_isr+15
  4012                           
  4013                           ;interrupts.c: 13: if (ADIF == 1) {
  4014  000042  AC9E               	btfss	3998,6,c	;volatile
  4015  000044  D055               	goto	i2l47
  4016                           
  4017                           ;interrupts.c: 25: static unsigned int Readport=0;
  4018                           ;interrupts.c: 26: unsigned int read=ADCGetOutput();
  4019  000046  EC23  F00B         	call	_ADCGetOutput	;wreg free
  4020  00004A  C001  F04B         	movff	?_ADCGetOutput,isr@read
  4021  00004E  C002  F04C         	movff	?_ADCGetOutput+1,isr@read+1
  4022                           
  4023                           ;interrupts.c: 28: switch (Readport){
  4024  000052  D037               	goto	i2l2592
  4025  000054                     i2l51:
  4026                           
  4027                           ;interrupts.c: 30: CHS3=0;
  4028  000054  9AC2               	bcf	4034,5,c	;volatile
  4029                           
  4030                           ;interrupts.c: 31: CHS2=0;
  4031  000056  98C2               	bcf	4034,4,c	;volatile
  4032                           
  4033                           ;interrupts.c: 32: CHS1=0;
  4034  000058  96C2               	bcf	4034,3,c	;volatile
  4035                           
  4036                           ;interrupts.c: 33: CHS0=1;
  4037  00005A  84C2               	bsf	4034,2,c	;volatile
  4038                           
  4039                           ;interrupts.c: 34: SetDistanceLeft (read);
  4040  00005C  C04B  F036         	movff	isr@read,SetDistanceLeft@lecture
  4041  000060  C04C  F037         	movff	isr@read+1,SetDistanceLeft@lecture+1
  4042  000064  EC11  F009         	call	_SetDistanceLeft	;wreg free
  4043  000068  D015               	goto	i2l2582
  4044  00006A                     i2l53:
  4045                           
  4046                           ;interrupts.c: 38: CHS3=0;
  4047  00006A  9AC2               	bcf	4034,5,c	;volatile
  4048                           
  4049                           ;interrupts.c: 39: CHS2=0;
  4050  00006C  98C2               	bcf	4034,4,c	;volatile
  4051                           
  4052                           ;interrupts.c: 40: CHS1=1;
  4053  00006E  86C2               	bsf	4034,3,c	;volatile
  4054                           
  4055                           ;interrupts.c: 41: CHS0=0;
  4056  000070  94C2               	bcf	4034,2,c	;volatile
  4057                           
  4058                           ;interrupts.c: 42: SetDistanceCentral (read);
  4059  000072  C04B  F036         	movff	isr@read,SetDistanceCentral@lecture
  4060  000076  C04C  F037         	movff	isr@read+1,SetDistanceCentral@lecture+1
  4061  00007A  EC4A  F009         	call	_SetDistanceCentral	;wreg free
  4062  00007E  D00A               	goto	i2l2582
  4063  000080                     i2l54:
  4064                           
  4065                           ;interrupts.c: 46: CHS3=0;
  4066  000080  9AC2               	bcf	4034,5,c	;volatile
  4067                           
  4068                           ;interrupts.c: 47: CHS2=0;
  4069  000082  98C2               	bcf	4034,4,c	;volatile
  4070                           
  4071                           ;interrupts.c: 48: CHS1=1;
  4072  000084  86C2               	bsf	4034,3,c	;volatile
  4073                           
  4074                           ;interrupts.c: 49: CHS0=1;
  4075  000086  84C2               	bsf	4034,2,c	;volatile
  4076                           
  4077                           ;interrupts.c: 50: SetDistanceRight (read);
  4078  000088  C04B  F036         	movff	isr@read,SetDistanceRight@lecture
  4079  00008C  C04C  F037         	movff	isr@read+1,SetDistanceRight@lecture+1
  4080  000090  ECD8  F008         	call	_SetDistanceRight	;wreg free
  4081  000094                     i2l2582:
  4082                           
  4083                           ;interrupts.c: 51: Readport++;
  4084  000094  4A57               	infsnz	isr@Readport,f,c
  4085  000096  2A58               	incf	isr@Readport+1,f,c
  4086                           
  4087                           ;interrupts.c: 52: break;
  4088  000098  D02A               	goto	i2l52
  4089  00009A                     i2l55:
  4090                           
  4091                           ;interrupts.c: 54: CHS3=0;
  4092  00009A  9AC2               	bcf	4034,5,c	;volatile
  4093                           
  4094                           ;interrupts.c: 55: CHS2=0;
  4095  00009C  98C2               	bcf	4034,4,c	;volatile
  4096                           
  4097                           ;interrupts.c: 56: CHS1=0;
  4098  00009E  96C2               	bcf	4034,3,c	;volatile
  4099                           
  4100                           ;interrupts.c: 57: CHS0=0;
  4101  0000A0  94C2               	bcf	4034,2,c	;volatile
  4102                           
  4103                           ;interrupts.c: 58: SetBattery (read);
  4104  0000A2  C04B  F036         	movff	isr@read,SetBattery@lecture
  4105  0000A6  C04C  F037         	movff	isr@read+1,SetBattery@lecture+1
  4106  0000AA  EC3E  F00A         	call	_SetBattery	;wreg free
  4107  0000AE  D004               	goto	i2l2588
  4108  0000B0                     i2l56:
  4109                           
  4110                           ;interrupts.c: 62: CHS3=0;
  4111  0000B0  9AC2               	bcf	4034,5,c	;volatile
  4112                           
  4113                           ;interrupts.c: 63: CHS2=0;
  4114  0000B2  98C2               	bcf	4034,4,c	;volatile
  4115                           
  4116                           ;interrupts.c: 64: CHS1=0;
  4117  0000B4  96C2               	bcf	4034,3,c	;volatile
  4118                           
  4119                           ;interrupts.c: 65: CHS0=0;
  4120  0000B6  94C2               	bcf	4034,2,c	;volatile
  4121  0000B8                     i2l2588:
  4122                           
  4123                           ;interrupts.c: 66: Readport=0;
  4124  0000B8  0E00               	movlw	0
  4125  0000BA  6E58               	movwf	isr@Readport+1,c
  4126  0000BC  0E00               	movlw	0
  4127  0000BE  6E57               	movwf	isr@Readport,c
  4128                           
  4129                           ;interrupts.c: 68: }
  4130                           
  4131                           ;interrupts.c: 67: break;
  4132  0000C0  D016               	goto	i2l52
  4133  0000C2                     i2l2592:
  4134  0000C2  C057  F03A         	movff	isr@Readport,??_isr
  4135  0000C6  C058  F03B         	movff	isr@Readport+1,??_isr+1
  4136                           
  4137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4138                           ; Switch size 1, requested type "space"
  4139                           ; Number of cases is 1, Range of values is 0 to 0
  4140                           ; switch strategies available:
  4141                           ; Name         Instructions Cycles
  4142                           ; simple_byte            4     3 (average)
  4143                           ;	Chosen strategy is simple_byte
  4144  0000CA  503B               	movf	??_isr+1,w,c
  4145  0000CC  0A00               	xorlw	0	; case 0
  4146  0000CE  A4D8               	btfss	status,2,c
  4147  0000D0  D7EF               	goto	i2l56
  4148                           
  4149                           ; Switch size 1, requested type "space"
  4150                           ; Number of cases is 4, Range of values is 0 to 3
  4151                           ; switch strategies available:
  4152                           ; Name         Instructions Cycles
  4153                           ; simple_byte           13     7 (average)
  4154                           ;	Chosen strategy is simple_byte
  4155  0000D2  503A               	movf	??_isr,w,c
  4156  0000D4  0A00               	xorlw	0	; case 0
  4157  0000D6  B4D8               	btfsc	status,2,c
  4158  0000D8  D7BD               	goto	i2l51
  4159  0000DA  0A01               	xorlw	1	; case 1
  4160  0000DC  B4D8               	btfsc	status,2,c
  4161  0000DE  D7C5               	goto	i2l53
  4162  0000E0  0A03               	xorlw	3	; case 2
  4163  0000E2  B4D8               	btfsc	status,2,c
  4164  0000E4  D7CD               	goto	i2l54
  4165  0000E6  0A01               	xorlw	1	; case 3
  4166  0000E8  B4D8               	btfsc	status,2,c
  4167  0000EA  D7D7               	goto	i2l55
  4168  0000EC  D7E1               	goto	i2l56
  4169  0000EE                     i2l52:
  4170                           
  4171                           ;interrupts.c: 71: ADIF=0;
  4172  0000EE  9C9E               	bcf	3998,6,c	;volatile
  4173  0000F0                     i2l47:
  4174                           
  4175                           ;interrupts.c: 73: }
  4176                           ;interrupts.c: 75: if (TMR0IF==1)
  4177  0000F0  A4F2               	btfss	intcon,2,c	;volatile
  4178  0000F2  D02C               	goto	i2l2620
  4179                           
  4180                           ;interrupts.c: 76: {
  4181                           ;interrupts.c: 77: static unsigned int PWMLeft;
  4182                           ;interrupts.c: 78: static unsigned int PWMRight;
  4183                           ;interrupts.c: 79: static unsigned int iteration;
  4184                           ;interrupts.c: 81: if (iteration==20){
  4185  0000F4  0E14               	movlw	20
  4186  0000F6  1859               	xorwf	isr@iteration,w,c
  4187  0000F8  105A               	iorwf	isr@iteration+1,w,c
  4188  0000FA  A4D8               	btfss	status,2,c
  4189  0000FC  D012               	goto	i2l2604
  4190                           
  4191                           ;interrupts.c: 82: RC4=0;
  4192  0000FE  9882               	bcf	3970,4,c	;volatile
  4193                           
  4194                           ;interrupts.c: 83: RC5=0;
  4195  000100  9A82               	bcf	3970,5,c	;volatile
  4196                           
  4197                           ;interrupts.c: 84: iteration=0;
  4198  000102  0E00               	movlw	0
  4199  000104  6E5A               	movwf	isr@iteration+1,c
  4200  000106  0E00               	movlw	0
  4201  000108  6E59               	movwf	isr@iteration,c
  4202                           
  4203                           ;interrupts.c: 85: PWMRight=ReadPWMMotorRight();
  4204  00010A  EC51  F00B         	call	_ReadPWMMotorRight	;wreg free
  4205  00010E  C001  F055         	movff	?_ReadPWMMotorRight,isr@PWMRight
  4206  000112  C002  F056         	movff	?_ReadPWMMotorRight+1,isr@PWMRight+1
  4207                           
  4208                           ;interrupts.c: 86: PWMLeft=ReadPWMMotorLeft();
  4209  000116  EC56  F00B         	call	_ReadPWMMotorLeft	;wreg free
  4210  00011A  C001  F053         	movff	?_ReadPWMMotorLeft,isr@PWMLeft
  4211  00011E  C002  F054         	movff	?_ReadPWMMotorLeft+1,isr@PWMLeft+1
  4212  000122                     i2l2604:
  4213                           
  4214                           ;interrupts.c: 87: }
  4215                           ;interrupts.c: 88: if (PWMRight==iteration){
  4216  000122  5059               	movf	isr@iteration,w,c
  4217  000124  1855               	xorwf	isr@PWMRight,w,c
  4218  000126  E104               	bnz	i2l2608
  4219  000128  505A               	movf	isr@iteration+1,w,c
  4220  00012A  1856               	xorwf	isr@PWMRight+1,w,c
  4221  00012C  B4D8               	btfsc	status,2,c
  4222                           
  4223                           ;interrupts.c: 89: RC4=1;
  4224  00012E  8882               	bsf	3970,4,c	;volatile
  4225  000130                     i2l2608:
  4226                           
  4227                           ;interrupts.c: 90: }
  4228                           ;interrupts.c: 91: if (PWMLeft==iteration){
  4229  000130  5059               	movf	isr@iteration,w,c
  4230  000132  1853               	xorwf	isr@PWMLeft,w,c
  4231  000134  E104               	bnz	i2l2612
  4232  000136  505A               	movf	isr@iteration+1,w,c
  4233  000138  1854               	xorwf	isr@PWMLeft+1,w,c
  4234  00013A  B4D8               	btfsc	status,2,c
  4235                           
  4236                           ;interrupts.c: 92: RC5=1;
  4237  00013C  8A82               	bsf	3970,5,c	;volatile
  4238  00013E                     i2l2612:
  4239                           
  4240                           ;interrupts.c: 93: }
  4241                           ;interrupts.c: 94: iteration++;
  4242  00013E  4A59               	infsnz	isr@iteration,f,c
  4243  000140  2A5A               	incf	isr@iteration+1,f,c
  4244                           
  4245                           ;interrupts.c: 97: TMR0IF=0;
  4246  000142  94F2               	bcf	intcon,2,c	;volatile
  4247                           
  4248                           ;interrupts.c: 98: TMR0H=0x00;
  4249  000144  0E00               	movlw	0
  4250  000146  6ED7               	movwf	4055,c	;volatile
  4251                           
  4252                           ;interrupts.c: 99: TMR0L=0x156;
  4253  000148  0E56               	movlw	86
  4254  00014A  6ED6               	movwf	4054,c	;volatile
  4255  00014C                     i2l2620:
  4256                           
  4257                           ;interrupts.c: 101: }
  4258                           ;interrupts.c: 103: if (RCIF==1){
  4259  00014C  AA9E               	btfss	3998,5,c	;volatile
  4260  00014E  D019               	goto	i2l77
  4261                           
  4262                           ;interrupts.c: 104: char CharRx = ReadUSART();
  4263  000150  EC14  F00B         	call	_ReadUSART	;wreg free
  4264  000154  6E4A               	movwf	isr@CharRx,c
  4265  000156                     i2l68:
  4266  000156  A2AC               	btfss	4012,1,c	;volatile
  4267  000158  D7FE               	goto	i2l68
  4268                           
  4269                           ;interrupts.c: 107: putsUSART("\n\rEcho: ");
  4270  00015A  0E0D               	movlw	low STR_1
  4271  00015C  6E02               	movwf	putsUSART@data,c
  4272  00015E  0E06               	movlw	high STR_1
  4273  000160  6E03               	movwf	putsUSART@data+1,c
  4274  000162  ECCB  F00A         	call	_putsUSART	;wreg free
  4275  000166                     i2l71:
  4276  000166  A2AC               	btfss	4012,1,c	;volatile
  4277  000168  D7FE               	goto	i2l71
  4278                           
  4279                           ;interrupts.c: 109: WriteUSART(CharRx);
  4280  00016A  504A               	movf	isr@CharRx,w,c
  4281  00016C  EC39  F00B         	call	_WriteUSART
  4282  000170                     i2l74:
  4283  000170  A2AC               	btfss	4012,1,c	;volatile
  4284  000172  D7FE               	goto	i2l74
  4285                           
  4286                           ;interrupts.c: 111: putsUSART("\n\r\n\rWrite: ");
  4287  000174  0E01               	movlw	low STR_2
  4288  000176  6E02               	movwf	putsUSART@data,c
  4289  000178  0E06               	movlw	high STR_2
  4290  00017A  6E03               	movwf	putsUSART@data+1,c
  4291  00017C  ECCB  F00A         	call	_putsUSART	;wreg free
  4292                           
  4293                           ;interrupts.c: 114: RCIF = 0;
  4294  000180  9A9E               	bcf	3998,5,c	;volatile
  4295  000182                     i2l77:
  4296  000182  C049  FFF5         	movff	??_isr+15,tablat
  4297  000186  C048  FFF8         	movff	??_isr+14,tblptru
  4298  00018A  C047  FFF7         	movff	??_isr+13,tblptrh
  4299  00018E  C046  FFF6         	movff	??_isr+12,tblptrl
  4300  000192  C045  FFF4         	movff	??_isr+11,prodh
  4301  000196  C044  FFF3         	movff	??_isr+10,prodl
  4302  00019A  C043  FFDA         	movff	??_isr+9,fsr2h
  4303  00019E  C042  FFD9         	movff	??_isr+8,fsr2l
  4304  0001A2  C041  FFE2         	movff	??_isr+7,fsr1h
  4305  0001A6  C040  FFE1         	movff	??_isr+6,fsr1l
  4306  0001AA  C03F  FFEA         	movff	??_isr+5,fsr0h
  4307  0001AE  C03E  FFE9         	movff	??_isr+4,fsr0l
  4308  0001B2  C03D  FFFB         	movff	??_isr+3,pclatu
  4309  0001B6  C03C  FFFA         	movff	??_isr+2,pclath
  4310  0001BA  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4311  0001BC  0011               	retfie		f
  4312  0001BE                     __end_of_isr:
  4313                           	opt stack 0
  4314                           pclatu	equ	0xFFB
  4315                           pclath	equ	0xFFA
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           fsr0h	equ	0xFEA
  4325                           fsr0l	equ	0xFE9
  4326                           wreg	equ	0xFE8
  4327                           postdec1	equ	0xFE5
  4328                           plusw1	equ	0xFE3
  4329                           fsr1h	equ	0xFE2
  4330                           fsr1l	equ	0xFE1
  4331                           indf2	equ	0xFDF
  4332                           plusw2	equ	0xFDB
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _putsUSART *****************
  4338 ;; Defined at:
  4339 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uputs.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  data            2    1[COMRAM] PTR unsigned char 
  4342 ;;		 -> STR_2(12), STR_1(9), 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4354 ;;      Params:         2       0       0       0       0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0
  4357 ;;      Totals:         2       0       0       0       0       0       0
  4358 ;;Total ram usage:        2 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    1
  4361 ;; This function calls:
  4362 ;;		_WriteUSART
  4363 ;; This function is called by:
  4364 ;;		_isr
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text25
  4369  001596                     __ptext25:
  4370                           	opt stack 0
  4371  001596                     _putsUSART:
  4372                           	opt stack 24
  4373  001596                     i2l414:
  4374  001596  A2AC               	btfss	4012,1,c	;volatile
  4375  001598  D7FE               	goto	i2l414
  4376  00159A  C002  FFF6         	movff	putsUSART@data,tblptrl
  4377  00159E  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  4378  0015A2                     	if	0	;tblptru may be non-zero
  4379  0015A2                     	endif
  4380  0015A2                     	if	0	;tblptru may be non-zero
  4381  0015A2                     	endif
  4382  0015A2  0008               	tblrd		*
  4383  0015A4  50F5               	movf	tablat,w,c
  4384  0015A6  EC39  F00B         	call	_WriteUSART
  4385  0015AA  C002  FFF6         	movff	putsUSART@data,tblptrl
  4386  0015AE  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  4387  0015B2  4A02               	infsnz	putsUSART@data,f,c
  4388  0015B4  2A03               	incf	putsUSART@data+1,f,c
  4389  0015B6                     	if	0	;tblptru may be non-zero
  4390  0015B6                     	endif
  4391  0015B6                     	if	0	;tblptru may be non-zero
  4392  0015B6                     	endif
  4393  0015B6  0008               	tblrd		*
  4394  0015B8  50F5               	movf	tablat,w,c
  4395  0015BA  0900               	iorlw	0
  4396  0015BC  B4D8               	btfsc	status,2,c
  4397  0015BE  0012               	return	
  4398  0015C0  D7EA               	goto	i2l414
  4399  0015C2                     __end_of_putsUSART:
  4400                           	opt stack 0
  4401                           pclatu	equ	0xFFB
  4402                           pclath	equ	0xFFA
  4403                           tblptru	equ	0xFF8
  4404                           tblptrh	equ	0xFF7
  4405                           tblptrl	equ	0xFF6
  4406                           tablat	equ	0xFF5
  4407                           prodh	equ	0xFF4
  4408                           prodl	equ	0xFF3
  4409                           intcon	equ	0xFF2
  4410                           postinc0	equ	0xFEE
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           plusw1	equ	0xFE3
  4416                           fsr1h	equ	0xFE2
  4417                           fsr1l	equ	0xFE1
  4418                           indf2	equ	0xFDF
  4419                           plusw2	equ	0xFDB
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424 ;; *************** function _WriteUSART *****************
  4425 ;; Defined at:
  4426 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uwrite.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  data            1    wreg     unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  data            1    0[COMRAM] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         0       0       0       0       0       0       0
  4441 ;;      Locals:         1       0       0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0
  4443 ;;      Totals:         1       0       0       0       0       0       0
  4444 ;;Total ram usage:        1 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_isr
  4450 ;;		_putsUSART
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text26
  4455  001672                     __ptext26:
  4456                           	opt stack 0
  4457  001672                     _WriteUSART:
  4458                           	opt stack 24
  4459                           
  4460                           ;incstack = 0
  4461                           ;WriteUSART@data stored from wreg
  4462  001672  6E01               	movwf	WriteUSART@data,c
  4463  001674  ACAC               	btfss	4012,6,c	;volatile
  4464  001676  D003               	goto	i2l1208
  4465  001678  90AC               	bcf	4012,0,c	;volatile
  4466  00167A  B25B               	btfsc	_USART_Status,1,c
  4467  00167C  80AC               	bsf	4012,0,c	;volatile
  4468  00167E                     i2l1208:
  4469  00167E  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  4470  001682  0012               	return		;funcret
  4471  001684                     __end_of_WriteUSART:
  4472                           	opt stack 0
  4473                           pclatu	equ	0xFFB
  4474                           pclath	equ	0xFFA
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           postinc0	equ	0xFEE
  4483                           fsr0h	equ	0xFEA
  4484                           fsr0l	equ	0xFE9
  4485                           wreg	equ	0xFE8
  4486                           postdec1	equ	0xFE5
  4487                           plusw1	equ	0xFE3
  4488                           fsr1h	equ	0xFE2
  4489                           fsr1l	equ	0xFE1
  4490                           indf2	equ	0xFDF
  4491                           plusw2	equ	0xFDB
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _SetDistanceRight *****************
  4497 ;; Defined at:
  4498 ;;		line 60 in file "ADC.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  lecture         2   53[COMRAM] unsigned int 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4512 ;;      Params:         2       0       0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0
  4514 ;;      Temps:          2       0       0       0       0       0       0
  4515 ;;      Totals:         4       0       0       0       0       0       0
  4516 ;;Total ram usage:        4 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    2
  4519 ;; This function calls:
  4520 ;;		___ftadd
  4521 ;;		___ftmul
  4522 ;;		___fttol
  4523 ;;		___lwtoft
  4524 ;; This function is called by:
  4525 ;;		_isr
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text27
  4530  0011B0                     __ptext27:
  4531                           	opt stack 0
  4532  0011B0                     _SetDistanceRight:
  4533                           	opt stack 23
  4534                           
  4535                           ;ADC.c: 61: DistanceRight=5+(1023-lecture)*0.035;
  4536                           
  4537                           ;incstack = 0
  4538  0011B0  0E00               	movlw	0
  4539  0011B2  6E1E               	movwf	___ftadd@f2,c
  4540  0011B4  0EA0               	movlw	160
  4541  0011B6  6E1F               	movwf	___ftadd@f2+1,c
  4542  0011B8  0E40               	movlw	64
  4543  0011BA  6E20               	movwf	___ftadd@f2+2,c
  4544  0011BC  0E5C               	movlw	92
  4545  0011BE  6E0F               	movwf	___ftmul@f2,c
  4546  0011C0  0E0F               	movlw	15
  4547  0011C2  6E10               	movwf	___ftmul@f2+1,c
  4548  0011C4  0E3D               	movlw	61
  4549  0011C6  6E11               	movwf	___ftmul@f2+2,c
  4550  0011C8  C036  F038         	movff	SetDistanceRight@lecture,??_SetDistanceRight
  4551  0011CC  C037  F039         	movff	SetDistanceRight@lecture+1,??_SetDistanceRight+1
  4552  0011D0  1E38               	comf	??_SetDistanceRight,f,c
  4553  0011D2  1E39               	comf	??_SetDistanceRight+1,f,c
  4554  0011D4  4A38               	infsnz	??_SetDistanceRight,f,c
  4555  0011D6  2A39               	incf	??_SetDistanceRight+1,f,c
  4556  0011D8  0EFF               	movlw	255
  4557  0011DA  2438               	addwf	??_SetDistanceRight,w,c
  4558  0011DC  6E09               	movwf	___lwtoft@c,c
  4559  0011DE  0E03               	movlw	3
  4560  0011E0  2039               	addwfc	??_SetDistanceRight+1,w,c
  4561  0011E2  6E0A               	movwf	___lwtoft@c+1,c
  4562  0011E4  ECF3  F00A         	call	___lwtoft	;wreg free
  4563  0011E8  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4564  0011EC  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4565  0011F0  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4566  0011F4  EC05  F006         	call	___ftmul	;wreg free
  4567  0011F8  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  4568  0011FC  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  4569  001200  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  4570  001204  EC18  F004         	call	___ftadd	;wreg free
  4571  001208  C01B  F027         	movff	?___ftadd,___fttol@f1
  4572  00120C  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  4573  001210  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  4574  001214  EC8B  F005         	call	___fttol	;wreg free
  4575  001218  C027  F0C1         	movff	?___fttol,_DistanceRight
  4576  00121C  C028  F0C2         	movff	?___fttol+1,_DistanceRight+1
  4577  001220  0012               	return		;funcret
  4578  001222                     __end_of_SetDistanceRight:
  4579                           	opt stack 0
  4580                           pclatu	equ	0xFFB
  4581                           pclath	equ	0xFFA
  4582                           tblptru	equ	0xFF8
  4583                           tblptrh	equ	0xFF7
  4584                           tblptrl	equ	0xFF6
  4585                           tablat	equ	0xFF5
  4586                           prodh	equ	0xFF4
  4587                           prodl	equ	0xFF3
  4588                           intcon	equ	0xFF2
  4589                           postinc0	equ	0xFEE
  4590                           fsr0h	equ	0xFEA
  4591                           fsr0l	equ	0xFE9
  4592                           wreg	equ	0xFE8
  4593                           postdec1	equ	0xFE5
  4594                           plusw1	equ	0xFE3
  4595                           fsr1h	equ	0xFE2
  4596                           fsr1l	equ	0xFE1
  4597                           indf2	equ	0xFDF
  4598                           plusw2	equ	0xFDB
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _SetDistanceLeft *****************
  4604 ;; Defined at:
  4605 ;;		line 52 in file "ADC.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  lecture         2   53[COMRAM] unsigned int 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      void 
  4612 ;; Registers used:
  4613 ;;		wreg, status,2, status,0, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4619 ;;      Params:         2       0       0       0       0       0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0
  4621 ;;      Temps:          2       0       0       0       0       0       0
  4622 ;;      Totals:         4       0       0       0       0       0       0
  4623 ;;Total ram usage:        4 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    2
  4626 ;; This function calls:
  4627 ;;		___ftadd
  4628 ;;		___ftmul
  4629 ;;		___fttol
  4630 ;;		___lwtoft
  4631 ;; This function is called by:
  4632 ;;		_isr
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text28
  4637  001222                     __ptext28:
  4638                           	opt stack 0
  4639  001222                     _SetDistanceLeft:
  4640                           	opt stack 23
  4641                           
  4642                           ;ADC.c: 53: DistanceLeft=5+(1023-lecture)*0.035;
  4643                           
  4644                           ;incstack = 0
  4645  001222  0E00               	movlw	0
  4646  001224  6E1E               	movwf	___ftadd@f2,c
  4647  001226  0EA0               	movlw	160
  4648  001228  6E1F               	movwf	___ftadd@f2+1,c
  4649  00122A  0E40               	movlw	64
  4650  00122C  6E20               	movwf	___ftadd@f2+2,c
  4651  00122E  0E5C               	movlw	92
  4652  001230  6E0F               	movwf	___ftmul@f2,c
  4653  001232  0E0F               	movlw	15
  4654  001234  6E10               	movwf	___ftmul@f2+1,c
  4655  001236  0E3D               	movlw	61
  4656  001238  6E11               	movwf	___ftmul@f2+2,c
  4657  00123A  C036  F038         	movff	SetDistanceLeft@lecture,??_SetDistanceLeft
  4658  00123E  C037  F039         	movff	SetDistanceLeft@lecture+1,??_SetDistanceLeft+1
  4659  001242  1E38               	comf	??_SetDistanceLeft,f,c
  4660  001244  1E39               	comf	??_SetDistanceLeft+1,f,c
  4661  001246  4A38               	infsnz	??_SetDistanceLeft,f,c
  4662  001248  2A39               	incf	??_SetDistanceLeft+1,f,c
  4663  00124A  0EFF               	movlw	255
  4664  00124C  2438               	addwf	??_SetDistanceLeft,w,c
  4665  00124E  6E09               	movwf	___lwtoft@c,c
  4666  001250  0E03               	movlw	3
  4667  001252  2039               	addwfc	??_SetDistanceLeft+1,w,c
  4668  001254  6E0A               	movwf	___lwtoft@c+1,c
  4669  001256  ECF3  F00A         	call	___lwtoft	;wreg free
  4670  00125A  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4671  00125E  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4672  001262  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4673  001266  EC05  F006         	call	___ftmul	;wreg free
  4674  00126A  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  4675  00126E  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  4676  001272  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  4677  001276  EC18  F004         	call	___ftadd	;wreg free
  4678  00127A  C01B  F027         	movff	?___ftadd,___fttol@f1
  4679  00127E  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  4680  001282  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  4681  001286  EC8B  F005         	call	___fttol	;wreg free
  4682  00128A  C027  F0BF         	movff	?___fttol,_DistanceLeft
  4683  00128E  C028  F0C0         	movff	?___fttol+1,_DistanceLeft+1
  4684  001292  0012               	return		;funcret
  4685  001294                     __end_of_SetDistanceLeft:
  4686                           	opt stack 0
  4687                           pclatu	equ	0xFFB
  4688                           pclath	equ	0xFFA
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           intcon	equ	0xFF2
  4696                           postinc0	equ	0xFEE
  4697                           fsr0h	equ	0xFEA
  4698                           fsr0l	equ	0xFE9
  4699                           wreg	equ	0xFE8
  4700                           postdec1	equ	0xFE5
  4701                           plusw1	equ	0xFE3
  4702                           fsr1h	equ	0xFE2
  4703                           fsr1l	equ	0xFE1
  4704                           indf2	equ	0xFDF
  4705                           plusw2	equ	0xFDB
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _SetDistanceCentral *****************
  4711 ;; Defined at:
  4712 ;;		line 68 in file "ADC.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  lecture         2   53[COMRAM] unsigned int 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4726 ;;      Params:         2       0       0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0
  4728 ;;      Temps:          2       0       0       0       0       0       0
  4729 ;;      Totals:         4       0       0       0       0       0       0
  4730 ;;Total ram usage:        4 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    2
  4733 ;; This function calls:
  4734 ;;		___ftadd
  4735 ;;		___ftmul
  4736 ;;		___fttol
  4737 ;;		___lwtoft
  4738 ;; This function is called by:
  4739 ;;		_isr
  4740 ;; This function uses a non-reentrant model
  4741 ;;
  4742                           
  4743                           	psect	text29
  4744  001294                     __ptext29:
  4745                           	opt stack 0
  4746  001294                     _SetDistanceCentral:
  4747                           	opt stack 23
  4748                           
  4749                           ;ADC.c: 69: DistanceCentral=5+(1023-lecture)*0.035;
  4750                           
  4751                           ;incstack = 0
  4752  001294  0E00               	movlw	0
  4753  001296  6E1E               	movwf	___ftadd@f2,c
  4754  001298  0EA0               	movlw	160
  4755  00129A  6E1F               	movwf	___ftadd@f2+1,c
  4756  00129C  0E40               	movlw	64
  4757  00129E  6E20               	movwf	___ftadd@f2+2,c
  4758  0012A0  0E5C               	movlw	92
  4759  0012A2  6E0F               	movwf	___ftmul@f2,c
  4760  0012A4  0E0F               	movlw	15
  4761  0012A6  6E10               	movwf	___ftmul@f2+1,c
  4762  0012A8  0E3D               	movlw	61
  4763  0012AA  6E11               	movwf	___ftmul@f2+2,c
  4764  0012AC  C036  F038         	movff	SetDistanceCentral@lecture,??_SetDistanceCentral
  4765  0012B0  C037  F039         	movff	SetDistanceCentral@lecture+1,??_SetDistanceCentral+1
  4766  0012B4  1E38               	comf	??_SetDistanceCentral,f,c
  4767  0012B6  1E39               	comf	??_SetDistanceCentral+1,f,c
  4768  0012B8  4A38               	infsnz	??_SetDistanceCentral,f,c
  4769  0012BA  2A39               	incf	??_SetDistanceCentral+1,f,c
  4770  0012BC  0EFF               	movlw	255
  4771  0012BE  2438               	addwf	??_SetDistanceCentral,w,c
  4772  0012C0  6E09               	movwf	___lwtoft@c,c
  4773  0012C2  0E03               	movlw	3
  4774  0012C4  2039               	addwfc	??_SetDistanceCentral+1,w,c
  4775  0012C6  6E0A               	movwf	___lwtoft@c+1,c
  4776  0012C8  ECF3  F00A         	call	___lwtoft	;wreg free
  4777  0012CC  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4778  0012D0  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4779  0012D4  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4780  0012D8  EC05  F006         	call	___ftmul	;wreg free
  4781  0012DC  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  4782  0012E0  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  4783  0012E4  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  4784  0012E8  EC18  F004         	call	___ftadd	;wreg free
  4785  0012EC  C01B  F027         	movff	?___ftadd,___fttol@f1
  4786  0012F0  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  4787  0012F4  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  4788  0012F8  EC8B  F005         	call	___fttol	;wreg free
  4789  0012FC  C027  F0BD         	movff	?___fttol,_DistanceCentral
  4790  001300  C028  F0BE         	movff	?___fttol+1,_DistanceCentral+1
  4791  001304  0012               	return		;funcret
  4792  001306                     __end_of_SetDistanceCentral:
  4793                           	opt stack 0
  4794                           pclatu	equ	0xFFB
  4795                           pclath	equ	0xFFA
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           postinc0	equ	0xFEE
  4804                           fsr0h	equ	0xFEA
  4805                           fsr0l	equ	0xFE9
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           plusw1	equ	0xFE3
  4809                           fsr1h	equ	0xFE2
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           plusw2	equ	0xFDB
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function ___ftadd *****************
  4818 ;; Defined at:
  4819 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  f1              3   26[COMRAM] float 
  4822 ;;  f2              3   29[COMRAM] float 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  exp1            1   37[COMRAM] unsigned char 
  4825 ;;  exp2            1   36[COMRAM] unsigned char 
  4826 ;;  sign            1   35[COMRAM] unsigned char 
  4827 ;; Return value:  Size  Location     Type
  4828 ;;                  3   26[COMRAM] float 
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0, cstack
  4831 ;; Tracked objects:
  4832 ;;		On entry : 0/0
  4833 ;;		On exit  : 0/0
  4834 ;;		Unchanged: 0/0
  4835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4836 ;;      Params:         6       0       0       0       0       0       0
  4837 ;;      Locals:         3       0       0       0       0       0       0
  4838 ;;      Temps:          3       0       0       0       0       0       0
  4839 ;;      Totals:        12       0       0       0       0       0       0
  4840 ;;Total ram usage:       12 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:    1
  4843 ;; This function calls:
  4844 ;;		___ftpack
  4845 ;; This function is called by:
  4846 ;;		_SetDistanceLeft
  4847 ;;		_SetDistanceRight
  4848 ;;		_SetDistanceCentral
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text30
  4853  000830                     __ptext30:
  4854                           	opt stack 0
  4855  000830                     ___ftadd:
  4856                           	opt stack 23
  4857                           
  4858                           ;incstack = 0
  4859  000830  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  4860  000834  6A22               	clrf	(??___ftadd+1)& (0+255),c
  4861  000836  6A23               	clrf	(??___ftadd+2)& (0+255),c
  4862  000838  341C               	rlcf	___ftadd@f1+1,w,c
  4863  00083A  3621               	rlcf	??___ftadd& (0+255),f,c
  4864  00083C  E301               	bnc	u148_41
  4865  00083E  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  4866  000840                     u148_41:
  4867  000840  5021               	movf	??___ftadd,w,c
  4868  000842  6E26               	movwf	___ftadd@exp1,c
  4869  000844  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  4870  000848  6A22               	clrf	(??___ftadd+1)& (0+255),c
  4871  00084A  6A23               	clrf	(??___ftadd+2)& (0+255),c
  4872  00084C  341F               	rlcf	___ftadd@f2+1,w,c
  4873  00084E  3621               	rlcf	??___ftadd& (0+255),f,c
  4874  000850  E301               	bnc	u149_41
  4875  000852  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  4876  000854                     u149_41:
  4877  000854  5021               	movf	??___ftadd,w,c
  4878  000856  6E25               	movwf	___ftadd@exp2,c
  4879  000858  5026               	movf	___ftadd@exp1,w,c
  4880  00085A  B4D8               	btfsc	status,2,c
  4881  00085C  D00B               	goto	i2l694
  4882  00085E  5025               	movf	___ftadd@exp2,w,c
  4883  000860  5C26               	subwf	___ftadd@exp1,w,c
  4884  000862  B0D8               	btfsc	status,0,c
  4885  000864  D00E               	goto	i2l2146
  4886  000866  5026               	movf	___ftadd@exp1,w,c
  4887  000868  0800               	sublw	0
  4888  00086A  2425               	addwf	___ftadd@exp2,w,c
  4889  00086C  6E21               	movwf	??___ftadd& (0+255),c
  4890  00086E  0E18               	movlw	24
  4891  000870  6421               	cpfsgt	??___ftadd,c
  4892  000872  D007               	goto	i2l2146
  4893  000874                     i2l694:
  4894  000874  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  4895  000878  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  4896  00087C  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  4897  000880  0012               	return	
  4898  000882                     i2l2146:
  4899  000882  5025               	movf	___ftadd@exp2,w,c
  4900  000884  B4D8               	btfsc	status,2,c
  4901  000886  D00B               	goto	i2l698
  4902  000888  5026               	movf	___ftadd@exp1,w,c
  4903  00088A  5C25               	subwf	___ftadd@exp2,w,c
  4904  00088C  B0D8               	btfsc	status,0,c
  4905  00088E  D00E               	goto	i2l2152
  4906  000890  5025               	movf	___ftadd@exp2,w,c
  4907  000892  0800               	sublw	0
  4908  000894  2426               	addwf	___ftadd@exp1,w,c
  4909  000896  6E21               	movwf	??___ftadd& (0+255),c
  4910  000898  0E18               	movlw	24
  4911  00089A  6421               	cpfsgt	??___ftadd,c
  4912  00089C  D007               	goto	i2l2152
  4913  00089E                     i2l698:
  4914  00089E  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  4915  0008A2  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  4916  0008A6  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  4917  0008AA  0012               	return	
  4918  0008AC                     i2l2152:
  4919  0008AC  0E06               	movlw	6
  4920  0008AE  6E24               	movwf	___ftadd@sign,c
  4921  0008B0  BE1D               	btfsc	___ftadd@f1+2,7,c
  4922  0008B2  8E24               	bsf	___ftadd@sign,7,c
  4923  0008B4  BE20               	btfsc	___ftadd@f2+2,7,c
  4924  0008B6  8C24               	bsf	___ftadd@sign,6,c
  4925  0008B8  8E1C               	bsf	___ftadd@f1+1,7,c
  4926  0008BA  0EFF               	movlw	255
  4927  0008BC  161B               	andwf	___ftadd@f1,f,c
  4928  0008BE  0EFF               	movlw	255
  4929  0008C0  161C               	andwf	___ftadd@f1+1,f,c
  4930  0008C2  0E00               	movlw	0
  4931  0008C4  161D               	andwf	___ftadd@f1+2,f,c
  4932  0008C6  8E1F               	bsf	___ftadd@f2+1,7,c
  4933  0008C8  0EFF               	movlw	255
  4934  0008CA  161E               	andwf	___ftadd@f2,f,c
  4935  0008CC  0EFF               	movlw	255
  4936  0008CE  161F               	andwf	___ftadd@f2+1,f,c
  4937  0008D0  0E00               	movlw	0
  4938  0008D2  1620               	andwf	___ftadd@f2+2,f,c
  4939  0008D4  5025               	movf	___ftadd@exp2,w,c
  4940  0008D6  5C26               	subwf	___ftadd@exp1,w,c
  4941  0008D8  B0D8               	btfsc	status,0,c
  4942  0008DA  D01B               	goto	i2l2178
  4943  0008DC                     i2l2168:
  4944  0008DC  90D8               	bcf	status,0,c
  4945  0008DE  361E               	rlcf	___ftadd@f2,f,c
  4946  0008E0  361F               	rlcf	___ftadd@f2+1,f,c
  4947  0008E2  3620               	rlcf	___ftadd@f2+2,f,c
  4948  0008E4  0625               	decf	___ftadd@exp2,f,c
  4949  0008E6  5026               	movf	___ftadd@exp1,w,c
  4950  0008E8  1825               	xorwf	___ftadd@exp2,w,c
  4951  0008EA  B4D8               	btfsc	status,2,c
  4952  0008EC  D00D               	goto	i2l2176
  4953  0008EE  0624               	decf	___ftadd@sign,f,c
  4954  0008F0  C024  F021         	movff	___ftadd@sign,??___ftadd
  4955  0008F4  0E07               	movlw	7
  4956  0008F6  1621               	andwf	??___ftadd,f,c
  4957  0008F8  B4D8               	btfsc	status,2,c
  4958  0008FA  D006               	goto	i2l2176
  4959  0008FC  D7EF               	goto	i2l2168
  4960  0008FE                     i2l2174:
  4961  0008FE  90D8               	bcf	status,0,c
  4962  000900  321D               	rrcf	___ftadd@f1+2,f,c
  4963  000902  321C               	rrcf	___ftadd@f1+1,f,c
  4964  000904  321B               	rrcf	___ftadd@f1,f,c
  4965  000906  2A26               	incf	___ftadd@exp1,f,c
  4966  000908                     i2l2176:
  4967  000908  5025               	movf	___ftadd@exp2,w,c
  4968  00090A  1826               	xorwf	___ftadd@exp1,w,c
  4969  00090C  B4D8               	btfsc	status,2,c
  4970  00090E  D01F               	goto	i2l709
  4971  000910  D7F6               	goto	i2l2174
  4972  000912                     i2l2178:
  4973  000912  5026               	movf	___ftadd@exp1,w,c
  4974  000914  5C25               	subwf	___ftadd@exp2,w,c
  4975  000916  B0D8               	btfsc	status,0,c
  4976  000918  D01A               	goto	i2l709
  4977  00091A                     i2l2180:
  4978  00091A  90D8               	bcf	status,0,c
  4979  00091C  361B               	rlcf	___ftadd@f1,f,c
  4980  00091E  361C               	rlcf	___ftadd@f1+1,f,c
  4981  000920  361D               	rlcf	___ftadd@f1+2,f,c
  4982  000922  0626               	decf	___ftadd@exp1,f,c
  4983  000924  5026               	movf	___ftadd@exp1,w,c
  4984  000926  1825               	xorwf	___ftadd@exp2,w,c
  4985  000928  B4D8               	btfsc	status,2,c
  4986  00092A  D00D               	goto	i2l2188
  4987  00092C  0624               	decf	___ftadd@sign,f,c
  4988  00092E  C024  F021         	movff	___ftadd@sign,??___ftadd
  4989  000932  0E07               	movlw	7
  4990  000934  1621               	andwf	??___ftadd,f,c
  4991  000936  B4D8               	btfsc	status,2,c
  4992  000938  D006               	goto	i2l2188
  4993  00093A  D7EF               	goto	i2l2180
  4994  00093C                     i2l2186:
  4995  00093C  90D8               	bcf	status,0,c
  4996  00093E  3220               	rrcf	___ftadd@f2+2,f,c
  4997  000940  321F               	rrcf	___ftadd@f2+1,f,c
  4998  000942  321E               	rrcf	___ftadd@f2,f,c
  4999  000944  2A25               	incf	___ftadd@exp2,f,c
  5000  000946                     i2l2188:
  5001  000946  5025               	movf	___ftadd@exp2,w,c
  5002  000948  1826               	xorwf	___ftadd@exp1,w,c
  5003  00094A  A4D8               	btfss	status,2,c
  5004  00094C  D7F7               	goto	i2l2186
  5005  00094E                     i2l709:
  5006  00094E  AE24               	btfss	___ftadd@sign,7,c
  5007  000950  D00C               	goto	i2l718
  5008  000952  0EFF               	movlw	255
  5009  000954  1A1B               	xorwf	___ftadd@f1,f,c
  5010  000956  0EFF               	movlw	255
  5011  000958  1A1C               	xorwf	___ftadd@f1+1,f,c
  5012  00095A  0EFF               	movlw	255
  5013  00095C  1A1D               	xorwf	___ftadd@f1+2,f,c
  5014  00095E  0E01               	movlw	1
  5015  000960  261B               	addwf	___ftadd@f1,f,c
  5016  000962  0E00               	movlw	0
  5017  000964  221C               	addwfc	___ftadd@f1+1,f,c
  5018  000966  0E00               	movlw	0
  5019  000968  221D               	addwfc	___ftadd@f1+2,f,c
  5020  00096A                     i2l718:
  5021  00096A  AC24               	btfss	___ftadd@sign,6,c
  5022  00096C  D00C               	goto	i2l2194
  5023  00096E  0EFF               	movlw	255
  5024  000970  1A1E               	xorwf	___ftadd@f2,f,c
  5025  000972  0EFF               	movlw	255
  5026  000974  1A1F               	xorwf	___ftadd@f2+1,f,c
  5027  000976  0EFF               	movlw	255
  5028  000978  1A20               	xorwf	___ftadd@f2+2,f,c
  5029  00097A  0E01               	movlw	1
  5030  00097C  261E               	addwf	___ftadd@f2,f,c
  5031  00097E  0E00               	movlw	0
  5032  000980  221F               	addwfc	___ftadd@f2+1,f,c
  5033  000982  0E00               	movlw	0
  5034  000984  2220               	addwfc	___ftadd@f2+2,f,c
  5035  000986                     i2l2194:
  5036  000986  0E00               	movlw	0
  5037  000988  6E24               	movwf	___ftadd@sign,c
  5038  00098A  501B               	movf	___ftadd@f1,w,c
  5039  00098C  261E               	addwf	___ftadd@f2,f,c
  5040  00098E  501C               	movf	___ftadd@f1+1,w,c
  5041  000990  221F               	addwfc	___ftadd@f2+1,f,c
  5042  000992  501D               	movf	___ftadd@f1+2,w,c
  5043  000994  2220               	addwfc	___ftadd@f2+2,f,c
  5044  000996  AE20               	btfss	___ftadd@f2+2,7,c
  5045  000998  D00E               	goto	i2l2204
  5046  00099A  0EFF               	movlw	255
  5047  00099C  1A1E               	xorwf	___ftadd@f2,f,c
  5048  00099E  0EFF               	movlw	255
  5049  0009A0  1A1F               	xorwf	___ftadd@f2+1,f,c
  5050  0009A2  0EFF               	movlw	255
  5051  0009A4  1A20               	xorwf	___ftadd@f2+2,f,c
  5052  0009A6  0E01               	movlw	1
  5053  0009A8  261E               	addwf	___ftadd@f2,f,c
  5054  0009AA  0E00               	movlw	0
  5055  0009AC  221F               	addwfc	___ftadd@f2+1,f,c
  5056  0009AE  0E00               	movlw	0
  5057  0009B0  2220               	addwfc	___ftadd@f2+2,f,c
  5058  0009B2  0E01               	movlw	1
  5059  0009B4  6E24               	movwf	___ftadd@sign,c
  5060  0009B6                     i2l2204:
  5061  0009B6  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  5062  0009BA  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5063  0009BE  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5064  0009C2  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  5065  0009C6  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  5066  0009CA  ECDE  F006         	call	___ftpack	;wreg free
  5067  0009CE  C001  F01B         	movff	?___ftpack,?___ftadd
  5068  0009D2  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  5069  0009D6  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  5070  0009DA  0012               	return	
  5071  0009DC                     __end_of___ftadd:
  5072                           	opt stack 0
  5073                           pclatu	equ	0xFFB
  5074                           pclath	equ	0xFFA
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           postinc0	equ	0xFEE
  5083                           fsr0h	equ	0xFEA
  5084                           fsr0l	equ	0xFE9
  5085                           wreg	equ	0xFE8
  5086                           postdec1	equ	0xFE5
  5087                           plusw1	equ	0xFE3
  5088                           fsr1h	equ	0xFE2
  5089                           fsr1l	equ	0xFE1
  5090                           indf2	equ	0xFDF
  5091                           plusw2	equ	0xFDB
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096 ;; *************** function _SetBattery *****************
  5097 ;; Defined at:
  5098 ;;		line 76 in file "ADC.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  lecture         2   53[COMRAM] unsigned int 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;		None
  5103 ;; Return value:  Size  Location     Type
  5104 ;;                  1    wreg      void 
  5105 ;; Registers used:
  5106 ;;		wreg, status,2, status,0, cstack
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5112 ;;      Params:         2       0       0       0       0       0       0
  5113 ;;      Locals:         0       0       0       0       0       0       0
  5114 ;;      Temps:          0       0       0       0       0       0       0
  5115 ;;      Totals:         2       0       0       0       0       0       0
  5116 ;;Total ram usage:        2 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    2
  5119 ;; This function calls:
  5120 ;;		___ftmul
  5121 ;;		___fttol
  5122 ;;		___lwtoft
  5123 ;; This function is called by:
  5124 ;;		_isr
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text31
  5129  00147C                     __ptext31:
  5130                           	opt stack 0
  5131  00147C                     _SetBattery:
  5132                           	opt stack 23
  5133                           
  5134                           ;ADC.c: 77: Battery=lecture*3.548;
  5135                           
  5136                           ;incstack = 0
  5137  00147C  0E12               	movlw	18
  5138  00147E  6E0F               	movwf	___ftmul@f2,c
  5139  001480  0E63               	movlw	99
  5140  001482  6E10               	movwf	___ftmul@f2+1,c
  5141  001484  0E40               	movlw	64
  5142  001486  6E11               	movwf	___ftmul@f2+2,c
  5143  001488  C036  F009         	movff	SetBattery@lecture,___lwtoft@c
  5144  00148C  C037  F00A         	movff	SetBattery@lecture+1,___lwtoft@c+1
  5145  001490  ECF3  F00A         	call	___lwtoft	;wreg free
  5146  001494  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5147  001498  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5148  00149C  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5149  0014A0  EC05  F006         	call	___ftmul	;wreg free
  5150  0014A4  C00C  F027         	movff	?___ftmul,___fttol@f1
  5151  0014A8  C00D  F028         	movff	?___ftmul+1,___fttol@f1+1
  5152  0014AC  C00E  F029         	movff	?___ftmul+2,___fttol@f1+2
  5153  0014B0  EC8B  F005         	call	___fttol	;wreg free
  5154  0014B4  C027  F04D         	movff	?___fttol,_Battery
  5155  0014B8  C028  F04E         	movff	?___fttol+1,_Battery+1
  5156  0014BC  0012               	return		;funcret
  5157  0014BE                     __end_of_SetBattery:
  5158                           	opt stack 0
  5159                           pclatu	equ	0xFFB
  5160                           pclath	equ	0xFFA
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           postinc0	equ	0xFEE
  5169                           fsr0h	equ	0xFEA
  5170                           fsr0l	equ	0xFE9
  5171                           wreg	equ	0xFE8
  5172                           postdec1	equ	0xFE5
  5173                           plusw1	equ	0xFE3
  5174                           fsr1h	equ	0xFE2
  5175                           fsr1l	equ	0xFE1
  5176                           indf2	equ	0xFDF
  5177                           plusw2	equ	0xFDB
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function ___lwtoft *****************
  5183 ;; Defined at:
  5184 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  c               2    8[COMRAM] unsigned int 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  3    8[COMRAM] float 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5198 ;;      Params:         3       0       0       0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0
  5201 ;;      Totals:         3       0       0       0       0       0       0
  5202 ;;Total ram usage:        3 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    1
  5205 ;; This function calls:
  5206 ;;		___ftpack
  5207 ;; This function is called by:
  5208 ;;		_SetDistanceLeft
  5209 ;;		_SetDistanceRight
  5210 ;;		_SetDistanceCentral
  5211 ;;		_SetBattery
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           	psect	text32
  5216  0015E6                     __ptext32:
  5217                           	opt stack 0
  5218  0015E6                     ___lwtoft:
  5219                           	opt stack 23
  5220                           
  5221                           ;incstack = 0
  5222  0015E6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5223  0015EA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5224  0015EE  6A03               	clrf	___ftpack@arg+2,c
  5225  0015F0  0E8E               	movlw	142
  5226  0015F2  6E04               	movwf	___ftpack@exp,c
  5227  0015F4  0E00               	movlw	0
  5228  0015F6  6E05               	movwf	___ftpack@sign,c
  5229  0015F8  ECDE  F006         	call	___ftpack	;wreg free
  5230  0015FC  C001  F009         	movff	?___ftpack,?___lwtoft
  5231  001600  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5232  001604  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5233  001608  0012               	return	
  5234  00160A                     __end_of___lwtoft:
  5235                           	opt stack 0
  5236                           pclatu	equ	0xFFB
  5237                           pclath	equ	0xFFA
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon	equ	0xFF2
  5245                           postinc0	equ	0xFEE
  5246                           fsr0h	equ	0xFEA
  5247                           fsr0l	equ	0xFE9
  5248                           wreg	equ	0xFE8
  5249                           postdec1	equ	0xFE5
  5250                           plusw1	equ	0xFE3
  5251                           fsr1h	equ	0xFE2
  5252                           fsr1l	equ	0xFE1
  5253                           indf2	equ	0xFDF
  5254                           plusw2	equ	0xFDB
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function ___fttol *****************
  5260 ;; Defined at:
  5261 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  f1              3   38[COMRAM] float 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;  lval            4   48[COMRAM] unsigned long 
  5266 ;;  exp1            1   52[COMRAM] unsigned char 
  5267 ;;  sign1           1   47[COMRAM] unsigned char 
  5268 ;; Return value:  Size  Location     Type
  5269 ;;                  4   38[COMRAM] long 
  5270 ;; Registers used:
  5271 ;;		wreg, status,2, status,0
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5277 ;;      Params:         4       0       0       0       0       0       0
  5278 ;;      Locals:         6       0       0       0       0       0       0
  5279 ;;      Temps:          5       0       0       0       0       0       0
  5280 ;;      Totals:        15       0       0       0       0       0       0
  5281 ;;Total ram usage:       15 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; This function calls:
  5284 ;;		Nothing
  5285 ;; This function is called by:
  5286 ;;		_SetDistanceLeft
  5287 ;;		_SetDistanceRight
  5288 ;;		_SetDistanceCentral
  5289 ;;		_SetBattery
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text33
  5294  000B16                     __ptext33:
  5295                           	opt stack 0
  5296  000B16                     ___fttol:
  5297                           	opt stack 24
  5298                           
  5299                           ;incstack = 0
  5300  000B16  C029  F02B         	movff	___fttol@f1+2,??___fttol
  5301  000B1A  6A2C               	clrf	(??___fttol+1)& (0+255),c
  5302  000B1C  6A2D               	clrf	(??___fttol+2)& (0+255),c
  5303  000B1E  3428               	rlcf	___fttol@f1+1,w,c
  5304  000B20  362B               	rlcf	??___fttol& (0+255),f,c
  5305  000B22  E301               	bnc	u187_41
  5306  000B24  802C               	bsf	(??___fttol+1)& (0+255),0,c
  5307  000B26                     u187_41:
  5308  000B26  502B               	movf	??___fttol,w,c
  5309  000B28  6E35               	movwf	___fttol@exp1,c
  5310  000B2A  5035               	movf	___fttol@exp1,w,c
  5311  000B2C  A4D8               	btfss	status,2,c
  5312  000B2E  D009               	goto	i2l2342
  5313  000B30  0E00               	movlw	0
  5314  000B32  6E27               	movwf	?___fttol,c
  5315  000B34  0E00               	movlw	0
  5316  000B36  6E28               	movwf	?___fttol+1,c
  5317  000B38  0E00               	movlw	0
  5318  000B3A  6E29               	movwf	?___fttol+2,c
  5319  000B3C  0E00               	movlw	0
  5320  000B3E  6E2A               	movwf	?___fttol+3,c
  5321  000B40  0012               	return	
  5322  000B42                     i2l2342:
  5323  000B42  0E17               	movlw	23
  5324  000B44  6E2B               	movwf	??___fttol& (0+255),c
  5325  000B46  C027  F02C         	movff	___fttol@f1,??___fttol+1
  5326  000B4A  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  5327  000B4E  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  5328  000B52  282B               	incf	??___fttol,w,c
  5329  000B54  6E2F               	movwf	(??___fttol+4)& (0+255),c
  5330  000B56  D004               	goto	i2u189_40
  5331  000B58                     i2u189_45:
  5332  000B58  90D8               	bcf	status,0,c
  5333  000B5A  322E               	rrcf	??___fttol+3,f,c
  5334  000B5C  322D               	rrcf	??___fttol+2,f,c
  5335  000B5E  322C               	rrcf	??___fttol+1,f,c
  5336  000B60                     i2u189_40:
  5337  000B60  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  5338  000B62  D7FA               	goto	i2u189_45
  5339  000B64  502C               	movf	??___fttol+1,w,c
  5340  000B66  6E30               	movwf	___fttol@sign1,c
  5341  000B68  8E28               	bsf	___fttol@f1+1,7,c
  5342  000B6A  0EFF               	movlw	255
  5343  000B6C  1627               	andwf	___fttol@f1,f,c
  5344  000B6E  0EFF               	movlw	255
  5345  000B70  1628               	andwf	___fttol@f1+1,f,c
  5346  000B72  0E00               	movlw	0
  5347  000B74  1629               	andwf	___fttol@f1+2,f,c
  5348  000B76  5027               	movf	___fttol@f1,w,c
  5349  000B78  6E31               	movwf	___fttol@lval,c
  5350  000B7A  5028               	movf	___fttol@f1+1,w,c
  5351  000B7C  6E32               	movwf	___fttol@lval+1,c
  5352  000B7E  5029               	movf	___fttol@f1+2,w,c
  5353  000B80  6E33               	movwf	___fttol@lval+2,c
  5354  000B82  6A34               	clrf	___fttol@lval+3,c
  5355  000B84  0E8E               	movlw	142
  5356  000B86  5E35               	subwf	___fttol@exp1,f,c
  5357  000B88  AE35               	btfss	___fttol@exp1,7,c
  5358  000B8A  D016               	goto	i2l2364
  5359  000B8C  5035               	movf	___fttol@exp1,w,c
  5360  000B8E  0A80               	xorlw	128
  5361  000B90  0F8F               	addlw	143
  5362  000B92  B0D8               	btfsc	status,0,c
  5363  000B94  D009               	goto	i2l2360
  5364  000B96  0E00               	movlw	0
  5365  000B98  6E27               	movwf	?___fttol,c
  5366  000B9A  0E00               	movlw	0
  5367  000B9C  6E28               	movwf	?___fttol+1,c
  5368  000B9E  0E00               	movlw	0
  5369  000BA0  6E29               	movwf	?___fttol+2,c
  5370  000BA2  0E00               	movlw	0
  5371  000BA4  6E2A               	movwf	?___fttol+3,c
  5372  000BA6  0012               	return	
  5373  000BA8                     i2l2360:
  5374  000BA8  90D8               	bcf	status,0,c
  5375  000BAA  3234               	rrcf	___fttol@lval+3,f,c
  5376  000BAC  3233               	rrcf	___fttol@lval+2,f,c
  5377  000BAE  3232               	rrcf	___fttol@lval+1,f,c
  5378  000BB0  3231               	rrcf	___fttol@lval,f,c
  5379  000BB2  3E35               	incfsz	___fttol@exp1,f,c
  5380  000BB4  D7F9               	goto	i2l2360
  5381  000BB6  D015               	goto	i2l2374
  5382  000BB8                     i2l2364:
  5383  000BB8  0E17               	movlw	23
  5384  000BBA  6435               	cpfsgt	___fttol@exp1,c
  5385  000BBC  D00F               	goto	i2l2372
  5386  000BBE  0E00               	movlw	0
  5387  000BC0  6E27               	movwf	?___fttol,c
  5388  000BC2  0E00               	movlw	0
  5389  000BC4  6E28               	movwf	?___fttol+1,c
  5390  000BC6  0E00               	movlw	0
  5391  000BC8  6E29               	movwf	?___fttol+2,c
  5392  000BCA  0E00               	movlw	0
  5393  000BCC  6E2A               	movwf	?___fttol+3,c
  5394  000BCE  0012               	return	
  5395  000BD0                     i2l2370:
  5396  000BD0  90D8               	bcf	status,0,c
  5397  000BD2  3631               	rlcf	___fttol@lval,f,c
  5398  000BD4  3632               	rlcf	___fttol@lval+1,f,c
  5399  000BD6  3633               	rlcf	___fttol@lval+2,f,c
  5400  000BD8  3634               	rlcf	___fttol@lval+3,f,c
  5401  000BDA  0635               	decf	___fttol@exp1,f,c
  5402  000BDC                     i2l2372:
  5403  000BDC  5035               	movf	___fttol@exp1,w,c
  5404  000BDE  A4D8               	btfss	status,2,c
  5405  000BE0  D7F7               	goto	i2l2370
  5406  000BE2                     i2l2374:
  5407  000BE2  5030               	movf	___fttol@sign1,w,c
  5408  000BE4  B4D8               	btfsc	status,2,c
  5409  000BE6  D008               	goto	i2l2378
  5410  000BE8  1E34               	comf	___fttol@lval+3,f,c
  5411  000BEA  1E33               	comf	___fttol@lval+2,f,c
  5412  000BEC  1E32               	comf	___fttol@lval+1,f,c
  5413  000BEE  6C31               	negf	___fttol@lval,c
  5414  000BF0  0E00               	movlw	0
  5415  000BF2  2232               	addwfc	___fttol@lval+1,f,c
  5416  000BF4  2233               	addwfc	___fttol@lval+2,f,c
  5417  000BF6  2234               	addwfc	___fttol@lval+3,f,c
  5418  000BF8                     i2l2378:
  5419  000BF8  C031  F027         	movff	___fttol@lval,?___fttol
  5420  000BFC  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  5421  000C00  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  5422  000C04  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  5423  000C08  0012               	return	
  5424  000C0A                     __end_of___fttol:
  5425                           	opt stack 0
  5426                           pclatu	equ	0xFFB
  5427                           pclath	equ	0xFFA
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           postinc0	equ	0xFEE
  5436                           fsr0h	equ	0xFEA
  5437                           fsr0l	equ	0xFE9
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           plusw1	equ	0xFE3
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function ___ftmul *****************
  5450 ;; Defined at:
  5451 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  f1              3   11[COMRAM] float 
  5454 ;;  f2              3   14[COMRAM] float 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  5457 ;;  sign            1   25[COMRAM] unsigned char 
  5458 ;;  cntr            1   24[COMRAM] unsigned char 
  5459 ;;  exp             1   20[COMRAM] unsigned char 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  3   11[COMRAM] float 
  5462 ;; Registers used:
  5463 ;;		wreg, status,2, status,0, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5469 ;;      Params:         6       0       0       0       0       0       0
  5470 ;;      Locals:         6       0       0       0       0       0       0
  5471 ;;      Temps:          3       0       0       0       0       0       0
  5472 ;;      Totals:        15       0       0       0       0       0       0
  5473 ;;Total ram usage:       15 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    1
  5476 ;; This function calls:
  5477 ;;		___ftpack
  5478 ;; This function is called by:
  5479 ;;		_SetDistanceLeft
  5480 ;;		_SetDistanceRight
  5481 ;;		_SetDistanceCentral
  5482 ;;		_SetBattery
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text34
  5487  000C0A                     __ptext34:
  5488                           	opt stack 0
  5489  000C0A                     ___ftmul:
  5490                           	opt stack 23
  5491                           
  5492                           ;incstack = 0
  5493  000C0A  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  5494  000C0E  6A13               	clrf	(??___ftmul+1)& (0+255),c
  5495  000C10  6A14               	clrf	(??___ftmul+2)& (0+255),c
  5496  000C12  340D               	rlcf	___ftmul@f1+1,w,c
  5497  000C14  3612               	rlcf	??___ftmul& (0+255),f,c
  5498  000C16  E301               	bnc	u169_41
  5499  000C18  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  5500  000C1A                     u169_41:
  5501  000C1A  5012               	movf	??___ftmul,w,c
  5502  000C1C  6E15               	movwf	___ftmul@exp,c
  5503  000C1E  5015               	movf	___ftmul@exp,w,c
  5504  000C20  A4D8               	btfss	status,2,c
  5505  000C22  D007               	goto	i2l2214
  5506  000C24  0E00               	movlw	0
  5507  000C26  6E0C               	movwf	?___ftmul,c
  5508  000C28  0E00               	movlw	0
  5509  000C2A  6E0D               	movwf	?___ftmul+1,c
  5510  000C2C  0E00               	movlw	0
  5511  000C2E  6E0E               	movwf	?___ftmul+2,c
  5512  000C30  0012               	return	
  5513  000C32                     i2l2214:
  5514  000C32  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  5515  000C36  6A13               	clrf	(??___ftmul+1)& (0+255),c
  5516  000C38  6A14               	clrf	(??___ftmul+2)& (0+255),c
  5517  000C3A  3410               	rlcf	___ftmul@f2+1,w,c
  5518  000C3C  3612               	rlcf	??___ftmul& (0+255),f,c
  5519  000C3E  E301               	bnc	u171_41
  5520  000C40  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  5521  000C42                     u171_41:
  5522  000C42  5012               	movf	??___ftmul,w,c
  5523  000C44  6E1A               	movwf	___ftmul@sign,c
  5524  000C46  501A               	movf	___ftmul@sign,w,c
  5525  000C48  A4D8               	btfss	status,2,c
  5526  000C4A  D007               	goto	i2l2220
  5527  000C4C  0E00               	movlw	0
  5528  000C4E  6E0C               	movwf	?___ftmul,c
  5529  000C50  0E00               	movlw	0
  5530  000C52  6E0D               	movwf	?___ftmul+1,c
  5531  000C54  0E00               	movlw	0
  5532  000C56  6E0E               	movwf	?___ftmul+2,c
  5533  000C58  0012               	return	
  5534  000C5A                     i2l2220:
  5535  000C5A  501A               	movf	___ftmul@sign,w,c
  5536  000C5C  0F7B               	addlw	123
  5537  000C5E  2615               	addwf	___ftmul@exp,f,c
  5538  000C60  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  5539  000C64  5011               	movf	___ftmul@f2+2,w,c
  5540  000C66  1A1A               	xorwf	___ftmul@sign,f,c
  5541  000C68  0E80               	movlw	128
  5542  000C6A  161A               	andwf	___ftmul@sign,f,c
  5543  000C6C  8E0D               	bsf	___ftmul@f1+1,7,c
  5544  000C6E  8E10               	bsf	___ftmul@f2+1,7,c
  5545  000C70  0EFF               	movlw	255
  5546  000C72  160F               	andwf	___ftmul@f2,f,c
  5547  000C74  0EFF               	movlw	255
  5548  000C76  1610               	andwf	___ftmul@f2+1,f,c
  5549  000C78  0E00               	movlw	0
  5550  000C7A  1611               	andwf	___ftmul@f2+2,f,c
  5551  000C7C  0E00               	movlw	0
  5552  000C7E  6E16               	movwf	___ftmul@f3_as_product,c
  5553  000C80  0E00               	movlw	0
  5554  000C82  6E17               	movwf	___ftmul@f3_as_product+1,c
  5555  000C84  0E00               	movlw	0
  5556  000C86  6E18               	movwf	___ftmul@f3_as_product+2,c
  5557  000C88  0E07               	movlw	7
  5558  000C8A  6E19               	movwf	___ftmul@cntr,c
  5559  000C8C                     i2l2234:
  5560  000C8C  A00C               	btfss	___ftmul@f1,0,c
  5561  000C8E  D006               	goto	i2l2238
  5562  000C90  500F               	movf	___ftmul@f2,w,c
  5563  000C92  2616               	addwf	___ftmul@f3_as_product,f,c
  5564  000C94  5010               	movf	___ftmul@f2+1,w,c
  5565  000C96  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  5566  000C98  5011               	movf	___ftmul@f2+2,w,c
  5567  000C9A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  5568  000C9C                     i2l2238:
  5569  000C9C  90D8               	bcf	status,0,c
  5570  000C9E  320E               	rrcf	___ftmul@f1+2,f,c
  5571  000CA0  320D               	rrcf	___ftmul@f1+1,f,c
  5572  000CA2  320C               	rrcf	___ftmul@f1,f,c
  5573  000CA4  90D8               	bcf	status,0,c
  5574  000CA6  360F               	rlcf	___ftmul@f2,f,c
  5575  000CA8  3610               	rlcf	___ftmul@f2+1,f,c
  5576  000CAA  3611               	rlcf	___ftmul@f2+2,f,c
  5577  000CAC  2E19               	decfsz	___ftmul@cntr,f,c
  5578  000CAE  D7EE               	goto	i2l2234
  5579  000CB0  0E09               	movlw	9
  5580  000CB2  6E19               	movwf	___ftmul@cntr,c
  5581  000CB4                     i2l2244:
  5582  000CB4  A00C               	btfss	___ftmul@f1,0,c
  5583  000CB6  D006               	goto	i2l2248
  5584  000CB8  500F               	movf	___ftmul@f2,w,c
  5585  000CBA  2616               	addwf	___ftmul@f3_as_product,f,c
  5586  000CBC  5010               	movf	___ftmul@f2+1,w,c
  5587  000CBE  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  5588  000CC0  5011               	movf	___ftmul@f2+2,w,c
  5589  000CC2  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  5590  000CC4                     i2l2248:
  5591  000CC4  90D8               	bcf	status,0,c
  5592  000CC6  320E               	rrcf	___ftmul@f1+2,f,c
  5593  000CC8  320D               	rrcf	___ftmul@f1+1,f,c
  5594  000CCA  320C               	rrcf	___ftmul@f1,f,c
  5595  000CCC  90D8               	bcf	status,0,c
  5596  000CCE  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  5597  000CD0  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  5598  000CD2  3216               	rrcf	___ftmul@f3_as_product,f,c
  5599  000CD4  2E19               	decfsz	___ftmul@cntr,f,c
  5600  000CD6  D7EE               	goto	i2l2244
  5601  000CD8  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5602  000CDC  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5603  000CE0  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5604  000CE4  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  5605  000CE8  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  5606  000CEC  ECDE  F006         	call	___ftpack	;wreg free
  5607  000CF0  C001  F00C         	movff	?___ftpack,?___ftmul
  5608  000CF4  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  5609  000CF8  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  5610  000CFC  0012               	return	
  5611  000CFE                     __end_of___ftmul:
  5612                           	opt stack 0
  5613                           pclatu	equ	0xFFB
  5614                           pclath	equ	0xFFA
  5615                           tblptru	equ	0xFF8
  5616                           tblptrh	equ	0xFF7
  5617                           tblptrl	equ	0xFF6
  5618                           tablat	equ	0xFF5
  5619                           prodh	equ	0xFF4
  5620                           prodl	equ	0xFF3
  5621                           intcon	equ	0xFF2
  5622                           postinc0	equ	0xFEE
  5623                           fsr0h	equ	0xFEA
  5624                           fsr0l	equ	0xFE9
  5625                           wreg	equ	0xFE8
  5626                           postdec1	equ	0xFE5
  5627                           plusw1	equ	0xFE3
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           plusw2	equ	0xFDB
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function ___ftpack *****************
  5637 ;; Defined at:
  5638 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  arg             3    0[COMRAM] unsigned um
  5641 ;;  exp             1    3[COMRAM] unsigned char 
  5642 ;;  sign            1    4[COMRAM] unsigned char 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  3    0[COMRAM] float 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5654 ;;      Params:         5       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0
  5656 ;;      Temps:          3       0       0       0       0       0       0
  5657 ;;      Totals:         8       0       0       0       0       0       0
  5658 ;;Total ram usage:        8 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		___ftadd
  5664 ;;		___ftmul
  5665 ;;		___lwtoft
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text35
  5670  000DBC                     __ptext35:
  5671                           	opt stack 0
  5672  000DBC                     ___ftpack:
  5673                           	opt stack 23
  5674                           
  5675                           ;incstack = 0
  5676  000DBC  5004               	movf	___ftpack@exp,w,c
  5677  000DBE  B4D8               	btfsc	status,2,c
  5678  000DC0  D005               	goto	i2l2006
  5679  000DC2  5001               	movf	___ftpack@arg,w,c
  5680  000DC4  1002               	iorwf	___ftpack@arg+1,w,c
  5681  000DC6  1003               	iorwf	___ftpack@arg+2,w,c
  5682  000DC8  A4D8               	btfss	status,2,c
  5683  000DCA  D00C               	goto	i2l2012
  5684  000DCC                     i2l2006:
  5685  000DCC  0E00               	movlw	0
  5686  000DCE  6E01               	movwf	?___ftpack,c
  5687  000DD0  0E00               	movlw	0
  5688  000DD2  6E02               	movwf	?___ftpack+1,c
  5689  000DD4  0E00               	movlw	0
  5690  000DD6  6E03               	movwf	?___ftpack+2,c
  5691  000DD8  0012               	return	
  5692  000DDA                     i2l2010:
  5693  000DDA  2A04               	incf	___ftpack@exp,f,c
  5694  000DDC  90D8               	bcf	status,0,c
  5695  000DDE  3203               	rrcf	___ftpack@arg+2,f,c
  5696  000DE0  3202               	rrcf	___ftpack@arg+1,f,c
  5697  000DE2  3201               	rrcf	___ftpack@arg,f,c
  5698  000DE4                     i2l2012:
  5699  000DE4  0E00               	movlw	0
  5700  000DE6  1401               	andwf	___ftpack@arg,w,c
  5701  000DE8  6E06               	movwf	??___ftpack& (0+255),c
  5702  000DEA  0E00               	movlw	0
  5703  000DEC  1402               	andwf	___ftpack@arg+1,w,c
  5704  000DEE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5705  000DF0  0EFE               	movlw	254
  5706  000DF2  1403               	andwf	___ftpack@arg+2,w,c
  5707  000DF4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5708  000DF6  5006               	movf	??___ftpack,w,c
  5709  000DF8  1007               	iorwf	??___ftpack+1,w,c
  5710  000DFA  1008               	iorwf	??___ftpack+2,w,c
  5711  000DFC  B4D8               	btfsc	status,2,c
  5712  000DFE  D00C               	goto	i2l2018
  5713  000E00  D7EC               	goto	i2l2010
  5714  000E02                     i2l2014:
  5715  000E02  2A04               	incf	___ftpack@exp,f,c
  5716  000E04  0E01               	movlw	1
  5717  000E06  2601               	addwf	___ftpack@arg,f,c
  5718  000E08  0E00               	movlw	0
  5719  000E0A  2202               	addwfc	___ftpack@arg+1,f,c
  5720  000E0C  0E00               	movlw	0
  5721  000E0E  2203               	addwfc	___ftpack@arg+2,f,c
  5722  000E10  90D8               	bcf	status,0,c
  5723  000E12  3203               	rrcf	___ftpack@arg+2,f,c
  5724  000E14  3202               	rrcf	___ftpack@arg+1,f,c
  5725  000E16  3201               	rrcf	___ftpack@arg,f,c
  5726  000E18                     i2l2018:
  5727  000E18  0E00               	movlw	0
  5728  000E1A  1401               	andwf	___ftpack@arg,w,c
  5729  000E1C  6E06               	movwf	??___ftpack& (0+255),c
  5730  000E1E  0E00               	movlw	0
  5731  000E20  1402               	andwf	___ftpack@arg+1,w,c
  5732  000E22  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5733  000E24  0EFF               	movlw	255
  5734  000E26  1403               	andwf	___ftpack@arg+2,w,c
  5735  000E28  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5736  000E2A  5006               	movf	??___ftpack,w,c
  5737  000E2C  1007               	iorwf	??___ftpack+1,w,c
  5738  000E2E  1008               	iorwf	??___ftpack+2,w,c
  5739  000E30  B4D8               	btfsc	status,2,c
  5740  000E32  D006               	goto	i2l2022
  5741  000E34  D7E6               	goto	i2l2014
  5742  000E36                     i2l2020:
  5743  000E36  0604               	decf	___ftpack@exp,f,c
  5744  000E38  90D8               	bcf	status,0,c
  5745  000E3A  3601               	rlcf	___ftpack@arg,f,c
  5746  000E3C  3602               	rlcf	___ftpack@arg+1,f,c
  5747  000E3E  3603               	rlcf	___ftpack@arg+2,f,c
  5748  000E40                     i2l2022:
  5749  000E40  BE02               	btfsc	___ftpack@arg+1,7,c
  5750  000E42  D003               	goto	i2l671
  5751  000E44  0E02               	movlw	2
  5752  000E46  6004               	cpfslt	___ftpack@exp,c
  5753  000E48  D7F6               	goto	i2l2020
  5754  000E4A                     i2l671:
  5755  000E4A  A004               	btfss	___ftpack@exp,0,c
  5756  000E4C  9E02               	bcf	___ftpack@arg+1,7,c
  5757  000E4E  90D8               	bcf	status,0,c
  5758  000E50  3204               	rrcf	___ftpack@exp,f,c
  5759  000E52  5004               	movf	___ftpack@exp,w,c
  5760  000E54  1203               	iorwf	___ftpack@arg+2,f,c
  5761  000E56  5005               	movf	___ftpack@sign,w,c
  5762  000E58  A4D8               	btfss	status,2,c
  5763  000E5A  8E03               	bsf	___ftpack@arg+2,7,c
  5764  000E5C  C001  F001         	movff	___ftpack@arg,?___ftpack
  5765  000E60  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5766  000E64  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5767  000E68  0012               	return	
  5768  000E6A                     __end_of___ftpack:
  5769                           	opt stack 0
  5770                           pclatu	equ	0xFFB
  5771                           pclath	equ	0xFFA
  5772                           tblptru	equ	0xFF8
  5773                           tblptrh	equ	0xFF7
  5774                           tblptrl	equ	0xFF6
  5775                           tablat	equ	0xFF5
  5776                           prodh	equ	0xFF4
  5777                           prodl	equ	0xFF3
  5778                           intcon	equ	0xFF2
  5779                           postinc0	equ	0xFEE
  5780                           fsr0h	equ	0xFEA
  5781                           fsr0l	equ	0xFE9
  5782                           wreg	equ	0xFE8
  5783                           postdec1	equ	0xFE5
  5784                           plusw1	equ	0xFE3
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           plusw2	equ	0xFDB
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _ReadUSART *****************
  5794 ;; Defined at:
  5795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uread.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  data            1    0[COMRAM] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      unsigned char 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2, status,0
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         0       0       0       0       0       0       0
  5810 ;;      Locals:         1       0       0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0
  5812 ;;      Totals:         1       0       0       0       0       0       0
  5813 ;;Total ram usage:        1 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_isr
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text36
  5823  001628                     __ptext36:
  5824                           	opt stack 0
  5825  001628                     _ReadUSART:
  5826                           	opt stack 25
  5827                           
  5828                           ;incstack = 0
  5829  001628  0EF2               	movlw	242
  5830  00162A  165B               	andwf	_USART_Status,f,c
  5831  00162C  ACAB               	btfss	4011,6,c	;volatile
  5832  00162E  D003               	goto	i2l427
  5833  001630  905B               	bcf	_USART_Status,0,c
  5834  001632  B0AB               	btfsc	4011,0,c	;volatile
  5835  001634  805B               	bsf	_USART_Status,0,c
  5836  001636                     i2l427:
  5837  001636  B4AB               	btfsc	4011,2,c	;volatile
  5838  001638  845B               	bsf	_USART_Status,2,c
  5839  00163A  B2AB               	btfsc	4011,1,c	;volatile
  5840  00163C  865B               	bsf	_USART_Status,3,c
  5841  00163E  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  5842  001642  5001               	movf	ReadUSART@data,w,c
  5843  001644  0012               	return	
  5844  001646                     __end_of_ReadUSART:
  5845                           	opt stack 0
  5846                           pclatu	equ	0xFFB
  5847                           pclath	equ	0xFFA
  5848                           tblptru	equ	0xFF8
  5849                           tblptrh	equ	0xFF7
  5850                           tblptrl	equ	0xFF6
  5851                           tablat	equ	0xFF5
  5852                           prodh	equ	0xFF4
  5853                           prodl	equ	0xFF3
  5854                           intcon	equ	0xFF2
  5855                           postinc0	equ	0xFEE
  5856                           fsr0h	equ	0xFEA
  5857                           fsr0l	equ	0xFE9
  5858                           wreg	equ	0xFE8
  5859                           postdec1	equ	0xFE5
  5860                           plusw1	equ	0xFE3
  5861                           fsr1h	equ	0xFE2
  5862                           fsr1l	equ	0xFE1
  5863                           indf2	equ	0xFDF
  5864                           plusw2	equ	0xFDB
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _ReadPWMMotorRight *****************
  5870 ;; Defined at:
  5871 ;;		line 38 in file "TimerPWM.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;		None
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  2    0[COMRAM] unsigned int 
  5878 ;; Registers used:
  5879 ;;		None
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5885 ;;      Params:         2       0       0       0       0       0       0
  5886 ;;      Locals:         0       0       0       0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0
  5888 ;;      Totals:         2       0       0       0       0       0       0
  5889 ;;Total ram usage:        2 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		_isr
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text37
  5899  0016A2                     __ptext37:
  5900                           	opt stack 0
  5901  0016A2                     _ReadPWMMotorRight:
  5902                           	opt stack 25
  5903                           
  5904                           ;TimerPWM.c: 39: return PWMRight;
  5905                           
  5906                           ;incstack = 0
  5907  0016A2  C051  F001         	movff	_PWMRight,?_ReadPWMMotorRight
  5908  0016A6  C052  F002         	movff	_PWMRight+1,?_ReadPWMMotorRight+1
  5909  0016AA  0012               	return		;funcret
  5910  0016AC                     __end_of_ReadPWMMotorRight:
  5911                           	opt stack 0
  5912                           pclatu	equ	0xFFB
  5913                           pclath	equ	0xFFA
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           postinc0	equ	0xFEE
  5922                           fsr0h	equ	0xFEA
  5923                           fsr0l	equ	0xFE9
  5924                           wreg	equ	0xFE8
  5925                           postdec1	equ	0xFE5
  5926                           plusw1	equ	0xFE3
  5927                           fsr1h	equ	0xFE2
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           plusw2	equ	0xFDB
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _ReadPWMMotorLeft *****************
  5936 ;; Defined at:
  5937 ;;		line 42 in file "TimerPWM.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2    0[COMRAM] unsigned int 
  5944 ;; Registers used:
  5945 ;;		None
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5951 ;;      Params:         2       0       0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0
  5954 ;;      Totals:         2       0       0       0       0       0       0
  5955 ;;Total ram usage:        2 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_isr
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text38
  5965  0016AC                     __ptext38:
  5966                           	opt stack 0
  5967  0016AC                     _ReadPWMMotorLeft:
  5968                           	opt stack 25
  5969                           
  5970                           ;TimerPWM.c: 43: return PWMLeft;
  5971                           
  5972                           ;incstack = 0
  5973  0016AC  C04F  F001         	movff	_PWMLeft,?_ReadPWMMotorLeft
  5974  0016B0  C050  F002         	movff	_PWMLeft+1,?_ReadPWMMotorLeft+1
  5975  0016B4  0012               	return		;funcret
  5976  0016B6                     __end_of_ReadPWMMotorLeft:
  5977                           	opt stack 0
  5978                           pclatu	equ	0xFFB
  5979                           pclath	equ	0xFFA
  5980                           tblptru	equ	0xFF8
  5981                           tblptrh	equ	0xFF7
  5982                           tblptrl	equ	0xFF6
  5983                           tablat	equ	0xFF5
  5984                           prodh	equ	0xFF4
  5985                           prodl	equ	0xFF3
  5986                           intcon	equ	0xFF2
  5987                           postinc0	equ	0xFEE
  5988                           fsr0h	equ	0xFEA
  5989                           fsr0l	equ	0xFE9
  5990                           wreg	equ	0xFE8
  5991                           postdec1	equ	0xFE5
  5992                           plusw1	equ	0xFE3
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           plusw2	equ	0xFDB
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _ADCGetOutput *****************
  6002 ;; Defined at:
  6003 ;;		line 36 in file "ADC.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  temp            2    4[COMRAM] int 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  2    0[COMRAM] unsigned int 
  6010 ;; Registers used:
  6011 ;;		wreg, status,2, status,0
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6017 ;;      Params:         2       0       0       0       0       0       0
  6018 ;;      Locals:         2       0       0       0       0       0       0
  6019 ;;      Temps:          2       0       0       0       0       0       0
  6020 ;;      Totals:         6       0       0       0       0       0       0
  6021 ;;Total ram usage:        6 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_isr
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text39
  6031  001646                     __ptext39:
  6032                           	opt stack 0
  6033  001646                     _ADCGetOutput:
  6034                           	opt stack 25
  6035                           
  6036                           ;ADC.c: 37: int temp;
  6037                           ;ADC.c: 38: temp = ADRESL;
  6038                           
  6039                           ;incstack = 0
  6040  001646  CFC3 F005          	movff	4035,ADCGetOutput@temp	;volatile
  6041  00164A  6A06               	clrf	ADCGetOutput@temp+1,c
  6042                           
  6043                           ;ADC.c: 39: return temp + (ADRESH << 8);
  6044  00164C  50C4               	movf	4036,w,c	;volatile
  6045  00164E  6E04               	movwf	(??_ADCGetOutput+1)& (0+255),c
  6046  001650  6A03               	clrf	??_ADCGetOutput& (0+255),c
  6047  001652  5005               	movf	ADCGetOutput@temp,w,c
  6048  001654  2403               	addwf	??_ADCGetOutput,w,c
  6049  001656  6E01               	movwf	?_ADCGetOutput,c
  6050  001658  5006               	movf	ADCGetOutput@temp+1,w,c
  6051  00165A  2004               	addwfc	??_ADCGetOutput+1,w,c
  6052  00165C  6E02               	movwf	?_ADCGetOutput+1,c
  6053  00165E  0012               	return	
  6054  001660                     __end_of_ADCGetOutput:
  6055                           	opt stack 0
  6056                           pclatu	equ	0xFFB
  6057                           pclath	equ	0xFFA
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           postinc0	equ	0xFEE
  6066                           fsr0h	equ	0xFEA
  6067                           fsr0l	equ	0xFE9
  6068                           wreg	equ	0xFE8
  6069                           postdec1	equ	0xFE5
  6070                           plusw1	equ	0xFE3
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           plusw2	equ	0xFDB
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           pclatu	equ	0xFFB
  6079                           pclath	equ	0xFFA
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           postinc0	equ	0xFEE
  6088                           fsr0h	equ	0xFEA
  6089                           fsr0l	equ	0xFE9
  6090                           wreg	equ	0xFE8
  6091                           postdec1	equ	0xFE5
  6092                           plusw1	equ	0xFE3
  6093                           fsr1h	equ	0xFE2
  6094                           fsr1l	equ	0xFE1
  6095                           indf2	equ	0xFDF
  6096                           plusw2	equ	0xFDB
  6097                           fsr2h	equ	0xFDA
  6098                           fsr2l	equ	0xFD9
  6099                           status	equ	0xFD8
  6100                           
  6101                           	psect	rparam
  6102  0000                     pclatu	equ	0xFFB
  6103                           pclath	equ	0xFFA
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon	equ	0xFF2
  6111                           postinc0	equ	0xFEE
  6112                           fsr0h	equ	0xFEA
  6113                           fsr0l	equ	0xFE9
  6114                           wreg	equ	0xFE8
  6115                           postdec1	equ	0xFE5
  6116                           plusw1	equ	0xFE3
  6117                           fsr1h	equ	0xFE2
  6118                           fsr1l	equ	0xFE1
  6119                           indf2	equ	0xFDF
  6120                           plusw2	equ	0xFDB
  6121                           fsr2h	equ	0xFDA
  6122                           fsr2l	equ	0xFD9
  6123                           status	equ	0xFD8
  6124                           
  6125                           	psect	temp
  6126  00005C                     btemp:
  6127                           	opt stack 0
  6128  00005C                     	ds	1
  6129  0000                     int$flags	set	btemp
  6130                           pclatu	equ	0xFFB
  6131                           pclath	equ	0xFFA
  6132                           tblptru	equ	0xFF8
  6133                           tblptrh	equ	0xFF7
  6134                           tblptrl	equ	0xFF6
  6135                           tablat	equ	0xFF5
  6136                           prodh	equ	0xFF4
  6137                           prodl	equ	0xFF3
  6138                           intcon	equ	0xFF2
  6139                           postinc0	equ	0xFEE
  6140                           fsr0h	equ	0xFEA
  6141                           fsr0l	equ	0xFE9
  6142                           wreg	equ	0xFE8
  6143                           postdec1	equ	0xFE5
  6144                           plusw1	equ	0xFE3
  6145                           fsr1h	equ	0xFE2
  6146                           fsr1l	equ	0xFE1
  6147                           indf2	equ	0xFDF
  6148                           plusw2	equ	0xFDB
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    0
    Data        64
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      91
    BANK0           160     24      99
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    putsUSART@data	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[9]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_SetDistanceCentral
    _isr->_SetDistanceLeft
    _isr->_SetDistanceRight
    _putsUSART->_WriteUSART
    _SetDistanceRight->___fttol
    _SetDistanceLeft->___fttol
    _SetDistanceCentral->___fttol
    ___ftadd->___ftmul
    _SetBattery->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lwtoft

Critical Paths under _main in BANK0

    _main->_LCDWriteInt
    _SerialInit->_OpenUSART
    _LCDWriteInt->_LCDByte
    _LCDWriteInt->___awdiv
    _LCDInit->_LCDByte
    _Go->_LCDWriteString
    _Go->_SetMotorLeft
    _Go->_SetMotorRight
    _SetMotorRight->_SetPWMMotorRight
    _SetPWMMotorRight->___lwdiv
    _SetMotorLeft->_SetPWMMotorLeft
    _SetPWMMotorLeft->___lwdiv
    _LCDWriteString->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13469
                                             22 BANK0      2     2      0
                            _ADCInit
              _ADCInitiateConversion
                                 _Go
                            _LCDByte
                            _LCDInit
                        _LCDWriteInt
                          _MotorInit
                _ReadDistanceCentral
                         _SerialInit
                       _SetMotorLeft
                      _SetMotorRight
                       _TimerPWMInit
 ---------------------------------------------------------------------------------
 (1) _TimerPWMInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerialInit                                           0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _MotorInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    2453
                                              8 BANK0     14    11      3
                            _LCDByte
                _ReadDistanceCentral (ARG)
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1314
                                              8 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _Go                                                   0     0      0    5585
                            _LCDByte
                     _LCDWriteString
                _ReadDistanceCentral
                   _ReadDistanceLeft
                  _ReadDistanceRight
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (1) _SetMotorRight                                        2     0      2    1340
                                              9 BANK0      2     0      2
                   _SetPWMMotorRight
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorRight                                     2     0      2     504
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorLeft                                         2     0      2    1340
                                              9 BANK0      2     0      2
                    _SetPWMMotorLeft
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorLeft                                      2     0      2     504
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceRight                                    2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceLeft                                     2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadDistanceCentral                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCDWriteString                                       3     1      2    1798
                                              8 BANK0      3     1      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              5     4      1    1107
                                              3 BANK0      5     4      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCInitiateConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 19    19      0   34225
                                             57 COMRAM    19    19      0
                       _ADCGetOutput
                   _ReadPWMMotorLeft
                  _ReadPWMMotorRight
                          _ReadUSART
                         _SetBattery
                 _SetDistanceCentral
                    _SetDistanceLeft
                   _SetDistanceRight
                         _WriteUSART
                          _putsUSART
 ---------------------------------------------------------------------------------
 (6) _putsUSART                                            2     0      2     187
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (7) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SetDistanceRight                                     4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) _SetDistanceLeft                                      4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) _SetDistanceCentral                                   4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3459
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) _SetBattery                                           2     0      2    5874
                                             53 COMRAM     2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) ___lwtoft                                             3     0      3    2309
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             38 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    2971
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (6) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _ReadPWMMotorRight                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _ReadPWMMotorLeft                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _ADCGetOutput                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCInitiateConversion
   _Go
     _LCDByte
       _LCDBusyLoop
     _LCDWriteString
       _LCDByte
         _LCDBusyLoop
     _ReadDistanceCentral
     _ReadDistanceLeft
     _ReadDistanceRight
     _SetMotorLeft
       _SetPWMMotorLeft
         ___lwdiv
         _abs (ARG)
       _abs
     _SetMotorRight
       _SetPWMMotorRight
         ___lwdiv
         _abs (ARG)
       _abs
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     _ReadDistanceCentral (ARG)
     ___awdiv (ARG)
     ___awmod (ARG)
   _MotorInit
   _ReadDistanceCentral
   _SerialInit
     _OpenUSART
   _SetMotorLeft
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _abs
   _SetMotorRight
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
     _abs
   _TimerPWMInit

 _isr (ROOT)
   _ADCGetOutput
   _ReadPWMMotorLeft
   _ReadPWMMotorRight
   _ReadUSART
   _SetBattery
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceCentral
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceLeft
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceRight
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _WriteUSART
   _putsUSART
     _WriteUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      63       5       61.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5B       1       96.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BE      15        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Feb 16 17:07:19 2016

     __size_of_SetPWMMotorRight 0036                    ?_LCDBusyLoop 0001                              _GO 007E11  
                            _Go 0628                    ___awdiv@sign 00A5                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                  ___ftadd@exp1 0026                    ___ftadd@exp2 0025                             ?_Go 0001  
                  ___ftadd@sign 0024                             l223 141C                             l216 145E  
                           l401 1182                             l402 1184                             l403 1190  
                           l404 1192                             l246 132C                             l247 132E  
                           l284 0B14                             l492 158C                             l397 1168  
                           l849 1132                             _GIE 007F97                    __CFG_CPB$OFF 000000  
                           _RC0 007C10                             _RC1 007C11                             _RC2 007C12  
                           _RC3 007C13                             _RC4 007C14                             _RC5 007C15  
                           _RD4 007C1C                             _RD5 007C1D                             _RD6 007C1E  
                  __CFG_CPD$OFF 000000                             _PSA 007EAB               SetMotorLeft@speed 00A9  
                           _abs 156A                             _isr 0008                 __end_of_ADCInit 15E6  
                  __CFG_BORV$18 000000                    ___awmod@sign 00A5       __size_of_ReadPWMMotorLeft 000A  
                           prod 000FF3                             wreg 000FE8                            ??_Go 00AB  
       LCDWriteInt@field_length 00AA                 __end_of_LCDByte 135C                 __end_of_LCDInit 1040  
                  __CFG_LVP$OFF 000000                    ?_LCDWriteInt 00A8                     LCDByte@temp 00A7  
         __size_of_ADCGetOutput 001A                            ?_abs 00A0                            l2042 1452  
                          l2106 116A                            l2052 1410                            l2046 1462  
                          l2056 1420                            l2320 0EBC                            l2312 0E96  
                          l2082 0F7E                            l2066 0F0E                            l2084 0F94  
                          l2332 0F02                            l2324 0EE0                            l2316 0EAA  
                          l2308 0E86                            l2078 0F5A                            l2086 0F9A  
                          l2502 070E                            l2270 0D30                            l2318 0EB6  
                          l2280 0D60                            l2264 0D1A                            l2328 0EEE  
                          l2514 0792                            l2506 073C                            l2098 1158  
                          l2524 0802                            l2276 0D4E                            l2292 0D9E  
                          l2540 0A20                            l2518 07C0                            l2470 1012  
                          l2278 0D5A                            l2296 0DB2                            l2288 0D90  
                          l2552 0A88                            l2474 101C                            l2562 0AEE  
                          l2554 0A8E                            l2546 0A72                            l1908 136A  
                          l2492 069E                            l2556 0AA6                            l2644 1072  
                          l1950 10E2                            l2558 0AD0                            l2654 10A6  
                          l1952 10EE                            l2496 06CC                            l1962 1124  
                          l1954 10F4                            l2658 10BC                            _ADIE 007CEE  
                          _ADIF 007CF6                            ?_isr 0001                            _ADON 007E10  
                          _CHS0 007E12                            _CHS1 007E13                            _CHS2 007E14  
                          _CHS3 007E15                            _ANS0 007BF0                            STR_1 060D  
                          _ANS1 007BF1                            STR_2 0601                            _ANS2 007BF2  
                          STR_3 0616                            _ANS3 007BF3                            STR_4 0618  
                          STR_5 061A                            STR_6 061C                            STR_7 061E  
                          STR_8 0620                            STR_9 0622                            _T0CS 007EAD  
                          u2000 065C                            u2010 0670  __size_of_ADCInitiateConversion 0004  
                          u1300 144E                            u2020 06E0                            u2030 0750  
                          u1320 140C                            u2040 0764                            u2050 07D4  
      __size_of_SetDistanceLeft 0072                            u2061 09E6                            u2257 0FBA  
                          _PEIE 007F96                            u1990 0648                            _RCIF 007CF5  
                          i2l51 0054                            i2l52 00EE                            i2l53 006A  
                          i2l54 0080                            i2l71 0166                            i2l55 009A  
                          i2l47 00F0                            i2l56 00B0                            i2l74 0170  
                          i2l68 0156                            i2l77 0182   __end_of_ADCInitiateConversion 16C0  
                          abs@a 00A0                            _main 1040                    ___ftpack@arg 0001  
                  ___ftpack@exp 0004                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            btemp 005C  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 01BE                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
              ADCGetOutput@temp 0005                    ___ftmul@cntr 0019                    ___param_bank 000010  
                  ___ftmul@sign 001A               ?_ReadDistanceLeft 00A0                    ___fttol@exp1 0035  
                         ??_abs 00A2                    ___fttol@lval 0031                           ??_isr 003A  
            ??_ReadDistanceLeft 00A2                           ?_main 0001                 __end_of___awdiv 0DBC  
               __end_of___ftadd 09DC                           STR_10 0624                 __end_of___awmod 0F0C  
                  LCDInit@style 00A9                     isr@PWMRight 0055                 __end_of___ftmul 0CFE  
               ___awdiv@divisor 00A2                 __end_of___fttol 0C0A                           _T0PS0 007EA8  
                         _T0PS1 007EA9                           _T0PS2 007EAA                 __end_of___lwdiv 113C  
                         i2l414 1596                           i2l427 1636                           i2l709 094E  
                         i2l718 096A                           i2l671 0E4A                           i2l694 0874  
                  _ADCGetOutput 1646                           i2l698 089E                 ___awdiv@counter 00A4  
                         _RCREG 000FAE                           _RCSTA 000FAB                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _SPBRG 000FAF                           _PORTD 000F83  
                         _TRISC 000F94                           _TRISD 000F95                           _TXREG 000FAD  
                         _TXSTA 000FAC                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                 _SetPWMMotorLeft 1534  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                   ___ftpack@sign 0005                           main@i 00B6  
                         tablat 000FF5        __end_of_SetDistanceRight 1222                           plusw1 000FE3  
                         plusw2 000FDB                           status 000FD8                  __CFG_HFOFST$ON 000000  
                   isr@Readport 0057                  __CFG_PBADEN$ON 000000                  WriteUSART@data 0001  
               __initialization 13B2               _ReadDistanceRight 1684                    __end_of_main 10C4  
            ?_ReadDistanceRight 00A0                       ??_ADCInit 00A0         SetDistanceRight@lecture 0036  
                        ??_main 00B6                   ___fttol@sign1 0030                   __activetblptr 000002  
                 LCDByte@isdata 00A3                       ??_LCDByte 00A4                       ??_LCDInit 00A8  
           ??_ReadDistanceRight 00A2                      _SetBattery 147C                          _ADCON1 000FC1  
                        _ADCON2 000FC0                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        _T08BIT 007EAE                ___awdiv@dividend 00A0                __end_of___ftpack 0E6A  
                        i2l2010 0DDA                          i2l2020 0E36                          i2l2012 0DE4  
                        i2l2022 0E40                          i2l2014 0E02                          i2l2006 0DCC  
                        i2l1208 167E                          i2l2018 0E18                          i2l2220 0C5A  
                        i2l2204 09B6                          i2l2214 0C32                          i2l2152 08AC  
                        i2l2234 0C8C                          i2l2146 0882                          i2l2244 0CB4  
                        i2l2180 091A                          i2l2238 0C9C                          i2l2342 0B42  
                        i2l2174 08FE                          i2l2248 0CC4                          i2l2360 0BA8  
                        i2l2176 0908                          i2l2168 08DC                          i2l2370 0BD0  
                        i2l2194 0986                          i2l2186 093C                          i2l2178 0912  
                        i2l2372 0BDC                          i2l2364 0BB8                          i2l2188 0946  
                        i2l2612 013E                          i2l2604 0122                          i2l2620 014C  
                        i2l2374 0BE2                  __CFG_WDTEN$OFF 000000                          i2l2608 0130  
                        i2l2378 0BF8                          i2l2582 0094                          i2l2592 00C2  
                        i2l2588 00B8                          u171_41 0C42                          u148_41 0840  
                        u149_41 0854                          u169_41 0C1A                __end_of___lwtoft 160A  
                        u187_41 0B26              __size_of_ReadUSART 001E                          _TMR0IE 007F95  
                        _TMR0IF 007F92                          _TMR0ON 007EAF                          _SPBRGH 000FB0  
                        _TRISA0 007C90                          _TRISA1 007C91                          _TRISA2 007C92  
                        _TRISA3 007C93              SetMotorRight@speed 00A9                      _SerialInit 1660  
             ??_SetDistanceLeft 0038       __end_of_ReadDistanceRight 168E                  __CFG_XINST$OFF 000000  
                _LCDWriteString 0F0C                 _DistanceCentral 00BD              __size_of_OpenUSART 0074  
              _SetPWMMotorRight 14FE                       ??___awdiv 00A4                       ??___ftadd 0021  
                __CFG_STVREN$ON 000000                       ??___awmod 00A4                       ??___ftmul 0012  
                     ??___fttol 002B                       ??___lwdiv 00A4            __size_of_LCDBusyLoop 0056  
                        clear_0 13B8                          clear_1 13C4                ___awdiv@quotient 00A6  
               ___awmod@divisor 00A2         __end_of_SetPWMMotorLeft 156A                 ___awmod@counter 00A4  
    __end_of_SetDistanceCentral 1306              __size_of_MotorInit 0006           ___ftmul@f3_as_product 0016  
              _ReadPWMMotorLeft 16AC                    LCDWriteInt@i 00B4                    LCDWriteInt@j 00B2  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8            __size_of_LCDWriteInt 013A                      __accesstop 0060  
       __end_of__initialization 13EA                      ___ftadd@f1 001B                      ___ftadd@f2 001E  
        __end_of_LCDWriteString 0FAE                   ___rparam_used 000001                       LCDByte@hn 00A4  
                     LCDByte@ln 00A5                   ?_SetMotorLeft 00A9                      ___ftmul@f1 000C  
                    ___ftmul@f2 000F                      ___fttol@f1 0027                      _WriteUSART 1672  
                __pcstackCOMRAM 0001                    __pidataBANK0 14BE                      __end_of_Go 0830  
             __end_of_ReadUSART 1646                      ___lwtoft@c 0009                     ?_SetBattery 0036  
  __size_of_ReadDistanceCentral 000A                   ReadUSART@data 0001               __end_of_OpenUSART 11B0  
                    __pbssBANK0 00B8               __end_of_MotorInit 16BC                  ??_SetMotorLeft 00AB  
               ?_LCDWriteString 00A8                     ?_SerialInit 0001      __size_of_ReadDistanceRight 000A  
                 putsUSART@data 0002                         _ADCInit 15C2                       ?___ftpack 0001  
                 ?_TimerPWMInit 0001                ?_SetPWMMotorLeft 00A7                       ?___lwtoft 0009  
                       _LCDByte 1306                         _LCDInit 0FAE          __size_of_SetMotorRight 0042  
     __size_of_ReadDistanceLeft 000A              __size_of_putsUSART 002C                         _PWMLeft 004F  
                       _Battery 004D               ?_SetDistanceRight 0036                    isr@iteration 0059  
         _ADCInitiateConversion 16BC              ??_SetDistanceRight 0038                         __Hparam 0000  
                       __Lparam 0000                    _DistanceLeft 00BF                     ?_WriteUSART 0001  
           __size_of_SetBattery 0042                         ___cgram 0060                         ___awdiv 0CFE  
                       ___ftadd 0830                         ___awmod 0E6A                         ___ftmul 0C0A  
                       ___fttol 0B16                         ___lwdiv 10C4                    __psmallconst 0600  
                ??_TimerPWMInit 00A0                         __pcinit 13B2                      ??___ftpack 0006  
                       __ramtop 0600                         __ptext0 1040                         __ptext1 160A  
                       __ptext2 1660                         __ptext3 113C                         __ptext4 16B6  
                       __ptext5 09DC                         __ptext6 0E6A                         __ptext7 0CFE  
                       __ptext8 0FAE                         __ptext9 0628                      ??___lwtoft 000C  
                  __size_of_abs 002C                    __size_of_isr 01B6                ___awmod@dividend 00A0  
           __size_of_SerialInit 0012               SetBattery@lecture 0036        __end_of_SetPWMMotorRight 1534  
               _SetDistanceLeft 1222            end_of_initialization 13EA                         isr@read 004B  
                 __Lmediumconst 0000               _ReadPWMMotorRight 16A2                   _SetMotorRight 13F8  
      __end_of_ReadPWMMotorLeft 16B6              ?_ReadPWMMotorRight 0001                       _RCSTAbits 000FAB  
                       postdec1 000FE5                         postinc0 000FEE               __end_of_putsUSART 15C2  
    SetPWMMotorRight@percentage 00A7             ??_ReadPWMMotorRight 0003               LCDWriteString@msg 00A8  
          __end_of_SetMotorLeft 147C                       _TRISCbits 000F94                       _TRISDbits 000F95  
           __size_of_WriteUSART 0012              _SetDistanceCentral 1294          ?_ADCInitiateConversion 0001  
     __end_of_ReadPWMMotorRight 16AC                      LCDInit@__i 00AA                       _TXSTAbits 000FAC  
                ?_SetMotorRight 00A9             ?_SetDistanceCentral 0036                     ___ftmul@exp 0015  
           _ReadDistanceCentral 1698                   ??_LCDBusyLoop 00A0                      isr@PWMLeft 0053  
       __end_of_SetDistanceLeft 1294            ??_SetDistanceCentral 0038             start_initialization 13B2  
                  ??_SetBattery 0038                       _ReadUSART 1628            ?_ReadDistanceCentral 00A0  
              _ReadDistanceLeft 168E                     __end_of_abs 1596                     __end_of_isr 01BE  
                 ??_LCDWriteInt 00AB                ??_LCDWriteString 00AA                       _OpenUSART 113C  
          __end_of_TimerPWMInit 1628                    ??_SerialInit 00A3                       _MotorInit 16B6  
            __end_of_SetBattery 14BE                     __pdataBANK0 0060                __CFG_LPT1OSC$OFF 000000  
                      ?_ADCInit 0001             __end_of_LCDBusyLoop 13B2                   ?_ADCGetOutput 0001  
                      ?_LCDByte 00A3                        ?_LCDInit 0001               __size_of___ftpack 00AE  
                   __pbssCOMRAM 004D                        LCDByte@c 00A6           ??_ReadDistanceCentral 00A2  
                    ?_ReadUSART 0001               __size_of___lwtoft 0024                   __pcstackBANK0 00A0  
            __end_of_SerialInit 1672       SetDistanceCentral@lecture 0036      __size_of_ReadPWMMotorRight 000A  
                    ?_OpenUSART 00A0                LCDWriteInt@F4236 00B8                 ??_SetMotorRight 00AB  
           __end_of_LCDWriteInt 0B16                ___lwdiv@dividend 00A0               __CFG_CCP2MX$PORTC 000000  
                    ?_MotorInit 0001                    ??_WriteUSART 0001                       __pintcode 0008  
                      ?___awdiv 00A0                        ?___ftadd 001B                        ?___awmod 00A0  
                      ?___ftmul 000C                        ?___fttol 0027                        ?___lwdiv 00A0  
         __size_of_SetMotorLeft 0042       __size_of_SetDistanceRight 0072                  ??_ADCGetOutput 0003  
                   __smallconst 0600                ?_SetDistanceLeft 0036                 LCDBusyLoop@busy 00A0  
               LCDBusyLoop@temp 00A1                ___lwdiv@quotient 00A4        __size_of_SetPWMMotorLeft 0036  
             ?_SetPWMMotorRight 00A7              __end_of_WriteUSART 1684                     __size_of_Go 0208  
            ??_SetPWMMotorRight 00A9                        _PIE1bits 000F9D                    _SetMotorLeft 143A  
                      _PIR1bits 000F9E               ?_ReadPWMMotorLeft 0001                        i2u189_40 0B60  
                      i2u189_45 0B58                __CFG_WDTPS$32768 000000                     _LCDBusyLoop 135C  
            ??_ReadPWMMotorLeft 0003                LCDWriteString@cc 00AA                __size_of_ADCInit 0024  
                     _putsUSART 1596                        _PWMRight 0051                     ??_ReadUSART 0001  
              __size_of_LCDByte 0056                __size_of_LCDInit 0092           __size_of_TimerPWMInit 001E  
       ??_ADCInitiateConversion 00A0                     _LCDWriteInt 09DC                       isr@CharRx 004A  
                     copy_data0 13DE          SetDistanceLeft@lecture 0036                     ??_OpenUSART 00A2  
               OpenUSART@config 00A2                        __Hrparam 0000                     ??_MotorInit 00A0  
                      __Lrparam 0000        __end_of_ReadDistanceLeft 1698              __CFG_BOREN$SBORDIS 000000  
                 _DistanceRight 00C1                __size_of___awdiv 00BE                __size_of___ftadd 01AC  
              __size_of___awmod 00A2                __size_of___ftmul 00F4                __size_of___fttol 00F4  
             LCDBusyLoop@status 00A2                __size_of___lwdiv 0078                        ___ftpack 0DBC  
                    ?_putsUSART 0002                    _TimerPWMInit 160A                        ___lwtoft 15E6  
               ___lwdiv@divisor 00A2                 ___lwdiv@counter 00A6                        __ptext10 13F8  
                      __ptext11 14FE                        __ptext20 1306                        __ptext12 143A  
                      __ptext21 135C                        __ptext13 156A                        __ptext30 0830  
                      __ptext22 16BC                        __ptext14 1534                        __ptext31 147C  
                      __ptext23 15C2                        __ptext15 10C4                        __ptext32 15E6  
                      __ptext16 1684                        __ptext33 0B16                        __ptext25 1596  
                      __ptext17 168E                        __ptext34 0C0A                        __ptext26 1672  
                      __ptext18 1698                        __ptext35 0DBC                        __ptext27 11B0  
                      __ptext19 0F0C                        __ptext36 1628                        __ptext28 1222  
                      __ptext37 16A2                        __ptext29 1294                        __ptext38 16AC  
                      __ptext39 1646                   __size_of_main 0084            __end_of_ADCGetOutput 1660  
             ??_SetPWMMotorLeft 00A9                        int$flags 005C                _SetDistanceRight 11B0  
   __size_of_SetDistanceCentral 0072                  OpenUSART@spbrg 00A0       SetPWMMotorLeft@percentage 00A7  
                      intlevel2 0000                  LCDWriteInt@val 00A8                  LCDWriteInt@str 00AD  
   __end_of_ReadDistanceCentral 16A2                     ??_putsUSART 0004               __CFG_FOSC$INTIO67 000000  
         __end_of_SetMotorRight 143A                    _USART_Status 005B         __size_of_LCDWriteString 00A2  
