

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 14 14:41:01 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataBANK0
    70  001458                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for ___cgram
    74  001458  0C                 	db	12
    75  001459  12                 	db	18
    76  00145A  12                 	db	18
    77  00145B  0C                 	db	12
    78  00145C  00                 	db	0
    79  00145D  00                 	db	0
    80  00145E  00                 	db	0
    81  00145F  00                 	db	0
    82  001460  00                 	db	0
    83  001461  04                 	db	4
    84  001462  0E                 	db	14
    85  001463  1F                 	db	31
    86  001464  0E                 	db	14
    87  001465  04                 	db	4
    88  001466  00                 	db	0
    89  001467  00                 	db	0
    90  001468  04                 	db	4
    91  001469  04                 	db	4
    92  00146A  04                 	db	4
    93  00146B  04                 	db	4
    94  00146C  1F                 	db	31
    95  00146D  0E                 	db	14
    96  00146E  04                 	db	4
    97  00146F  00                 	db	0
    98  001470  0A                 	db	10
    99  001471  15                 	db	21
   100  001472  11                 	db	17
   101  001473  0A                 	db	10
   102  001474  04                 	db	4
   103  001475  00                 	db	0
   104  001476  00                 	db	0
   105  001477  00                 	db	0
   106  001478  0A                 	db	10
   107  001479  1F                 	db	31
   108  00147A  1F                 	db	31
   109  00147B  0E                 	db	14
   110  00147C  04                 	db	4
   111  00147D  00                 	db	0
   112  00147E  00                 	db	0
   113  00147F  00                 	db	0
   114  001480  00                 	db	0
   115  001481  00                 	db	0
   116  001482  00                 	db	0
   117  001483  00                 	db	0
   118  001484  00                 	db	0
   119  001485  00                 	db	0
   120  001486  00                 	db	0
   121  001487  00                 	db	0
   122  001488  00                 	db	0
   123  001489  00                 	db	0
   124  00148A  00                 	db	0
   125  00148B  00                 	db	0
   126  00148C  00                 	db	0
   127  00148D  00                 	db	0
   128  00148E  00                 	db	0
   129  00148F  00                 	db	0
   130  001490  00                 	db	0
   131  001491  00                 	db	0
   132  001492  00                 	db	0
   133  001493  00                 	db	0
   134  001494  00                 	db	0
   135  001495  00                 	db	0
   136  001496  00                 	db	0
   137  001497  00                 	db	0
   138                           
   139                           ;initializer for _DistanceCentral
   140  001498  0032               	dw	50
   141                           
   142                           ;initializer for _DistanceLeft
   143  00149A  0032               	dw	50
   144                           
   145                           ;initializer for _DistanceRight
   146  00149C  0032               	dw	50
   147                           
   148                           	psect	nvBANK0
   149  0000D4                     __pnvBANK0:
   150                           	opt stack 0
   151  0000D4                     _MotorLeftSpeed:
   152                           	opt stack 0
   153  0000D4                     	ds	2
   154  0000D6                     _PWMLeft:
   155                           	opt stack 0
   156  0000D6                     	ds	2
   157  0000D8                     _PWMRight:
   158                           	opt stack 0
   159  0000D8                     	ds	2
   160  0000                     _ADCON1	set	4033
   161  0000                     _ADCON2	set	4032
   162  0000                     _ADRESH	set	4036
   163  0000                     _ADRESL	set	4035
   164  0000                     _ANSELH	set	3967
   165  0000                     _PORTB	set	3969
   166  0000                     _PORTD	set	3971
   167  0000                     _RCREG	set	4014
   168  0000                     _RCSTAbits	set	4011
   169  0000                     _TMR0H	set	4055
   170  0000                     _TMR0L	set	4054
   171  0000                     _TRISB	set	3987
   172  0000                     _TRISC	set	3988
   173  0000                     _TRISD	set	3989
   174  0000                     _TRISDbits	set	3989
   175  0000                     _TXREG	set	4013
   176  0000                     _TXSTAbits	set	4012
   177  0000                     _ADIE	set	31982
   178  0000                     _ADIF	set	31990
   179  0000                     _ADON	set	32272
   180  0000                     _ANS0	set	31728
   181  0000                     _ANS1	set	31729
   182  0000                     _ANS2	set	31730
   183  0000                     _ANS3	set	31731
   184  0000                     _CHS0	set	32274
   185  0000                     _CHS1	set	32275
   186  0000                     _CHS2	set	32276
   187  0000                     _CHS3	set	32277
   188  0000                     _GIE	set	32663
   189  0000                     _GO	set	32273
   190  0000                     _PEIE	set	32662
   191  0000                     _PSA	set	32427
   192  0000                     _RC0	set	31760
   193  0000                     _RC1	set	31761
   194  0000                     _RC2	set	31762
   195  0000                     _RC3	set	31763
   196  0000                     _RC4	set	31764
   197  0000                     _RC5	set	31765
   198  0000                     _RCIF	set	31989
   199  0000                     _RD4	set	31772
   200  0000                     _RD5	set	31773
   201  0000                     _RD6	set	31774
   202  0000                     _T08BIT	set	32430
   203  0000                     _T0CS	set	32429
   204  0000                     _T0PS0	set	32424
   205  0000                     _T0PS1	set	32425
   206  0000                     _T0PS2	set	32426
   207  0000                     _TMR0IE	set	32661
   208  0000                     _TMR0IF	set	32658
   209  0000                     _TMR0ON	set	32431
   210  0000                     _TRISA0	set	31888
   211  0000                     _TRISA1	set	31889
   212  0000                     _TRISA2	set	31890
   213  0000                     _TRISA3	set	31891
   214                           
   215                           	psect	smallconst
   216  000600                     __psmallconst:
   217                           	opt stack 0
   218  000600  00                 	db	0
   219  000601                     STR_2:
   220  000601  0A                 	db	10
   221  000602  0D                 	db	13
   222  000603  0A                 	db	10
   223  000604  0D                 	db	13
   224  000605  57                 	db	87	;'W'
   225  000606  72                 	db	114	;'r'
   226  000607  69                 	db	105	;'i'
   227  000608  74                 	db	116	;'t'
   228  000609  65                 	db	101	;'e'
   229  00060A  3A                 	db	58	;':'
   230  00060B  20                 	db	32
   231  00060C  00                 	db	0
   232  00060D                     STR_1:
   233  00060D  0A                 	db	10
   234  00060E  0D                 	db	13
   235  00060F  45                 	db	69	;'E'
   236  000610  63                 	db	99	;'c'
   237  000611  68                 	db	104	;'h'
   238  000612  6F                 	db	111	;'o'
   239  000613  3A                 	db	58	;':'
   240  000614  20                 	db	32
   241  000615  00                 	db	0
   242                           
   243                           ; #config settings
   244  000616  00                 	db	0	; dummy byte at the end
   245  0000                     
   246                           	psect	cinit
   247  00149E                     __pcinit:
   248                           	opt stack 0
   249  00149E                     start_initialization:
   250                           	opt stack 0
   251  00149E                     __initialization:
   252                           	opt stack 0
   253                           
   254                           ; Clear objects allocated to BANK0 (13 bytes)
   255  00149E  EE00  F0C7         	lfsr	0,__pbssBANK0
   256  0014A2  0E0D               	movlw	13
   257  0014A4                     clear_0:
   258  0014A4  6AEE               	clrf	postinc0,c
   259  0014A6  06E8               	decf	wreg,f,c
   260  0014A8  E1FD               	bnz	clear_0
   261                           
   262                           ; Clear objects allocated to COMRAM (17 bytes)
   263  0014AA  EE00  F04D         	lfsr	0,__pbssCOMRAM
   264  0014AE  0E11               	movlw	17
   265  0014B0                     clear_1:
   266  0014B0  6AEE               	clrf	postinc0,c
   267  0014B2  06E8               	decf	wreg,f,c
   268  0014B4  E1FD               	bnz	clear_1
   269                           
   270                           ; Initialize objects allocated to BANK0 (70 bytes)
   271                           ; load TBLPTR registers with __pidataBANK0
   272  0014B6  0E58               	movlw	low __pidataBANK0
   273  0014B8  6EF6               	movwf	tblptrl,c
   274  0014BA  0E14               	movlw	high __pidataBANK0
   275  0014BC  6EF7               	movwf	tblptrh,c
   276  0014BE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   277  0014C0  6EF8               	movwf	tblptru,c
   278  0014C2  EE00  F060         	lfsr	0,__pdataBANK0
   279  0014C6  EE10 F046          	lfsr	1,70
   280  0014CA                     copy_data0:
   281  0014CA  0009               	tblrd		*+
   282  0014CC  CFF5 FFEE          	movff	tablat,postinc0
   283  0014D0  50E5               	movf	postdec1,w,c
   284  0014D2  50E1               	movf	fsr1l,w,c
   285  0014D4  E1FA               	bnz	copy_data0
   286  0014D6                     end_of_initialization:
   287                           	opt stack 0
   288  0014D6                     __end_of__initialization:
   289                           	opt stack 0
   290  0014D6  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   291  0014D8  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   292  0014DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   293  0014DC  6EF8               	movwf	tblptru,c
   294  0014DE  0100               	movlb	0
   295  0014E0  EFD9  F00A         	goto	_main	;jump to C main() function
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	bssCOMRAM
   306  00004D                     __pbssCOMRAM:
   307                           	opt stack 0
   308  00004D                     _Battery:
   309                           	opt stack 0
   310  00004D                     	ds	2
   311  00004F                     _SpeedLeft:
   312                           	opt stack 0
   313  00004F                     	ds	2
   314  000051                     _SpeedRight:
   315                           	opt stack 0
   316  000051                     	ds	2
   317  000053                     isr@PWMLeft:
   318                           	opt stack 0
   319  000053                     	ds	2
   320  000055                     isr@PWMRight:
   321                           	opt stack 0
   322  000055                     	ds	2
   323  000057                     isr@Readport:
   324                           	opt stack 0
   325  000057                     	ds	2
   326  000059                     isr@counter:
   327                           	opt stack 0
   328  000059                     	ds	2
   329  00005B                     isr@iteration:
   330                           	opt stack 0
   331  00005B                     	ds	2
   332  00005D                     _USART_Status:
   333                           	opt stack 0
   334  00005D                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	bssBANK0
   345  0000C7                     __pbssBANK0:
   346                           	opt stack 0
   347  0000C7                     LCDWriteInt@F4236:
   348                           	opt stack 0
   349  0000C7                     	ds	5
   350  0000CC                     _Mode:
   351                           	opt stack 0
   352  0000CC                     	ds	2
   353  0000CE                     _MotorRightSpeed:
   354                           	opt stack 0
   355  0000CE                     	ds	2
   356  0000D0                     parallel@SpeedLeft:
   357                           	opt stack 0
   358  0000D0                     	ds	2
   359  0000D2                     parallel@SpeedRight:
   360                           	opt stack 0
   361  0000D2                     	ds	2
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	dataBANK0
   372  000060                     __pdataBANK0:
   373                           	opt stack 0
   374  000060                     ___cgram:
   375                           	opt stack 0
   376  000060                     	ds	64
   377  0000A0                     _DistanceCentral:
   378                           	opt stack 0
   379  0000A0                     	ds	2
   380  0000A2                     _DistanceLeft:
   381                           	opt stack 0
   382  0000A2                     	ds	2
   383  0000A4                     _DistanceRight:
   384                           	opt stack 0
   385  0000A4                     	ds	2
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	cstackBANK0
   396  0000A6                     __pcstackBANK0:
   397                           	opt stack 0
   398  0000A6                     ?_abs:
   399                           	opt stack 0
   400  0000A6                     ?_ReadMode:
   401                           	opt stack 0
   402  0000A6                     ?_ReadParallelSpeedLeft:
   403                           	opt stack 0
   404  0000A6                     ?_ReadParallelSpeedRight:
   405                           	opt stack 0
   406  0000A6                     ?_ConvertParallelSpeed:
   407                           	opt stack 0
   408  0000A6                     ?_ReadDistanceLeft:
   409                           	opt stack 0
   410  0000A6                     ?_ReadDistanceRight:
   411                           	opt stack 0
   412  0000A6                     ?_ReadDistanceCentral:
   413                           	opt stack 0
   414  0000A6                     ?___awdiv:
   415                           	opt stack 0
   416  0000A6                     ?___awmod:
   417                           	opt stack 0
   418  0000A6                     ?___lwdiv:
   419                           	opt stack 0
   420  0000A6                     LCDBusyLoop@busy:
   421                           	opt stack 0
   422  0000A6                     abs@a:
   423                           	opt stack 0
   424  0000A6                     ___awdiv@dividend:
   425                           	opt stack 0
   426  0000A6                     ___awmod@dividend:
   427                           	opt stack 0
   428  0000A6                     ___lwdiv@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x0
   432  0000A6                     	ds	1
   433  0000A7                     LCDBusyLoop@temp:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x1
   437  0000A7                     	ds	1
   438  0000A8                     ??_abs:
   439  0000A8                     LCDBusyLoop@status:
   440                           	opt stack 0
   441  0000A8                     ConvertParallelSpeed@velocity:
   442                           	opt stack 0
   443  0000A8                     ___awdiv@divisor:
   444                           	opt stack 0
   445  0000A8                     ___awmod@divisor:
   446                           	opt stack 0
   447  0000A8                     ___lwdiv@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x2
   451  0000A8                     	ds	1
   452  0000A9                     LCDByte@isdata:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x3
   456  0000A9                     	ds	1
   457  0000AA                     LCDByte@hn:
   458                           	opt stack 0
   459  0000AA                     ___awdiv@counter:
   460                           	opt stack 0
   461  0000AA                     ___awmod@counter:
   462                           	opt stack 0
   463  0000AA                     ___lwdiv@quotient:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x4
   467  0000AA                     	ds	1
   468  0000AB                     LCDByte@ln:
   469                           	opt stack 0
   470  0000AB                     ___awdiv@sign:
   471                           	opt stack 0
   472  0000AB                     ___awmod@sign:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x5
   476  0000AB                     	ds	1
   477  0000AC                     LCDByte@c:
   478                           	opt stack 0
   479  0000AC                     ___lwdiv@counter:
   480                           	opt stack 0
   481  0000AC                     ___awdiv@quotient:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x6
   485  0000AC                     	ds	1
   486  0000AD                     LCDByte@temp:
   487                           	opt stack 0
   488  0000AD                     SetPWMMotorLeft@percentage:
   489                           	opt stack 0
   490  0000AD                     SetPWMMotorRight@percentage:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x7
   494  0000AD                     	ds	1
   495  0000AE                     ??_LCDInit:
   496  0000AE                     LCDGotoXY@y:
   497                           	opt stack 0
   498  0000AE                     LCDWriteInt@val:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x8
   502  0000AE                     	ds	1
   503  0000AF                     LCDInit@style:
   504                           	opt stack 0
   505  0000AF                     LCDGotoXY@x:
   506                           	opt stack 0
   507  0000AF                     SetMotorLeft@speed:
   508                           	opt stack 0
   509  0000AF                     SetMotorRight@speed:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x9
   513  0000AF                     	ds	1
   514  0000B0                     LCDInit@__i:
   515                           	opt stack 0
   516  0000B0                     LCDWriteInt@field_length:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0xA
   520  0000B0                     	ds	1
   521  0000B1                     ??_TurnRight135:
   522  0000B1                     ??_TurnLeft135:
   523  0000B1                     ??_TurnLeft90:
   524  0000B1                     ??_TurnRight90:
   525  0000B1                     ??_LCDWriteInt:
   526                           
   527                           ; 1 bytes @ 0xB
   528  0000B1                     	ds	2
   529  0000B3                     LCDWriteInt@str:
   530                           	opt stack 0
   531                           
   532                           ; 5 bytes @ 0xD
   533  0000B3                     	ds	5
   534  0000B8                     LCDWriteInt@j:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x12
   538  0000B8                     	ds	2
   539  0000BA                     LCDWriteInt@i:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x14
   543  0000BA                     	ds	2
   544  0000BC                     ReadParallel@temp:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x16
   548  0000BC                     	ds	2
   549  0000BE                     ReadParallel@lecture:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x18
   553  0000BE                     	ds	1
   554  0000BF                     ReadParallel@right:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x19
   558  0000BF                     	ds	1
   559  0000C0                     ReadParallel@left:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x1A
   563  0000C0                     	ds	1
   564  0000C1                     ??_Go:
   565                           
   566                           ; 1 bytes @ 0x1B
   567  0000C1                     	ds	2
   568  0000C3                     Go@SpeedLeft:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x1D
   572  0000C3                     	ds	2
   573  0000C5                     Go@SpeedRight:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x1F
   577  0000C5                     	ds	2
   578  0000C7                     tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           ; 1 bytes @ 0x21
   588                           
   589                           	psect	cstackCOMRAM
   590  000001                     __pcstackCOMRAM:
   591                           	opt stack 0
   592  000001                     ?_ADCGetOutput:
   593                           	opt stack 0
   594  000001                     ?_ReadPWMMotorRight:
   595                           	opt stack 0
   596  000001                     ?_ReadPWMMotorLeft:
   597                           	opt stack 0
   598  000001                     ?_ConvertPicSpeed:
   599                           	opt stack 0
   600  000001                     ?___ftpack:
   601                           	opt stack 0
   602  000001                     ReadUSART@data:
   603                           	opt stack 0
   604  000001                     WriteUSART@data:
   605                           	opt stack 0
   606  000001                     ___ftpack@arg:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x0
   610  000001                     	ds	1
   611  000002                     putsUSART@data:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x1
   615  000002                     	ds	1
   616  000003                     ??_ADCGetOutput:
   617  000003                     ConvertPicSpeed@velocity:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x2
   621  000003                     	ds	1
   622  000004                     SetSpeedRight@lecture:
   623                           	opt stack 0
   624  000004                     SetSpeedLeft@lecture:
   625                           	opt stack 0
   626  000004                     ___ftpack@exp:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x3
   630  000004                     	ds	1
   631  000005                     ___ftpack@sign:
   632                           	opt stack 0
   633  000005                     ADCGetOutput@temp:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x4
   637  000005                     	ds	1
   638  000006                     ??___ftpack:
   639                           
   640                           ; 1 bytes @ 0x5
   641  000006                     	ds	3
   642  000009                     ?___lwtoft:
   643                           	opt stack 0
   644  000009                     ___lwtoft@c:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x8
   648  000009                     	ds	3
   649  00000C                     ?___ftmul:
   650                           	opt stack 0
   651  00000C                     ___ftmul@f1:
   652                           	opt stack 0
   653                           
   654                           ; 3 bytes @ 0xB
   655  00000C                     	ds	3
   656  00000F                     ___ftmul@f2:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0xE
   660  00000F                     	ds	3
   661  000012                     ??___ftmul:
   662                           
   663                           ; 1 bytes @ 0x11
   664  000012                     	ds	3
   665  000015                     ___ftmul@exp:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x14
   669  000015                     	ds	1
   670  000016                     ___ftmul@f3_as_product:
   671                           	opt stack 0
   672                           
   673                           ; 3 bytes @ 0x15
   674  000016                     	ds	3
   675  000019                     ___ftmul@cntr:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x18
   679  000019                     	ds	1
   680  00001A                     ___ftmul@sign:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x19
   684  00001A                     	ds	1
   685  00001B                     ?___ftadd:
   686                           	opt stack 0
   687  00001B                     ___ftadd@f1:
   688                           	opt stack 0
   689                           
   690                           ; 3 bytes @ 0x1A
   691  00001B                     	ds	3
   692  00001E                     ___ftadd@f2:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x1D
   696  00001E                     	ds	3
   697  000021                     ??___ftadd:
   698                           
   699                           ; 1 bytes @ 0x20
   700  000021                     	ds	3
   701  000024                     ___ftadd@sign:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x23
   705  000024                     	ds	1
   706  000025                     ___ftadd@exp2:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x24
   710  000025                     	ds	1
   711  000026                     ___ftadd@exp1:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x25
   715  000026                     	ds	1
   716  000027                     ?___fttol:
   717                           	opt stack 0
   718  000027                     ___fttol@f1:
   719                           	opt stack 0
   720                           
   721                           ; 3 bytes @ 0x26
   722  000027                     	ds	4
   723  00002B                     ??___fttol:
   724                           
   725                           ; 1 bytes @ 0x2A
   726  00002B                     	ds	5
   727  000030                     ___fttol@sign1:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x2F
   731  000030                     	ds	1
   732  000031                     ___fttol@lval:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x30
   736  000031                     	ds	4
   737  000035                     ___fttol@exp1:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0x34
   741  000035                     	ds	1
   742  000036                     SetDistanceLeft@lecture:
   743                           	opt stack 0
   744  000036                     SetDistanceRight@lecture:
   745                           	opt stack 0
   746  000036                     SetDistanceCentral@lecture:
   747                           	opt stack 0
   748  000036                     SetBattery@lecture:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x35
   752  000036                     	ds	2
   753  000038                     ??_SetDistanceLeft:
   754  000038                     ??_SetDistanceCentral:
   755  000038                     ??_SetDistanceRight:
   756  000038                     
   757                           ; 1 bytes @ 0x37
   758  000038                     	ds	2
   759  00003A                     ??_isr:
   760                           
   761                           ; 1 bytes @ 0x39
   762  00003A                     	ds	16
   763  00004A                     isr@read:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x49
   767  00004A                     	ds	2
   768  00004C                     isr@CharRx:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x4B
   772  00004C                     	ds	1
   773                           tblptru	equ	0xFF8
   774                           tblptrh	equ	0xFF7
   775                           tblptrl	equ	0xFF6
   776                           tablat	equ	0xFF5
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1l	equ	0xFE1
   781                           
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 11 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   801 ;;      Params:         0       0       0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0       0       0
   803 ;;      Temps:          0       0       0       0       0       0       0
   804 ;;      Totals:         0       0       0       0       0       0       0
   805 ;;Total ram usage:        0 bytes
   806 ;; Hardware stack levels required when called:    9
   807 ;; This function calls:
   808 ;;		_ADCInit
   809 ;;		_ADCInitiateConversion
   810 ;;		_Go
   811 ;;		_LCDInit
   812 ;;		_MotorInit
   813 ;;		_SetMotorLeft
   814 ;;		_SetMotorRight
   815 ;;		_TimerPWMInit
   816 ;;		_parallelInit
   817 ;; This function is called by:
   818 ;;		Startup code after reset
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text0
   823  0015B2                     __ptext0:
   824                           	opt stack 0
   825  0015B2                     _main:
   826                           	opt stack 22
   827                           
   828                           ;main.c: 13: ADCInit();
   829                           
   830                           ;incstack = 0
   831  0015B2  ECD6  F00B         	call	_ADCInit	;wreg free
   832                           
   833                           ;main.c: 18: MotorInit();
   834  0015B6  ECC1  F00B         	call	_MotorInit	;wreg free
   835                           
   836                           ;main.c: 20: TimerPWMInit();
   837  0015BA  ECFA  F00B         	call	_TimerPWMInit	;wreg free
   838                           
   839                           ;main.c: 21: SetMotorLeft(0);
   840  0015BE  0E00               	movlw	0
   841  0015C0  0100               	movlb	0	; () banked
   842  0015C2  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
   843  0015C4  0E00               	movlw	0
   844  0015C6  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
   845  0015C8  EC95  F00A         	call	_SetMotorLeft	;wreg free
   846                           
   847                           ;main.c: 22: SetMotorRight(0);
   848  0015CC  0E00               	movlw	0
   849  0015CE  0100               	movlb	0	; () banked
   850  0015D0  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
   851  0015D2  0E00               	movlw	0
   852  0015D4  6FAF               	movwf	SetMotorRight@speed& (0+255),b
   853  0015D6  EC72  F00A         	call	_SetMotorRight	;wreg free
   854                           
   855                           ;main.c: 23: LCDInit(0B00000000);
   856  0015DA  0E00               	movlw	0
   857  0015DC  EC7E  F008         	call	_LCDInit
   858                           
   859                           ;main.c: 24: parallelInit();
   860  0015E0  EC68  F00C         	call	_parallelInit	;wreg free
   861  0015E4                     l3185:
   862                           
   863                           ;main.c: 30: ADCInitiateConversion();
   864  0015E4  EC6C  F00C         	call	_ADCInitiateConversion	;wreg free
   865                           
   866                           ;main.c: 31: Go();
   867  0015E8  ECE2  F003         	call	_Go	;wreg free
   868  0015EC  D7FB               	goto	l3185
   869  0015EE                     __end_of_main:
   870                           	opt stack 0
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880 ;; *************** function _parallelInit *****************
   881 ;; Defined at:
   882 ;;		line 21 in file "parallel.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, status,2
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   896 ;;      Params:         0       0       0       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0       0       0
   899 ;;      Totals:         0       0       0       0       0       0       0
   900 ;;Total ram usage:        0 bytes
   901 ;; Hardware stack levels used:    1
   902 ;; Hardware stack levels required when called:    4
   903 ;; This function calls:
   904 ;;		Nothing
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           	psect	text1
   911  0018D0                     __ptext1:
   912                           	opt stack 0
   913  0018D0                     _parallelInit:
   914                           	opt stack 26
   915                           
   916                           ;parallel.c: 24: TRISB=0b11111111;
   917                           
   918                           ;incstack = 0
   919  0018D0  6893               	setf	3987,c	;volatile
   920                           
   921                           ;parallel.c: 26: ANSELH=0b00000000;
   922  0018D2  0E00               	movlw	0
   923  0018D4  6E7F               	movwf	3967,c	;volatile
   924  0018D6  0012               	return		;funcret
   925  0018D8                     __end_of_parallelInit:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           
   936 ;; *************** function _TimerPWMInit *****************
   937 ;; Defined at:
   938 ;;		line 14 in file "TimerPWM.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, status,2
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   952 ;;      Params:         0       0       0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    4
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text2
   967  0017F4                     __ptext2:
   968                           	opt stack 0
   969  0017F4                     _TimerPWMInit:
   970                           	opt stack 26
   971                           
   972                           ;TimerPWM.c: 15: GIE=1;
   973                           
   974                           ;incstack = 0
   975  0017F4  8EF2               	bsf	intcon,7,c	;volatile
   976                           
   977                           ;TimerPWM.c: 16: TMR0IE=1;
   978  0017F6  8AF2               	bsf	intcon,5,c	;volatile
   979                           
   980                           ;TimerPWM.c: 17: T08BIT=1;
   981  0017F8  8CD5               	bsf	4053,6,c	;volatile
   982                           
   983                           ;TimerPWM.c: 18: T0CS=0;
   984  0017FA  9AD5               	bcf	4053,5,c	;volatile
   985                           
   986                           ;TimerPWM.c: 19: PSA=1;
   987  0017FC  86D5               	bsf	4053,3,c	;volatile
   988                           
   989                           ;TimerPWM.c: 20: T0PS2=0;
   990  0017FE  94D5               	bcf	4053,2,c	;volatile
   991                           
   992                           ;TimerPWM.c: 21: T0PS1=0;
   993  001800  92D5               	bcf	4053,1,c	;volatile
   994                           
   995                           ;TimerPWM.c: 22: T0PS0=1;
   996  001802  80D5               	bsf	4053,0,c	;volatile
   997                           
   998                           ;TimerPWM.c: 24: TMR0IF=0;
   999  001804  94F2               	bcf	intcon,2,c	;volatile
  1000                           
  1001                           ;TimerPWM.c: 25: TMR0H=0x00;
  1002  001806  0E00               	movlw	0
  1003  001808  6ED7               	movwf	4055,c	;volatile
  1004                           
  1005                           ;TimerPWM.c: 26: TMR0L=156;
  1006  00180A  0E9C               	movlw	156
  1007  00180C  6ED6               	movwf	4054,c	;volatile
  1008                           
  1009                           ;TimerPWM.c: 27: TMR0ON=1;
  1010  00180E  8ED5               	bsf	4053,7,c	;volatile
  1011  001810  0012               	return		;funcret
  1012  001812                     __end_of_TimerPWMInit:
  1013                           	opt stack 0
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           intcon	equ	0xFF2
  1019                           postinc0	equ	0xFEE
  1020                           wreg	equ	0xFE8
  1021                           postdec1	equ	0xFE5
  1022                           fsr1l	equ	0xFE1
  1023                           
  1024 ;; *************** function _MotorInit *****************
  1025 ;; Defined at:
  1026 ;;		line 27 in file "motors.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;		None
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;		None
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  1    wreg      void 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0, cstack
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1040 ;;      Params:         0       0       0       0       0       0       0
  1041 ;;      Locals:         0       0       0       0       0       0       0
  1042 ;;      Temps:          0       0       0       0       0       0       0
  1043 ;;      Totals:         0       0       0       0       0       0       0
  1044 ;;Total ram usage:        0 bytes
  1045 ;; Hardware stack levels used:    1
  1046 ;; Hardware stack levels required when called:    6
  1047 ;; This function calls:
  1048 ;;		_SetPWMMotorLeft
  1049 ;;		_SetPWMMotorRight
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           	psect	text3
  1056  001782                     __ptext3:
  1057                           	opt stack 0
  1058  001782                     _MotorInit:
  1059                           	opt stack 24
  1060                           
  1061                           ;motors.c: 28: TRISC = 0b11000000;
  1062                           
  1063                           ;incstack = 0
  1064  001782  0EC0               	movlw	192
  1065  001784  6E94               	movwf	3988,c	;volatile
  1066                           
  1067                           ;motors.c: 29: RC0=1;
  1068  001786  8082               	bsf	3970,0,c	;volatile
  1069                           
  1070                           ;motors.c: 30: RC1=0;
  1071  001788  9282               	bcf	3970,1,c	;volatile
  1072                           
  1073                           ;motors.c: 31: RC2=1;
  1074  00178A  8482               	bsf	3970,2,c	;volatile
  1075                           
  1076                           ;motors.c: 32: RC3=0;
  1077  00178C  9682               	bcf	3970,3,c	;volatile
  1078                           
  1079                           ;motors.c: 33: SetPWMMotorLeft(0);
  1080  00178E  0E00               	movlw	0
  1081  001790  0100               	movlb	0	; () banked
  1082  001792  6FAE               	movwf	(SetPWMMotorLeft@percentage+1)& (0+255),b
  1083  001794  0E00               	movlw	0
  1084  001796  6FAD               	movwf	SetPWMMotorLeft@percentage& (0+255),b
  1085  001798  EC14  F00B         	call	_SetPWMMotorLeft	;wreg free
  1086                           
  1087                           ;motors.c: 34: SetPWMMotorRight(0);
  1088  00179C  0E00               	movlw	0
  1089  00179E  0100               	movlb	0	; () banked
  1090  0017A0  6FAE               	movwf	(SetPWMMotorRight@percentage+1)& (0+255),b
  1091  0017A2  0E00               	movlw	0
  1092  0017A4  6FAD               	movwf	SetPWMMotorRight@percentage& (0+255),b
  1093  0017A6  ECF7  F00A         	call	_SetPWMMotorRight	;wreg free
  1094  0017AA  0012               	return		;funcret
  1095  0017AC                     __end_of_MotorInit:
  1096                           	opt stack 0
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           intcon	equ	0xFF2
  1102                           postinc0	equ	0xFEE
  1103                           wreg	equ	0xFE8
  1104                           postdec1	equ	0xFE5
  1105                           fsr1l	equ	0xFE1
  1106                           
  1107 ;; *************** function _LCDInit *****************
  1108 ;; Defined at:
  1109 ;;		line 196 in file "lcd_hd44780_pic16.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;  style           1    wreg     unsigned char 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  style           1    9[BANK0 ] unsigned char 
  1114 ;;  __i             1   10[BANK0 ] unsigned char 
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1124 ;;      Params:         0       0       0       0       0       0       0
  1125 ;;      Locals:         0       2       0       0       0       0       0
  1126 ;;      Temps:          0       1       0       0       0       0       0
  1127 ;;      Totals:         0       3       0       0       0       0       0
  1128 ;;Total ram usage:        3 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    6
  1131 ;; This function calls:
  1132 ;;		_LCDBusyLoop
  1133 ;;		_LCDByte
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text4
  1140  0010FC                     __ptext4:
  1141                           	opt stack 0
  1142  0010FC                     _LCDInit:
  1143                           	opt stack 24
  1144                           
  1145                           ;incstack = 0
  1146                           ;LCDInit@style stored from wreg
  1147  0010FC  0100               	movlb	0	; () banked
  1148  0010FE  6FAF               	movwf	LCDInit@style& (0+255),b
  1149                           
  1150                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((30)*(1000000/4000.0)));
  1151  001100  0E0A               	movlw	10
  1152  001102  0100               	movlb	0	; () banked
  1153  001104  6FAE               	movwf	??_LCDInit& (0+255),b
  1154  001106  0EBC               	movlw	188
  1155  001108                     u2217:
  1156  001108  2EE8               	decfsz	wreg,f,c
  1157  00110A  D7FE               	goto	u2217
  1158  00110C  2FAE               	decfsz	??_LCDInit& (0+255),f,b
  1159  00110E  D7FC               	goto	u2217
  1160  001110  F000 F000          	nop2	
  1161                           
  1162                           ;lcd_hd44780_pic16.c: 215: TRISD&=(~(0x0F<<0));
  1163  001114  0EF0               	movlw	240
  1164  001116  1695               	andwf	3989,f,c	;volatile
  1165                           
  1166                           ;lcd_hd44780_pic16.c: 217: TRISDbits.TRISD6=0;
  1167  001118  9C95               	bcf	3989,6,c	;volatile
  1168                           
  1169                           ;lcd_hd44780_pic16.c: 218: TRISDbits.TRISD4=0;
  1170  00111A  9895               	bcf	3989,4,c	;volatile
  1171                           
  1172                           ;lcd_hd44780_pic16.c: 219: TRISDbits.TRISD5=0;
  1173  00111C  9A95               	bcf	3989,5,c	;volatile
  1174                           
  1175                           ;lcd_hd44780_pic16.c: 221: PORTD&=(~(0x0F<<0));
  1176  00111E  0EF0               	movlw	240
  1177  001120  1683               	andwf	3971,f,c	;volatile
  1178                           
  1179                           ;lcd_hd44780_pic16.c: 223: (RD6=0);
  1180  001122  9C83               	bcf	3971,6,c	;volatile
  1181                           
  1182                           ;lcd_hd44780_pic16.c: 224: (RD5=0);
  1183  001124  9A83               	bcf	3971,5,c	;volatile
  1184                           
  1185                           ;lcd_hd44780_pic16.c: 225: (RD4=0);
  1186  001126  9883               	bcf	3971,4,c	;volatile
  1187                           
  1188                           ;lcd_hd44780_pic16.c: 230: (RD6=1);
  1189                           
  1190                           ;lcd_hd44780_pic16.c: 228: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1191  001128  8C83               	bsf	3971,6,c	;volatile
  1192                           
  1193                           ;lcd_hd44780_pic16.c: 231: PORTD|=((0b00000010)<<0);
  1194  00112A  8283               	bsf	3971,1,c	;volatile
  1195                           
  1196                           ;lcd_hd44780_pic16.c: 233: (RD6=0);
  1197                           
  1198                           ;lcd_hd44780_pic16.c: 232: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1199  00112C  9C83               	bcf	3971,6,c	;volatile
  1200                           
  1201                           ;lcd_hd44780_pic16.c: 237: LCDBusyLoop();
  1202                           
  1203                           ;lcd_hd44780_pic16.c: 234: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1204  00112E  ECD9  F009         	call	_LCDBusyLoop	;wreg free
  1205                           
  1206                           ;lcd_hd44780_pic16.c: 242: (LCDByte(0b00101000,0));
  1207  001132  0E00               	movlw	0
  1208  001134  0100               	movlb	0	; () banked
  1209  001136  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1210  001138  0E28               	movlw	40
  1211  00113A  ECAE  F009         	call	_LCDByte
  1212                           
  1213                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00001100|style,0));
  1214  00113E  0E00               	movlw	0
  1215  001140  0100               	movlb	0	; () banked
  1216  001142  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1217  001144  0100               	movlb	0	; () banked
  1218  001146  51AF               	movf	LCDInit@style& (0+255),w,b
  1219  001148  090C               	iorlw	12
  1220  00114A  ECAE  F009         	call	_LCDByte
  1221                           
  1222                           ;lcd_hd44780_pic16.c: 246: (LCDByte(0b01000000,0));
  1223  00114E  0E00               	movlw	0
  1224  001150  0100               	movlb	0	; () banked
  1225  001152  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1226  001154  0E40               	movlw	64
  1227  001156  ECAE  F009         	call	_LCDByte
  1228                           
  1229                           ;lcd_hd44780_pic16.c: 248: uint8_t __i;
  1230                           ;lcd_hd44780_pic16.c: 249: for(__i=0;__i<sizeof(__cgram);__i++)
  1231  00115A  0E00               	movlw	0
  1232  00115C  0100               	movlb	0	; () banked
  1233  00115E  6FB0               	movwf	LCDInit@__i& (0+255),b
  1234  001160                     l3025:
  1235                           
  1236                           ; BSR set to: 0
  1237  001160  0E3F               	movlw	63
  1238  001162  0100               	movlb	0	; () banked
  1239  001164  65B0               	cpfsgt	LCDInit@__i& (0+255),b
  1240  001166  D001               	goto	l3029
  1241  001168  0012               	return	
  1242  00116A                     l3029:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;lcd_hd44780_pic16.c: 250: (LCDByte(__cgram[__i],1));
  1246  00116A  0E01               	movlw	1
  1247  00116C  0100               	movlb	0	; () banked
  1248  00116E  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1249  001170  0100               	movlb	0	; () banked
  1250  001172  51B0               	movf	LCDInit@__i& (0+255),w,b
  1251  001174  0D01               	mullw	1
  1252  001176  0E60               	movlw	low ___cgram
  1253  001178  24F3               	addwf	prodl,w,c
  1254  00117A  6ED9               	movwf	fsr2l,c
  1255  00117C  0E00               	movlw	high ___cgram
  1256  00117E  20F4               	addwfc	prodh,w,c
  1257  001180  6EDA               	movwf	fsr2h,c
  1258  001182  50DF               	movf	indf2,w,c
  1259  001184  ECAE  F009         	call	_LCDByte
  1260  001188  0100               	movlb	0	; () banked
  1261  00118A  2BB0               	incf	LCDInit@__i& (0+255),f,b
  1262  00118C  D7E9               	goto	l3025
  1263  00118E                     __end_of_LCDInit:
  1264                           	opt stack 0
  1265                           tblptru	equ	0xFF8
  1266                           tblptrh	equ	0xFF7
  1267                           tblptrl	equ	0xFF6
  1268                           tablat	equ	0xFF5
  1269                           prodh	equ	0xFF4
  1270                           prodl	equ	0xFF3
  1271                           intcon	equ	0xFF2
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1l	equ	0xFE1
  1276                           indf2	equ	0xFDF
  1277                           fsr2h	equ	0xFDA
  1278                           fsr2l	equ	0xFD9
  1279                           
  1280 ;; *************** function _Go *****************
  1281 ;; Defined at:
  1282 ;;		line 20 in file "driver.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;		None
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;  SpeedRight      2   31[BANK0 ] int 
  1287 ;;  SpeedLeft       2   29[BANK0 ] int 
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1297 ;;      Params:         0       0       0       0       0       0       0
  1298 ;;      Locals:         0       4       0       0       0       0       0
  1299 ;;      Temps:          0       2       0       0       0       0       0
  1300 ;;      Totals:         0       6       0       0       0       0       0
  1301 ;;Total ram usage:        6 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    8
  1304 ;; This function calls:
  1305 ;;		_ReadDistanceCentral
  1306 ;;		_ReadDistanceLeft
  1307 ;;		_ReadDistanceRight
  1308 ;;		_ReadMode
  1309 ;;		_ReadParallel
  1310 ;;		_ReadParallelSpeedLeft
  1311 ;;		_ReadParallelSpeedRight
  1312 ;;		_SetMotorLeft
  1313 ;;		_SetMotorRight
  1314 ;;		_TurnLeft135
  1315 ;;		_TurnLeft90
  1316 ;;		_TurnRight135
  1317 ;;		_TurnRight90
  1318 ;; This function is called by:
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text5
  1324  0007C4                     __ptext5:
  1325                           	opt stack 0
  1326  0007C4                     _Go:
  1327                           	opt stack 22
  1328                           
  1329                           ;driver.c: 21: ReadParallel();
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;incstack = 0
  1333  0007C4  EC37  F006         	call	_ReadParallel	;wreg free
  1334                           
  1335                           ;driver.c: 23: if(ReadMode()==0){
  1336  0007C8  EC4A  F00C         	call	_ReadMode	;wreg free
  1337  0007CC  0100               	movlb	0	; () banked
  1338  0007CE  51A6               	movf	?_ReadMode& (0+255),w,b
  1339  0007D0  0100               	movlb	0	; () banked
  1340  0007D2  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1341  0007D4  A4D8               	btfss	status,2,c
  1342  0007D6  D067               	goto	l3063
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;driver.c: 24: signed int SpeedLeft, SpeedRight;
  1346                           ;driver.c: 25: SpeedLeft=ReadParallelSpeedLeft();
  1347  0007D8  EC45  F00C         	call	_ReadParallelSpeedLeft	;wreg free
  1348  0007DC  C0A6  F0C3         	movff	?_ReadParallelSpeedLeft,Go@SpeedLeft
  1349  0007E0  C0A7  F0C4         	movff	?_ReadParallelSpeedLeft+1,Go@SpeedLeft+1
  1350                           
  1351                           ;driver.c: 26: SpeedRight=ReadParallelSpeedRight();
  1352  0007E4  EC40  F00C         	call	_ReadParallelSpeedRight	;wreg free
  1353  0007E8  C0A6  F0C5         	movff	?_ReadParallelSpeedRight,Go@SpeedRight
  1354  0007EC  C0A7  F0C6         	movff	?_ReadParallelSpeedRight+1,Go@SpeedRight+1
  1355                           
  1356                           ;driver.c: 28: if(SpeedRight>0 && SpeedLeft>0){
  1357  0007F0  0100               	movlb	0	; () banked
  1358  0007F2  BFC6               	btfsc	(Go@SpeedRight+1)& (0+255),7,b
  1359  0007F4  D04B               	goto	l3061
  1360  0007F6  0100               	movlb	0	; () banked
  1361  0007F8  51C6               	movf	(Go@SpeedRight+1)& (0+255),w,b
  1362  0007FA  E104               	bnz	u1930
  1363  0007FC  0100               	movlb	0	; () banked
  1364  0007FE  05C5               	decf	Go@SpeedRight& (0+255),w,b
  1365  000800  A0D8               	btfss	status,0,c
  1366  000802  D044               	goto	l3061
  1367  000804                     u1930:
  1368                           
  1369                           ; BSR set to: 0
  1370  000804  0100               	movlb	0	; () banked
  1371  000806  BFC4               	btfsc	(Go@SpeedLeft+1)& (0+255),7,b
  1372  000808  D041               	goto	l3061
  1373  00080A  0100               	movlb	0	; () banked
  1374  00080C  51C4               	movf	(Go@SpeedLeft+1)& (0+255),w,b
  1375  00080E  E104               	bnz	u1940
  1376  000810  0100               	movlb	0	; () banked
  1377  000812  05C3               	decf	Go@SpeedLeft& (0+255),w,b
  1378  000814  A0D8               	btfss	status,0,c
  1379  000816  D03A               	goto	l3061
  1380  000818                     u1940:
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;driver.c: 29: if ((ReadDistanceCentral()<35) || (ReadDistanceRight()<30) || (ReadDistan
      +                          ceLeft()<30)){
  1384  000818  EC59  F00C         	call	_ReadDistanceCentral	;wreg free
  1385  00081C  0100               	movlb	0	; () banked
  1386  00081E  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1387  000820  E105               	bnz	u1950
  1388  000822  0E23               	movlw	35
  1389  000824  0100               	movlb	0	; () banked
  1390  000826  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1391  000828  A0D8               	btfss	status,0,c
  1392  00082A  D014               	goto	l3057
  1393  00082C                     u1950:
  1394                           
  1395                           ; BSR set to: 0
  1396  00082C  EC4F  F00C         	call	_ReadDistanceRight	;wreg free
  1397  000830  0100               	movlb	0	; () banked
  1398  000832  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1399  000834  E105               	bnz	u1960
  1400  000836  0E1E               	movlw	30
  1401  000838  0100               	movlb	0	; () banked
  1402  00083A  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1403  00083C  A0D8               	btfss	status,0,c
  1404  00083E  D00A               	goto	l3057
  1405  000840                     u1960:
  1406                           
  1407                           ; BSR set to: 0
  1408  000840  EC54  F00C         	call	_ReadDistanceLeft	;wreg free
  1409  000844  0100               	movlb	0	; () banked
  1410  000846  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1411  000848  E114               	bnz	l3059
  1412  00084A  0E1E               	movlw	30
  1413  00084C  0100               	movlb	0	; () banked
  1414  00084E  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1415  000850  B0D8               	btfsc	status,0,c
  1416  000852  D00F               	goto	l3059
  1417  000854                     l3057:
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;driver.c: 30: SetMotorLeft(0);
  1421  000854  0E00               	movlw	0
  1422  000856  0100               	movlb	0	; () banked
  1423  000858  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1424  00085A  0E00               	movlw	0
  1425  00085C  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1426  00085E  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1427                           
  1428                           ;driver.c: 31: SetMotorRight(0);
  1429  000862  0E00               	movlw	0
  1430  000864  0100               	movlb	0	; () banked
  1431  000866  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1432  000868  0E00               	movlw	0
  1433  00086A  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1434  00086C  EC72  F00A         	call	_SetMotorRight	;wreg free
  1435                           
  1436                           ;driver.c: 32: }else{
  1437  000870  0012               	return	
  1438  000872                     l3059:
  1439                           
  1440                           ;driver.c: 33: SetMotorLeft (SpeedLeft);
  1441  000872  C0C3  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1442  000876  C0C4  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1443  00087A  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1444                           
  1445                           ;driver.c: 34: SetMotorRight(SpeedRight);
  1446  00087E  C0C5  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1447  000882  C0C6  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1448  000886  EC72  F00A         	call	_SetMotorRight	;wreg free
  1449                           
  1450                           ;driver.c: 35: }
  1451                           ;driver.c: 36: }else{
  1452  00088A  0012               	return	
  1453  00088C                     l3061:
  1454                           
  1455                           ;driver.c: 38: SetMotorLeft (SpeedLeft);
  1456  00088C  C0C3  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1457  000890  C0C4  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1458  000894  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1459                           
  1460                           ;driver.c: 39: SetMotorRight(SpeedRight);
  1461  000898  C0C5  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1462  00089C  C0C6  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1463  0008A0  EC72  F00A         	call	_SetMotorRight	;wreg free
  1464                           
  1465                           ;driver.c: 40: }
  1466                           ;driver.c: 43: }else if (ReadMode()==1){
  1467  0008A4  0012               	return	
  1468  0008A6                     l3063:
  1469  0008A6  EC4A  F00C         	call	_ReadMode	;wreg free
  1470  0008AA  0100               	movlb	0	; () banked
  1471  0008AC  05A6               	decf	?_ReadMode& (0+255),w,b
  1472  0008AE  0100               	movlb	0	; () banked
  1473  0008B0  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1474  0008B2  A4D8               	btfss	status,2,c
  1475  0008B4  0012               	return	
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;driver.c: 44: if (ReadDistanceCentral()<35){
  1479  0008B6  EC59  F00C         	call	_ReadDistanceCentral	;wreg free
  1480  0008BA  0100               	movlb	0	; () banked
  1481  0008BC  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1482  0008BE  E11D               	bnz	l3073
  1483  0008C0  0E23               	movlw	35
  1484  0008C2  0100               	movlb	0	; () banked
  1485  0008C4  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1486  0008C6  B0D8               	btfsc	status,0,c
  1487  0008C8  D018               	goto	l3073
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;driver.c: 45: if(ReadDistanceRight()>ReadDistanceLeft()){
  1491  0008CA  EC54  F00C         	call	_ReadDistanceLeft	;wreg free
  1492  0008CE  C0A6  F0C1         	movff	?_ReadDistanceLeft,??_Go
  1493  0008D2  C0A7  F0C2         	movff	?_ReadDistanceLeft+1,??_Go+1
  1494  0008D6  EC4F  F00C         	call	_ReadDistanceRight	;wreg free
  1495  0008DA  0100               	movlb	0	; () banked
  1496  0008DC  51A6               	movf	?_ReadDistanceRight& (0+255),w,b
  1497  0008DE  0100               	movlb	0	; () banked
  1498  0008E0  5DC1               	subwf	??_Go& (0+255),w,b
  1499  0008E2  0100               	movlb	0	; () banked
  1500  0008E4  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1501  0008E6  0100               	movlb	0	; () banked
  1502  0008E8  59C2               	subwfb	(??_Go+1)& (0+255),w,b
  1503  0008EA  B0D8               	btfsc	status,0,c
  1504  0008EC  D003               	goto	l3071
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;driver.c: 46: TurnRight135();
  1508  0008EE  EC4A  F00B         	call	_TurnRight135	;wreg free
  1509                           
  1510                           ;driver.c: 47: }else{
  1511  0008F2  0012               	return	
  1512  0008F4                     l3071:
  1513                           
  1514                           ;driver.c: 48: TurnLeft135();
  1515  0008F4  EC7C  F00B         	call	_TurnLeft135	;wreg free
  1516                           
  1517                           ;driver.c: 49: }
  1518                           ;driver.c: 50: }else if (ReadDistanceRight()<30){
  1519  0008F8  0012               	return	
  1520  0008FA                     l3073:
  1521  0008FA  EC4F  F00C         	call	_ReadDistanceRight	;wreg free
  1522  0008FE  0100               	movlb	0	; () banked
  1523  000900  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1524  000902  E108               	bnz	l3077
  1525  000904  0E1E               	movlw	30
  1526  000906  0100               	movlb	0	; () banked
  1527  000908  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1528  00090A  B0D8               	btfsc	status,0,c
  1529  00090C  D003               	goto	l3077
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;driver.c: 51: TurnLeft90();
  1533  00090E  EC63  F00B         	call	_TurnLeft90	;wreg free
  1534                           
  1535                           ;driver.c: 52: }else if (ReadDistanceLeft()<30){
  1536  000912  0012               	return	
  1537  000914                     l3077:
  1538  000914  EC54  F00C         	call	_ReadDistanceLeft	;wreg free
  1539  000918  0100               	movlb	0	; () banked
  1540  00091A  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1541  00091C  E108               	bnz	l3081
  1542  00091E  0E1E               	movlw	30
  1543  000920  0100               	movlb	0	; () banked
  1544  000922  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1545  000924  B0D8               	btfsc	status,0,c
  1546  000926  D003               	goto	l3081
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;driver.c: 53: TurnRight90();
  1550  000928  EC31  F00B         	call	_TurnRight90	;wreg free
  1551                           
  1552                           ;driver.c: 54: }else{
  1553  00092C  0012               	return	
  1554  00092E                     l3081:
  1555                           
  1556                           ;driver.c: 55: SetMotorRight(40);
  1557  00092E  0E00               	movlw	0
  1558  000930  0100               	movlb	0	; () banked
  1559  000932  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1560  000934  0E28               	movlw	40
  1561  000936  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1562  000938  EC72  F00A         	call	_SetMotorRight	;wreg free
  1563                           
  1564                           ;driver.c: 56: SetMotorLeft(40);
  1565  00093C  0E00               	movlw	0
  1566  00093E  0100               	movlb	0	; () banked
  1567  000940  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1568  000942  0E28               	movlw	40
  1569  000944  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1570  000946  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1571  00094A  0012               	return	
  1572  00094C                     __end_of_Go:
  1573                           	opt stack 0
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           prodh	equ	0xFF4
  1579                           prodl	equ	0xFF3
  1580                           intcon	equ	0xFF2
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           postdec1	equ	0xFE5
  1584                           fsr1l	equ	0xFE1
  1585                           indf2	equ	0xFDF
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _TurnRight90 *****************
  1591 ;; Defined at:
  1592 ;;		line 60 in file "driver.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1606 ;;      Params:         0       0       0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0       0       0
  1608 ;;      Temps:          0       1       0       0       0       0       0
  1609 ;;      Totals:         0       1       0       0       0       0       0
  1610 ;;Total ram usage:        1 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    7
  1613 ;; This function calls:
  1614 ;;		_SetMotorLeft
  1615 ;;		_SetMotorRight
  1616 ;; This function is called by:
  1617 ;;		_Go
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text6
  1622  001662                     __ptext6:
  1623                           	opt stack 0
  1624  001662                     _TurnRight90:
  1625                           	opt stack 22
  1626                           
  1627                           ;driver.c: 61: SetMotorRight(-100);
  1628                           
  1629                           ;incstack = 0
  1630  001662  0EFF               	movlw	255
  1631  001664  0100               	movlb	0	; () banked
  1632  001666  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1633  001668  0E9C               	movlw	156
  1634  00166A  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1635  00166C  EC72  F00A         	call	_SetMotorRight	;wreg free
  1636                           
  1637                           ;driver.c: 62: SetMotorLeft(100);
  1638  001670  0E00               	movlw	0
  1639  001672  0100               	movlb	0	; () banked
  1640  001674  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1641  001676  0E64               	movlw	100
  1642  001678  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1643  00167A  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1644                           
  1645                           ;driver.c: 63: _delay((unsigned long)((100)*(1000000/4000.0)));
  1646  00167E  0E21               	movlw	33
  1647  001680  0100               	movlb	0	; () banked
  1648  001682  6FB1               	movwf	??_TurnRight90& (0+255),b
  1649  001684  0E76               	movlw	118
  1650  001686                     u2227:
  1651  001686  2EE8               	decfsz	wreg,f,c
  1652  001688  D7FE               	goto	u2227
  1653  00168A  2FB1               	decfsz	??_TurnRight90& (0+255),f,b
  1654  00168C  D7FC               	goto	u2227
  1655  00168E  F000 F000          	nop2	
  1656  001692  0012               	return		;funcret
  1657  001694                     __end_of_TurnRight90:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           prodh	equ	0xFF4
  1664                           prodl	equ	0xFF3
  1665                           intcon	equ	0xFF2
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           postdec1	equ	0xFE5
  1669                           fsr1l	equ	0xFE1
  1670                           indf2	equ	0xFDF
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675 ;; *************** function _TurnRight135 *****************
  1676 ;; Defined at:
  1677 ;;		line 72 in file "driver.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;		None
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, status,2, status,0, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1691 ;;      Params:         0       0       0       0       0       0       0
  1692 ;;      Locals:         0       0       0       0       0       0       0
  1693 ;;      Temps:          0       1       0       0       0       0       0
  1694 ;;      Totals:         0       1       0       0       0       0       0
  1695 ;;Total ram usage:        1 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    7
  1698 ;; This function calls:
  1699 ;;		_SetMotorLeft
  1700 ;;		_SetMotorRight
  1701 ;; This function is called by:
  1702 ;;		_Go
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text7
  1707  001694                     __ptext7:
  1708                           	opt stack 0
  1709  001694                     _TurnRight135:
  1710                           	opt stack 22
  1711                           
  1712                           ;driver.c: 73: SetMotorRight(-100);
  1713                           
  1714                           ;incstack = 0
  1715  001694  0EFF               	movlw	255
  1716  001696  0100               	movlb	0	; () banked
  1717  001698  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1718  00169A  0E9C               	movlw	156
  1719  00169C  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1720  00169E  EC72  F00A         	call	_SetMotorRight	;wreg free
  1721                           
  1722                           ;driver.c: 74: SetMotorLeft(100);
  1723  0016A2  0E00               	movlw	0
  1724  0016A4  0100               	movlb	0	; () banked
  1725  0016A6  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1726  0016A8  0E64               	movlw	100
  1727  0016AA  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1728  0016AC  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1729                           
  1730                           ;driver.c: 75: _delay((unsigned long)((150)*(1000000/4000.0)));
  1731  0016B0  0E31               	movlw	49
  1732  0016B2  0100               	movlb	0	; () banked
  1733  0016B4  6FB1               	movwf	??_TurnRight135& (0+255),b
  1734  0016B6  0EB2               	movlw	178
  1735  0016B8                     u2237:
  1736  0016B8  2EE8               	decfsz	wreg,f,c
  1737  0016BA  D7FE               	goto	u2237
  1738  0016BC  2FB1               	decfsz	??_TurnRight135& (0+255),f,b
  1739  0016BE  D7FC               	goto	u2237
  1740  0016C0  F000 F000          	nop2	
  1741  0016C4  0012               	return		;funcret
  1742  0016C6                     __end_of_TurnRight135:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           prodh	equ	0xFF4
  1749                           prodl	equ	0xFF3
  1750                           intcon	equ	0xFF2
  1751                           postinc0	equ	0xFEE
  1752                           wreg	equ	0xFE8
  1753                           postdec1	equ	0xFE5
  1754                           fsr1l	equ	0xFE1
  1755                           indf2	equ	0xFDF
  1756                           fsr2h	equ	0xFDA
  1757                           fsr2l	equ	0xFD9
  1758                           status	equ	0xFD8
  1759                           
  1760 ;; *************** function _TurnLeft90 *****************
  1761 ;; Defined at:
  1762 ;;		line 66 in file "driver.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;		None
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg, status,2, status,0, cstack
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1776 ;;      Params:         0       0       0       0       0       0       0
  1777 ;;      Locals:         0       0       0       0       0       0       0
  1778 ;;      Temps:          0       1       0       0       0       0       0
  1779 ;;      Totals:         0       1       0       0       0       0       0
  1780 ;;Total ram usage:        1 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    7
  1783 ;; This function calls:
  1784 ;;		_SetMotorLeft
  1785 ;;		_SetMotorRight
  1786 ;; This function is called by:
  1787 ;;		_Go
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text8
  1792  0016C6                     __ptext8:
  1793                           	opt stack 0
  1794  0016C6                     _TurnLeft90:
  1795                           	opt stack 22
  1796                           
  1797                           ;driver.c: 67: SetMotorRight(100);
  1798                           
  1799                           ;incstack = 0
  1800  0016C6  0E00               	movlw	0
  1801  0016C8  0100               	movlb	0	; () banked
  1802  0016CA  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1803  0016CC  0E64               	movlw	100
  1804  0016CE  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1805  0016D0  EC72  F00A         	call	_SetMotorRight	;wreg free
  1806                           
  1807                           ;driver.c: 68: SetMotorLeft(-100);
  1808  0016D4  0EFF               	movlw	255
  1809  0016D6  0100               	movlb	0	; () banked
  1810  0016D8  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1811  0016DA  0E9C               	movlw	156
  1812  0016DC  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1813  0016DE  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1814                           
  1815                           ;driver.c: 69: _delay((unsigned long)((100)*(1000000/4000.0)));
  1816  0016E2  0E21               	movlw	33
  1817  0016E4  0100               	movlb	0	; () banked
  1818  0016E6  6FB1               	movwf	??_TurnLeft90& (0+255),b
  1819  0016E8  0E76               	movlw	118
  1820  0016EA                     u2247:
  1821  0016EA  2EE8               	decfsz	wreg,f,c
  1822  0016EC  D7FE               	goto	u2247
  1823  0016EE  2FB1               	decfsz	??_TurnLeft90& (0+255),f,b
  1824  0016F0  D7FC               	goto	u2247
  1825  0016F2  F000 F000          	nop2	
  1826  0016F6  0012               	return		;funcret
  1827  0016F8                     __end_of_TurnLeft90:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1l	equ	0xFE1
  1840                           indf2	equ	0xFDF
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _TurnLeft135 *****************
  1846 ;; Defined at:
  1847 ;;		line 78 in file "driver.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0, cstack
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1861 ;;      Params:         0       0       0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0
  1863 ;;      Temps:          0       1       0       0       0       0       0
  1864 ;;      Totals:         0       1       0       0       0       0       0
  1865 ;;Total ram usage:        1 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    7
  1868 ;; This function calls:
  1869 ;;		_SetMotorLeft
  1870 ;;		_SetMotorRight
  1871 ;; This function is called by:
  1872 ;;		_Go
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           	psect	text9
  1877  0016F8                     __ptext9:
  1878                           	opt stack 0
  1879  0016F8                     _TurnLeft135:
  1880                           	opt stack 22
  1881                           
  1882                           ;driver.c: 79: SetMotorRight(100);
  1883                           
  1884                           ;incstack = 0
  1885  0016F8  0E00               	movlw	0
  1886  0016FA  0100               	movlb	0	; () banked
  1887  0016FC  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1888  0016FE  0E64               	movlw	100
  1889  001700  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1890  001702  EC72  F00A         	call	_SetMotorRight	;wreg free
  1891                           
  1892                           ;driver.c: 80: SetMotorLeft(-100);
  1893  001706  0EFF               	movlw	255
  1894  001708  0100               	movlb	0	; () banked
  1895  00170A  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1896  00170C  0E9C               	movlw	156
  1897  00170E  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1898  001710  EC95  F00A         	call	_SetMotorLeft	;wreg free
  1899                           
  1900                           ;driver.c: 81: _delay((unsigned long)((150)*(1000000/4000.0)));
  1901  001714  0E31               	movlw	49
  1902  001716  0100               	movlb	0	; () banked
  1903  001718  6FB1               	movwf	??_TurnLeft135& (0+255),b
  1904  00171A  0EB2               	movlw	178
  1905  00171C                     u2257:
  1906  00171C  2EE8               	decfsz	wreg,f,c
  1907  00171E  D7FE               	goto	u2257
  1908  001720  2FB1               	decfsz	??_TurnLeft135& (0+255),f,b
  1909  001722  D7FC               	goto	u2257
  1910  001724  F000 F000          	nop2	
  1911  001728  0012               	return		;funcret
  1912  00172A                     __end_of_TurnLeft135:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postdec1	equ	0xFE5
  1924                           fsr1l	equ	0xFE1
  1925                           indf2	equ	0xFDF
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _SetMotorRight *****************
  1931 ;; Defined at:
  1932 ;;		line 64 in file "motors.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  speed           2    9[BANK0 ] int 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1946 ;;      Params:         0       2       0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0
  1948 ;;      Temps:          0       0       0       0       0       0       0
  1949 ;;      Totals:         0       2       0       0       0       0       0
  1950 ;;Total ram usage:        2 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    6
  1953 ;; This function calls:
  1954 ;;		_SetPWMMotorRight
  1955 ;;		_abs
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;;		_Go
  1959 ;;		_TurnRight90
  1960 ;;		_TurnLeft90
  1961 ;;		_TurnRight135
  1962 ;;		_TurnLeft135
  1963 ;;		_Turn180
  1964 ;;		_GoBack
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text10
  1969  0014E4                     __ptext10:
  1970                           	opt stack 0
  1971  0014E4                     _SetMotorRight:
  1972                           	opt stack 24
  1973                           
  1974                           ;motors.c: 66: MotorRightSpeed=speed;
  1975                           
  1976                           ;incstack = 0
  1977  0014E4  C0AF  F0CE         	movff	SetMotorRight@speed,_MotorRightSpeed
  1978  0014E8  C0B0  F0CF         	movff	SetMotorRight@speed+1,_MotorRightSpeed+1
  1979                           
  1980                           ;motors.c: 69: if(speed>0){
  1981  0014EC  0100               	movlb	0	; () banked
  1982  0014EE  BFB0               	btfsc	(SetMotorRight@speed+1)& (0+255),7,b
  1983  0014F0  D00A               	goto	l2443
  1984  0014F2  0100               	movlb	0	; () banked
  1985  0014F4  51B0               	movf	(SetMotorRight@speed+1)& (0+255),w,b
  1986  0014F6  E104               	bnz	u1340
  1987  0014F8  0100               	movlb	0	; () banked
  1988  0014FA  05AF               	decf	SetMotorRight@speed& (0+255),w,b
  1989  0014FC  A0D8               	btfss	status,0,c
  1990  0014FE  D003               	goto	l2443
  1991  001500                     u1340:
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;motors.c: 71: RC2=1;
  1995  001500  8482               	bsf	3970,2,c	;volatile
  1996                           
  1997                           ;motors.c: 72: RC3=0;
  1998  001502  9682               	bcf	3970,3,c	;volatile
  1999                           
  2000                           ;motors.c: 73: }else if (speed<0){
  2001  001504  D005               	goto	l2447
  2002  001506                     l2443:
  2003                           
  2004                           ; BSR set to: 0
  2005  001506  0100               	movlb	0	; () banked
  2006  001508  AFB0               	btfss	(SetMotorRight@speed+1)& (0+255),7,b
  2007  00150A  D002               	goto	l2447
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;motors.c: 75: RC2=0;
  2011  00150C  9482               	bcf	3970,2,c	;volatile
  2012                           
  2013                           ;motors.c: 76: RC3=1;
  2014  00150E  8682               	bsf	3970,3,c	;volatile
  2015  001510                     l2447:
  2016                           
  2017                           ; BSR set to: 0
  2018                           ;motors.c: 77: }
  2019                           ;motors.c: 89: SetPWMMotorRight(abs(speed));
  2020  001510  C0AF  F0A6         	movff	SetMotorRight@speed,abs@a
  2021  001514  C0B0  F0A7         	movff	SetMotorRight@speed+1,abs@a+1
  2022  001518  EC95  F00B         	call	_abs	;wreg free
  2023  00151C  C0A6  F0AD         	movff	?_abs,SetPWMMotorRight@percentage
  2024  001520  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorRight@percentage+1
  2025  001524  ECF7  F00A         	call	_SetPWMMotorRight	;wreg free
  2026  001528  0012               	return		;funcret
  2027  00152A                     __end_of_SetMotorRight:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           prodh	equ	0xFF4
  2034                           prodl	equ	0xFF3
  2035                           intcon	equ	0xFF2
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           indf2	equ	0xFDF
  2041                           fsr2h	equ	0xFDA
  2042                           fsr2l	equ	0xFD9
  2043                           status	equ	0xFD8
  2044                           
  2045 ;; *************** function _SetPWMMotorRight *****************
  2046 ;; Defined at:
  2047 ;;		line 34 in file "TimerPWM.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  percentage      2    7[BANK0 ] unsigned int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0, cstack
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2061 ;;      Params:         0       2       0       0       0       0       0
  2062 ;;      Locals:         0       0       0       0       0       0       0
  2063 ;;      Temps:          0       0       0       0       0       0       0
  2064 ;;      Totals:         0       2       0       0       0       0       0
  2065 ;;Total ram usage:        2 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    5
  2068 ;; This function calls:
  2069 ;;		___lwdiv
  2070 ;; This function is called by:
  2071 ;;		_MotorInit
  2072 ;;		_SetMotorRight
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text11
  2077  0015EE                     __ptext11:
  2078                           	opt stack 0
  2079  0015EE                     _SetPWMMotorRight:
  2080                           	opt stack 24
  2081                           
  2082                           ;TimerPWM.c: 35: PWMRight=20-percentage/5;
  2083                           
  2084                           ;incstack = 0
  2085  0015EE  C0AD  F0A6         	movff	SetPWMMotorRight@percentage,___lwdiv@dividend
  2086  0015F2  C0AE  F0A7         	movff	SetPWMMotorRight@percentage+1,___lwdiv@dividend+1
  2087  0015F6  0E00               	movlw	0
  2088  0015F8  0100               	movlb	0	; () banked
  2089  0015FA  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2090  0015FC  0E05               	movlw	5
  2091  0015FE  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2092  001600  ECC7  F008         	call	___lwdiv	;wreg free
  2093  001604  0100               	movlb	0	; () banked
  2094  001606  1FA6               	comf	?___lwdiv& (0+255),f,b
  2095  001608  0100               	movlb	0	; () banked
  2096  00160A  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2097  00160C  0100               	movlb	0	; () banked
  2098  00160E  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2099  001610  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2100  001612  0E14               	movlw	20
  2101  001614  0100               	movlb	0	; () banked
  2102  001616  25A6               	addwf	?___lwdiv& (0+255),w,b
  2103  001618  0100               	movlb	0	; () banked
  2104  00161A  6FD8               	movwf	_PWMRight& (0+255),b
  2105  00161C  0E00               	movlw	0
  2106  00161E  0100               	movlb	0	; () banked
  2107  001620  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2108  001622  0100               	movlb	0	; () banked
  2109  001624  6FD9               	movwf	(_PWMRight+1)& (0+255),b
  2110                           
  2111                           ; BSR set to: 0
  2112  001626  0012               	return		;funcret
  2113  001628                     __end_of_SetPWMMotorRight:
  2114                           	opt stack 0
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1l	equ	0xFE1
  2126                           indf2	equ	0xFDF
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _SetMotorLeft *****************
  2132 ;; Defined at:
  2133 ;;		line 37 in file "motors.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  speed           2    9[BANK0 ] int 
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  1    wreg      void 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2147 ;;      Params:         0       2       0       0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0       0       0
  2150 ;;      Totals:         0       2       0       0       0       0       0
  2151 ;;Total ram usage:        2 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    6
  2154 ;; This function calls:
  2155 ;;		_SetPWMMotorLeft
  2156 ;;		_abs
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;;		_Go
  2160 ;;		_TurnRight90
  2161 ;;		_TurnLeft90
  2162 ;;		_TurnRight135
  2163 ;;		_TurnLeft135
  2164 ;;		_Turn180
  2165 ;;		_GoBack
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text12
  2170  00152A                     __ptext12:
  2171                           	opt stack 0
  2172  00152A                     _SetMotorLeft:
  2173                           	opt stack 24
  2174                           
  2175                           ;motors.c: 39: MotorLeftSpeed=speed;
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;incstack = 0
  2179  00152A  C0AF  F0D4         	movff	SetMotorLeft@speed,_MotorLeftSpeed
  2180  00152E  C0B0  F0D5         	movff	SetMotorLeft@speed+1,_MotorLeftSpeed+1
  2181                           
  2182                           ;motors.c: 42: if(speed>0){
  2183  001532  0100               	movlb	0	; () banked
  2184  001534  BFB0               	btfsc	(SetMotorLeft@speed+1)& (0+255),7,b
  2185  001536  D00A               	goto	l2431
  2186  001538  0100               	movlb	0	; () banked
  2187  00153A  51B0               	movf	(SetMotorLeft@speed+1)& (0+255),w,b
  2188  00153C  E104               	bnz	u1320
  2189  00153E  0100               	movlb	0	; () banked
  2190  001540  05AF               	decf	SetMotorLeft@speed& (0+255),w,b
  2191  001542  A0D8               	btfss	status,0,c
  2192  001544  D003               	goto	l2431
  2193  001546                     u1320:
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;motors.c: 44: RC0=1;
  2197  001546  8082               	bsf	3970,0,c	;volatile
  2198                           
  2199                           ;motors.c: 45: RC1=0;
  2200  001548  9282               	bcf	3970,1,c	;volatile
  2201                           
  2202                           ;motors.c: 46: }else if (speed<0){
  2203  00154A  D005               	goto	l2435
  2204  00154C                     l2431:
  2205                           
  2206                           ; BSR set to: 0
  2207  00154C  0100               	movlb	0	; () banked
  2208  00154E  AFB0               	btfss	(SetMotorLeft@speed+1)& (0+255),7,b
  2209  001550  D002               	goto	l2435
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;motors.c: 48: RC0=0;
  2213  001552  9082               	bcf	3970,0,c	;volatile
  2214                           
  2215                           ;motors.c: 49: RC1=1;
  2216  001554  8282               	bsf	3970,1,c	;volatile
  2217  001556                     l2435:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;motors.c: 50: }
  2221                           ;motors.c: 62: SetPWMMotorLeft(abs(speed));
  2222  001556  C0AF  F0A6         	movff	SetMotorLeft@speed,abs@a
  2223  00155A  C0B0  F0A7         	movff	SetMotorLeft@speed+1,abs@a+1
  2224  00155E  EC95  F00B         	call	_abs	;wreg free
  2225  001562  C0A6  F0AD         	movff	?_abs,SetPWMMotorLeft@percentage
  2226  001566  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorLeft@percentage+1
  2227  00156A  EC14  F00B         	call	_SetPWMMotorLeft	;wreg free
  2228  00156E  0012               	return		;funcret
  2229  001570                     __end_of_SetMotorLeft:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodh	equ	0xFF4
  2236                           prodl	equ	0xFF3
  2237                           intcon	equ	0xFF2
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1l	equ	0xFE1
  2242                           indf2	equ	0xFDF
  2243                           fsr2h	equ	0xFDA
  2244                           fsr2l	equ	0xFD9
  2245                           status	equ	0xFD8
  2246                           
  2247 ;; *************** function _abs *****************
  2248 ;; Defined at:
  2249 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\abs.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  a               2    0[BANK0 ] int 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  2    0[BANK0 ] int 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2263 ;;      Params:         0       2       0       0       0       0       0
  2264 ;;      Locals:         0       0       0       0       0       0       0
  2265 ;;      Temps:          0       2       0       0       0       0       0
  2266 ;;      Totals:         0       4       0       0       0       0       0
  2267 ;;Total ram usage:        4 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    4
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_SetMotorLeft
  2274 ;;		_SetMotorRight
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text13
  2279  00172A                     __ptext13:
  2280                           	opt stack 0
  2281  00172A                     _abs:
  2282                           	opt stack 25
  2283                           
  2284                           ;incstack = 0
  2285  00172A  0100               	movlb	0	; () banked
  2286  00172C  AFA7               	btfss	(abs@a+1)& (0+255),7,b
  2287  00172E  D00E               	goto	l627
  2288                           
  2289                           ; BSR set to: 0
  2290  001730  C0A6  F0A8         	movff	abs@a,??_abs
  2291  001734  C0A7  F0A9         	movff	abs@a+1,??_abs+1
  2292  001738  0100               	movlb	0	; () banked
  2293  00173A  1FA8               	comf	??_abs& (0+255),f,b
  2294  00173C  1FA9               	comf	(??_abs+1)& (0+255),f,b
  2295  00173E  4BA8               	infsnz	??_abs& (0+255),f,b
  2296  001740  2BA9               	incf	(??_abs+1)& (0+255),f,b
  2297  001742  C0A8  F0A6         	movff	??_abs,?_abs
  2298  001746  C0A9  F0A7         	movff	??_abs+1,?_abs+1
  2299  00174A  0012               	return	
  2300  00174C                     l627:
  2301                           
  2302                           ; BSR set to: 0
  2303  00174C  C0A6  F0A6         	movff	abs@a,?_abs
  2304  001750  C0A7  F0A7         	movff	abs@a+1,?_abs+1
  2305                           
  2306                           ; BSR set to: 0
  2307  001754  0012               	return		;funcret
  2308  001756                     __end_of_abs:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           prodh	equ	0xFF4
  2315                           prodl	equ	0xFF3
  2316                           intcon	equ	0xFF2
  2317                           postinc0	equ	0xFEE
  2318                           wreg	equ	0xFE8
  2319                           postdec1	equ	0xFE5
  2320                           fsr1l	equ	0xFE1
  2321                           indf2	equ	0xFDF
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _SetPWMMotorLeft *****************
  2327 ;; Defined at:
  2328 ;;		line 30 in file "TimerPWM.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  percentage      2    7[BANK0 ] unsigned int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2342 ;;      Params:         0       2       0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0
  2344 ;;      Temps:          0       0       0       0       0       0       0
  2345 ;;      Totals:         0       2       0       0       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    5
  2349 ;; This function calls:
  2350 ;;		___lwdiv
  2351 ;; This function is called by:
  2352 ;;		_MotorInit
  2353 ;;		_SetMotorLeft
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text14
  2358  001628                     __ptext14:
  2359                           	opt stack 0
  2360  001628                     _SetPWMMotorLeft:
  2361                           	opt stack 24
  2362                           
  2363                           ;TimerPWM.c: 31: PWMLeft=20-percentage/5;
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367  001628  C0AD  F0A6         	movff	SetPWMMotorLeft@percentage,___lwdiv@dividend
  2368  00162C  C0AE  F0A7         	movff	SetPWMMotorLeft@percentage+1,___lwdiv@dividend+1
  2369  001630  0E00               	movlw	0
  2370  001632  0100               	movlb	0	; () banked
  2371  001634  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2372  001636  0E05               	movlw	5
  2373  001638  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2374  00163A  ECC7  F008         	call	___lwdiv	;wreg free
  2375  00163E  0100               	movlb	0	; () banked
  2376  001640  1FA6               	comf	?___lwdiv& (0+255),f,b
  2377  001642  0100               	movlb	0	; () banked
  2378  001644  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2379  001646  0100               	movlb	0	; () banked
  2380  001648  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2381  00164A  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2382  00164C  0E14               	movlw	20
  2383  00164E  0100               	movlb	0	; () banked
  2384  001650  25A6               	addwf	?___lwdiv& (0+255),w,b
  2385  001652  0100               	movlb	0	; () banked
  2386  001654  6FD6               	movwf	_PWMLeft& (0+255),b
  2387  001656  0E00               	movlw	0
  2388  001658  0100               	movlb	0	; () banked
  2389  00165A  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2390  00165C  0100               	movlb	0	; () banked
  2391  00165E  6FD7               	movwf	(_PWMLeft+1)& (0+255),b
  2392                           
  2393                           ; BSR set to: 0
  2394  001660  0012               	return		;funcret
  2395  001662                     __end_of_SetPWMMotorLeft:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           fsr1l	equ	0xFE1
  2408                           indf2	equ	0xFDF
  2409                           fsr2h	equ	0xFDA
  2410                           fsr2l	equ	0xFD9
  2411                           status	equ	0xFD8
  2412                           
  2413 ;; *************** function ___lwdiv *****************
  2414 ;; Defined at:
  2415 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  dividend        2    0[BANK0 ] unsigned int 
  2418 ;;  divisor         2    2[BANK0 ] unsigned int 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  quotient        2    4[BANK0 ] unsigned int 
  2421 ;;  counter         1    6[BANK0 ] unsigned char 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  2    0[BANK0 ] unsigned int 
  2424 ;; Registers used:
  2425 ;;		wreg, status,2, status,0
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2431 ;;      Params:         0       4       0       0       0       0       0
  2432 ;;      Locals:         0       3       0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0
  2434 ;;      Totals:         0       7       0       0       0       0       0
  2435 ;;Total ram usage:        7 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    4
  2438 ;; This function calls:
  2439 ;;		Nothing
  2440 ;; This function is called by:
  2441 ;;		_SetPWMMotorLeft
  2442 ;;		_SetPWMMotorRight
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text15
  2447  00118E                     __ptext15:
  2448                           	opt stack 0
  2449  00118E                     ___lwdiv:
  2450                           	opt stack 24
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;incstack = 0
  2454  00118E  0E00               	movlw	0
  2455  001190  0100               	movlb	0	; () banked
  2456  001192  6FAB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2457  001194  0E00               	movlw	0
  2458  001196  6FAA               	movwf	___lwdiv@quotient& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461  001198  0100               	movlb	0	; () banked
  2462  00119A  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2463  00119C  0100               	movlb	0	; () banked
  2464  00119E  11A9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2465  0011A0  B4D8               	btfsc	status,2,c
  2466  0011A2  D02C               	goto	l984
  2467                           
  2468                           ; BSR set to: 0
  2469  0011A4  0E01               	movlw	1
  2470  0011A6  0100               	movlb	0	; () banked
  2471  0011A8  6FAC               	movwf	___lwdiv@counter& (0+255),b
  2472  0011AA  D006               	goto	l2295
  2473  0011AC                     l2293:
  2474                           
  2475                           ; BSR set to: 0
  2476  0011AC  0100               	movlb	0	; () banked
  2477  0011AE  90D8               	bcf	status,0,c
  2478  0011B0  37A8               	rlcf	___lwdiv@divisor& (0+255),f,b
  2479  0011B2  37A9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2480  0011B4  0100               	movlb	0	; () banked
  2481  0011B6  2BAC               	incf	___lwdiv@counter& (0+255),f,b
  2482  0011B8                     l2295:
  2483                           
  2484                           ; BSR set to: 0
  2485  0011B8  0100               	movlb	0	; () banked
  2486  0011BA  AFA9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2487  0011BC  D7F7               	goto	l2293
  2488  0011BE                     l2297:
  2489                           
  2490                           ; BSR set to: 0
  2491  0011BE  0100               	movlb	0	; () banked
  2492  0011C0  90D8               	bcf	status,0,c
  2493  0011C2  37AA               	rlcf	___lwdiv@quotient& (0+255),f,b
  2494  0011C4  37AB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2495                           
  2496                           ; BSR set to: 0
  2497  0011C6  0100               	movlb	0	; () banked
  2498  0011C8  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2499  0011CA  0100               	movlb	0	; () banked
  2500  0011CC  5DA6               	subwf	___lwdiv@dividend& (0+255),w,b
  2501  0011CE  0100               	movlb	0	; () banked
  2502  0011D0  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2503  0011D2  0100               	movlb	0	; () banked
  2504  0011D4  59A7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2505  0011D6  A0D8               	btfss	status,0,c
  2506  0011D8  D00A               	goto	l2305
  2507                           
  2508                           ; BSR set to: 0
  2509  0011DA  0100               	movlb	0	; () banked
  2510  0011DC  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2511  0011DE  0100               	movlb	0	; () banked
  2512  0011E0  5FA6               	subwf	___lwdiv@dividend& (0+255),f,b
  2513  0011E2  0100               	movlb	0	; () banked
  2514  0011E4  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2515  0011E6  0100               	movlb	0	; () banked
  2516  0011E8  5BA7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2517                           
  2518                           ; BSR set to: 0
  2519  0011EA  0100               	movlb	0	; () banked
  2520  0011EC  81AA               	bsf	___lwdiv@quotient& (0+255),0,b
  2521  0011EE                     l2305:
  2522                           
  2523                           ; BSR set to: 0
  2524  0011EE  0100               	movlb	0	; () banked
  2525  0011F0  90D8               	bcf	status,0,c
  2526  0011F2  33A9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2527  0011F4  33A8               	rrcf	___lwdiv@divisor& (0+255),f,b
  2528                           
  2529                           ; BSR set to: 0
  2530  0011F6  0100               	movlb	0	; () banked
  2531  0011F8  2FAC               	decfsz	___lwdiv@counter& (0+255),f,b
  2532  0011FA  D7E1               	goto	l2297
  2533  0011FC                     l984:
  2534                           
  2535                           ; BSR set to: 0
  2536  0011FC  C0AA  F0A6         	movff	___lwdiv@quotient,?___lwdiv
  2537  001200  C0AB  F0A7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2538                           
  2539                           ; BSR set to: 0
  2540  001204  0012               	return		;funcret
  2541  001206                     __end_of___lwdiv:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           tblptrh	equ	0xFF7
  2545                           tblptrl	equ	0xFF6
  2546                           tablat	equ	0xFF5
  2547                           prodh	equ	0xFF4
  2548                           prodl	equ	0xFF3
  2549                           intcon	equ	0xFF2
  2550                           postinc0	equ	0xFEE
  2551                           wreg	equ	0xFE8
  2552                           postdec1	equ	0xFE5
  2553                           fsr1l	equ	0xFE1
  2554                           indf2	equ	0xFDF
  2555                           fsr2h	equ	0xFDA
  2556                           fsr2l	equ	0xFD9
  2557                           status	equ	0xFD8
  2558                           
  2559 ;; *************** function _ReadParallelSpeedRight *****************
  2560 ;; Defined at:
  2561 ;;		line 56 in file "parallel.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;		None
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  2    0[BANK0 ] int 
  2568 ;; Registers used:
  2569 ;;		None
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2575 ;;      Params:         0       2       0       0       0       0       0
  2576 ;;      Locals:         0       0       0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0
  2578 ;;      Totals:         0       2       0       0       0       0       0
  2579 ;;Total ram usage:        2 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    4
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_Go
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text16
  2590  001880                     __ptext16:
  2591                           	opt stack 0
  2592  001880                     _ReadParallelSpeedRight:
  2593                           	opt stack 25
  2594                           
  2595                           ;parallel.c: 57: return SpeedRight;
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;incstack = 0
  2599  001880  C0D2  F0A6         	movff	parallel@SpeedRight,?_ReadParallelSpeedRight
  2600  001884  C0D3  F0A7         	movff	parallel@SpeedRight+1,?_ReadParallelSpeedRight+1
  2601  001888  0012               	return		;funcret
  2602  00188A                     __end_of_ReadParallelSpeedRight:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           prodh	equ	0xFF4
  2609                           prodl	equ	0xFF3
  2610                           intcon	equ	0xFF2
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _ReadParallelSpeedLeft *****************
  2621 ;; Defined at:
  2622 ;;		line 59 in file "parallel.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  2    0[BANK0 ] int 
  2629 ;; Registers used:
  2630 ;;		None
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2636 ;;      Params:         0       2       0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0
  2639 ;;      Totals:         0       2       0       0       0       0       0
  2640 ;;Total ram usage:        2 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    4
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_Go
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text17
  2651  00188A                     __ptext17:
  2652                           	opt stack 0
  2653  00188A                     _ReadParallelSpeedLeft:
  2654                           	opt stack 25
  2655                           
  2656                           ;parallel.c: 60: return SpeedLeft;
  2657                           
  2658                           ;incstack = 0
  2659  00188A  C0D0  F0A6         	movff	parallel@SpeedLeft,?_ReadParallelSpeedLeft
  2660  00188E  C0D1  F0A7         	movff	parallel@SpeedLeft+1,?_ReadParallelSpeedLeft+1
  2661  001892  0012               	return		;funcret
  2662  001894                     __end_of_ReadParallelSpeedLeft:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           prodh	equ	0xFF4
  2669                           prodl	equ	0xFF3
  2670                           intcon	equ	0xFF2
  2671                           postinc0	equ	0xFEE
  2672                           wreg	equ	0xFE8
  2673                           postdec1	equ	0xFE5
  2674                           fsr1l	equ	0xFE1
  2675                           indf2	equ	0xFDF
  2676                           fsr2h	equ	0xFDA
  2677                           fsr2l	equ	0xFD9
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _ReadParallel *****************
  2681 ;; Defined at:
  2682 ;;		line 29 in file "parallel.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  temp            2   22[BANK0 ] int 
  2687 ;;  left            1   26[BANK0 ] unsigned char 
  2688 ;;  right           1   25[BANK0 ] unsigned char 
  2689 ;;  lecture         1   24[BANK0 ] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2699 ;;      Params:         0       0       0       0       0       0       0
  2700 ;;      Locals:         0       5       0       0       0       0       0
  2701 ;;      Temps:          0       0       0       0       0       0       0
  2702 ;;      Totals:         0       5       0       0       0       0       0
  2703 ;;Total ram usage:        5 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    7
  2706 ;; This function calls:
  2707 ;;		_ConvertParallelSpeed
  2708 ;;		_LCDGotoXY
  2709 ;;		_LCDWriteInt
  2710 ;; This function is called by:
  2711 ;;		_Go
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text18
  2716  000C6E                     __ptext18:
  2717                           	opt stack 0
  2718  000C6E                     _ReadParallel:
  2719                           	opt stack 22
  2720                           
  2721                           ;parallel.c: 30: unsigned char lecture=PORTB;
  2722                           
  2723                           ;incstack = 0
  2724  000C6E  CF81 F0BE          	movff	3969,ReadParallel@lecture	;volatile
  2725                           
  2726                           ;parallel.c: 31: unsigned char left=lecture>>4;
  2727  000C72  0100               	movlb	0	; () banked
  2728  000C74  39BE               	swapf	ReadParallel@lecture& (0+255),w,b
  2729  000C76  0B0F               	andlw	15
  2730  000C78  0100               	movlb	0	; () banked
  2731  000C7A  6FC0               	movwf	ReadParallel@left& (0+255),b
  2732                           
  2733                           ;parallel.c: 32: unsigned char right=lecture & 0x0f;
  2734  000C7C  0100               	movlb	0	; () banked
  2735  000C7E  51BE               	movf	ReadParallel@lecture& (0+255),w,b
  2736  000C80  0B0F               	andlw	15
  2737  000C82  0100               	movlb	0	; () banked
  2738  000C84  6FBF               	movwf	ReadParallel@right& (0+255),b
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;parallel.c: 33: SpeedRight=ConvertParallelSpeed(right);
  2742  000C86  0100               	movlb	0	; () banked
  2743  000C88  51BF               	movf	ReadParallel@right& (0+255),w,b
  2744  000C8A  ECA7  F006         	call	_ConvertParallelSpeed
  2745  000C8E  C0A6  F0D2         	movff	?_ConvertParallelSpeed,parallel@SpeedRight
  2746  000C92  C0A7  F0D3         	movff	?_ConvertParallelSpeed+1,parallel@SpeedRight+1
  2747                           
  2748                           ;parallel.c: 34: SpeedLeft=ConvertParallelSpeed(left);
  2749  000C96  0100               	movlb	0	; () banked
  2750  000C98  51C0               	movf	ReadParallel@left& (0+255),w,b
  2751  000C9A  ECA7  F006         	call	_ConvertParallelSpeed
  2752  000C9E  C0A6  F0D0         	movff	?_ConvertParallelSpeed,parallel@SpeedLeft
  2753  000CA2  C0A7  F0D1         	movff	?_ConvertParallelSpeed+1,parallel@SpeedLeft+1
  2754                           
  2755                           ;parallel.c: 35: if (left==0x0c){
  2756  000CA6  0E0C               	movlw	12
  2757  000CA8  0100               	movlb	0	; () banked
  2758  000CAA  19C0               	xorwf	ReadParallel@left& (0+255),w,b
  2759  000CAC  A4D8               	btfss	status,2,c
  2760  000CAE  D005               	goto	l2715
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;parallel.c: 36: Mode=1;
  2764  000CB0  0E00               	movlw	0
  2765  000CB2  0100               	movlb	0	; () banked
  2766  000CB4  6FCD               	movwf	(_Mode+1)& (0+255),b
  2767  000CB6  0E01               	movlw	1
  2768  000CB8  D004               	goto	L1
  2769  000CBA                     l2715:
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;parallel.c: 38: Mode=0;
  2773  000CBA  0E00               	movlw	0
  2774  000CBC  0100               	movlb	0	; () banked
  2775  000CBE  6FCD               	movwf	(_Mode+1)& (0+255),b
  2776  000CC0  0E00               	movlw	0
  2777  000CC2                     L1:
  2778  000CC2  6FCC               	movwf	_Mode& (0+255),b
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;parallel.c: 39: }
  2782                           ;parallel.c: 42: int temp=(int)right;
  2783                           
  2784                           ; BSR set to: 0
  2785  000CC4  C0BF  F0BC         	movff	ReadParallel@right,ReadParallel@temp
  2786  000CC8  0100               	movlb	0	; () banked
  2787  000CCA  6BBD               	clrf	(ReadParallel@temp+1)& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;parallel.c: 43: LCDGotoXY(0,0);
  2791  000CCC  0E00               	movlw	0
  2792  000CCE  0100               	movlb	0	; () banked
  2793  000CD0  6FAE               	movwf	LCDGotoXY@y& (0+255),b
  2794  000CD2  0E00               	movlw	0
  2795  000CD4  EC04  F00A         	call	_LCDGotoXY
  2796                           
  2797                           ;parallel.c: 44: LCDWriteInt(temp, 4);
  2798  000CD8  C0BC  F0AE         	movff	ReadParallel@temp,LCDWriteInt@val
  2799  000CDC  C0BD  F0AF         	movff	ReadParallel@temp+1,LCDWriteInt@val+1
  2800  000CE0  0E04               	movlw	4
  2801  000CE2  0100               	movlb	0	; () banked
  2802  000CE4  6FB0               	movwf	LCDWriteInt@field_length& (0+255),b
  2803  000CE6  ECA6  F004         	call	_LCDWriteInt	;wreg free
  2804                           
  2805                           ;parallel.c: 45: LCDGotoXY(8,0);
  2806  000CEA  0E00               	movlw	0
  2807  000CEC  0100               	movlb	0	; () banked
  2808  000CEE  6FAE               	movwf	LCDGotoXY@y& (0+255),b
  2809  000CF0  0E08               	movlw	8
  2810  000CF2  EC04  F00A         	call	_LCDGotoXY
  2811                           
  2812                           ;parallel.c: 46: LCDWriteInt(SpeedRight,4);
  2813  000CF6  C0D2  F0AE         	movff	parallel@SpeedRight,LCDWriteInt@val
  2814  000CFA  C0D3  F0AF         	movff	parallel@SpeedRight+1,LCDWriteInt@val+1
  2815  000CFE  0E04               	movlw	4
  2816  000D00  0100               	movlb	0	; () banked
  2817  000D02  6FB0               	movwf	LCDWriteInt@field_length& (0+255),b
  2818  000D04  ECA6  F004         	call	_LCDWriteInt	;wreg free
  2819                           
  2820                           ;parallel.c: 47: int temp=(int)left;
  2821  000D08  C0C0  F0BC         	movff	ReadParallel@left,ReadParallel@temp
  2822  000D0C  0100               	movlb	0	; () banked
  2823  000D0E  6BBD               	clrf	(ReadParallel@temp+1)& (0+255),b
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;parallel.c: 48: LCDGotoXY(0,1);
  2827  000D10  0E01               	movlw	1
  2828  000D12  0100               	movlb	0	; () banked
  2829  000D14  6FAE               	movwf	LCDGotoXY@y& (0+255),b
  2830  000D16  0E00               	movlw	0
  2831  000D18  EC04  F00A         	call	_LCDGotoXY
  2832                           
  2833                           ;parallel.c: 49: LCDWriteInt(temp, 4);
  2834  000D1C  C0BC  F0AE         	movff	ReadParallel@temp,LCDWriteInt@val
  2835  000D20  C0BD  F0AF         	movff	ReadParallel@temp+1,LCDWriteInt@val+1
  2836  000D24  0E04               	movlw	4
  2837  000D26  0100               	movlb	0	; () banked
  2838  000D28  6FB0               	movwf	LCDWriteInt@field_length& (0+255),b
  2839  000D2A  ECA6  F004         	call	_LCDWriteInt	;wreg free
  2840                           
  2841                           ;parallel.c: 50: LCDGotoXY(8,1);
  2842  000D2E  0E01               	movlw	1
  2843  000D30  0100               	movlb	0	; () banked
  2844  000D32  6FAE               	movwf	LCDGotoXY@y& (0+255),b
  2845  000D34  0E08               	movlw	8
  2846  000D36  EC04  F00A         	call	_LCDGotoXY
  2847                           
  2848                           ;parallel.c: 51: LCDWriteInt(SpeedLeft,4);
  2849  000D3A  C0D0  F0AE         	movff	parallel@SpeedLeft,LCDWriteInt@val
  2850  000D3E  C0D1  F0AF         	movff	parallel@SpeedLeft+1,LCDWriteInt@val+1
  2851  000D42  0E04               	movlw	4
  2852  000D44  0100               	movlb	0	; () banked
  2853  000D46  6FB0               	movwf	LCDWriteInt@field_length& (0+255),b
  2854  000D48  ECA6  F004         	call	_LCDWriteInt	;wreg free
  2855  000D4C  0012               	return		;funcret
  2856  000D4E                     __end_of_ReadParallel:
  2857                           	opt stack 0
  2858                           tblptru	equ	0xFF8
  2859                           tblptrh	equ	0xFF7
  2860                           tblptrl	equ	0xFF6
  2861                           tablat	equ	0xFF5
  2862                           prodh	equ	0xFF4
  2863                           prodl	equ	0xFF3
  2864                           intcon	equ	0xFF2
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           postdec1	equ	0xFE5
  2868                           fsr1l	equ	0xFE1
  2869                           indf2	equ	0xFDF
  2870                           fsr2h	equ	0xFDA
  2871                           fsr2l	equ	0xFD9
  2872                           status	equ	0xFD8
  2873                           
  2874 ;; *************** function _LCDWriteInt *****************
  2875 ;; Defined at:
  2876 ;;		line 310 in file "lcd_hd44780_pic16.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  val             2    8[BANK0 ] int 
  2879 ;;  field_length    1   10[BANK0 ] char 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;  str             5   13[BANK0 ] unsigned char [5]
  2882 ;;  i               2   20[BANK0 ] int 
  2883 ;;  j               2   18[BANK0 ] int 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         0       3       0       0       0       0       0
  2894 ;;      Locals:         0       9       0       0       0       0       0
  2895 ;;      Temps:          0       2       0       0       0       0       0
  2896 ;;      Totals:         0      14       0       0       0       0       0
  2897 ;;Total ram usage:       14 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    6
  2900 ;; This function calls:
  2901 ;;		_LCDByte
  2902 ;;		___awdiv
  2903 ;;		___awmod
  2904 ;; This function is called by:
  2905 ;;		_ReadParallel
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text19
  2910  00094C                     __ptext19:
  2911                           	opt stack 0
  2912  00094C                     _LCDWriteInt:
  2913                           	opt stack 22
  2914                           
  2915                           ;lcd_hd44780_pic16.c: 323: char str[5]={0,0,0,0,0};
  2916                           
  2917                           ;incstack = 0
  2918  00094C  EE20  F0C7         	lfsr	2,LCDWriteInt@F4236
  2919  000950  EE10  F0B3         	lfsr	1,LCDWriteInt@str
  2920  000954  0E04               	movlw	4
  2921  000956                     u1361:
  2922  000956  CFDB FFE3          	movff	plusw2,plusw1
  2923  00095A  06E8               	decf	wreg,f,c
  2924  00095C  E2FC               	bc	u1361
  2925                           
  2926                           ;lcd_hd44780_pic16.c: 324: int i=4,j=0;
  2927  00095E  0E00               	movlw	0
  2928  000960  0100               	movlb	0	; () banked
  2929  000962  6FBB               	movwf	(LCDWriteInt@i+1)& (0+255),b
  2930  000964  0E04               	movlw	4
  2931  000966  6FBA               	movwf	LCDWriteInt@i& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934  000968  0E00               	movlw	0
  2935  00096A  0100               	movlb	0	; () banked
  2936  00096C  6FB9               	movwf	(LCDWriteInt@j+1)& (0+255),b
  2937  00096E  0E00               	movlw	0
  2938  000970  6FB8               	movwf	LCDWriteInt@j& (0+255),b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  2942  000972  0100               	movlb	0	; () banked
  2943  000974  AFAF               	btfss	(LCDWriteInt@val+1)& (0+255),7,b
  2944  000976  D035               	goto	l2467
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;lcd_hd44780_pic16.c: 328: {
  2948                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  2949  000978  0E01               	movlw	1
  2950  00097A  0100               	movlb	0	; () banked
  2951  00097C  6FA9               	movwf	LCDByte@isdata& (0+255),b
  2952  00097E  0E2D               	movlw	45
  2953  000980  ECAE  F009         	call	_LCDByte
  2954                           
  2955                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  2956  000984  0100               	movlb	0	; () banked
  2957  000986  6DAE               	negf	LCDWriteInt@val& (0+255),b
  2958  000988  1FAF               	comf	(LCDWriteInt@val+1)& (0+255),f,b
  2959  00098A  B0D8               	btfsc	status,0,c
  2960  00098C  2BAF               	incf	(LCDWriteInt@val+1)& (0+255),f,b
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;lcd_hd44780_pic16.c: 331: }
  2964                           ;lcd_hd44780_pic16.c: 333: while(val)
  2965  00098E  D029               	goto	l2467
  2966  000990                     l2461:
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;lcd_hd44780_pic16.c: 334: {
  2970                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  2971  000990  0EB3               	movlw	low LCDWriteInt@str
  2972  000992  0100               	movlb	0	; () banked
  2973  000994  25BA               	addwf	LCDWriteInt@i& (0+255),w,b
  2974  000996  6ED9               	movwf	fsr2l,c
  2975  000998  0E00               	movlw	high LCDWriteInt@str
  2976  00099A  0100               	movlb	0	; () banked
  2977  00099C  21BB               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  2978  00099E  6EDA               	movwf	fsr2h,c
  2979  0009A0  C0AE  F0A6         	movff	LCDWriteInt@val,___awmod@dividend
  2980  0009A4  C0AF  F0A7         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  2981  0009A8  0E00               	movlw	0
  2982  0009AA  0100               	movlb	0	; () banked
  2983  0009AC  6FA9               	movwf	(___awmod@divisor+1)& (0+255),b
  2984  0009AE  0E0A               	movlw	10
  2985  0009B0  6FA8               	movwf	___awmod@divisor& (0+255),b
  2986  0009B2  EC2D  F008         	call	___awmod	;wreg free
  2987  0009B6  0100               	movlb	0	; () banked
  2988  0009B8  51A6               	movf	?___awmod& (0+255),w,b
  2989  0009BA  6EDF               	movwf	indf2,c
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  2993  0009BC  C0AE  F0A6         	movff	LCDWriteInt@val,___awdiv@dividend
  2994  0009C0  C0AF  F0A7         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  2995  0009C4  0E00               	movlw	0
  2996  0009C6  0100               	movlb	0	; () banked
  2997  0009C8  6FA9               	movwf	(___awdiv@divisor+1)& (0+255),b
  2998  0009CA  0E0A               	movlw	10
  2999  0009CC  6FA8               	movwf	___awdiv@divisor& (0+255),b
  3000  0009CE  EC77  F007         	call	___awdiv	;wreg free
  3001  0009D2  C0A6  F0AE         	movff	?___awdiv,LCDWriteInt@val
  3002  0009D6  C0A7  F0AF         	movff	?___awdiv+1,LCDWriteInt@val+1
  3003                           
  3004                           ;lcd_hd44780_pic16.c: 337: i--;
  3005  0009DA  0100               	movlb	0	; () banked
  3006  0009DC  07BA               	decf	LCDWriteInt@i& (0+255),f,b
  3007  0009DE  A0D8               	btfss	status,0,c
  3008  0009E0  07BB               	decf	(LCDWriteInt@i+1)& (0+255),f,b
  3009  0009E2                     l2467:
  3010                           
  3011                           ; BSR set to: 0
  3012  0009E2  0100               	movlb	0	; () banked
  3013  0009E4  51AE               	movf	LCDWriteInt@val& (0+255),w,b
  3014  0009E6  0100               	movlb	0	; () banked
  3015  0009E8  11AF               	iorwf	(LCDWriteInt@val+1)& (0+255),w,b
  3016  0009EA  A4D8               	btfss	status,2,c
  3017  0009EC  D7D1               	goto	l2461
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;lcd_hd44780_pic16.c: 338: }
  3021                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  3022                           
  3023                           ; BSR set to: 0
  3024  0009EE  0100               	movlb	0	; () banked
  3025  0009F0  29B0               	incf	LCDWriteInt@field_length& (0+255),w,b
  3026  0009F2  B4D8               	btfsc	status,2,c
  3027  0009F4  D004               	goto	l2475
  3028  0009F6  D00F               	goto	l2477
  3029  0009F8                     l2473:
  3030                           
  3031                           ; BSR set to: 0
  3032  0009F8  0100               	movlb	0	; () banked
  3033  0009FA  4BB8               	infsnz	LCDWriteInt@j& (0+255),f,b
  3034  0009FC  2BB9               	incf	(LCDWriteInt@j+1)& (0+255),f,b
  3035  0009FE                     l2475:
  3036                           
  3037                           ; BSR set to: 0
  3038  0009FE  0EB3               	movlw	low LCDWriteInt@str
  3039  000A00  0100               	movlb	0	; () banked
  3040  000A02  25B8               	addwf	LCDWriteInt@j& (0+255),w,b
  3041  000A04  6ED9               	movwf	fsr2l,c
  3042  000A06  0E00               	movlw	high LCDWriteInt@str
  3043  000A08  0100               	movlb	0	; () banked
  3044  000A0A  21B9               	addwfc	(LCDWriteInt@j+1)& (0+255),w,b
  3045  000A0C  6EDA               	movwf	fsr2h,c
  3046  000A0E  50DF               	movf	indf2,w,c
  3047  000A10  A4D8               	btfss	status,2,c
  3048  000A12  D016               	goto	l2479
  3049  000A14  D7F1               	goto	l2473
  3050  000A16                     l2477:
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;lcd_hd44780_pic16.c: 341: else
  3054                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  3055  000A16  C0B0  F0B1         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  3056  000A1A  0100               	movlb	0	; () banked
  3057  000A1C  6BB2               	clrf	(??_LCDWriteInt+1)& (0+255),b
  3058  000A1E  BFB1               	btfsc	??_LCDWriteInt& (0+255),7,b
  3059  000A20  07B2               	decf	(??_LCDWriteInt+1)& (0+255),f,b
  3060  000A22  0100               	movlb	0	; () banked
  3061  000A24  1FB1               	comf	??_LCDWriteInt& (0+255),f,b
  3062  000A26  1FB2               	comf	(??_LCDWriteInt+1)& (0+255),f,b
  3063  000A28  4BB1               	infsnz	??_LCDWriteInt& (0+255),f,b
  3064  000A2A  2BB2               	incf	(??_LCDWriteInt+1)& (0+255),f,b
  3065  000A2C  0E05               	movlw	5
  3066  000A2E  0100               	movlb	0	; () banked
  3067  000A30  25B1               	addwf	??_LCDWriteInt& (0+255),w,b
  3068  000A32  0100               	movlb	0	; () banked
  3069  000A34  6FB8               	movwf	LCDWriteInt@j& (0+255),b
  3070  000A36  0E00               	movlw	0
  3071  000A38  0100               	movlb	0	; () banked
  3072  000A3A  21B2               	addwfc	(??_LCDWriteInt+1)& (0+255),w,b
  3073  000A3C  0100               	movlb	0	; () banked
  3074  000A3E  6FB9               	movwf	(LCDWriteInt@j+1)& (0+255),b
  3075  000A40                     l2479:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  3079  000A40  C0B8  F0BA         	movff	LCDWriteInt@j,LCDWriteInt@i
  3080  000A44  C0B9  F0BB         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  3081  000A48  0100               	movlb	0	; () banked
  3082  000A4A  BFBB               	btfsc	(LCDWriteInt@i+1)& (0+255),7,b
  3083  000A4C  D008               	goto	l2483
  3084  000A4E  0100               	movlb	0	; () banked
  3085  000A50  51BB               	movf	(LCDWriteInt@i+1)& (0+255),w,b
  3086  000A52  E118               	bnz	l297
  3087  000A54  0E05               	movlw	5
  3088  000A56  0100               	movlb	0	; () banked
  3089  000A58  5DBA               	subwf	LCDWriteInt@i& (0+255),w,b
  3090  000A5A  B0D8               	btfsc	status,0,c
  3091  000A5C  0012               	return	
  3092  000A5E                     l2483:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;lcd_hd44780_pic16.c: 346: {
  3096                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  3097  000A5E  0E01               	movlw	1
  3098  000A60  0100               	movlb	0	; () banked
  3099  000A62  6FA9               	movwf	LCDByte@isdata& (0+255),b
  3100  000A64  0EB3               	movlw	low LCDWriteInt@str
  3101  000A66  0100               	movlb	0	; () banked
  3102  000A68  25BA               	addwf	LCDWriteInt@i& (0+255),w,b
  3103  000A6A  6ED9               	movwf	fsr2l,c
  3104  000A6C  0E00               	movlw	high LCDWriteInt@str
  3105  000A6E  0100               	movlb	0	; () banked
  3106  000A70  21BB               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  3107  000A72  6EDA               	movwf	fsr2h,c
  3108  000A74  50DF               	movf	indf2,w,c
  3109  000A76  0F30               	addlw	48
  3110  000A78  ECAE  F009         	call	_LCDByte
  3111  000A7C  0100               	movlb	0	; () banked
  3112  000A7E  4BBA               	infsnz	LCDWriteInt@i& (0+255),f,b
  3113  000A80  2BBB               	incf	(LCDWriteInt@i+1)& (0+255),f,b
  3114  000A82  D7E2               	goto	L2
  3115  000A84                     l297:
  3116                           
  3117                           ; BSR set to: 0
  3118  000A84  0012               	return		;funcret
  3119  000A86                     __end_of_LCDWriteInt:
  3120                           	opt stack 0
  3121                           tblptru	equ	0xFF8
  3122                           tblptrh	equ	0xFF7
  3123                           tblptrl	equ	0xFF6
  3124                           tablat	equ	0xFF5
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           intcon	equ	0xFF2
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           plusw1	equ	0xFE3
  3132                           fsr1l	equ	0xFE1
  3133                           indf2	equ	0xFDF
  3134                           plusw2	equ	0xFDB
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function ___awmod *****************
  3140 ;; Defined at:
  3141 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  dividend        2    0[BANK0 ] int 
  3144 ;;  divisor         2    2[BANK0 ] int 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;  sign            1    5[BANK0 ] unsigned char 
  3147 ;;  counter         1    4[BANK0 ] unsigned char 
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  2    0[BANK0 ] int 
  3150 ;; Registers used:
  3151 ;;		wreg, status,2, status,0
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3157 ;;      Params:         0       4       0       0       0       0       0
  3158 ;;      Locals:         0       2       0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0       0       0
  3160 ;;      Totals:         0       6       0       0       0       0       0
  3161 ;;Total ram usage:        6 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    4
  3164 ;; This function calls:
  3165 ;;		Nothing
  3166 ;; This function is called by:
  3167 ;;		_LCDWriteInt
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           	psect	text20
  3172  00105A                     __ptext20:
  3173                           	opt stack 0
  3174  00105A                     ___awmod:
  3175                           	opt stack 23
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;incstack = 0
  3179  00105A  0E00               	movlw	0
  3180  00105C  0100               	movlb	0	; () banked
  3181  00105E  6FAB               	movwf	___awmod@sign& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184  001060  0100               	movlb	0	; () banked
  3185  001062  AFA7               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3186  001064  D008               	goto	l2397
  3187                           
  3188                           ; BSR set to: 0
  3189  001066  0100               	movlb	0	; () banked
  3190  001068  6DA6               	negf	___awmod@dividend& (0+255),b
  3191  00106A  1FA7               	comf	(___awmod@dividend+1)& (0+255),f,b
  3192  00106C  B0D8               	btfsc	status,0,c
  3193  00106E  2BA7               	incf	(___awmod@dividend+1)& (0+255),f,b
  3194                           
  3195                           ; BSR set to: 0
  3196  001070  0E01               	movlw	1
  3197  001072  0100               	movlb	0	; () banked
  3198  001074  6FAB               	movwf	___awmod@sign& (0+255),b
  3199  001076                     l2397:
  3200                           
  3201                           ; BSR set to: 0
  3202  001076  0100               	movlb	0	; () banked
  3203  001078  AFA9               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3204  00107A  D005               	goto	l2401
  3205                           
  3206                           ; BSR set to: 0
  3207  00107C  0100               	movlb	0	; () banked
  3208  00107E  6DA8               	negf	___awmod@divisor& (0+255),b
  3209  001080  1FA9               	comf	(___awmod@divisor+1)& (0+255),f,b
  3210  001082  B0D8               	btfsc	status,0,c
  3211  001084  2BA9               	incf	(___awmod@divisor+1)& (0+255),f,b
  3212  001086                     l2401:
  3213                           
  3214                           ; BSR set to: 0
  3215  001086  0100               	movlb	0	; () banked
  3216  001088  51A8               	movf	___awmod@divisor& (0+255),w,b
  3217  00108A  0100               	movlb	0	; () banked
  3218  00108C  11A9               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3219  00108E  B4D8               	btfsc	status,2,c
  3220  001090  D026               	goto	l2417
  3221                           
  3222                           ; BSR set to: 0
  3223  001092  0E01               	movlw	1
  3224  001094  0100               	movlb	0	; () banked
  3225  001096  6FAA               	movwf	___awmod@counter& (0+255),b
  3226  001098  D006               	goto	l2407
  3227  00109A                     l2405:
  3228                           
  3229                           ; BSR set to: 0
  3230  00109A  0100               	movlb	0	; () banked
  3231  00109C  90D8               	bcf	status,0,c
  3232  00109E  37A8               	rlcf	___awmod@divisor& (0+255),f,b
  3233  0010A0  37A9               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  3234  0010A2  0100               	movlb	0	; () banked
  3235  0010A4  2BAA               	incf	___awmod@counter& (0+255),f,b
  3236  0010A6                     l2407:
  3237                           
  3238                           ; BSR set to: 0
  3239  0010A6  0100               	movlb	0	; () banked
  3240  0010A8  AFA9               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3241  0010AA  D7F7               	goto	l2405
  3242  0010AC                     l2409:
  3243                           
  3244                           ; BSR set to: 0
  3245  0010AC  0100               	movlb	0	; () banked
  3246  0010AE  51A8               	movf	___awmod@divisor& (0+255),w,b
  3247  0010B0  0100               	movlb	0	; () banked
  3248  0010B2  5DA6               	subwf	___awmod@dividend& (0+255),w,b
  3249  0010B4  0100               	movlb	0	; () banked
  3250  0010B6  51A9               	movf	(___awmod@divisor+1)& (0+255),w,b
  3251  0010B8  0100               	movlb	0	; () banked
  3252  0010BA  59A7               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  3253  0010BC  A0D8               	btfss	status,0,c
  3254  0010BE  D008               	goto	l2413
  3255                           
  3256                           ; BSR set to: 0
  3257  0010C0  0100               	movlb	0	; () banked
  3258  0010C2  51A8               	movf	___awmod@divisor& (0+255),w,b
  3259  0010C4  0100               	movlb	0	; () banked
  3260  0010C6  5FA6               	subwf	___awmod@dividend& (0+255),f,b
  3261  0010C8  0100               	movlb	0	; () banked
  3262  0010CA  51A9               	movf	(___awmod@divisor+1)& (0+255),w,b
  3263  0010CC  0100               	movlb	0	; () banked
  3264  0010CE  5BA7               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  3265  0010D0                     l2413:
  3266                           
  3267                           ; BSR set to: 0
  3268  0010D0  0100               	movlb	0	; () banked
  3269  0010D2  90D8               	bcf	status,0,c
  3270  0010D4  33A9               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  3271  0010D6  33A8               	rrcf	___awmod@divisor& (0+255),f,b
  3272                           
  3273                           ; BSR set to: 0
  3274  0010D8  0100               	movlb	0	; () banked
  3275  0010DA  2FAA               	decfsz	___awmod@counter& (0+255),f,b
  3276  0010DC  D7E7               	goto	l2409
  3277  0010DE                     l2417:
  3278                           
  3279                           ; BSR set to: 0
  3280  0010DE  0100               	movlb	0	; () banked
  3281  0010E0  51AB               	movf	___awmod@sign& (0+255),w,b
  3282  0010E2  0100               	movlb	0	; () banked
  3283  0010E4  B4D8               	btfsc	status,2,c
  3284  0010E6  D005               	goto	l2421
  3285                           
  3286                           ; BSR set to: 0
  3287  0010E8  0100               	movlb	0	; () banked
  3288  0010EA  6DA6               	negf	___awmod@dividend& (0+255),b
  3289  0010EC  1FA7               	comf	(___awmod@dividend+1)& (0+255),f,b
  3290  0010EE  B0D8               	btfsc	status,0,c
  3291  0010F0  2BA7               	incf	(___awmod@dividend+1)& (0+255),f,b
  3292  0010F2                     l2421:
  3293                           
  3294                           ; BSR set to: 0
  3295  0010F2  C0A6  F0A6         	movff	___awmod@dividend,?___awmod
  3296  0010F6  C0A7  F0A7         	movff	___awmod@dividend+1,?___awmod+1
  3297  0010FA  0012               	return	
  3298  0010FC                     __end_of___awmod:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           intcon	equ	0xFF2
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           plusw1	equ	0xFE3
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           plusw2	equ	0xFDB
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function ___awdiv *****************
  3319 ;; Defined at:
  3320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  dividend        2    0[BANK0 ] int 
  3323 ;;  divisor         2    2[BANK0 ] int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  quotient        2    6[BANK0 ] int 
  3326 ;;  sign            1    5[BANK0 ] unsigned char 
  3327 ;;  counter         1    4[BANK0 ] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  2    0[BANK0 ] int 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3337 ;;      Params:         0       4       0       0       0       0       0
  3338 ;;      Locals:         0       4       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0
  3340 ;;      Totals:         0       8       0       0       0       0       0
  3341 ;;Total ram usage:        8 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    4
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_LCDWriteInt
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text21
  3352  000EEE                     __ptext21:
  3353                           	opt stack 0
  3354  000EEE                     ___awdiv:
  3355                           	opt stack 23
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;incstack = 0
  3359  000EEE  0E00               	movlw	0
  3360  000EF0  0100               	movlb	0	; () banked
  3361  000EF2  6FAB               	movwf	___awdiv@sign& (0+255),b
  3362                           
  3363                           ; BSR set to: 0
  3364  000EF4  0100               	movlb	0	; () banked
  3365  000EF6  AFA9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3366  000EF8  D008               	goto	l2353
  3367                           
  3368                           ; BSR set to: 0
  3369  000EFA  0100               	movlb	0	; () banked
  3370  000EFC  6DA8               	negf	___awdiv@divisor& (0+255),b
  3371  000EFE  1FA9               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3372  000F00  B0D8               	btfsc	status,0,c
  3373  000F02  2BA9               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3374                           
  3375                           ; BSR set to: 0
  3376  000F04  0E01               	movlw	1
  3377  000F06  0100               	movlb	0	; () banked
  3378  000F08  6FAB               	movwf	___awdiv@sign& (0+255),b
  3379  000F0A                     l2353:
  3380                           
  3381                           ; BSR set to: 0
  3382  000F0A  0100               	movlb	0	; () banked
  3383  000F0C  AFA7               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3384  000F0E  D008               	goto	l2359
  3385                           
  3386                           ; BSR set to: 0
  3387  000F10  0100               	movlb	0	; () banked
  3388  000F12  6DA6               	negf	___awdiv@dividend& (0+255),b
  3389  000F14  1FA7               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3390  000F16  B0D8               	btfsc	status,0,c
  3391  000F18  2BA7               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3392                           
  3393                           ; BSR set to: 0
  3394  000F1A  0E01               	movlw	1
  3395  000F1C  0100               	movlb	0	; () banked
  3396  000F1E  1BAB               	xorwf	___awdiv@sign& (0+255),f,b
  3397  000F20                     l2359:
  3398                           
  3399                           ; BSR set to: 0
  3400  000F20  0E00               	movlw	0
  3401  000F22  0100               	movlb	0	; () banked
  3402  000F24  6FAD               	movwf	(___awdiv@quotient+1)& (0+255),b
  3403  000F26  0E00               	movlw	0
  3404  000F28  6FAC               	movwf	___awdiv@quotient& (0+255),b
  3405                           
  3406                           ; BSR set to: 0
  3407  000F2A  0100               	movlb	0	; () banked
  3408  000F2C  51A8               	movf	___awdiv@divisor& (0+255),w,b
  3409  000F2E  0100               	movlb	0	; () banked
  3410  000F30  11A9               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  3411  000F32  B4D8               	btfsc	status,2,c
  3412  000F34  D02C               	goto	l2381
  3413                           
  3414                           ; BSR set to: 0
  3415  000F36  0E01               	movlw	1
  3416  000F38  0100               	movlb	0	; () banked
  3417  000F3A  6FAA               	movwf	___awdiv@counter& (0+255),b
  3418  000F3C  D006               	goto	l2367
  3419  000F3E                     l2365:
  3420                           
  3421                           ; BSR set to: 0
  3422  000F3E  0100               	movlb	0	; () banked
  3423  000F40  90D8               	bcf	status,0,c
  3424  000F42  37A8               	rlcf	___awdiv@divisor& (0+255),f,b
  3425  000F44  37A9               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  3426  000F46  0100               	movlb	0	; () banked
  3427  000F48  2BAA               	incf	___awdiv@counter& (0+255),f,b
  3428  000F4A                     l2367:
  3429                           
  3430                           ; BSR set to: 0
  3431  000F4A  0100               	movlb	0	; () banked
  3432  000F4C  AFA9               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3433  000F4E  D7F7               	goto	l2365
  3434  000F50                     l2369:
  3435                           
  3436                           ; BSR set to: 0
  3437  000F50  0100               	movlb	0	; () banked
  3438  000F52  90D8               	bcf	status,0,c
  3439  000F54  37AC               	rlcf	___awdiv@quotient& (0+255),f,b
  3440  000F56  37AD               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  3441                           
  3442                           ; BSR set to: 0
  3443  000F58  0100               	movlb	0	; () banked
  3444  000F5A  51A8               	movf	___awdiv@divisor& (0+255),w,b
  3445  000F5C  0100               	movlb	0	; () banked
  3446  000F5E  5DA6               	subwf	___awdiv@dividend& (0+255),w,b
  3447  000F60  0100               	movlb	0	; () banked
  3448  000F62  51A9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3449  000F64  0100               	movlb	0	; () banked
  3450  000F66  59A7               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  3451  000F68  A0D8               	btfss	status,0,c
  3452  000F6A  D00A               	goto	l2377
  3453                           
  3454                           ; BSR set to: 0
  3455  000F6C  0100               	movlb	0	; () banked
  3456  000F6E  51A8               	movf	___awdiv@divisor& (0+255),w,b
  3457  000F70  0100               	movlb	0	; () banked
  3458  000F72  5FA6               	subwf	___awdiv@dividend& (0+255),f,b
  3459  000F74  0100               	movlb	0	; () banked
  3460  000F76  51A9               	movf	(___awdiv@divisor+1)& (0+255),w,b
  3461  000F78  0100               	movlb	0	; () banked
  3462  000F7A  5BA7               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  3463                           
  3464                           ; BSR set to: 0
  3465  000F7C  0100               	movlb	0	; () banked
  3466  000F7E  81AC               	bsf	___awdiv@quotient& (0+255),0,b
  3467  000F80                     l2377:
  3468                           
  3469                           ; BSR set to: 0
  3470  000F80  0100               	movlb	0	; () banked
  3471  000F82  90D8               	bcf	status,0,c
  3472  000F84  33A9               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  3473  000F86  33A8               	rrcf	___awdiv@divisor& (0+255),f,b
  3474                           
  3475                           ; BSR set to: 0
  3476  000F88  0100               	movlb	0	; () banked
  3477  000F8A  2FAA               	decfsz	___awdiv@counter& (0+255),f,b
  3478  000F8C  D7E1               	goto	l2369
  3479  000F8E                     l2381:
  3480                           
  3481                           ; BSR set to: 0
  3482  000F8E  0100               	movlb	0	; () banked
  3483  000F90  51AB               	movf	___awdiv@sign& (0+255),w,b
  3484  000F92  0100               	movlb	0	; () banked
  3485  000F94  B4D8               	btfsc	status,2,c
  3486  000F96  D005               	goto	l2385
  3487                           
  3488                           ; BSR set to: 0
  3489  000F98  0100               	movlb	0	; () banked
  3490  000F9A  6DAC               	negf	___awdiv@quotient& (0+255),b
  3491  000F9C  1FAD               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3492  000F9E  B0D8               	btfsc	status,0,c
  3493  000FA0  2BAD               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3494  000FA2                     l2385:
  3495                           
  3496                           ; BSR set to: 0
  3497  000FA2  C0AC  F0A6         	movff	___awdiv@quotient,?___awdiv
  3498  000FA6  C0AD  F0A7         	movff	___awdiv@quotient+1,?___awdiv+1
  3499  000FAA  0012               	return	
  3500  000FAC                     __end_of___awdiv:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           postdec1	equ	0xFE5
  3512                           plusw1	equ	0xFE3
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           plusw2	equ	0xFDB
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520 ;; *************** function _LCDGotoXY *****************
  3521 ;; Defined at:
  3522 ;;		line 355 in file "lcd_hd44780_pic16.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  x               1    wreg     unsigned char 
  3525 ;;  y               1    8[BANK0 ] unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  x               1    9[BANK0 ] unsigned char 
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg, status,2, status,0, cstack
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3537 ;;      Params:         0       1       0       0       0       0       0
  3538 ;;      Locals:         0       1       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0
  3540 ;;      Totals:         0       2       0       0       0       0       0
  3541 ;;Total ram usage:        2 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    6
  3544 ;; This function calls:
  3545 ;;		_LCDByte
  3546 ;; This function is called by:
  3547 ;;		_ReadParallel
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text22
  3552  001408                     __ptext22:
  3553                           	opt stack 0
  3554  001408                     _LCDGotoXY:
  3555                           	opt stack 22
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;incstack = 0
  3559                           ;LCDGotoXY@x stored from wreg
  3560  001408  0100               	movlb	0	; () banked
  3561  00140A  6FAF               	movwf	LCDGotoXY@x& (0+255),b
  3562                           
  3563                           ;lcd_hd44780_pic16.c: 357: if(x>=20) return;
  3564  00140C  0E13               	movlw	19
  3565  00140E  0100               	movlb	0	; () banked
  3566  001410  65AF               	cpfsgt	LCDGotoXY@x& (0+255),b
  3567  001412  D00A               	goto	l2501
  3568  001414  0012               	return	
  3569  001416                     l2493:
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;lcd_hd44780_pic16.c: 366: x|=0b01000000;
  3573  001416  0100               	movlb	0	; () banked
  3574  001418  8DAF               	bsf	LCDGotoXY@x& (0+255),6,b
  3575                           
  3576                           ;lcd_hd44780_pic16.c: 367: break;
  3577  00141A  D014               	goto	l2503
  3578  00141C                     l2495:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;lcd_hd44780_pic16.c: 369: x+=0x14;
  3582  00141C  0E14               	movlw	20
  3583  00141E  D001               	goto	L3
  3584  001420                     l2497:
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;lcd_hd44780_pic16.c: 372: x+=0x54;
  3588  001420  0E54               	movlw	84
  3589  001422                     L3:
  3590  001422  0100               	movlb	0	; () banked
  3591  001424  27AF               	addwf	LCDGotoXY@x& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;lcd_hd44780_pic16.c: 374: }
  3595                           
  3596                           ;lcd_hd44780_pic16.c: 373: break;
  3597  001426  D00E               	goto	l2503
  3598  001428                     l2501:
  3599                           
  3600                           ; BSR set to: 0
  3601  001428  0100               	movlb	0	; () banked
  3602  00142A  51AE               	movf	LCDGotoXY@y& (0+255),w,b
  3603                           
  3604                           ; Switch size 1, requested type "space"
  3605                           ; Number of cases is 4, Range of values is 0 to 3
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte           13     7 (average)
  3609                           ;	Chosen strategy is simple_byte
  3610  00142C  0A00               	xorlw	0	; case 0
  3611  00142E  B4D8               	btfsc	status,2,c
  3612  001430  D009               	goto	l2503
  3613  001432  0A01               	xorlw	1	; case 1
  3614  001434  B4D8               	btfsc	status,2,c
  3615  001436  D7EF               	goto	l2493
  3616  001438  0A03               	xorlw	3	; case 2
  3617  00143A  B4D8               	btfsc	status,2,c
  3618  00143C  D7EF               	goto	l2495
  3619  00143E  0A01               	xorlw	1	; case 3
  3620  001440  B4D8               	btfsc	status,2,c
  3621  001442  D7EE               	goto	l2497
  3622  001444                     l2503:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;lcd_hd44780_pic16.c: 396: x|=0b10000000;
  3626  001444  0100               	movlb	0	; () banked
  3627  001446  8FAF               	bsf	LCDGotoXY@x& (0+255),7,b
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;lcd_hd44780_pic16.c: 397: (LCDByte(x,0));
  3631  001448  0E00               	movlw	0
  3632  00144A  0100               	movlb	0	; () banked
  3633  00144C  6FA9               	movwf	LCDByte@isdata& (0+255),b
  3634  00144E  0100               	movlb	0	; () banked
  3635  001450  51AF               	movf	LCDGotoXY@x& (0+255),w,b
  3636  001452  ECAE  F009         	call	_LCDByte
  3637  001456  0012               	return		;funcret
  3638  001458                     __end_of_LCDGotoXY:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           intcon	equ	0xFF2
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postdec1	equ	0xFE5
  3650                           plusw1	equ	0xFE3
  3651                           fsr1l	equ	0xFE1
  3652                           indf2	equ	0xFDF
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _LCDByte *****************
  3659 ;; Defined at:
  3660 ;;		line 83 in file "lcd_hd44780_pic16.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;  c               1    wreg     unsigned char 
  3663 ;;  isdata          1    3[BANK0 ] unsigned char 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  c               1    6[BANK0 ] unsigned char 
  3666 ;;  temp            1    7[BANK0 ] unsigned char 
  3667 ;;  ln              1    5[BANK0 ] unsigned char 
  3668 ;;  hn              1    4[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3678 ;;      Params:         0       1       0       0       0       0       0
  3679 ;;      Locals:         0       4       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0
  3681 ;;      Totals:         0       5       0       0       0       0       0
  3682 ;;Total ram usage:        5 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    5
  3685 ;; This function calls:
  3686 ;;		_LCDBusyLoop
  3687 ;; This function is called by:
  3688 ;;		_LCDInit
  3689 ;;		_LCDWriteInt
  3690 ;;		_LCDGotoXY
  3691 ;;		_LCDWriteString
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text23
  3696  00135C                     __ptext23:
  3697                           	opt stack 0
  3698  00135C                     _LCDByte:
  3699                           	opt stack 24
  3700                           
  3701                           ;incstack = 0
  3702                           ;LCDByte@c stored from wreg
  3703  00135C  0100               	movlb	0	; () banked
  3704  00135E  6FAC               	movwf	LCDByte@c& (0+255),b
  3705                           
  3706                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  3707                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  3708                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  3709  001360  0100               	movlb	0	; () banked
  3710  001362  39AC               	swapf	LCDByte@c& (0+255),w,b
  3711  001364  0B0F               	andlw	15
  3712  001366  0100               	movlb	0	; () banked
  3713  001368  6FAA               	movwf	LCDByte@hn& (0+255),b
  3714                           
  3715                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  3716  00136A  0100               	movlb	0	; () banked
  3717  00136C  51AC               	movf	LCDByte@c& (0+255),w,b
  3718  00136E  0B0F               	andlw	15
  3719  001370  0100               	movlb	0	; () banked
  3720  001372  6FAB               	movwf	LCDByte@ln& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  3724  001374  0100               	movlb	0	; () banked
  3725  001376  51A9               	movf	LCDByte@isdata& (0+255),w,b
  3726  001378  0100               	movlb	0	; () banked
  3727  00137A  A4D8               	btfss	status,2,c
  3728  00137C  D002               	goto	l259
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  3732  00137E  9883               	bcf	3971,4,c	;volatile
  3733  001380  D001               	goto	l260
  3734  001382                     l259:
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;lcd_hd44780_pic16.c: 100: else
  3738                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  3739  001382  8883               	bsf	3971,4,c	;volatile
  3740  001384                     l260:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3744                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  3745  001384  8C83               	bsf	3971,6,c	;volatile
  3746                           
  3747                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  3748  001386  5083               	movf	3971,w,c	;volatile
  3749  001388  0BF0               	andlw	240
  3750  00138A  0100               	movlb	0	; () banked
  3751  00138C  11AA               	iorwf	LCDByte@hn& (0+255),w,b
  3752  00138E  0100               	movlb	0	; () banked
  3753  001390  6FAD               	movwf	LCDByte@temp& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  3757  001392  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  3758                           
  3759                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3763  001396  9C83               	bcf	3971,6,c	;volatile
  3764                           
  3765                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  3766                           
  3767                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3768  001398  8C83               	bsf	3971,6,c	;volatile
  3769                           
  3770                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  3771  00139A  5083               	movf	3971,w,c	;volatile
  3772  00139C  0BF0               	andlw	240
  3773  00139E  0100               	movlb	0	; () banked
  3774  0013A0  11AB               	iorwf	LCDByte@ln& (0+255),w,b
  3775  0013A2  0100               	movlb	0	; () banked
  3776  0013A4  6FAD               	movwf	LCDByte@temp& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  3780  0013A6  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  3781                           
  3782                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3786  0013AA  9C83               	bcf	3971,6,c	;volatile
  3787                           
  3788                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  3789                           
  3790                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3791  0013AC  ECD9  F009         	call	_LCDBusyLoop	;wreg free
  3792  0013B0  0012               	return		;funcret
  3793  0013B2                     __end_of_LCDByte:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           plusw1	equ	0xFE3
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           plusw2	equ	0xFDB
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _LCDBusyLoop *****************
  3814 ;; Defined at:
  3815 ;;		line 138 in file "lcd_hd44780_pic16.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;		None
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  status          1    2[BANK0 ] unsigned char 
  3820 ;;  temp            1    1[BANK0 ] unsigned char 
  3821 ;;  busy            1    0[BANK0 ] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      void 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3831 ;;      Params:         0       0       0       0       0       0       0
  3832 ;;      Locals:         0       3       0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0
  3834 ;;      Totals:         0       3       0       0       0       0       0
  3835 ;;Total ram usage:        3 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    4
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_LCDByte
  3842 ;;		_LCDInit
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text24
  3847  0013B2                     __ptext24:
  3848                           	opt stack 0
  3849  0013B2                     _LCDBusyLoop:
  3850                           	opt stack 24
  3851                           
  3852                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  3853                           
  3854                           ;incstack = 0
  3855  0013B2  0E00               	movlw	0
  3856  0013B4  0100               	movlb	0	; () banked
  3857  0013B6  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  3861  0013B8  0E0F               	movlw	15
  3862  0013BA  1295               	iorwf	3989,f,c	;volatile
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  3866  0013BC  8A83               	bsf	3971,5,c	;volatile
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  3870  0013BE  9883               	bcf	3971,4,c	;volatile
  3871  0013C0                     l2251:
  3872                           
  3873                           ;lcd_hd44780_pic16.c: 157: {
  3874                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  3875  0013C0  8C83               	bsf	3971,6,c	;volatile
  3876                           
  3877                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  3878                           
  3879                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3880  0013C2  CF83 F0A8          	movff	3971,LCDBusyLoop@status	;volatile
  3881                           
  3882                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  3883  0013C6  0100               	movlb	0	; () banked
  3884  0013C8  39A8               	swapf	LCDBusyLoop@status& (0+255),w,b
  3885  0013CA  0BF0               	andlw	240
  3886  0013CC  0100               	movlb	0	; () banked
  3887  0013CE  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  3888                           
  3889                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3893  0013D0  9C83               	bcf	3971,6,c	;volatile
  3894                           
  3895                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  3896                           
  3897                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3898  0013D2  8C83               	bsf	3971,6,c	;volatile
  3899                           
  3900                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  3901                           
  3902                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3903  0013D4  CF83 F0A7          	movff	3971,LCDBusyLoop@temp	;volatile
  3904                           
  3905                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  3906  0013D8  0E0F               	movlw	15
  3907  0013DA  0100               	movlb	0	; () banked
  3908  0013DC  17A7               	andwf	LCDBusyLoop@temp& (0+255),f,b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  3912  0013DE  0100               	movlb	0	; () banked
  3913  0013E0  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  3914  0013E2  0100               	movlb	0	; () banked
  3915  0013E4  11A7               	iorwf	LCDBusyLoop@temp& (0+255),w,b
  3916  0013E6  0100               	movlb	0	; () banked
  3917  0013E8  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  3921  0013EA  0100               	movlb	0	; () banked
  3922  0013EC  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  3923  0013EE  0B80               	andlw	128
  3924  0013F0  0100               	movlb	0	; () banked
  3925  0013F2  6FA6               	movwf	LCDBusyLoop@busy& (0+255),b
  3926                           
  3927                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  3931  0013F4  9C83               	bcf	3971,6,c	;volatile
  3932                           
  3933                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  3934                           
  3935                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  3936  0013F6  0100               	movlb	0	; () banked
  3937  0013F8  51A6               	movf	LCDBusyLoop@busy& (0+255),w,b
  3938  0013FA  0100               	movlb	0	; () banked
  3939  0013FC  A4D8               	btfss	status,2,c
  3940  0013FE  D7E0               	goto	l2251
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  3944  001400  9A83               	bcf	3971,5,c	;volatile
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  3948  001402  0EF0               	movlw	240
  3949  001404  1695               	andwf	3989,f,c	;volatile
  3950                           
  3951                           ; BSR set to: 0
  3952  001406  0012               	return		;funcret
  3953  001408                     __end_of_LCDBusyLoop:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           plusw1	equ	0xFE3
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           plusw2	equ	0xFDB
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _ConvertParallelSpeed *****************
  3974 ;; Defined at:
  3975 ;;		line 66 in file "parallel.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  velocity        1    wreg     unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  velocity        1    2[BANK0 ] unsigned char 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  2    0[BANK0 ] int 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         0       2       0       0       0       0       0
  3990 ;;      Locals:         0       1       0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0
  3992 ;;      Totals:         0       3       0       0       0       0       0
  3993 ;;Total ram usage:        3 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    4
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_ReadParallel
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text25
  4004  000D4E                     __ptext25:
  4005                           	opt stack 0
  4006  000D4E                     _ConvertParallelSpeed:
  4007                           	opt stack 24
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;incstack = 0
  4011                           ;ConvertParallelSpeed@velocity stored from wreg
  4012  000D4E  0100               	movlb	0	; () banked
  4013  000D50  6FA8               	movwf	ConvertParallelSpeed@velocity& (0+255),b
  4014                           
  4015                           ;parallel.c: 67: switch(velocity){
  4016  000D52  D048               	goto	l2583
  4017  000D54                     l2509:
  4018                           
  4019                           ;parallel.c: 69: return -100;
  4020  000D54  0EFF               	movlw	255
  4021  000D56  0100               	movlb	0	; () banked
  4022  000D58  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4023  000D5A  0E9C               	movlw	156
  4024  000D5C  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;parallel.c: 70: break;
  4028                           
  4029                           ; BSR set to: 0
  4030  000D5E  0012               	return	
  4031  000D60                     l2515:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;parallel.c: 72: return -80;
  4035  000D60  0EFF               	movlw	255
  4036  000D62  0100               	movlb	0	; () banked
  4037  000D64  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4038  000D66  0EB0               	movlw	176
  4039  000D68  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;parallel.c: 73: break;
  4043                           
  4044                           ; BSR set to: 0
  4045  000D6A  0012               	return	
  4046  000D6C                     l2521:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;parallel.c: 75: return -60;
  4050  000D6C  0EFF               	movlw	255
  4051  000D6E  0100               	movlb	0	; () banked
  4052  000D70  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4053  000D72  0EC4               	movlw	196
  4054  000D74  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;parallel.c: 76: break;
  4058                           
  4059                           ; BSR set to: 0
  4060  000D76  0012               	return	
  4061  000D78                     l2527:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;parallel.c: 78: return -40;
  4065  000D78  0EFF               	movlw	255
  4066  000D7A  0100               	movlb	0	; () banked
  4067  000D7C  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4068  000D7E  0ED8               	movlw	216
  4069  000D80  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;parallel.c: 79: break;
  4073                           
  4074                           ; BSR set to: 0
  4075  000D82  0012               	return	
  4076  000D84                     l2533:
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;parallel.c: 81: return -20;
  4080  000D84  0EFF               	movlw	255
  4081  000D86  0100               	movlb	0	; () banked
  4082  000D88  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4083  000D8A  0EEC               	movlw	236
  4084  000D8C  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;parallel.c: 82: break;
  4088                           
  4089                           ; BSR set to: 0
  4090  000D8E  0012               	return	
  4091  000D90                     l2539:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;parallel.c: 84: return 0;
  4095  000D90  0E00               	movlw	0
  4096  000D92  0100               	movlb	0	; () banked
  4097  000D94  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4098  000D96  0E00               	movlw	0
  4099  000D98  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;parallel.c: 85: break;
  4103                           
  4104                           ; BSR set to: 0
  4105  000D9A  0012               	return	
  4106  000D9C                     l2545:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;parallel.c: 87: return 20;
  4110  000D9C  0E00               	movlw	0
  4111  000D9E  0100               	movlb	0	; () banked
  4112  000DA0  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4113  000DA2  0E14               	movlw	20
  4114  000DA4  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;parallel.c: 88: break;
  4118                           
  4119                           ; BSR set to: 0
  4120  000DA6  0012               	return	
  4121  000DA8                     l2551:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;parallel.c: 90: return 40;
  4125  000DA8  0E00               	movlw	0
  4126  000DAA  0100               	movlb	0	; () banked
  4127  000DAC  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4128  000DAE  0E28               	movlw	40
  4129  000DB0  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;parallel.c: 91: break;
  4133                           
  4134                           ; BSR set to: 0
  4135  000DB2  0012               	return	
  4136  000DB4                     l2557:
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;parallel.c: 93: return 60;
  4140  000DB4  0E00               	movlw	0
  4141  000DB6  0100               	movlb	0	; () banked
  4142  000DB8  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4143  000DBA  0E3C               	movlw	60
  4144  000DBC  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;parallel.c: 94: break;
  4148                           
  4149                           ; BSR set to: 0
  4150  000DBE  0012               	return	
  4151  000DC0                     l2563:
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;parallel.c: 96: return 80;
  4155  000DC0  0E00               	movlw	0
  4156  000DC2  0100               	movlb	0	; () banked
  4157  000DC4  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4158  000DC6  0E50               	movlw	80
  4159  000DC8  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;parallel.c: 97: break;
  4163                           
  4164                           ; BSR set to: 0
  4165  000DCA  0012               	return	
  4166  000DCC                     l2569:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;parallel.c: 99: return 100;
  4170  000DCC  0E00               	movlw	0
  4171  000DCE  0100               	movlb	0	; () banked
  4172  000DD0  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4173  000DD2  0E64               	movlw	100
  4174  000DD4  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;parallel.c: 100: break;
  4178                           
  4179                           ; BSR set to: 0
  4180  000DD6  0012               	return	
  4181  000DD8                     l2575:
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;parallel.c: 102: return 0;
  4185  000DD8  0E00               	movlw	0
  4186  000DDA  0100               	movlb	0	; () banked
  4187  000DDC  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  4188  000DDE  0E00               	movlw	0
  4189  000DE0  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;parallel.c: 104: }
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;parallel.c: 103: break;
  4196                           
  4197                           ; BSR set to: 0
  4198  000DE2  0012               	return	
  4199  000DE4                     l2583:
  4200  000DE4  0100               	movlb	0	; () banked
  4201  000DE6  51A8               	movf	ConvertParallelSpeed@velocity& (0+255),w,b
  4202                           
  4203                           ; Switch size 1, requested type "space"
  4204                           ; Number of cases is 11, Range of values is 1 to 11
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte           34    18 (average)
  4208                           ;	Chosen strategy is simple_byte
  4209  000DE8  0A01               	xorlw	1	; case 1
  4210  000DEA  B4D8               	btfsc	status,2,c
  4211  000DEC  D7B3               	goto	l2509
  4212  000DEE  0A03               	xorlw	3	; case 2
  4213  000DF0  B4D8               	btfsc	status,2,c
  4214  000DF2  D7B6               	goto	l2515
  4215  000DF4  0A01               	xorlw	1	; case 3
  4216  000DF6  B4D8               	btfsc	status,2,c
  4217  000DF8  D7B9               	goto	l2521
  4218  000DFA  0A07               	xorlw	7	; case 4
  4219  000DFC  B4D8               	btfsc	status,2,c
  4220  000DFE  D7BC               	goto	l2527
  4221  000E00  0A01               	xorlw	1	; case 5
  4222  000E02  B4D8               	btfsc	status,2,c
  4223  000E04  D7BF               	goto	l2533
  4224  000E06  0A03               	xorlw	3	; case 6
  4225  000E08  B4D8               	btfsc	status,2,c
  4226  000E0A  D7C2               	goto	l2539
  4227  000E0C  0A01               	xorlw	1	; case 7
  4228  000E0E  B4D8               	btfsc	status,2,c
  4229  000E10  D7C5               	goto	l2545
  4230  000E12  0A0F               	xorlw	15	; case 8
  4231  000E14  B4D8               	btfsc	status,2,c
  4232  000E16  D7C8               	goto	l2551
  4233  000E18  0A01               	xorlw	1	; case 9
  4234  000E1A  B4D8               	btfsc	status,2,c
  4235  000E1C  D7CB               	goto	l2557
  4236  000E1E  0A03               	xorlw	3	; case 10
  4237  000E20  B4D8               	btfsc	status,2,c
  4238  000E22  D7CE               	goto	l2563
  4239  000E24  0A01               	xorlw	1	; case 11
  4240  000E26  B4D8               	btfsc	status,2,c
  4241  000E28  D7D1               	goto	l2569
  4242  000E2A  D7D6               	goto	l2575
  4243  000E2C                     __end_of_ConvertParallelSpeed:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           postdec1	equ	0xFE5
  4255                           plusw1	equ	0xFE3
  4256                           fsr1l	equ	0xFE1
  4257                           indf2	equ	0xFDF
  4258                           plusw2	equ	0xFDB
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _ReadMode *****************
  4264 ;; Defined at:
  4265 ;;		line 63 in file "parallel.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;		None
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    0[BANK0 ] unsigned int 
  4272 ;; Registers used:
  4273 ;;		None
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4279 ;;      Params:         0       2       0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0
  4282 ;;      Totals:         0       2       0       0       0       0       0
  4283 ;;Total ram usage:        2 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    4
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_Go
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text26
  4294  001894                     __ptext26:
  4295                           	opt stack 0
  4296  001894                     _ReadMode:
  4297                           	opt stack 25
  4298                           
  4299                           ;parallel.c: 64: return Mode;
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;incstack = 0
  4303  001894  C0CC  F0A6         	movff	_Mode,?_ReadMode
  4304  001898  C0CD  F0A7         	movff	_Mode+1,?_ReadMode+1
  4305  00189C  0012               	return		;funcret
  4306  00189E                     __end_of_ReadMode:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           postdec1	equ	0xFE5
  4318                           plusw1	equ	0xFE3
  4319                           fsr1l	equ	0xFE1
  4320                           indf2	equ	0xFDF
  4321                           plusw2	equ	0xFDB
  4322                           fsr2h	equ	0xFDA
  4323                           fsr2l	equ	0xFD9
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function _ReadDistanceRight *****************
  4327 ;; Defined at:
  4328 ;;		line 64 in file "ADC.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;		None
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  2    0[BANK0 ] unsigned int 
  4335 ;; Registers used:
  4336 ;;		None
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4342 ;;      Params:         0       2       0       0       0       0       0
  4343 ;;      Locals:         0       0       0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0
  4345 ;;      Totals:         0       2       0       0       0       0       0
  4346 ;;Total ram usage:        2 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    4
  4349 ;; This function calls:
  4350 ;;		Nothing
  4351 ;; This function is called by:
  4352 ;;		_Go
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text27
  4357  00189E                     __ptext27:
  4358                           	opt stack 0
  4359  00189E                     _ReadDistanceRight:
  4360                           	opt stack 25
  4361                           
  4362                           ;ADC.c: 65: return DistanceRight;
  4363                           
  4364                           ;incstack = 0
  4365  00189E  C0A4  F0A6         	movff	_DistanceRight,?_ReadDistanceRight
  4366  0018A2  C0A5  F0A7         	movff	_DistanceRight+1,?_ReadDistanceRight+1
  4367  0018A6  0012               	return		;funcret
  4368  0018A8                     __end_of_ReadDistanceRight:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           postdec1	equ	0xFE5
  4380                           plusw1	equ	0xFE3
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           plusw2	equ	0xFDB
  4384                           fsr2h	equ	0xFDA
  4385                           fsr2l	equ	0xFD9
  4386                           status	equ	0xFD8
  4387                           
  4388 ;; *************** function _ReadDistanceLeft *****************
  4389 ;; Defined at:
  4390 ;;		line 56 in file "ADC.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  2    0[BANK0 ] unsigned int 
  4397 ;; Registers used:
  4398 ;;		None
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4404 ;;      Params:         0       2       0       0       0       0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0
  4407 ;;      Totals:         0       2       0       0       0       0       0
  4408 ;;Total ram usage:        2 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    4
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_Go
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           	psect	text28
  4419  0018A8                     __ptext28:
  4420                           	opt stack 0
  4421  0018A8                     _ReadDistanceLeft:
  4422                           	opt stack 25
  4423                           
  4424                           ;ADC.c: 57: return DistanceLeft;
  4425                           
  4426                           ;incstack = 0
  4427  0018A8  C0A2  F0A6         	movff	_DistanceLeft,?_ReadDistanceLeft
  4428  0018AC  C0A3  F0A7         	movff	_DistanceLeft+1,?_ReadDistanceLeft+1
  4429  0018B0  0012               	return		;funcret
  4430  0018B2                     __end_of_ReadDistanceLeft:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           plusw1	equ	0xFE3
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           plusw2	equ	0xFDB
  4446                           fsr2h	equ	0xFDA
  4447                           fsr2l	equ	0xFD9
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function _ReadDistanceCentral *****************
  4451 ;; Defined at:
  4452 ;;		line 72 in file "ADC.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;		None
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  2    0[BANK0 ] unsigned int 
  4459 ;; Registers used:
  4460 ;;		None
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4466 ;;      Params:         0       2       0       0       0       0       0
  4467 ;;      Locals:         0       0       0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0
  4469 ;;      Totals:         0       2       0       0       0       0       0
  4470 ;;Total ram usage:        2 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    4
  4473 ;; This function calls:
  4474 ;;		Nothing
  4475 ;; This function is called by:
  4476 ;;		_Go
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text29
  4481  0018B2                     __ptext29:
  4482                           	opt stack 0
  4483  0018B2                     _ReadDistanceCentral:
  4484                           	opt stack 25
  4485                           
  4486                           ;ADC.c: 73: return DistanceCentral;
  4487                           
  4488                           ;incstack = 0
  4489  0018B2  C0A0  F0A6         	movff	_DistanceCentral,?_ReadDistanceCentral
  4490  0018B6  C0A1  F0A7         	movff	_DistanceCentral+1,?_ReadDistanceCentral+1
  4491  0018BA  0012               	return		;funcret
  4492  0018BC                     __end_of_ReadDistanceCentral:
  4493                           	opt stack 0
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           prodh	equ	0xFF4
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           postinc0	equ	0xFEE
  4502                           wreg	equ	0xFE8
  4503                           postdec1	equ	0xFE5
  4504                           plusw1	equ	0xFE3
  4505                           fsr1l	equ	0xFE1
  4506                           indf2	equ	0xFDF
  4507                           plusw2	equ	0xFDB
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function _ADCInitiateConversion *****************
  4513 ;; Defined at:
  4514 ;;		line 32 in file "ADC.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;		None
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;		None
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		None
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4528 ;;      Params:         0       0       0       0       0       0       0
  4529 ;;      Locals:         0       0       0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0
  4531 ;;      Totals:         0       0       0       0       0       0       0
  4532 ;;Total ram usage:        0 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    4
  4535 ;; This function calls:
  4536 ;;		Nothing
  4537 ;; This function is called by:
  4538 ;;		_main
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text30
  4543  0018D8                     __ptext30:
  4544                           	opt stack 0
  4545  0018D8                     _ADCInitiateConversion:
  4546                           	opt stack 26
  4547                           
  4548                           ;ADC.c: 33: GO = 1;
  4549                           
  4550                           ;incstack = 0
  4551  0018D8  82C2               	bsf	4034,1,c	;volatile
  4552  0018DA  0012               	return		;funcret
  4553  0018DC                     __end_of_ADCInitiateConversion:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           postinc0	equ	0xFEE
  4563                           wreg	equ	0xFE8
  4564                           postdec1	equ	0xFE5
  4565                           plusw1	equ	0xFE3
  4566                           fsr1l	equ	0xFE1
  4567                           indf2	equ	0xFDF
  4568                           plusw2	equ	0xFDB
  4569                           fsr2h	equ	0xFDA
  4570                           fsr2l	equ	0xFD9
  4571                           status	equ	0xFD8
  4572                           
  4573 ;; *************** function _ADCInit *****************
  4574 ;; Defined at:
  4575 ;;		line 8 in file "ADC.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, status,2
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4589 ;;      Params:         0       0       0       0       0       0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    4
  4596 ;; This function calls:
  4597 ;;		Nothing
  4598 ;; This function is called by:
  4599 ;;		_main
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           	psect	text31
  4604  0017AC                     __ptext31:
  4605                           	opt stack 0
  4606  0017AC                     _ADCInit:
  4607                           	opt stack 26
  4608                           
  4609                           ;ADC.c: 11: TRISA0 = 1;
  4610                           
  4611                           ;incstack = 0
  4612  0017AC  8092               	bsf	3986,0,c	;volatile
  4613                           
  4614                           ;ADC.c: 12: TRISA1 = 1;
  4615  0017AE  8292               	bsf	3986,1,c	;volatile
  4616                           
  4617                           ;ADC.c: 13: TRISA2 = 1;
  4618  0017B0  8492               	bsf	3986,2,c	;volatile
  4619                           
  4620                           ;ADC.c: 14: TRISA3 = 1;
  4621  0017B2  8692               	bsf	3986,3,c	;volatile
  4622                           
  4623                           ;ADC.c: 16: ANS0 = 1;
  4624  0017B4  807E               	bsf	3966,0,c	;volatile
  4625                           
  4626                           ;ADC.c: 17: ANS1 = 1;
  4627  0017B6  827E               	bsf	3966,1,c	;volatile
  4628                           
  4629                           ;ADC.c: 18: ANS2 = 1;
  4630  0017B8  847E               	bsf	3966,2,c	;volatile
  4631                           
  4632                           ;ADC.c: 19: ANS3 = 1;
  4633  0017BA  867E               	bsf	3966,3,c	;volatile
  4634                           
  4635                           ;ADC.c: 21: ADON = 1;
  4636  0017BC  80C2               	bsf	4034,0,c	;volatile
  4637                           
  4638                           ;ADC.c: 22: ADCON1 = 0;
  4639  0017BE  0E00               	movlw	0
  4640  0017C0  6EC1               	movwf	4033,c	;volatile
  4641                           
  4642                           ;ADC.c: 23: ADCON2 = 0x91;
  4643  0017C2  0E91               	movlw	145
  4644  0017C4  6EC0               	movwf	4032,c	;volatile
  4645                           
  4646                           ;ADC.c: 24: ADIF = 0;
  4647  0017C6  9C9E               	bcf	3998,6,c	;volatile
  4648                           
  4649                           ;ADC.c: 25: ADIE = 1;
  4650  0017C8  8C9D               	bsf	3997,6,c	;volatile
  4651                           
  4652                           ;ADC.c: 27: PEIE = 1;
  4653  0017CA  8CF2               	bsf	intcon,6,c	;volatile
  4654                           
  4655                           ;ADC.c: 28: GIE = 1;
  4656  0017CC  8EF2               	bsf	intcon,7,c	;volatile
  4657  0017CE  0012               	return		;funcret
  4658  0017D0                     __end_of_ADCInit:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           postdec1	equ	0xFE5
  4670                           plusw1	equ	0xFE3
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           plusw2	equ	0xFDB
  4674                           fsr2h	equ	0xFDA
  4675                           fsr2l	equ	0xFD9
  4676                           status	equ	0xFD8
  4677                           
  4678 ;; *************** function _isr *****************
  4679 ;; Defined at:
  4680 ;;		line 10 in file "interrupts.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;		None
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  CharRx          1   75[COMRAM] unsigned char 
  4685 ;;  read            2   73[COMRAM] unsigned int 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      void 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4695 ;;      Params:         0       0       0       0       0       0       0
  4696 ;;      Locals:         3       0       0       0       0       0       0
  4697 ;;      Temps:         16       0       0       0       0       0       0
  4698 ;;      Totals:        19       0       0       0       0       0       0
  4699 ;;Total ram usage:       19 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    3
  4702 ;; This function calls:
  4703 ;;		_ADCGetOutput
  4704 ;;		_ReadPWMMotorLeft
  4705 ;;		_ReadPWMMotorRight
  4706 ;;		_ReadUSART
  4707 ;;		_SetBattery
  4708 ;;		_SetDistanceCentral
  4709 ;;		_SetDistanceLeft
  4710 ;;		_SetDistanceRight
  4711 ;;		_SetSpeedLeft
  4712 ;;		_SetSpeedRight
  4713 ;;		_WriteUSART
  4714 ;;		_putsUSART
  4715 ;; This function is called by:
  4716 ;;		Interrupt level 2
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	intcode
  4721  000008                     __pintcode:
  4722                           	opt stack 0
  4723  000008                     _isr:
  4724                           	opt stack 22
  4725                           
  4726                           ;incstack = 0
  4727  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4728  00000A  CFFA F03C          	movff	pclath,??_isr+2
  4729  00000E  CFFB F03D          	movff	pclatu,??_isr+3
  4730  000012  CFE9 F03E          	movff	fsr0l,??_isr+4
  4731  000016  CFEA F03F          	movff	fsr0h,??_isr+5
  4732  00001A  CFE1 F040          	movff	fsr1l,??_isr+6
  4733  00001E  CFE2 F041          	movff	fsr1h,??_isr+7
  4734  000022  CFD9 F042          	movff	fsr2l,??_isr+8
  4735  000026  CFDA F043          	movff	fsr2h,??_isr+9
  4736  00002A  CFF3 F044          	movff	prodl,??_isr+10
  4737  00002E  CFF4 F045          	movff	prodh,??_isr+11
  4738  000032  CFF6 F046          	movff	tblptrl,??_isr+12
  4739  000036  CFF7 F047          	movff	tblptrh,??_isr+13
  4740  00003A  CFF8 F048          	movff	tblptru,??_isr+14
  4741  00003E  CFF5 F049          	movff	tablat,??_isr+15
  4742                           
  4743                           ;interrupts.c: 14: if (ADIF == 1) {
  4744  000042  AC9E               	btfss	3998,6,c	;volatile
  4745  000044  D055               	goto	i2l51
  4746                           
  4747                           ;interrupts.c: 16: static unsigned int Readport=0;
  4748                           ;interrupts.c: 17: unsigned int read=ADCGetOutput();
  4749  000046  EC18  F00C         	call	_ADCGetOutput	;wreg free
  4750  00004A  C001  F04A         	movff	?_ADCGetOutput,isr@read
  4751  00004E  C002  F04B         	movff	?_ADCGetOutput+1,isr@read+1
  4752                           
  4753                           ;interrupts.c: 19: switch (Readport){
  4754  000052  D037               	goto	i2l3107
  4755  000054                     i2l55:
  4756                           
  4757                           ;interrupts.c: 21: CHS3=0;
  4758  000054  9AC2               	bcf	4034,5,c	;volatile
  4759                           
  4760                           ;interrupts.c: 22: CHS2=0;
  4761  000056  98C2               	bcf	4034,4,c	;volatile
  4762                           
  4763                           ;interrupts.c: 23: CHS1=0;
  4764  000058  96C2               	bcf	4034,3,c	;volatile
  4765                           
  4766                           ;interrupts.c: 24: CHS0=1;
  4767  00005A  84C2               	bsf	4034,2,c	;volatile
  4768                           
  4769                           ;interrupts.c: 25: SetDistanceLeft (read);
  4770  00005C  C04A  F036         	movff	isr@read,SetDistanceLeft@lecture
  4771  000060  C04B  F037         	movff	isr@read+1,SetDistanceLeft@lecture+1
  4772  000064  EC3C  F009         	call	_SetDistanceLeft	;wreg free
  4773  000068  D015               	goto	i2l3097
  4774  00006A                     i2l57:
  4775                           
  4776                           ;interrupts.c: 29: CHS3=0;
  4777  00006A  9AC2               	bcf	4034,5,c	;volatile
  4778                           
  4779                           ;interrupts.c: 30: CHS2=0;
  4780  00006C  98C2               	bcf	4034,4,c	;volatile
  4781                           
  4782                           ;interrupts.c: 31: CHS1=1;
  4783  00006E  86C2               	bsf	4034,3,c	;volatile
  4784                           
  4785                           ;interrupts.c: 32: CHS0=0;
  4786  000070  94C2               	bcf	4034,2,c	;volatile
  4787                           
  4788                           ;interrupts.c: 33: SetDistanceCentral (read);
  4789  000072  C04A  F036         	movff	isr@read,SetDistanceCentral@lecture
  4790  000076  C04B  F037         	movff	isr@read+1,SetDistanceCentral@lecture+1
  4791  00007A  EC75  F009         	call	_SetDistanceCentral	;wreg free
  4792  00007E  D00A               	goto	i2l3097
  4793  000080                     i2l58:
  4794                           
  4795                           ;interrupts.c: 37: CHS3=0;
  4796  000080  9AC2               	bcf	4034,5,c	;volatile
  4797                           
  4798                           ;interrupts.c: 38: CHS2=0;
  4799  000082  98C2               	bcf	4034,4,c	;volatile
  4800                           
  4801                           ;interrupts.c: 39: CHS1=1;
  4802  000084  86C2               	bsf	4034,3,c	;volatile
  4803                           
  4804                           ;interrupts.c: 40: CHS0=1;
  4805  000086  84C2               	bsf	4034,2,c	;volatile
  4806                           
  4807                           ;interrupts.c: 41: SetDistanceRight (read);
  4808  000088  C04A  F036         	movff	isr@read,SetDistanceRight@lecture
  4809  00008C  C04B  F037         	movff	isr@read+1,SetDistanceRight@lecture+1
  4810  000090  EC03  F009         	call	_SetDistanceRight	;wreg free
  4811  000094                     i2l3097:
  4812                           
  4813                           ;interrupts.c: 42: Readport++;
  4814  000094  4A57               	infsnz	isr@Readport,f,c
  4815  000096  2A58               	incf	isr@Readport+1,f,c
  4816                           
  4817                           ;interrupts.c: 43: break;
  4818  000098  D02A               	goto	i2l56
  4819  00009A                     i2l59:
  4820                           
  4821                           ;interrupts.c: 45: CHS3=0;
  4822  00009A  9AC2               	bcf	4034,5,c	;volatile
  4823                           
  4824                           ;interrupts.c: 46: CHS2=0;
  4825  00009C  98C2               	bcf	4034,4,c	;volatile
  4826                           
  4827                           ;interrupts.c: 47: CHS1=0;
  4828  00009E  96C2               	bcf	4034,3,c	;volatile
  4829                           
  4830                           ;interrupts.c: 48: CHS0=0;
  4831  0000A0  94C2               	bcf	4034,2,c	;volatile
  4832                           
  4833                           ;interrupts.c: 49: SetBattery (read);
  4834  0000A2  C04A  F036         	movff	isr@read,SetBattery@lecture
  4835  0000A6  C04B  F037         	movff	isr@read+1,SetBattery@lecture+1
  4836  0000AA  ECB8  F00A         	call	_SetBattery	;wreg free
  4837  0000AE  D004               	goto	i2l3103
  4838  0000B0                     i2l60:
  4839                           
  4840                           ;interrupts.c: 53: CHS3=0;
  4841  0000B0  9AC2               	bcf	4034,5,c	;volatile
  4842                           
  4843                           ;interrupts.c: 54: CHS2=0;
  4844  0000B2  98C2               	bcf	4034,4,c	;volatile
  4845                           
  4846                           ;interrupts.c: 55: CHS1=0;
  4847  0000B4  96C2               	bcf	4034,3,c	;volatile
  4848                           
  4849                           ;interrupts.c: 56: CHS0=0;
  4850  0000B6  94C2               	bcf	4034,2,c	;volatile
  4851  0000B8                     i2l3103:
  4852                           
  4853                           ;interrupts.c: 57: Readport=0;
  4854  0000B8  0E00               	movlw	0
  4855  0000BA  6E58               	movwf	isr@Readport+1,c
  4856  0000BC  0E00               	movlw	0
  4857  0000BE  6E57               	movwf	isr@Readport,c
  4858                           
  4859                           ;interrupts.c: 59: }
  4860                           
  4861                           ;interrupts.c: 58: break;
  4862  0000C0  D016               	goto	i2l56
  4863  0000C2                     i2l3107:
  4864  0000C2  C057  F03A         	movff	isr@Readport,??_isr
  4865  0000C6  C058  F03B         	movff	isr@Readport+1,??_isr+1
  4866                           
  4867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4868                           ; Switch size 1, requested type "space"
  4869                           ; Number of cases is 1, Range of values is 0 to 0
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte            4     3 (average)
  4873                           ;	Chosen strategy is simple_byte
  4874  0000CA  503B               	movf	??_isr+1,w,c
  4875  0000CC  0A00               	xorlw	0	; case 0
  4876  0000CE  A4D8               	btfss	status,2,c
  4877  0000D0  D7EF               	goto	i2l60
  4878                           
  4879                           ; Switch size 1, requested type "space"
  4880                           ; Number of cases is 4, Range of values is 0 to 3
  4881                           ; switch strategies available:
  4882                           ; Name         Instructions Cycles
  4883                           ; simple_byte           13     7 (average)
  4884                           ;	Chosen strategy is simple_byte
  4885  0000D2  503A               	movf	??_isr,w,c
  4886  0000D4  0A00               	xorlw	0	; case 0
  4887  0000D6  B4D8               	btfsc	status,2,c
  4888  0000D8  D7BD               	goto	i2l55
  4889  0000DA  0A01               	xorlw	1	; case 1
  4890  0000DC  B4D8               	btfsc	status,2,c
  4891  0000DE  D7C5               	goto	i2l57
  4892  0000E0  0A03               	xorlw	3	; case 2
  4893  0000E2  B4D8               	btfsc	status,2,c
  4894  0000E4  D7CD               	goto	i2l58
  4895  0000E6  0A01               	xorlw	1	; case 3
  4896  0000E8  B4D8               	btfsc	status,2,c
  4897  0000EA  D7D7               	goto	i2l59
  4898  0000EC  D7E1               	goto	i2l60
  4899  0000EE                     i2l56:
  4900                           
  4901                           ;interrupts.c: 62: ADIF=0;
  4902  0000EE  9C9E               	bcf	3998,6,c	;volatile
  4903  0000F0                     i2l51:
  4904                           
  4905                           ;interrupts.c: 64: }
  4906                           ;interrupts.c: 66: if (TMR0IF==1)
  4907  0000F0  A4F2               	btfss	intcon,2,c	;volatile
  4908  0000F2  D02C               	goto	i2l3135
  4909                           
  4910                           ;interrupts.c: 67: {
  4911                           ;interrupts.c: 68: static unsigned int PWMLeft;
  4912                           ;interrupts.c: 69: static unsigned int PWMRight;
  4913                           ;interrupts.c: 70: static unsigned int iteration;
  4914                           ;interrupts.c: 72: if (iteration==20){
  4915  0000F4  0E14               	movlw	20
  4916  0000F6  185B               	xorwf	isr@iteration,w,c
  4917  0000F8  105C               	iorwf	isr@iteration+1,w,c
  4918  0000FA  A4D8               	btfss	status,2,c
  4919  0000FC  D012               	goto	i2l3119
  4920                           
  4921                           ;interrupts.c: 73: RC5=0;
  4922  0000FE  9A82               	bcf	3970,5,c	;volatile
  4923                           
  4924                           ;interrupts.c: 74: RC4=0;
  4925  000100  9882               	bcf	3970,4,c	;volatile
  4926                           
  4927                           ;interrupts.c: 75: iteration=0;
  4928  000102  0E00               	movlw	0
  4929  000104  6E5C               	movwf	isr@iteration+1,c
  4930  000106  0E00               	movlw	0
  4931  000108  6E5B               	movwf	isr@iteration,c
  4932                           
  4933                           ;interrupts.c: 76: PWMRight=ReadPWMMotorRight();
  4934  00010A  EC5E  F00C         	call	_ReadPWMMotorRight	;wreg free
  4935  00010E  C001  F055         	movff	?_ReadPWMMotorRight,isr@PWMRight
  4936  000112  C002  F056         	movff	?_ReadPWMMotorRight+1,isr@PWMRight+1
  4937                           
  4938                           ;interrupts.c: 77: PWMLeft=ReadPWMMotorLeft();
  4939  000116  EC63  F00C         	call	_ReadPWMMotorLeft	;wreg free
  4940  00011A  C001  F053         	movff	?_ReadPWMMotorLeft,isr@PWMLeft
  4941  00011E  C002  F054         	movff	?_ReadPWMMotorLeft+1,isr@PWMLeft+1
  4942  000122                     i2l3119:
  4943                           
  4944                           ;interrupts.c: 78: }
  4945                           ;interrupts.c: 79: if (PWMRight==iteration){
  4946  000122  505B               	movf	isr@iteration,w,c
  4947  000124  1855               	xorwf	isr@PWMRight,w,c
  4948  000126  E104               	bnz	i2l3123
  4949  000128  505C               	movf	isr@iteration+1,w,c
  4950  00012A  1856               	xorwf	isr@PWMRight+1,w,c
  4951  00012C  B4D8               	btfsc	status,2,c
  4952                           
  4953                           ;interrupts.c: 80: RC5=1;
  4954  00012E  8A82               	bsf	3970,5,c	;volatile
  4955  000130                     i2l3123:
  4956                           
  4957                           ;interrupts.c: 81: }
  4958                           ;interrupts.c: 82: if (PWMLeft==iteration){
  4959  000130  505B               	movf	isr@iteration,w,c
  4960  000132  1853               	xorwf	isr@PWMLeft,w,c
  4961  000134  E104               	bnz	i2l3127
  4962  000136  505C               	movf	isr@iteration+1,w,c
  4963  000138  1854               	xorwf	isr@PWMLeft+1,w,c
  4964  00013A  B4D8               	btfsc	status,2,c
  4965                           
  4966                           ;interrupts.c: 83: RC4=1;
  4967  00013C  8882               	bsf	3970,4,c	;volatile
  4968  00013E                     i2l3127:
  4969                           
  4970                           ;interrupts.c: 84: }
  4971                           ;interrupts.c: 85: iteration++;
  4972  00013E  4A5B               	infsnz	isr@iteration,f,c
  4973  000140  2A5C               	incf	isr@iteration+1,f,c
  4974                           
  4975                           ;interrupts.c: 88: TMR0IF=0;
  4976  000142  94F2               	bcf	intcon,2,c	;volatile
  4977                           
  4978                           ;interrupts.c: 89: TMR0H=0x00;
  4979  000144  0E00               	movlw	0
  4980  000146  6ED7               	movwf	4055,c	;volatile
  4981                           
  4982                           ;interrupts.c: 90: TMR0L=0x156;
  4983  000148  0E56               	movlw	86
  4984  00014A  6ED6               	movwf	4054,c	;volatile
  4985  00014C                     i2l3135:
  4986                           
  4987                           ;interrupts.c: 92: }
  4988                           ;interrupts.c: 94: if (RCIF==1){
  4989  00014C  AA9E               	btfss	3998,5,c	;volatile
  4990  00014E  D043               	goto	i2l92
  4991                           
  4992                           ;interrupts.c: 96: static int counter=0;
  4993                           ;interrupts.c: 98: char CharRx = ReadUSART();
  4994  000150  EC09  F00C         	call	_ReadUSART	;wreg free
  4995  000154  6E4C               	movwf	isr@CharRx,c
  4996                           
  4997                           ;interrupts.c: 100: if (counter==0){
  4998  000156  5059               	movf	isr@counter,w,c
  4999  000158  105A               	iorwf	isr@counter+1,w,c
  5000  00015A  A4D8               	btfss	status,2,c
  5001  00015C  D010               	goto	i2l3149
  5002                           
  5003                           ;interrupts.c: 101: if (CharRx=='b'){
  5004  00015E  0E62               	movlw	98
  5005  000160  184C               	xorwf	isr@CharRx,w,c
  5006  000162  A4D8               	btfss	status,2,c
  5007  000164  D004               	goto	i2l3145
  5008                           
  5009                           ;interrupts.c: 102: counter=1;
  5010  000166  0E00               	movlw	0
  5011  000168  6E5A               	movwf	isr@counter+1,c
  5012  00016A  0E01               	movlw	1
  5013  00016C  D010               	goto	L5
  5014  00016E                     i2l3145:
  5015  00016E  0E63               	movlw	99
  5016  000170  184C               	xorwf	isr@CharRx,w,c
  5017  000172  A4D8               	btfss	status,2,c
  5018  000174  D01A               	goto	i2l83
  5019                           
  5020                           ;interrupts.c: 104: counter=2;
  5021  000176  0E00               	movlw	0
  5022  000178  6E5A               	movwf	isr@counter+1,c
  5023  00017A  0E02               	movlw	2
  5024  00017C  D008               	goto	L5
  5025  00017E                     i2l3149:
  5026  00017E  0459               	decf	isr@counter,w,c
  5027  000180  105A               	iorwf	isr@counter+1,w,c
  5028  000182  A4D8               	btfss	status,2,c
  5029  000184  D006               	goto	i2l3155
  5030                           
  5031                           ;interrupts.c: 107: SetSpeedRight(CharRx);
  5032  000186  504C               	movf	isr@CharRx,w,c
  5033  000188  EC2E  F00C         	call	_SetSpeedRight
  5034  00018C  D00A               	goto	i2l3161
  5035  00018E                     L5:
  5036  00018E  6E59               	movwf	isr@counter,c
  5037                           
  5038                           ;interrupts.c: 109: }else if (counter==2){
  5039  000190  D00C               	goto	i2l83
  5040  000192                     i2l3155:
  5041  000192  0E02               	movlw	2
  5042  000194  1859               	xorwf	isr@counter,w,c
  5043  000196  105A               	iorwf	isr@counter+1,w,c
  5044  000198  A4D8               	btfss	status,2,c
  5045  00019A  D003               	goto	i2l3161
  5046                           
  5047                           ;interrupts.c: 110: SetSpeedLeft(CharRx);
  5048  00019C  504C               	movf	isr@CharRx,w,c
  5049  00019E  EC37  F00C         	call	_SetSpeedLeft
  5050  0001A2                     i2l3161:
  5051                           
  5052                           ;interrupts.c: 113: counter=0;
  5053  0001A2  0E00               	movlw	0
  5054  0001A4  6E5A               	movwf	isr@counter+1,c
  5055  0001A6  0E00               	movlw	0
  5056  0001A8  D7F2               	goto	L5
  5057  0001AA                     i2l83:
  5058  0001AA  A2AC               	btfss	4012,1,c	;volatile
  5059  0001AC  D7FE               	goto	i2l83
  5060                           
  5061                           ;interrupts.c: 117: putsUSART("\n\rEcho: ");
  5062  0001AE  0E0D               	movlw	low STR_1
  5063  0001B0  6E02               	movwf	putsUSART@data,c
  5064  0001B2  0E06               	movlw	high STR_1
  5065  0001B4  6E03               	movwf	putsUSART@data+1,c
  5066  0001B6  ECAB  F00B         	call	_putsUSART	;wreg free
  5067  0001BA                     i2l86:
  5068  0001BA  A2AC               	btfss	4012,1,c	;volatile
  5069  0001BC  D7FE               	goto	i2l86
  5070                           
  5071                           ;interrupts.c: 119: WriteUSART(CharRx);
  5072  0001BE  504C               	movf	isr@CharRx,w,c
  5073  0001C0  EC25  F00C         	call	_WriteUSART
  5074  0001C4                     i2l89:
  5075  0001C4  A2AC               	btfss	4012,1,c	;volatile
  5076  0001C6  D7FE               	goto	i2l89
  5077                           
  5078                           ;interrupts.c: 121: putsUSART("\n\r\n\rWrite: ");
  5079  0001C8  0E01               	movlw	low STR_2
  5080  0001CA  6E02               	movwf	putsUSART@data,c
  5081  0001CC  0E06               	movlw	high STR_2
  5082  0001CE  6E03               	movwf	putsUSART@data+1,c
  5083  0001D0  ECAB  F00B         	call	_putsUSART	;wreg free
  5084                           
  5085                           ;interrupts.c: 124: RCIF = 0;
  5086  0001D4  9A9E               	bcf	3998,5,c	;volatile
  5087  0001D6                     i2l92:
  5088  0001D6  C049  FFF5         	movff	??_isr+15,tablat
  5089  0001DA  C048  FFF8         	movff	??_isr+14,tblptru
  5090  0001DE  C047  FFF7         	movff	??_isr+13,tblptrh
  5091  0001E2  C046  FFF6         	movff	??_isr+12,tblptrl
  5092  0001E6  C045  FFF4         	movff	??_isr+11,prodh
  5093  0001EA  C044  FFF3         	movff	??_isr+10,prodl
  5094  0001EE  C043  FFDA         	movff	??_isr+9,fsr2h
  5095  0001F2  C042  FFD9         	movff	??_isr+8,fsr2l
  5096  0001F6  C041  FFE2         	movff	??_isr+7,fsr1h
  5097  0001FA  C040  FFE1         	movff	??_isr+6,fsr1l
  5098  0001FE  C03F  FFEA         	movff	??_isr+5,fsr0h
  5099  000202  C03E  FFE9         	movff	??_isr+4,fsr0l
  5100  000206  C03D  FFFB         	movff	??_isr+3,pclatu
  5101  00020A  C03C  FFFA         	movff	??_isr+2,pclath
  5102  00020E  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5103  000210  0011               	retfie		f
  5104  000212                     __end_of_isr:
  5105                           	opt stack 0
  5106                           pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           postinc0	equ	0xFEE
  5116                           fsr0h	equ	0xFEA
  5117                           fsr0l	equ	0xFE9
  5118                           wreg	equ	0xFE8
  5119                           postdec1	equ	0xFE5
  5120                           plusw1	equ	0xFE3
  5121                           fsr1h	equ	0xFE2
  5122                           fsr1l	equ	0xFE1
  5123                           indf2	equ	0xFDF
  5124                           plusw2	equ	0xFDB
  5125                           fsr2h	equ	0xFDA
  5126                           fsr2l	equ	0xFD9
  5127                           status	equ	0xFD8
  5128                           
  5129 ;; *************** function _putsUSART *****************
  5130 ;; Defined at:
  5131 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uputs.c"
  5132 ;; Parameters:    Size  Location     Type
  5133 ;;  data            2    1[COMRAM] PTR unsigned char 
  5134 ;;		 -> STR_2(12), STR_1(9), 
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5146 ;;      Params:         2       0       0       0       0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0
  5149 ;;      Totals:         2       0       0       0       0       0       0
  5150 ;;Total ram usage:        2 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    1
  5153 ;; This function calls:
  5154 ;;		_WriteUSART
  5155 ;; This function is called by:
  5156 ;;		_isr
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           	psect	text33
  5161  001756                     __ptext33:
  5162                           	opt stack 0
  5163  001756                     _putsUSART:
  5164                           	opt stack 23
  5165  001756                     i2l549:
  5166  001756  A2AC               	btfss	4012,1,c	;volatile
  5167  001758  D7FE               	goto	i2l549
  5168  00175A  C002  FFF6         	movff	putsUSART@data,tblptrl
  5169  00175E  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  5170  001762                     	if	0	;tblptru may be non-zero
  5171  001762                     	endif
  5172  001762                     	if	0	;tblptru may be non-zero
  5173  001762                     	endif
  5174  001762  0008               	tblrd		*
  5175  001764  50F5               	movf	tablat,w,c
  5176  001766  EC25  F00C         	call	_WriteUSART
  5177  00176A  C002  FFF6         	movff	putsUSART@data,tblptrl
  5178  00176E  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  5179  001772  4A02               	infsnz	putsUSART@data,f,c
  5180  001774  2A03               	incf	putsUSART@data+1,f,c
  5181  001776                     	if	0	;tblptru may be non-zero
  5182  001776                     	endif
  5183  001776                     	if	0	;tblptru may be non-zero
  5184  001776                     	endif
  5185  001776  0008               	tblrd		*
  5186  001778  50F5               	movf	tablat,w,c
  5187  00177A  0900               	iorlw	0
  5188  00177C  B4D8               	btfsc	status,2,c
  5189  00177E  0012               	return	
  5190  001780  D7EA               	goto	i2l549
  5191  001782                     __end_of_putsUSART:
  5192                           	opt stack 0
  5193                           pclatu	equ	0xFFB
  5194                           pclath	equ	0xFFA
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           postinc0	equ	0xFEE
  5203                           fsr0h	equ	0xFEA
  5204                           fsr0l	equ	0xFE9
  5205                           wreg	equ	0xFE8
  5206                           postdec1	equ	0xFE5
  5207                           plusw1	equ	0xFE3
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           plusw2	equ	0xFDB
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _WriteUSART *****************
  5217 ;; Defined at:
  5218 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uwrite.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  data            1    wreg     unsigned char 
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  data            1    0[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5232 ;;      Params:         0       0       0       0       0       0       0
  5233 ;;      Locals:         1       0       0       0       0       0       0
  5234 ;;      Temps:          0       0       0       0       0       0       0
  5235 ;;      Totals:         1       0       0       0       0       0       0
  5236 ;;Total ram usage:        1 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; This function calls:
  5239 ;;		Nothing
  5240 ;; This function is called by:
  5241 ;;		_isr
  5242 ;;		_putsUSART
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text34
  5247  00184A                     __ptext34:
  5248                           	opt stack 0
  5249  00184A                     _WriteUSART:
  5250                           	opt stack 23
  5251                           
  5252                           ;incstack = 0
  5253                           ;WriteUSART@data stored from wreg
  5254  00184A  6E01               	movwf	WriteUSART@data,c
  5255  00184C  ACAC               	btfss	4012,6,c	;volatile
  5256  00184E  D003               	goto	i2l1583
  5257  001850  90AC               	bcf	4012,0,c	;volatile
  5258  001852  B25D               	btfsc	_USART_Status,1,c
  5259  001854  80AC               	bsf	4012,0,c	;volatile
  5260  001856                     i2l1583:
  5261  001856  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  5262  00185A  0012               	return		;funcret
  5263  00185C                     __end_of_WriteUSART:
  5264                           	opt stack 0
  5265                           pclatu	equ	0xFFB
  5266                           pclath	equ	0xFFA
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           fsr0h	equ	0xFEA
  5276                           fsr0l	equ	0xFE9
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           plusw1	equ	0xFE3
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           plusw2	equ	0xFDB
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _SetSpeedRight *****************
  5289 ;; Defined at:
  5290 ;;		line 27 in file "serial.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  lecture         1    wreg     unsigned char 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  lecture         1    3[COMRAM] unsigned char 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  1    wreg      void 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0, cstack
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5304 ;;      Params:         0       0       0       0       0       0       0
  5305 ;;      Locals:         1       0       0       0       0       0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0
  5307 ;;      Totals:         1       0       0       0       0       0       0
  5308 ;;Total ram usage:        1 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    1
  5311 ;; This function calls:
  5312 ;;		_ConvertPicSpeed
  5313 ;; This function is called by:
  5314 ;;		_isr
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text35
  5319  00185C                     __ptext35:
  5320                           	opt stack 0
  5321  00185C                     _SetSpeedRight:
  5322                           	opt stack 23
  5323                           
  5324                           ;incstack = 0
  5325                           ;SetSpeedRight@lecture stored from wreg
  5326  00185C  6E04               	movwf	SetSpeedRight@lecture,c
  5327                           
  5328                           ;serial.c: 28: SpeedRight=ConvertPicSpeed(lecture);
  5329  00185E  5004               	movf	SetSpeedRight@lecture,w,c
  5330  001860  EC16  F007         	call	_ConvertPicSpeed
  5331  001864  C001  F051         	movff	?_ConvertPicSpeed,_SpeedRight
  5332  001868  C002  F052         	movff	?_ConvertPicSpeed+1,_SpeedRight+1
  5333  00186C  0012               	return		;funcret
  5334  00186E                     __end_of_SetSpeedRight:
  5335                           	opt stack 0
  5336                           pclatu	equ	0xFFB
  5337                           pclath	equ	0xFFA
  5338                           tblptru	equ	0xFF8
  5339                           tblptrh	equ	0xFF7
  5340                           tblptrl	equ	0xFF6
  5341                           tablat	equ	0xFF5
  5342                           prodh	equ	0xFF4
  5343                           prodl	equ	0xFF3
  5344                           intcon	equ	0xFF2
  5345                           postinc0	equ	0xFEE
  5346                           fsr0h	equ	0xFEA
  5347                           fsr0l	equ	0xFE9
  5348                           wreg	equ	0xFE8
  5349                           postdec1	equ	0xFE5
  5350                           plusw1	equ	0xFE3
  5351                           fsr1h	equ	0xFE2
  5352                           fsr1l	equ	0xFE1
  5353                           indf2	equ	0xFDF
  5354                           plusw2	equ	0xFDB
  5355                           fsr2h	equ	0xFDA
  5356                           fsr2l	equ	0xFD9
  5357                           status	equ	0xFD8
  5358                           
  5359 ;; *************** function _SetSpeedLeft *****************
  5360 ;; Defined at:
  5361 ;;		line 30 in file "serial.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  lecture         1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  lecture         1    3[COMRAM] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1    wreg      void 
  5368 ;; Registers used:
  5369 ;;		wreg, status,2, status,0, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5375 ;;      Params:         0       0       0       0       0       0       0
  5376 ;;      Locals:         1       0       0       0       0       0       0
  5377 ;;      Temps:          0       0       0       0       0       0       0
  5378 ;;      Totals:         1       0       0       0       0       0       0
  5379 ;;Total ram usage:        1 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    1
  5382 ;; This function calls:
  5383 ;;		_ConvertPicSpeed
  5384 ;; This function is called by:
  5385 ;;		_isr
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           	psect	text36
  5390  00186E                     __ptext36:
  5391                           	opt stack 0
  5392  00186E                     _SetSpeedLeft:
  5393                           	opt stack 23
  5394                           
  5395                           ;incstack = 0
  5396                           ;SetSpeedLeft@lecture stored from wreg
  5397  00186E  6E04               	movwf	SetSpeedLeft@lecture,c
  5398                           
  5399                           ;serial.c: 31: SpeedLeft=ConvertPicSpeed(lecture);
  5400  001870  5004               	movf	SetSpeedLeft@lecture,w,c
  5401  001872  EC16  F007         	call	_ConvertPicSpeed
  5402  001876  C001  F04F         	movff	?_ConvertPicSpeed,_SpeedLeft
  5403  00187A  C002  F050         	movff	?_ConvertPicSpeed+1,_SpeedLeft+1
  5404  00187E  0012               	return		;funcret
  5405  001880                     __end_of_SetSpeedLeft:
  5406                           	opt stack 0
  5407                           pclatu	equ	0xFFB
  5408                           pclath	equ	0xFFA
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           postinc0	equ	0xFEE
  5417                           fsr0h	equ	0xFEA
  5418                           fsr0l	equ	0xFE9
  5419                           wreg	equ	0xFE8
  5420                           postdec1	equ	0xFE5
  5421                           plusw1	equ	0xFE3
  5422                           fsr1h	equ	0xFE2
  5423                           fsr1l	equ	0xFE1
  5424                           indf2	equ	0xFDF
  5425                           plusw2	equ	0xFDB
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function _ConvertPicSpeed *****************
  5431 ;; Defined at:
  5432 ;;		line 41 in file "serial.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  velocity        1    wreg     unsigned char 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  velocity        1    2[COMRAM] unsigned char 
  5437 ;; Return value:  Size  Location     Type
  5438 ;;                  2    0[COMRAM] int 
  5439 ;; Registers used:
  5440 ;;		wreg, status,2, status,0
  5441 ;; Tracked objects:
  5442 ;;		On entry : 0/0
  5443 ;;		On exit  : 0/0
  5444 ;;		Unchanged: 0/0
  5445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5446 ;;      Params:         2       0       0       0       0       0       0
  5447 ;;      Locals:         1       0       0       0       0       0       0
  5448 ;;      Temps:          0       0       0       0       0       0       0
  5449 ;;      Totals:         3       0       0       0       0       0       0
  5450 ;;Total ram usage:        3 bytes
  5451 ;; Hardware stack levels used:    1
  5452 ;; This function calls:
  5453 ;;		Nothing
  5454 ;; This function is called by:
  5455 ;;		_SetSpeedRight
  5456 ;;		_SetSpeedLeft
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           	psect	text37
  5461  000E2C                     __ptext37:
  5462                           	opt stack 0
  5463  000E2C                     _ConvertPicSpeed:
  5464                           	opt stack 23
  5465                           
  5466                           ;incstack = 0
  5467                           ;ConvertPicSpeed@velocity stored from wreg
  5468  000E2C  6E03               	movwf	ConvertPicSpeed@velocity,c
  5469                           
  5470                           ;serial.c: 42: switch(velocity){
  5471  000E2E  D03C               	goto	i2l2703
  5472  000E30                     i2l2629:
  5473                           
  5474                           ;serial.c: 44: return -100;
  5475  000E30  0EFF               	movlw	255
  5476  000E32  6E02               	movwf	?_ConvertPicSpeed+1,c
  5477  000E34  0E9C               	movlw	156
  5478  000E36  6E01               	movwf	?_ConvertPicSpeed,c
  5479                           
  5480                           ;serial.c: 45: break;
  5481  000E38  0012               	return	
  5482  000E3A                     i2l2635:
  5483                           
  5484                           ;serial.c: 47: return -80;
  5485  000E3A  0EFF               	movlw	255
  5486  000E3C  6E02               	movwf	?_ConvertPicSpeed+1,c
  5487  000E3E  0EB0               	movlw	176
  5488  000E40  6E01               	movwf	?_ConvertPicSpeed,c
  5489                           
  5490                           ;serial.c: 48: break;
  5491  000E42  0012               	return	
  5492  000E44                     i2l2641:
  5493                           
  5494                           ;serial.c: 50: return -60;
  5495  000E44  0EFF               	movlw	255
  5496  000E46  6E02               	movwf	?_ConvertPicSpeed+1,c
  5497  000E48  0EC4               	movlw	196
  5498  000E4A  6E01               	movwf	?_ConvertPicSpeed,c
  5499                           
  5500                           ;serial.c: 51: break;
  5501  000E4C  0012               	return	
  5502  000E4E                     i2l2647:
  5503                           
  5504                           ;serial.c: 53: return -40;
  5505  000E4E  0EFF               	movlw	255
  5506  000E50  6E02               	movwf	?_ConvertPicSpeed+1,c
  5507  000E52  0ED8               	movlw	216
  5508  000E54  6E01               	movwf	?_ConvertPicSpeed,c
  5509                           
  5510                           ;serial.c: 54: break;
  5511  000E56  0012               	return	
  5512  000E58                     i2l2653:
  5513                           
  5514                           ;serial.c: 56: return -20;
  5515  000E58  0EFF               	movlw	255
  5516  000E5A  6E02               	movwf	?_ConvertPicSpeed+1,c
  5517  000E5C  0EEC               	movlw	236
  5518  000E5E  6E01               	movwf	?_ConvertPicSpeed,c
  5519                           
  5520                           ;serial.c: 57: break;
  5521  000E60  0012               	return	
  5522  000E62                     i2l2659:
  5523                           
  5524                           ;serial.c: 59: return 0;
  5525  000E62  0E00               	movlw	0
  5526  000E64  6E02               	movwf	?_ConvertPicSpeed+1,c
  5527  000E66  0E00               	movlw	0
  5528  000E68  6E01               	movwf	?_ConvertPicSpeed,c
  5529                           
  5530                           ;serial.c: 60: break;
  5531  000E6A  0012               	return	
  5532  000E6C                     i2l2665:
  5533                           
  5534                           ;serial.c: 62: return 20;
  5535  000E6C  0E00               	movlw	0
  5536  000E6E  6E02               	movwf	?_ConvertPicSpeed+1,c
  5537  000E70  0E14               	movlw	20
  5538  000E72  6E01               	movwf	?_ConvertPicSpeed,c
  5539                           
  5540                           ;serial.c: 63: break;
  5541  000E74  0012               	return	
  5542  000E76                     i2l2671:
  5543                           
  5544                           ;serial.c: 65: return 40;
  5545  000E76  0E00               	movlw	0
  5546  000E78  6E02               	movwf	?_ConvertPicSpeed+1,c
  5547  000E7A  0E28               	movlw	40
  5548  000E7C  6E01               	movwf	?_ConvertPicSpeed,c
  5549                           
  5550                           ;serial.c: 66: break;
  5551  000E7E  0012               	return	
  5552  000E80                     i2l2677:
  5553                           
  5554                           ;serial.c: 68: return 60;
  5555  000E80  0E00               	movlw	0
  5556  000E82  6E02               	movwf	?_ConvertPicSpeed+1,c
  5557  000E84  0E3C               	movlw	60
  5558  000E86  6E01               	movwf	?_ConvertPicSpeed,c
  5559                           
  5560                           ;serial.c: 69: break;
  5561  000E88  0012               	return	
  5562  000E8A                     i2l2683:
  5563                           
  5564                           ;serial.c: 71: return 80;
  5565  000E8A  0E00               	movlw	0
  5566  000E8C  6E02               	movwf	?_ConvertPicSpeed+1,c
  5567  000E8E  0E50               	movlw	80
  5568  000E90  6E01               	movwf	?_ConvertPicSpeed,c
  5569                           
  5570                           ;serial.c: 72: break;
  5571  000E92  0012               	return	
  5572  000E94                     i2l2689:
  5573                           
  5574                           ;serial.c: 74: return 100;
  5575  000E94  0E00               	movlw	0
  5576  000E96  6E02               	movwf	?_ConvertPicSpeed+1,c
  5577  000E98  0E64               	movlw	100
  5578  000E9A  6E01               	movwf	?_ConvertPicSpeed,c
  5579                           
  5580                           ;serial.c: 75: break;
  5581  000E9C  0012               	return	
  5582  000E9E                     i2l2695:
  5583                           
  5584                           ;serial.c: 77: return 0;
  5585  000E9E  0E00               	movlw	0
  5586  000EA0  6E02               	movwf	?_ConvertPicSpeed+1,c
  5587  000EA2  0E00               	movlw	0
  5588  000EA4  6E01               	movwf	?_ConvertPicSpeed,c
  5589                           
  5590                           ;serial.c: 79: }
  5591                           
  5592                           ;serial.c: 78: break;
  5593  000EA6  0012               	return	
  5594  000EA8                     i2l2703:
  5595  000EA8  5003               	movf	ConvertPicSpeed@velocity,w,c
  5596                           
  5597                           ; Switch size 1, requested type "space"
  5598                           ; Number of cases is 11, Range of values is 48 to 97
  5599                           ; switch strategies available:
  5600                           ; Name         Instructions Cycles
  5601                           ; simple_byte           34    18 (average)
  5602                           ;	Chosen strategy is simple_byte
  5603  000EAA  0A30               	xorlw	48	; case 48
  5604  000EAC  B4D8               	btfsc	status,2,c
  5605  000EAE  D7C0               	goto	i2l2629
  5606  000EB0  0A01               	xorlw	1	; case 49
  5607  000EB2  B4D8               	btfsc	status,2,c
  5608  000EB4  D7C2               	goto	i2l2635
  5609  000EB6  0A03               	xorlw	3	; case 50
  5610  000EB8  B4D8               	btfsc	status,2,c
  5611  000EBA  D7C4               	goto	i2l2641
  5612  000EBC  0A01               	xorlw	1	; case 51
  5613  000EBE  B4D8               	btfsc	status,2,c
  5614  000EC0  D7C6               	goto	i2l2647
  5615  000EC2  0A07               	xorlw	7	; case 52
  5616  000EC4  B4D8               	btfsc	status,2,c
  5617  000EC6  D7C8               	goto	i2l2653
  5618  000EC8  0A01               	xorlw	1	; case 53
  5619  000ECA  B4D8               	btfsc	status,2,c
  5620  000ECC  D7CA               	goto	i2l2659
  5621  000ECE  0A03               	xorlw	3	; case 54
  5622  000ED0  B4D8               	btfsc	status,2,c
  5623  000ED2  D7CC               	goto	i2l2665
  5624  000ED4  0A01               	xorlw	1	; case 55
  5625  000ED6  B4D8               	btfsc	status,2,c
  5626  000ED8  D7CE               	goto	i2l2671
  5627  000EDA  0A0F               	xorlw	15	; case 56
  5628  000EDC  B4D8               	btfsc	status,2,c
  5629  000EDE  D7D0               	goto	i2l2677
  5630  000EE0  0A01               	xorlw	1	; case 57
  5631  000EE2  B4D8               	btfsc	status,2,c
  5632  000EE4  D7D2               	goto	i2l2683
  5633  000EE6  0A58               	xorlw	88	; case 97
  5634  000EE8  B4D8               	btfsc	status,2,c
  5635  000EEA  D7D4               	goto	i2l2689
  5636  000EEC  D7D8               	goto	i2l2695
  5637  000EEE                     __end_of_ConvertPicSpeed:
  5638                           	opt stack 0
  5639                           pclatu	equ	0xFFB
  5640                           pclath	equ	0xFFA
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           postinc0	equ	0xFEE
  5649                           fsr0h	equ	0xFEA
  5650                           fsr0l	equ	0xFE9
  5651                           wreg	equ	0xFE8
  5652                           postdec1	equ	0xFE5
  5653                           plusw1	equ	0xFE3
  5654                           fsr1h	equ	0xFE2
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           plusw2	equ	0xFDB
  5658                           fsr2h	equ	0xFDA
  5659                           fsr2l	equ	0xFD9
  5660                           status	equ	0xFD8
  5661                           
  5662 ;; *************** function _SetDistanceRight *****************
  5663 ;; Defined at:
  5664 ;;		line 60 in file "ADC.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  lecture         2   53[COMRAM] unsigned int 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, status,0, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5678 ;;      Params:         2       0       0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0
  5680 ;;      Temps:          2       0       0       0       0       0       0
  5681 ;;      Totals:         4       0       0       0       0       0       0
  5682 ;;Total ram usage:        4 bytes
  5683 ;; Hardware stack levels used:    1
  5684 ;; Hardware stack levels required when called:    2
  5685 ;; This function calls:
  5686 ;;		___ftadd
  5687 ;;		___ftmul
  5688 ;;		___fttol
  5689 ;;		___lwtoft
  5690 ;; This function is called by:
  5691 ;;		_isr
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text38
  5696  001206                     __ptext38:
  5697                           	opt stack 0
  5698  001206                     _SetDistanceRight:
  5699                           	opt stack 22
  5700                           
  5701                           ;ADC.c: 61: DistanceRight=5+(1023-lecture)*0.042;
  5702                           
  5703                           ;incstack = 0
  5704  001206  0E00               	movlw	0
  5705  001208  6E1E               	movwf	___ftadd@f2,c
  5706  00120A  0EA0               	movlw	160
  5707  00120C  6E1F               	movwf	___ftadd@f2+1,c
  5708  00120E  0E40               	movlw	64
  5709  001210  6E20               	movwf	___ftadd@f2+2,c
  5710  001212  0E08               	movlw	8
  5711  001214  6E0F               	movwf	___ftmul@f2,c
  5712  001216  0E2C               	movlw	44
  5713  001218  6E10               	movwf	___ftmul@f2+1,c
  5714  00121A  0E3D               	movlw	61
  5715  00121C  6E11               	movwf	___ftmul@f2+2,c
  5716  00121E  C036  F038         	movff	SetDistanceRight@lecture,??_SetDistanceRight
  5717  001222  C037  F039         	movff	SetDistanceRight@lecture+1,??_SetDistanceRight+1
  5718  001226  1E38               	comf	??_SetDistanceRight,f,c
  5719  001228  1E39               	comf	??_SetDistanceRight+1,f,c
  5720  00122A  4A38               	infsnz	??_SetDistanceRight,f,c
  5721  00122C  2A39               	incf	??_SetDistanceRight+1,f,c
  5722  00122E  0EFF               	movlw	255
  5723  001230  2438               	addwf	??_SetDistanceRight,w,c
  5724  001232  6E09               	movwf	___lwtoft@c,c
  5725  001234  0E03               	movlw	3
  5726  001236  2039               	addwfc	??_SetDistanceRight+1,w,c
  5727  001238  6E0A               	movwf	___lwtoft@c+1,c
  5728  00123A  ECE8  F00B         	call	___lwtoft	;wreg free
  5729  00123E  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5730  001242  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5731  001246  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5732  00124A  ECBD  F005         	call	___ftmul	;wreg free
  5733  00124E  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5734  001252  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5735  001256  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5736  00125A  EC0C  F003         	call	___ftadd	;wreg free
  5737  00125E  C01B  F027         	movff	?___ftadd,___fttol@f1
  5738  001262  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  5739  001266  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  5740  00126A  EC43  F005         	call	___fttol	;wreg free
  5741  00126E  C027  F0A4         	movff	?___fttol,_DistanceRight
  5742  001272  C028  F0A5         	movff	?___fttol+1,_DistanceRight+1
  5743  001276  0012               	return		;funcret
  5744  001278                     __end_of_SetDistanceRight:
  5745                           	opt stack 0
  5746                           pclatu	equ	0xFFB
  5747                           pclath	equ	0xFFA
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           postinc0	equ	0xFEE
  5756                           fsr0h	equ	0xFEA
  5757                           fsr0l	equ	0xFE9
  5758                           wreg	equ	0xFE8
  5759                           postdec1	equ	0xFE5
  5760                           plusw1	equ	0xFE3
  5761                           fsr1h	equ	0xFE2
  5762                           fsr1l	equ	0xFE1
  5763                           indf2	equ	0xFDF
  5764                           plusw2	equ	0xFDB
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function _SetDistanceLeft *****************
  5770 ;; Defined at:
  5771 ;;		line 52 in file "ADC.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  lecture         2   53[COMRAM] unsigned int 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  1    wreg      void 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0, cstack
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5785 ;;      Params:         2       0       0       0       0       0       0
  5786 ;;      Locals:         0       0       0       0       0       0       0
  5787 ;;      Temps:          2       0       0       0       0       0       0
  5788 ;;      Totals:         4       0       0       0       0       0       0
  5789 ;;Total ram usage:        4 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    2
  5792 ;; This function calls:
  5793 ;;		___ftadd
  5794 ;;		___ftmul
  5795 ;;		___fttol
  5796 ;;		___lwtoft
  5797 ;; This function is called by:
  5798 ;;		_isr
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text39
  5803  001278                     __ptext39:
  5804                           	opt stack 0
  5805  001278                     _SetDistanceLeft:
  5806                           	opt stack 22
  5807                           
  5808                           ;ADC.c: 53: DistanceLeft=5+(1023-lecture)*0.042;
  5809                           
  5810                           ;incstack = 0
  5811  001278  0E00               	movlw	0
  5812  00127A  6E1E               	movwf	___ftadd@f2,c
  5813  00127C  0EA0               	movlw	160
  5814  00127E  6E1F               	movwf	___ftadd@f2+1,c
  5815  001280  0E40               	movlw	64
  5816  001282  6E20               	movwf	___ftadd@f2+2,c
  5817  001284  0E08               	movlw	8
  5818  001286  6E0F               	movwf	___ftmul@f2,c
  5819  001288  0E2C               	movlw	44
  5820  00128A  6E10               	movwf	___ftmul@f2+1,c
  5821  00128C  0E3D               	movlw	61
  5822  00128E  6E11               	movwf	___ftmul@f2+2,c
  5823  001290  C036  F038         	movff	SetDistanceLeft@lecture,??_SetDistanceLeft
  5824  001294  C037  F039         	movff	SetDistanceLeft@lecture+1,??_SetDistanceLeft+1
  5825  001298  1E38               	comf	??_SetDistanceLeft,f,c
  5826  00129A  1E39               	comf	??_SetDistanceLeft+1,f,c
  5827  00129C  4A38               	infsnz	??_SetDistanceLeft,f,c
  5828  00129E  2A39               	incf	??_SetDistanceLeft+1,f,c
  5829  0012A0  0EFF               	movlw	255
  5830  0012A2  2438               	addwf	??_SetDistanceLeft,w,c
  5831  0012A4  6E09               	movwf	___lwtoft@c,c
  5832  0012A6  0E03               	movlw	3
  5833  0012A8  2039               	addwfc	??_SetDistanceLeft+1,w,c
  5834  0012AA  6E0A               	movwf	___lwtoft@c+1,c
  5835  0012AC  ECE8  F00B         	call	___lwtoft	;wreg free
  5836  0012B0  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5837  0012B4  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5838  0012B8  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5839  0012BC  ECBD  F005         	call	___ftmul	;wreg free
  5840  0012C0  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5841  0012C4  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5842  0012C8  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5843  0012CC  EC0C  F003         	call	___ftadd	;wreg free
  5844  0012D0  C01B  F027         	movff	?___ftadd,___fttol@f1
  5845  0012D4  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  5846  0012D8  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  5847  0012DC  EC43  F005         	call	___fttol	;wreg free
  5848  0012E0  C027  F0A2         	movff	?___fttol,_DistanceLeft
  5849  0012E4  C028  F0A3         	movff	?___fttol+1,_DistanceLeft+1
  5850  0012E8  0012               	return		;funcret
  5851  0012EA                     __end_of_SetDistanceLeft:
  5852                           	opt stack 0
  5853                           pclatu	equ	0xFFB
  5854                           pclath	equ	0xFFA
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           intcon	equ	0xFF2
  5862                           postinc0	equ	0xFEE
  5863                           fsr0h	equ	0xFEA
  5864                           fsr0l	equ	0xFE9
  5865                           wreg	equ	0xFE8
  5866                           postdec1	equ	0xFE5
  5867                           plusw1	equ	0xFE3
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           plusw2	equ	0xFDB
  5872                           fsr2h	equ	0xFDA
  5873                           fsr2l	equ	0xFD9
  5874                           status	equ	0xFD8
  5875                           
  5876 ;; *************** function _SetDistanceCentral *****************
  5877 ;; Defined at:
  5878 ;;		line 68 in file "ADC.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  lecture         2   53[COMRAM] unsigned int 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;		None
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      void 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5892 ;;      Params:         2       0       0       0       0       0       0
  5893 ;;      Locals:         0       0       0       0       0       0       0
  5894 ;;      Temps:          2       0       0       0       0       0       0
  5895 ;;      Totals:         4       0       0       0       0       0       0
  5896 ;;Total ram usage:        4 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    2
  5899 ;; This function calls:
  5900 ;;		___ftadd
  5901 ;;		___ftmul
  5902 ;;		___fttol
  5903 ;;		___lwtoft
  5904 ;; This function is called by:
  5905 ;;		_isr
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text40
  5910  0012EA                     __ptext40:
  5911                           	opt stack 0
  5912  0012EA                     _SetDistanceCentral:
  5913                           	opt stack 22
  5914                           
  5915                           ;ADC.c: 69: DistanceCentral=5+(1023-lecture)*0.042;
  5916                           
  5917                           ;incstack = 0
  5918  0012EA  0E00               	movlw	0
  5919  0012EC  6E1E               	movwf	___ftadd@f2,c
  5920  0012EE  0EA0               	movlw	160
  5921  0012F0  6E1F               	movwf	___ftadd@f2+1,c
  5922  0012F2  0E40               	movlw	64
  5923  0012F4  6E20               	movwf	___ftadd@f2+2,c
  5924  0012F6  0E08               	movlw	8
  5925  0012F8  6E0F               	movwf	___ftmul@f2,c
  5926  0012FA  0E2C               	movlw	44
  5927  0012FC  6E10               	movwf	___ftmul@f2+1,c
  5928  0012FE  0E3D               	movlw	61
  5929  001300  6E11               	movwf	___ftmul@f2+2,c
  5930  001302  C036  F038         	movff	SetDistanceCentral@lecture,??_SetDistanceCentral
  5931  001306  C037  F039         	movff	SetDistanceCentral@lecture+1,??_SetDistanceCentral+1
  5932  00130A  1E38               	comf	??_SetDistanceCentral,f,c
  5933  00130C  1E39               	comf	??_SetDistanceCentral+1,f,c
  5934  00130E  4A38               	infsnz	??_SetDistanceCentral,f,c
  5935  001310  2A39               	incf	??_SetDistanceCentral+1,f,c
  5936  001312  0EFF               	movlw	255
  5937  001314  2438               	addwf	??_SetDistanceCentral,w,c
  5938  001316  6E09               	movwf	___lwtoft@c,c
  5939  001318  0E03               	movlw	3
  5940  00131A  2039               	addwfc	??_SetDistanceCentral+1,w,c
  5941  00131C  6E0A               	movwf	___lwtoft@c+1,c
  5942  00131E  ECE8  F00B         	call	___lwtoft	;wreg free
  5943  001322  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5944  001326  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5945  00132A  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5946  00132E  ECBD  F005         	call	___ftmul	;wreg free
  5947  001332  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5948  001336  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5949  00133A  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5950  00133E  EC0C  F003         	call	___ftadd	;wreg free
  5951  001342  C01B  F027         	movff	?___ftadd,___fttol@f1
  5952  001346  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  5953  00134A  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  5954  00134E  EC43  F005         	call	___fttol	;wreg free
  5955  001352  C027  F0A0         	movff	?___fttol,_DistanceCentral
  5956  001356  C028  F0A1         	movff	?___fttol+1,_DistanceCentral+1
  5957  00135A  0012               	return		;funcret
  5958  00135C                     __end_of_SetDistanceCentral:
  5959                           	opt stack 0
  5960                           pclatu	equ	0xFFB
  5961                           pclath	equ	0xFFA
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           postinc0	equ	0xFEE
  5970                           fsr0h	equ	0xFEA
  5971                           fsr0l	equ	0xFE9
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           plusw1	equ	0xFE3
  5975                           fsr1h	equ	0xFE2
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           plusw2	equ	0xFDB
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function ___ftadd *****************
  5984 ;; Defined at:
  5985 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  f1              3   26[COMRAM] float 
  5988 ;;  f2              3   29[COMRAM] float 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  exp1            1   37[COMRAM] unsigned char 
  5991 ;;  exp2            1   36[COMRAM] unsigned char 
  5992 ;;  sign            1   35[COMRAM] unsigned char 
  5993 ;; Return value:  Size  Location     Type
  5994 ;;                  3   26[COMRAM] float 
  5995 ;; Registers used:
  5996 ;;		wreg, status,2, status,0, cstack
  5997 ;; Tracked objects:
  5998 ;;		On entry : 0/0
  5999 ;;		On exit  : 0/0
  6000 ;;		Unchanged: 0/0
  6001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6002 ;;      Params:         6       0       0       0       0       0       0
  6003 ;;      Locals:         3       0       0       0       0       0       0
  6004 ;;      Temps:          3       0       0       0       0       0       0
  6005 ;;      Totals:        12       0       0       0       0       0       0
  6006 ;;Total ram usage:       12 bytes
  6007 ;; Hardware stack levels used:    1
  6008 ;; Hardware stack levels required when called:    1
  6009 ;; This function calls:
  6010 ;;		___ftpack
  6011 ;; This function is called by:
  6012 ;;		_SetDistanceLeft
  6013 ;;		_SetDistanceRight
  6014 ;;		_SetDistanceCentral
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text41
  6019  000618                     __ptext41:
  6020                           	opt stack 0
  6021  000618                     ___ftadd:
  6022                           	opt stack 22
  6023                           
  6024                           ;incstack = 0
  6025  000618  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  6026  00061C  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6027  00061E  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6028  000620  341C               	rlcf	___ftadd@f1+1,w,c
  6029  000622  3621               	rlcf	??___ftadd& (0+255),f,c
  6030  000624  E301               	bnc	u153_41
  6031  000626  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6032  000628                     u153_41:
  6033  000628  5021               	movf	??___ftadd,w,c
  6034  00062A  6E26               	movwf	___ftadd@exp1,c
  6035  00062C  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  6036  000630  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6037  000632  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6038  000634  341F               	rlcf	___ftadd@f2+1,w,c
  6039  000636  3621               	rlcf	??___ftadd& (0+255),f,c
  6040  000638  E301               	bnc	u154_41
  6041  00063A  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6042  00063C                     u154_41:
  6043  00063C  5021               	movf	??___ftadd,w,c
  6044  00063E  6E25               	movwf	___ftadd@exp2,c
  6045  000640  5026               	movf	___ftadd@exp1,w,c
  6046  000642  B4D8               	btfsc	status,2,c
  6047  000644  D00B               	goto	i2l829
  6048  000646  5025               	movf	___ftadd@exp2,w,c
  6049  000648  5C26               	subwf	___ftadd@exp1,w,c
  6050  00064A  B0D8               	btfsc	status,0,c
  6051  00064C  D00E               	goto	i2l2767
  6052  00064E  5026               	movf	___ftadd@exp1,w,c
  6053  000650  0800               	sublw	0
  6054  000652  2425               	addwf	___ftadd@exp2,w,c
  6055  000654  6E21               	movwf	??___ftadd& (0+255),c
  6056  000656  0E18               	movlw	24
  6057  000658  6421               	cpfsgt	??___ftadd,c
  6058  00065A  D007               	goto	i2l2767
  6059  00065C                     i2l829:
  6060  00065C  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  6061  000660  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  6062  000664  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  6063  000668  0012               	return	
  6064  00066A                     i2l2767:
  6065  00066A  5025               	movf	___ftadd@exp2,w,c
  6066  00066C  B4D8               	btfsc	status,2,c
  6067  00066E  D00B               	goto	i2l833
  6068  000670  5026               	movf	___ftadd@exp1,w,c
  6069  000672  5C25               	subwf	___ftadd@exp2,w,c
  6070  000674  B0D8               	btfsc	status,0,c
  6071  000676  D00E               	goto	i2l2773
  6072  000678  5025               	movf	___ftadd@exp2,w,c
  6073  00067A  0800               	sublw	0
  6074  00067C  2426               	addwf	___ftadd@exp1,w,c
  6075  00067E  6E21               	movwf	??___ftadd& (0+255),c
  6076  000680  0E18               	movlw	24
  6077  000682  6421               	cpfsgt	??___ftadd,c
  6078  000684  D007               	goto	i2l2773
  6079  000686                     i2l833:
  6080  000686  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  6081  00068A  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  6082  00068E  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  6083  000692  0012               	return	
  6084  000694                     i2l2773:
  6085  000694  0E06               	movlw	6
  6086  000696  6E24               	movwf	___ftadd@sign,c
  6087  000698  BE1D               	btfsc	___ftadd@f1+2,7,c
  6088  00069A  8E24               	bsf	___ftadd@sign,7,c
  6089  00069C  BE20               	btfsc	___ftadd@f2+2,7,c
  6090  00069E  8C24               	bsf	___ftadd@sign,6,c
  6091  0006A0  8E1C               	bsf	___ftadd@f1+1,7,c
  6092  0006A2  0EFF               	movlw	255
  6093  0006A4  161B               	andwf	___ftadd@f1,f,c
  6094  0006A6  0EFF               	movlw	255
  6095  0006A8  161C               	andwf	___ftadd@f1+1,f,c
  6096  0006AA  0E00               	movlw	0
  6097  0006AC  161D               	andwf	___ftadd@f1+2,f,c
  6098  0006AE  8E1F               	bsf	___ftadd@f2+1,7,c
  6099  0006B0  0EFF               	movlw	255
  6100  0006B2  161E               	andwf	___ftadd@f2,f,c
  6101  0006B4  0EFF               	movlw	255
  6102  0006B6  161F               	andwf	___ftadd@f2+1,f,c
  6103  0006B8  0E00               	movlw	0
  6104  0006BA  1620               	andwf	___ftadd@f2+2,f,c
  6105  0006BC  5025               	movf	___ftadd@exp2,w,c
  6106  0006BE  5C26               	subwf	___ftadd@exp1,w,c
  6107  0006C0  B0D8               	btfsc	status,0,c
  6108  0006C2  D01B               	goto	i2l2799
  6109  0006C4                     i2l2789:
  6110  0006C4  90D8               	bcf	status,0,c
  6111  0006C6  361E               	rlcf	___ftadd@f2,f,c
  6112  0006C8  361F               	rlcf	___ftadd@f2+1,f,c
  6113  0006CA  3620               	rlcf	___ftadd@f2+2,f,c
  6114  0006CC  0625               	decf	___ftadd@exp2,f,c
  6115  0006CE  5026               	movf	___ftadd@exp1,w,c
  6116  0006D0  1825               	xorwf	___ftadd@exp2,w,c
  6117  0006D2  B4D8               	btfsc	status,2,c
  6118  0006D4  D00D               	goto	i2l2797
  6119  0006D6  0624               	decf	___ftadd@sign,f,c
  6120  0006D8  C024  F021         	movff	___ftadd@sign,??___ftadd
  6121  0006DC  0E07               	movlw	7
  6122  0006DE  1621               	andwf	??___ftadd,f,c
  6123  0006E0  B4D8               	btfsc	status,2,c
  6124  0006E2  D006               	goto	i2l2797
  6125  0006E4  D7EF               	goto	i2l2789
  6126  0006E6                     i2l2795:
  6127  0006E6  90D8               	bcf	status,0,c
  6128  0006E8  321D               	rrcf	___ftadd@f1+2,f,c
  6129  0006EA  321C               	rrcf	___ftadd@f1+1,f,c
  6130  0006EC  321B               	rrcf	___ftadd@f1,f,c
  6131  0006EE  2A26               	incf	___ftadd@exp1,f,c
  6132  0006F0                     i2l2797:
  6133  0006F0  5025               	movf	___ftadd@exp2,w,c
  6134  0006F2  1826               	xorwf	___ftadd@exp1,w,c
  6135  0006F4  B4D8               	btfsc	status,2,c
  6136  0006F6  D01F               	goto	i2l844
  6137  0006F8  D7F6               	goto	i2l2795
  6138  0006FA                     i2l2799:
  6139  0006FA  5026               	movf	___ftadd@exp1,w,c
  6140  0006FC  5C25               	subwf	___ftadd@exp2,w,c
  6141  0006FE  B0D8               	btfsc	status,0,c
  6142  000700  D01A               	goto	i2l844
  6143  000702                     i2l2801:
  6144  000702  90D8               	bcf	status,0,c
  6145  000704  361B               	rlcf	___ftadd@f1,f,c
  6146  000706  361C               	rlcf	___ftadd@f1+1,f,c
  6147  000708  361D               	rlcf	___ftadd@f1+2,f,c
  6148  00070A  0626               	decf	___ftadd@exp1,f,c
  6149  00070C  5026               	movf	___ftadd@exp1,w,c
  6150  00070E  1825               	xorwf	___ftadd@exp2,w,c
  6151  000710  B4D8               	btfsc	status,2,c
  6152  000712  D00D               	goto	i2l2809
  6153  000714  0624               	decf	___ftadd@sign,f,c
  6154  000716  C024  F021         	movff	___ftadd@sign,??___ftadd
  6155  00071A  0E07               	movlw	7
  6156  00071C  1621               	andwf	??___ftadd,f,c
  6157  00071E  B4D8               	btfsc	status,2,c
  6158  000720  D006               	goto	i2l2809
  6159  000722  D7EF               	goto	i2l2801
  6160  000724                     i2l2807:
  6161  000724  90D8               	bcf	status,0,c
  6162  000726  3220               	rrcf	___ftadd@f2+2,f,c
  6163  000728  321F               	rrcf	___ftadd@f2+1,f,c
  6164  00072A  321E               	rrcf	___ftadd@f2,f,c
  6165  00072C  2A25               	incf	___ftadd@exp2,f,c
  6166  00072E                     i2l2809:
  6167  00072E  5025               	movf	___ftadd@exp2,w,c
  6168  000730  1826               	xorwf	___ftadd@exp1,w,c
  6169  000732  A4D8               	btfss	status,2,c
  6170  000734  D7F7               	goto	i2l2807
  6171  000736                     i2l844:
  6172  000736  AE24               	btfss	___ftadd@sign,7,c
  6173  000738  D00C               	goto	i2l853
  6174  00073A  0EFF               	movlw	255
  6175  00073C  1A1B               	xorwf	___ftadd@f1,f,c
  6176  00073E  0EFF               	movlw	255
  6177  000740  1A1C               	xorwf	___ftadd@f1+1,f,c
  6178  000742  0EFF               	movlw	255
  6179  000744  1A1D               	xorwf	___ftadd@f1+2,f,c
  6180  000746  0E01               	movlw	1
  6181  000748  261B               	addwf	___ftadd@f1,f,c
  6182  00074A  0E00               	movlw	0
  6183  00074C  221C               	addwfc	___ftadd@f1+1,f,c
  6184  00074E  0E00               	movlw	0
  6185  000750  221D               	addwfc	___ftadd@f1+2,f,c
  6186  000752                     i2l853:
  6187  000752  AC24               	btfss	___ftadd@sign,6,c
  6188  000754  D00C               	goto	i2l2815
  6189  000756  0EFF               	movlw	255
  6190  000758  1A1E               	xorwf	___ftadd@f2,f,c
  6191  00075A  0EFF               	movlw	255
  6192  00075C  1A1F               	xorwf	___ftadd@f2+1,f,c
  6193  00075E  0EFF               	movlw	255
  6194  000760  1A20               	xorwf	___ftadd@f2+2,f,c
  6195  000762  0E01               	movlw	1
  6196  000764  261E               	addwf	___ftadd@f2,f,c
  6197  000766  0E00               	movlw	0
  6198  000768  221F               	addwfc	___ftadd@f2+1,f,c
  6199  00076A  0E00               	movlw	0
  6200  00076C  2220               	addwfc	___ftadd@f2+2,f,c
  6201  00076E                     i2l2815:
  6202  00076E  0E00               	movlw	0
  6203  000770  6E24               	movwf	___ftadd@sign,c
  6204  000772  501B               	movf	___ftadd@f1,w,c
  6205  000774  261E               	addwf	___ftadd@f2,f,c
  6206  000776  501C               	movf	___ftadd@f1+1,w,c
  6207  000778  221F               	addwfc	___ftadd@f2+1,f,c
  6208  00077A  501D               	movf	___ftadd@f1+2,w,c
  6209  00077C  2220               	addwfc	___ftadd@f2+2,f,c
  6210  00077E  AE20               	btfss	___ftadd@f2+2,7,c
  6211  000780  D00E               	goto	i2l2825
  6212  000782  0EFF               	movlw	255
  6213  000784  1A1E               	xorwf	___ftadd@f2,f,c
  6214  000786  0EFF               	movlw	255
  6215  000788  1A1F               	xorwf	___ftadd@f2+1,f,c
  6216  00078A  0EFF               	movlw	255
  6217  00078C  1A20               	xorwf	___ftadd@f2+2,f,c
  6218  00078E  0E01               	movlw	1
  6219  000790  261E               	addwf	___ftadd@f2,f,c
  6220  000792  0E00               	movlw	0
  6221  000794  221F               	addwfc	___ftadd@f2+1,f,c
  6222  000796  0E00               	movlw	0
  6223  000798  2220               	addwfc	___ftadd@f2+2,f,c
  6224  00079A  0E01               	movlw	1
  6225  00079C  6E24               	movwf	___ftadd@sign,c
  6226  00079E                     i2l2825:
  6227  00079E  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  6228  0007A2  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6229  0007A6  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6230  0007AA  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  6231  0007AE  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  6232  0007B2  ECD6  F007         	call	___ftpack	;wreg free
  6233  0007B6  C001  F01B         	movff	?___ftpack,?___ftadd
  6234  0007BA  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  6235  0007BE  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  6236  0007C2  0012               	return	
  6237  0007C4                     __end_of___ftadd:
  6238                           	opt stack 0
  6239                           pclatu	equ	0xFFB
  6240                           pclath	equ	0xFFA
  6241                           tblptru	equ	0xFF8
  6242                           tblptrh	equ	0xFF7
  6243                           tblptrl	equ	0xFF6
  6244                           tablat	equ	0xFF5
  6245                           prodh	equ	0xFF4
  6246                           prodl	equ	0xFF3
  6247                           intcon	equ	0xFF2
  6248                           postinc0	equ	0xFEE
  6249                           fsr0h	equ	0xFEA
  6250                           fsr0l	equ	0xFE9
  6251                           wreg	equ	0xFE8
  6252                           postdec1	equ	0xFE5
  6253                           plusw1	equ	0xFE3
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _SetBattery *****************
  6263 ;; Defined at:
  6264 ;;		line 76 in file "ADC.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  lecture         2   53[COMRAM] unsigned int 
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, status,2, status,0, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         2       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:          0       0       0       0       0       0       0
  6281 ;;      Totals:         2       0       0       0       0       0       0
  6282 ;;Total ram usage:        2 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    2
  6285 ;; This function calls:
  6286 ;;		___ftmul
  6287 ;;		___fttol
  6288 ;;		___lwtoft
  6289 ;; This function is called by:
  6290 ;;		_isr
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text42
  6295  001570                     __ptext42:
  6296                           	opt stack 0
  6297  001570                     _SetBattery:
  6298                           	opt stack 22
  6299                           
  6300                           ;ADC.c: 79: Battery=lecture*3.548;
  6301                           
  6302                           ;incstack = 0
  6303  001570  0E12               	movlw	18
  6304  001572  6E0F               	movwf	___ftmul@f2,c
  6305  001574  0E63               	movlw	99
  6306  001576  6E10               	movwf	___ftmul@f2+1,c
  6307  001578  0E40               	movlw	64
  6308  00157A  6E11               	movwf	___ftmul@f2+2,c
  6309  00157C  C036  F009         	movff	SetBattery@lecture,___lwtoft@c
  6310  001580  C037  F00A         	movff	SetBattery@lecture+1,___lwtoft@c+1
  6311  001584  ECE8  F00B         	call	___lwtoft	;wreg free
  6312  001588  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  6313  00158C  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  6314  001590  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  6315  001594  ECBD  F005         	call	___ftmul	;wreg free
  6316  001598  C00C  F027         	movff	?___ftmul,___fttol@f1
  6317  00159C  C00D  F028         	movff	?___ftmul+1,___fttol@f1+1
  6318  0015A0  C00E  F029         	movff	?___ftmul+2,___fttol@f1+2
  6319  0015A4  EC43  F005         	call	___fttol	;wreg free
  6320  0015A8  C027  F04D         	movff	?___fttol,_Battery
  6321  0015AC  C028  F04E         	movff	?___fttol+1,_Battery+1
  6322  0015B0  0012               	return		;funcret
  6323  0015B2                     __end_of_SetBattery:
  6324                           	opt stack 0
  6325                           pclatu	equ	0xFFB
  6326                           pclath	equ	0xFFA
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           postinc0	equ	0xFEE
  6335                           fsr0h	equ	0xFEA
  6336                           fsr0l	equ	0xFE9
  6337                           wreg	equ	0xFE8
  6338                           postdec1	equ	0xFE5
  6339                           plusw1	equ	0xFE3
  6340                           fsr1h	equ	0xFE2
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function ___lwtoft *****************
  6349 ;; Defined at:
  6350 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  c               2    8[COMRAM] unsigned int 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;		None
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  3    8[COMRAM] float 
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6364 ;;      Params:         3       0       0       0       0       0       0
  6365 ;;      Locals:         0       0       0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0
  6367 ;;      Totals:         3       0       0       0       0       0       0
  6368 ;;Total ram usage:        3 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    1
  6371 ;; This function calls:
  6372 ;;		___ftpack
  6373 ;; This function is called by:
  6374 ;;		_SetDistanceLeft
  6375 ;;		_SetDistanceRight
  6376 ;;		_SetDistanceCentral
  6377 ;;		_SetBattery
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text43
  6382  0017D0                     __ptext43:
  6383                           	opt stack 0
  6384  0017D0                     ___lwtoft:
  6385                           	opt stack 22
  6386                           
  6387                           ;incstack = 0
  6388  0017D0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6389  0017D4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6390  0017D8  6A03               	clrf	___ftpack@arg+2,c
  6391  0017DA  0E8E               	movlw	142
  6392  0017DC  6E04               	movwf	___ftpack@exp,c
  6393  0017DE  0E00               	movlw	0
  6394  0017E0  6E05               	movwf	___ftpack@sign,c
  6395  0017E2  ECD6  F007         	call	___ftpack	;wreg free
  6396  0017E6  C001  F009         	movff	?___ftpack,?___lwtoft
  6397  0017EA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6398  0017EE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6399  0017F2  0012               	return	
  6400  0017F4                     __end_of___lwtoft:
  6401                           	opt stack 0
  6402                           pclatu	equ	0xFFB
  6403                           pclath	equ	0xFFA
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           postinc0	equ	0xFEE
  6412                           fsr0h	equ	0xFEA
  6413                           fsr0l	equ	0xFE9
  6414                           wreg	equ	0xFE8
  6415                           postdec1	equ	0xFE5
  6416                           plusw1	equ	0xFE3
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           plusw2	equ	0xFDB
  6421                           fsr2h	equ	0xFDA
  6422                           fsr2l	equ	0xFD9
  6423                           status	equ	0xFD8
  6424                           
  6425 ;; *************** function ___fttol *****************
  6426 ;; Defined at:
  6427 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  6428 ;; Parameters:    Size  Location     Type
  6429 ;;  f1              3   38[COMRAM] float 
  6430 ;; Auto vars:     Size  Location     Type
  6431 ;;  lval            4   48[COMRAM] unsigned long 
  6432 ;;  exp1            1   52[COMRAM] unsigned char 
  6433 ;;  sign1           1   47[COMRAM] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  4   38[COMRAM] long 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6443 ;;      Params:         4       0       0       0       0       0       0
  6444 ;;      Locals:         6       0       0       0       0       0       0
  6445 ;;      Temps:          5       0       0       0       0       0       0
  6446 ;;      Totals:        15       0       0       0       0       0       0
  6447 ;;Total ram usage:       15 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; This function calls:
  6450 ;;		Nothing
  6451 ;; This function is called by:
  6452 ;;		_SetDistanceLeft
  6453 ;;		_SetDistanceRight
  6454 ;;		_SetDistanceCentral
  6455 ;;		_SetBattery
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text44
  6460  000A86                     __ptext44:
  6461                           	opt stack 0
  6462  000A86                     ___fttol:
  6463                           	opt stack 23
  6464                           
  6465                           ;incstack = 0
  6466  000A86  C029  F02B         	movff	___fttol@f1+2,??___fttol
  6467  000A8A  6A2C               	clrf	(??___fttol+1)& (0+255),c
  6468  000A8C  6A2D               	clrf	(??___fttol+2)& (0+255),c
  6469  000A8E  3428               	rlcf	___fttol@f1+1,w,c
  6470  000A90  362B               	rlcf	??___fttol& (0+255),f,c
  6471  000A92  E301               	bnc	u180_41
  6472  000A94  802C               	bsf	(??___fttol+1)& (0+255),0,c
  6473  000A96                     u180_41:
  6474  000A96  502B               	movf	??___fttol,w,c
  6475  000A98  6E35               	movwf	___fttol@exp1,c
  6476  000A9A  5035               	movf	___fttol@exp1,w,c
  6477  000A9C  A4D8               	btfss	status,2,c
  6478  000A9E  D009               	goto	i2l2883
  6479  000AA0  0E00               	movlw	0
  6480  000AA2  6E27               	movwf	?___fttol,c
  6481  000AA4  0E00               	movlw	0
  6482  000AA6  6E28               	movwf	?___fttol+1,c
  6483  000AA8  0E00               	movlw	0
  6484  000AAA  6E29               	movwf	?___fttol+2,c
  6485  000AAC  0E00               	movlw	0
  6486  000AAE  6E2A               	movwf	?___fttol+3,c
  6487  000AB0  0012               	return	
  6488  000AB2                     i2l2883:
  6489  000AB2  0E17               	movlw	23
  6490  000AB4  6E2B               	movwf	??___fttol& (0+255),c
  6491  000AB6  C027  F02C         	movff	___fttol@f1,??___fttol+1
  6492  000ABA  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  6493  000ABE  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  6494  000AC2  282B               	incf	??___fttol,w,c
  6495  000AC4  6E2F               	movwf	(??___fttol+4)& (0+255),c
  6496  000AC6  D004               	goto	i2u182_40
  6497  000AC8                     i2u182_45:
  6498  000AC8  90D8               	bcf	status,0,c
  6499  000ACA  322E               	rrcf	??___fttol+3,f,c
  6500  000ACC  322D               	rrcf	??___fttol+2,f,c
  6501  000ACE  322C               	rrcf	??___fttol+1,f,c
  6502  000AD0                     i2u182_40:
  6503  000AD0  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  6504  000AD2  D7FA               	goto	i2u182_45
  6505  000AD4  502C               	movf	??___fttol+1,w,c
  6506  000AD6  6E30               	movwf	___fttol@sign1,c
  6507  000AD8  8E28               	bsf	___fttol@f1+1,7,c
  6508  000ADA  0EFF               	movlw	255
  6509  000ADC  1627               	andwf	___fttol@f1,f,c
  6510  000ADE  0EFF               	movlw	255
  6511  000AE0  1628               	andwf	___fttol@f1+1,f,c
  6512  000AE2  0E00               	movlw	0
  6513  000AE4  1629               	andwf	___fttol@f1+2,f,c
  6514  000AE6  5027               	movf	___fttol@f1,w,c
  6515  000AE8  6E31               	movwf	___fttol@lval,c
  6516  000AEA  5028               	movf	___fttol@f1+1,w,c
  6517  000AEC  6E32               	movwf	___fttol@lval+1,c
  6518  000AEE  5029               	movf	___fttol@f1+2,w,c
  6519  000AF0  6E33               	movwf	___fttol@lval+2,c
  6520  000AF2  6A34               	clrf	___fttol@lval+3,c
  6521  000AF4  0E8E               	movlw	142
  6522  000AF6  5E35               	subwf	___fttol@exp1,f,c
  6523  000AF8  AE35               	btfss	___fttol@exp1,7,c
  6524  000AFA  D016               	goto	i2l2905
  6525  000AFC  5035               	movf	___fttol@exp1,w,c
  6526  000AFE  0A80               	xorlw	128
  6527  000B00  0F8F               	addlw	143
  6528  000B02  B0D8               	btfsc	status,0,c
  6529  000B04  D009               	goto	i2l2901
  6530  000B06  0E00               	movlw	0
  6531  000B08  6E27               	movwf	?___fttol,c
  6532  000B0A  0E00               	movlw	0
  6533  000B0C  6E28               	movwf	?___fttol+1,c
  6534  000B0E  0E00               	movlw	0
  6535  000B10  6E29               	movwf	?___fttol+2,c
  6536  000B12  0E00               	movlw	0
  6537  000B14  6E2A               	movwf	?___fttol+3,c
  6538  000B16  0012               	return	
  6539  000B18                     i2l2901:
  6540  000B18  90D8               	bcf	status,0,c
  6541  000B1A  3234               	rrcf	___fttol@lval+3,f,c
  6542  000B1C  3233               	rrcf	___fttol@lval+2,f,c
  6543  000B1E  3232               	rrcf	___fttol@lval+1,f,c
  6544  000B20  3231               	rrcf	___fttol@lval,f,c
  6545  000B22  3E35               	incfsz	___fttol@exp1,f,c
  6546  000B24  D7F9               	goto	i2l2901
  6547  000B26  D015               	goto	i2l2915
  6548  000B28                     i2l2905:
  6549  000B28  0E17               	movlw	23
  6550  000B2A  6435               	cpfsgt	___fttol@exp1,c
  6551  000B2C  D00F               	goto	i2l2913
  6552  000B2E  0E00               	movlw	0
  6553  000B30  6E27               	movwf	?___fttol,c
  6554  000B32  0E00               	movlw	0
  6555  000B34  6E28               	movwf	?___fttol+1,c
  6556  000B36  0E00               	movlw	0
  6557  000B38  6E29               	movwf	?___fttol+2,c
  6558  000B3A  0E00               	movlw	0
  6559  000B3C  6E2A               	movwf	?___fttol+3,c
  6560  000B3E  0012               	return	
  6561  000B40                     i2l2911:
  6562  000B40  90D8               	bcf	status,0,c
  6563  000B42  3631               	rlcf	___fttol@lval,f,c
  6564  000B44  3632               	rlcf	___fttol@lval+1,f,c
  6565  000B46  3633               	rlcf	___fttol@lval+2,f,c
  6566  000B48  3634               	rlcf	___fttol@lval+3,f,c
  6567  000B4A  0635               	decf	___fttol@exp1,f,c
  6568  000B4C                     i2l2913:
  6569  000B4C  5035               	movf	___fttol@exp1,w,c
  6570  000B4E  A4D8               	btfss	status,2,c
  6571  000B50  D7F7               	goto	i2l2911
  6572  000B52                     i2l2915:
  6573  000B52  5030               	movf	___fttol@sign1,w,c
  6574  000B54  B4D8               	btfsc	status,2,c
  6575  000B56  D008               	goto	i2l2919
  6576  000B58  1E34               	comf	___fttol@lval+3,f,c
  6577  000B5A  1E33               	comf	___fttol@lval+2,f,c
  6578  000B5C  1E32               	comf	___fttol@lval+1,f,c
  6579  000B5E  6C31               	negf	___fttol@lval,c
  6580  000B60  0E00               	movlw	0
  6581  000B62  2232               	addwfc	___fttol@lval+1,f,c
  6582  000B64  2233               	addwfc	___fttol@lval+2,f,c
  6583  000B66  2234               	addwfc	___fttol@lval+3,f,c
  6584  000B68                     i2l2919:
  6585  000B68  C031  F027         	movff	___fttol@lval,?___fttol
  6586  000B6C  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  6587  000B70  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  6588  000B74  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  6589  000B78  0012               	return	
  6590  000B7A                     __end_of___fttol:
  6591                           	opt stack 0
  6592                           pclatu	equ	0xFFB
  6593                           pclath	equ	0xFFA
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           postinc0	equ	0xFEE
  6602                           fsr0h	equ	0xFEA
  6603                           fsr0l	equ	0xFE9
  6604                           wreg	equ	0xFE8
  6605                           postdec1	equ	0xFE5
  6606                           plusw1	equ	0xFE3
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           plusw2	equ	0xFDB
  6611                           fsr2h	equ	0xFDA
  6612                           fsr2l	equ	0xFD9
  6613                           status	equ	0xFD8
  6614                           
  6615 ;; *************** function ___ftmul *****************
  6616 ;; Defined at:
  6617 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  f1              3   11[COMRAM] float 
  6620 ;;  f2              3   14[COMRAM] float 
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  6623 ;;  sign            1   25[COMRAM] unsigned char 
  6624 ;;  cntr            1   24[COMRAM] unsigned char 
  6625 ;;  exp             1   20[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  3   11[COMRAM] float 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6635 ;;      Params:         6       0       0       0       0       0       0
  6636 ;;      Locals:         6       0       0       0       0       0       0
  6637 ;;      Temps:          3       0       0       0       0       0       0
  6638 ;;      Totals:        15       0       0       0       0       0       0
  6639 ;;Total ram usage:       15 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    1
  6642 ;; This function calls:
  6643 ;;		___ftpack
  6644 ;; This function is called by:
  6645 ;;		_SetDistanceLeft
  6646 ;;		_SetDistanceRight
  6647 ;;		_SetDistanceCentral
  6648 ;;		_SetBattery
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text45
  6653  000B7A                     __ptext45:
  6654                           	opt stack 0
  6655  000B7A                     ___ftmul:
  6656                           	opt stack 22
  6657                           
  6658                           ;incstack = 0
  6659  000B7A  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  6660  000B7E  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6661  000B80  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6662  000B82  340D               	rlcf	___ftmul@f1+1,w,c
  6663  000B84  3612               	rlcf	??___ftmul& (0+255),f,c
  6664  000B86  E301               	bnc	u174_41
  6665  000B88  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6666  000B8A                     u174_41:
  6667  000B8A  5012               	movf	??___ftmul,w,c
  6668  000B8C  6E15               	movwf	___ftmul@exp,c
  6669  000B8E  5015               	movf	___ftmul@exp,w,c
  6670  000B90  A4D8               	btfss	status,2,c
  6671  000B92  D007               	goto	i2l2835
  6672  000B94  0E00               	movlw	0
  6673  000B96  6E0C               	movwf	?___ftmul,c
  6674  000B98  0E00               	movlw	0
  6675  000B9A  6E0D               	movwf	?___ftmul+1,c
  6676  000B9C  0E00               	movlw	0
  6677  000B9E  6E0E               	movwf	?___ftmul+2,c
  6678  000BA0  0012               	return	
  6679  000BA2                     i2l2835:
  6680  000BA2  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  6681  000BA6  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6682  000BA8  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6683  000BAA  3410               	rlcf	___ftmul@f2+1,w,c
  6684  000BAC  3612               	rlcf	??___ftmul& (0+255),f,c
  6685  000BAE  E301               	bnc	u176_41
  6686  000BB0  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6687  000BB2                     u176_41:
  6688  000BB2  5012               	movf	??___ftmul,w,c
  6689  000BB4  6E1A               	movwf	___ftmul@sign,c
  6690  000BB6  501A               	movf	___ftmul@sign,w,c
  6691  000BB8  A4D8               	btfss	status,2,c
  6692  000BBA  D007               	goto	i2l2841
  6693  000BBC  0E00               	movlw	0
  6694  000BBE  6E0C               	movwf	?___ftmul,c
  6695  000BC0  0E00               	movlw	0
  6696  000BC2  6E0D               	movwf	?___ftmul+1,c
  6697  000BC4  0E00               	movlw	0
  6698  000BC6  6E0E               	movwf	?___ftmul+2,c
  6699  000BC8  0012               	return	
  6700  000BCA                     i2l2841:
  6701  000BCA  501A               	movf	___ftmul@sign,w,c
  6702  000BCC  0F7B               	addlw	123
  6703  000BCE  2615               	addwf	___ftmul@exp,f,c
  6704  000BD0  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  6705  000BD4  5011               	movf	___ftmul@f2+2,w,c
  6706  000BD6  1A1A               	xorwf	___ftmul@sign,f,c
  6707  000BD8  0E80               	movlw	128
  6708  000BDA  161A               	andwf	___ftmul@sign,f,c
  6709  000BDC  8E0D               	bsf	___ftmul@f1+1,7,c
  6710  000BDE  8E10               	bsf	___ftmul@f2+1,7,c
  6711  000BE0  0EFF               	movlw	255
  6712  000BE2  160F               	andwf	___ftmul@f2,f,c
  6713  000BE4  0EFF               	movlw	255
  6714  000BE6  1610               	andwf	___ftmul@f2+1,f,c
  6715  000BE8  0E00               	movlw	0
  6716  000BEA  1611               	andwf	___ftmul@f2+2,f,c
  6717  000BEC  0E00               	movlw	0
  6718  000BEE  6E16               	movwf	___ftmul@f3_as_product,c
  6719  000BF0  0E00               	movlw	0
  6720  000BF2  6E17               	movwf	___ftmul@f3_as_product+1,c
  6721  000BF4  0E00               	movlw	0
  6722  000BF6  6E18               	movwf	___ftmul@f3_as_product+2,c
  6723  000BF8  0E07               	movlw	7
  6724  000BFA  6E19               	movwf	___ftmul@cntr,c
  6725  000BFC                     i2l2855:
  6726  000BFC  A00C               	btfss	___ftmul@f1,0,c
  6727  000BFE  D006               	goto	i2l2859
  6728  000C00  500F               	movf	___ftmul@f2,w,c
  6729  000C02  2616               	addwf	___ftmul@f3_as_product,f,c
  6730  000C04  5010               	movf	___ftmul@f2+1,w,c
  6731  000C06  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6732  000C08  5011               	movf	___ftmul@f2+2,w,c
  6733  000C0A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6734  000C0C                     i2l2859:
  6735  000C0C  90D8               	bcf	status,0,c
  6736  000C0E  320E               	rrcf	___ftmul@f1+2,f,c
  6737  000C10  320D               	rrcf	___ftmul@f1+1,f,c
  6738  000C12  320C               	rrcf	___ftmul@f1,f,c
  6739  000C14  90D8               	bcf	status,0,c
  6740  000C16  360F               	rlcf	___ftmul@f2,f,c
  6741  000C18  3610               	rlcf	___ftmul@f2+1,f,c
  6742  000C1A  3611               	rlcf	___ftmul@f2+2,f,c
  6743  000C1C  2E19               	decfsz	___ftmul@cntr,f,c
  6744  000C1E  D7EE               	goto	i2l2855
  6745  000C20  0E09               	movlw	9
  6746  000C22  6E19               	movwf	___ftmul@cntr,c
  6747  000C24                     i2l2865:
  6748  000C24  A00C               	btfss	___ftmul@f1,0,c
  6749  000C26  D006               	goto	i2l2869
  6750  000C28  500F               	movf	___ftmul@f2,w,c
  6751  000C2A  2616               	addwf	___ftmul@f3_as_product,f,c
  6752  000C2C  5010               	movf	___ftmul@f2+1,w,c
  6753  000C2E  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6754  000C30  5011               	movf	___ftmul@f2+2,w,c
  6755  000C32  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6756  000C34                     i2l2869:
  6757  000C34  90D8               	bcf	status,0,c
  6758  000C36  320E               	rrcf	___ftmul@f1+2,f,c
  6759  000C38  320D               	rrcf	___ftmul@f1+1,f,c
  6760  000C3A  320C               	rrcf	___ftmul@f1,f,c
  6761  000C3C  90D8               	bcf	status,0,c
  6762  000C3E  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  6763  000C40  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  6764  000C42  3216               	rrcf	___ftmul@f3_as_product,f,c
  6765  000C44  2E19               	decfsz	___ftmul@cntr,f,c
  6766  000C46  D7EE               	goto	i2l2865
  6767  000C48  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6768  000C4C  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6769  000C50  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6770  000C54  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  6771  000C58  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  6772  000C5C  ECD6  F007         	call	___ftpack	;wreg free
  6773  000C60  C001  F00C         	movff	?___ftpack,?___ftmul
  6774  000C64  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  6775  000C68  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  6776  000C6C  0012               	return	
  6777  000C6E                     __end_of___ftmul:
  6778                           	opt stack 0
  6779                           pclatu	equ	0xFFB
  6780                           pclath	equ	0xFFA
  6781                           tblptru	equ	0xFF8
  6782                           tblptrh	equ	0xFF7
  6783                           tblptrl	equ	0xFF6
  6784                           tablat	equ	0xFF5
  6785                           prodh	equ	0xFF4
  6786                           prodl	equ	0xFF3
  6787                           intcon	equ	0xFF2
  6788                           postinc0	equ	0xFEE
  6789                           fsr0h	equ	0xFEA
  6790                           fsr0l	equ	0xFE9
  6791                           wreg	equ	0xFE8
  6792                           postdec1	equ	0xFE5
  6793                           plusw1	equ	0xFE3
  6794                           fsr1h	equ	0xFE2
  6795                           fsr1l	equ	0xFE1
  6796                           indf2	equ	0xFDF
  6797                           plusw2	equ	0xFDB
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function ___ftpack *****************
  6803 ;; Defined at:
  6804 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  arg             3    0[COMRAM] unsigned um
  6807 ;;  exp             1    3[COMRAM] unsigned char 
  6808 ;;  sign            1    4[COMRAM] unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;		None
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  3    0[COMRAM] float 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6820 ;;      Params:         5       0       0       0       0       0       0
  6821 ;;      Locals:         0       0       0       0       0       0       0
  6822 ;;      Temps:          3       0       0       0       0       0       0
  6823 ;;      Totals:         8       0       0       0       0       0       0
  6824 ;;Total ram usage:        8 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; This function calls:
  6827 ;;		Nothing
  6828 ;; This function is called by:
  6829 ;;		___ftadd
  6830 ;;		___ftmul
  6831 ;;		___lwtoft
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text46
  6836  000FAC                     __ptext46:
  6837                           	opt stack 0
  6838  000FAC                     ___ftpack:
  6839                           	opt stack 22
  6840                           
  6841                           ;incstack = 0
  6842  000FAC  5004               	movf	___ftpack@exp,w,c
  6843  000FAE  B4D8               	btfsc	status,2,c
  6844  000FB0  D005               	goto	i2l2589
  6845  000FB2  5001               	movf	___ftpack@arg,w,c
  6846  000FB4  1002               	iorwf	___ftpack@arg+1,w,c
  6847  000FB6  1003               	iorwf	___ftpack@arg+2,w,c
  6848  000FB8  A4D8               	btfss	status,2,c
  6849  000FBA  D00C               	goto	i2l2595
  6850  000FBC                     i2l2589:
  6851  000FBC  0E00               	movlw	0
  6852  000FBE  6E01               	movwf	?___ftpack,c
  6853  000FC0  0E00               	movlw	0
  6854  000FC2  6E02               	movwf	?___ftpack+1,c
  6855  000FC4  0E00               	movlw	0
  6856  000FC6  6E03               	movwf	?___ftpack+2,c
  6857  000FC8  0012               	return	
  6858  000FCA                     i2l2593:
  6859  000FCA  2A04               	incf	___ftpack@exp,f,c
  6860  000FCC  90D8               	bcf	status,0,c
  6861  000FCE  3203               	rrcf	___ftpack@arg+2,f,c
  6862  000FD0  3202               	rrcf	___ftpack@arg+1,f,c
  6863  000FD2  3201               	rrcf	___ftpack@arg,f,c
  6864  000FD4                     i2l2595:
  6865  000FD4  0E00               	movlw	0
  6866  000FD6  1401               	andwf	___ftpack@arg,w,c
  6867  000FD8  6E06               	movwf	??___ftpack& (0+255),c
  6868  000FDA  0E00               	movlw	0
  6869  000FDC  1402               	andwf	___ftpack@arg+1,w,c
  6870  000FDE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6871  000FE0  0EFE               	movlw	254
  6872  000FE2  1403               	andwf	___ftpack@arg+2,w,c
  6873  000FE4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6874  000FE6  5006               	movf	??___ftpack,w,c
  6875  000FE8  1007               	iorwf	??___ftpack+1,w,c
  6876  000FEA  1008               	iorwf	??___ftpack+2,w,c
  6877  000FEC  B4D8               	btfsc	status,2,c
  6878  000FEE  D00C               	goto	i2l2601
  6879  000FF0  D7EC               	goto	i2l2593
  6880  000FF2                     i2l2597:
  6881  000FF2  2A04               	incf	___ftpack@exp,f,c
  6882  000FF4  0E01               	movlw	1
  6883  000FF6  2601               	addwf	___ftpack@arg,f,c
  6884  000FF8  0E00               	movlw	0
  6885  000FFA  2202               	addwfc	___ftpack@arg+1,f,c
  6886  000FFC  0E00               	movlw	0
  6887  000FFE  2203               	addwfc	___ftpack@arg+2,f,c
  6888  001000  90D8               	bcf	status,0,c
  6889  001002  3203               	rrcf	___ftpack@arg+2,f,c
  6890  001004  3202               	rrcf	___ftpack@arg+1,f,c
  6891  001006  3201               	rrcf	___ftpack@arg,f,c
  6892  001008                     i2l2601:
  6893  001008  0E00               	movlw	0
  6894  00100A  1401               	andwf	___ftpack@arg,w,c
  6895  00100C  6E06               	movwf	??___ftpack& (0+255),c
  6896  00100E  0E00               	movlw	0
  6897  001010  1402               	andwf	___ftpack@arg+1,w,c
  6898  001012  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6899  001014  0EFF               	movlw	255
  6900  001016  1403               	andwf	___ftpack@arg+2,w,c
  6901  001018  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6902  00101A  5006               	movf	??___ftpack,w,c
  6903  00101C  1007               	iorwf	??___ftpack+1,w,c
  6904  00101E  1008               	iorwf	??___ftpack+2,w,c
  6905  001020  B4D8               	btfsc	status,2,c
  6906  001022  D006               	goto	i2l2605
  6907  001024  D7E6               	goto	i2l2597
  6908  001026                     i2l2603:
  6909  001026  0604               	decf	___ftpack@exp,f,c
  6910  001028  90D8               	bcf	status,0,c
  6911  00102A  3601               	rlcf	___ftpack@arg,f,c
  6912  00102C  3602               	rlcf	___ftpack@arg+1,f,c
  6913  00102E  3603               	rlcf	___ftpack@arg+2,f,c
  6914  001030                     i2l2605:
  6915  001030  BE02               	btfsc	___ftpack@arg+1,7,c
  6916  001032  D003               	goto	i2l806
  6917  001034  0E02               	movlw	2
  6918  001036  6004               	cpfslt	___ftpack@exp,c
  6919  001038  D7F6               	goto	i2l2603
  6920  00103A                     i2l806:
  6921  00103A  A004               	btfss	___ftpack@exp,0,c
  6922  00103C  9E02               	bcf	___ftpack@arg+1,7,c
  6923  00103E  90D8               	bcf	status,0,c
  6924  001040  3204               	rrcf	___ftpack@exp,f,c
  6925  001042  5004               	movf	___ftpack@exp,w,c
  6926  001044  1203               	iorwf	___ftpack@arg+2,f,c
  6927  001046  5005               	movf	___ftpack@sign,w,c
  6928  001048  A4D8               	btfss	status,2,c
  6929  00104A  8E03               	bsf	___ftpack@arg+2,7,c
  6930  00104C  C001  F001         	movff	___ftpack@arg,?___ftpack
  6931  001050  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6932  001054  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6933  001058  0012               	return	
  6934  00105A                     __end_of___ftpack:
  6935                           	opt stack 0
  6936                           pclatu	equ	0xFFB
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           postinc0	equ	0xFEE
  6946                           fsr0h	equ	0xFEA
  6947                           fsr0l	equ	0xFE9
  6948                           wreg	equ	0xFE8
  6949                           postdec1	equ	0xFE5
  6950                           plusw1	equ	0xFE3
  6951                           fsr1h	equ	0xFE2
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           plusw2	equ	0xFDB
  6955                           fsr2h	equ	0xFDA
  6956                           fsr2l	equ	0xFD9
  6957                           status	equ	0xFD8
  6958                           
  6959 ;; *************** function _ReadUSART *****************
  6960 ;; Defined at:
  6961 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uread.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;  data            1    0[COMRAM] unsigned char 
  6966 ;; Return value:  Size  Location     Type
  6967 ;;                  1    wreg      unsigned char 
  6968 ;; Registers used:
  6969 ;;		wreg, status,2, status,0
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6975 ;;      Params:         0       0       0       0       0       0       0
  6976 ;;      Locals:         1       0       0       0       0       0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0
  6978 ;;      Totals:         1       0       0       0       0       0       0
  6979 ;;Total ram usage:        1 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_isr
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text47
  6989  001812                     __ptext47:
  6990                           	opt stack 0
  6991  001812                     _ReadUSART:
  6992                           	opt stack 24
  6993                           
  6994                           ;incstack = 0
  6995  001812  0EF2               	movlw	242
  6996  001814  165D               	andwf	_USART_Status,f,c
  6997  001816  ACAB               	btfss	4011,6,c	;volatile
  6998  001818  D003               	goto	i2l562
  6999  00181A  905D               	bcf	_USART_Status,0,c
  7000  00181C  B0AB               	btfsc	4011,0,c	;volatile
  7001  00181E  805D               	bsf	_USART_Status,0,c
  7002  001820                     i2l562:
  7003  001820  B4AB               	btfsc	4011,2,c	;volatile
  7004  001822  845D               	bsf	_USART_Status,2,c
  7005  001824  B2AB               	btfsc	4011,1,c	;volatile
  7006  001826  865D               	bsf	_USART_Status,3,c
  7007  001828  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  7008  00182C  5001               	movf	ReadUSART@data,w,c
  7009  00182E  0012               	return	
  7010  001830                     __end_of_ReadUSART:
  7011                           	opt stack 0
  7012                           pclatu	equ	0xFFB
  7013                           pclath	equ	0xFFA
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           intcon	equ	0xFF2
  7021                           postinc0	equ	0xFEE
  7022                           fsr0h	equ	0xFEA
  7023                           fsr0l	equ	0xFE9
  7024                           wreg	equ	0xFE8
  7025                           postdec1	equ	0xFE5
  7026                           plusw1	equ	0xFE3
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           plusw2	equ	0xFDB
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _ReadPWMMotorRight *****************
  7036 ;; Defined at:
  7037 ;;		line 38 in file "TimerPWM.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;		None
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;		None
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  2    0[COMRAM] unsigned int 
  7044 ;; Registers used:
  7045 ;;		None
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7051 ;;      Params:         2       0       0       0       0       0       0
  7052 ;;      Locals:         0       0       0       0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0
  7054 ;;      Totals:         2       0       0       0       0       0       0
  7055 ;;Total ram usage:        2 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_isr
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           	psect	text48
  7065  0018BC                     __ptext48:
  7066                           	opt stack 0
  7067  0018BC                     _ReadPWMMotorRight:
  7068                           	opt stack 24
  7069                           
  7070                           ;TimerPWM.c: 39: return PWMRight;
  7071                           
  7072                           ;incstack = 0
  7073  0018BC  C0D8  F001         	movff	_PWMRight,?_ReadPWMMotorRight
  7074  0018C0  C0D9  F002         	movff	_PWMRight+1,?_ReadPWMMotorRight+1
  7075  0018C4  0012               	return		;funcret
  7076  0018C6                     __end_of_ReadPWMMotorRight:
  7077                           	opt stack 0
  7078                           pclatu	equ	0xFFB
  7079                           pclath	equ	0xFFA
  7080                           tblptru	equ	0xFF8
  7081                           tblptrh	equ	0xFF7
  7082                           tblptrl	equ	0xFF6
  7083                           tablat	equ	0xFF5
  7084                           prodh	equ	0xFF4
  7085                           prodl	equ	0xFF3
  7086                           intcon	equ	0xFF2
  7087                           postinc0	equ	0xFEE
  7088                           fsr0h	equ	0xFEA
  7089                           fsr0l	equ	0xFE9
  7090                           wreg	equ	0xFE8
  7091                           postdec1	equ	0xFE5
  7092                           plusw1	equ	0xFE3
  7093                           fsr1h	equ	0xFE2
  7094                           fsr1l	equ	0xFE1
  7095                           indf2	equ	0xFDF
  7096                           plusw2	equ	0xFDB
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           
  7101 ;; *************** function _ReadPWMMotorLeft *****************
  7102 ;; Defined at:
  7103 ;;		line 42 in file "TimerPWM.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;		None
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;		None
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  2    0[COMRAM] unsigned int 
  7110 ;; Registers used:
  7111 ;;		None
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7117 ;;      Params:         2       0       0       0       0       0       0
  7118 ;;      Locals:         0       0       0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0
  7120 ;;      Totals:         2       0       0       0       0       0       0
  7121 ;;Total ram usage:        2 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; This function calls:
  7124 ;;		Nothing
  7125 ;; This function is called by:
  7126 ;;		_isr
  7127 ;; This function uses a non-reentrant model
  7128 ;;
  7129                           
  7130                           	psect	text49
  7131  0018C6                     __ptext49:
  7132                           	opt stack 0
  7133  0018C6                     _ReadPWMMotorLeft:
  7134                           	opt stack 24
  7135                           
  7136                           ;TimerPWM.c: 43: return PWMLeft;
  7137                           
  7138                           ;incstack = 0
  7139  0018C6  C0D6  F001         	movff	_PWMLeft,?_ReadPWMMotorLeft
  7140  0018CA  C0D7  F002         	movff	_PWMLeft+1,?_ReadPWMMotorLeft+1
  7141  0018CE  0012               	return		;funcret
  7142  0018D0                     __end_of_ReadPWMMotorLeft:
  7143                           	opt stack 0
  7144                           pclatu	equ	0xFFB
  7145                           pclath	equ	0xFFA
  7146                           tblptru	equ	0xFF8
  7147                           tblptrh	equ	0xFF7
  7148                           tblptrl	equ	0xFF6
  7149                           tablat	equ	0xFF5
  7150                           prodh	equ	0xFF4
  7151                           prodl	equ	0xFF3
  7152                           intcon	equ	0xFF2
  7153                           postinc0	equ	0xFEE
  7154                           fsr0h	equ	0xFEA
  7155                           fsr0l	equ	0xFE9
  7156                           wreg	equ	0xFE8
  7157                           postdec1	equ	0xFE5
  7158                           plusw1	equ	0xFE3
  7159                           fsr1h	equ	0xFE2
  7160                           fsr1l	equ	0xFE1
  7161                           indf2	equ	0xFDF
  7162                           plusw2	equ	0xFDB
  7163                           fsr2h	equ	0xFDA
  7164                           fsr2l	equ	0xFD9
  7165                           status	equ	0xFD8
  7166                           
  7167 ;; *************** function _ADCGetOutput *****************
  7168 ;; Defined at:
  7169 ;;		line 36 in file "ADC.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  temp            2    4[COMRAM] int 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  2    0[COMRAM] unsigned int 
  7176 ;; Registers used:
  7177 ;;		wreg, status,2, status,0
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7183 ;;      Params:         2       0       0       0       0       0       0
  7184 ;;      Locals:         2       0       0       0       0       0       0
  7185 ;;      Temps:          2       0       0       0       0       0       0
  7186 ;;      Totals:         6       0       0       0       0       0       0
  7187 ;;Total ram usage:        6 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_isr
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text50
  7197  001830                     __ptext50:
  7198                           	opt stack 0
  7199  001830                     _ADCGetOutput:
  7200                           	opt stack 24
  7201                           
  7202                           ;ADC.c: 37: int temp;
  7203                           ;ADC.c: 38: temp = ADRESL;
  7204                           
  7205                           ;incstack = 0
  7206  001830  CFC3 F005          	movff	4035,ADCGetOutput@temp	;volatile
  7207  001834  6A06               	clrf	ADCGetOutput@temp+1,c
  7208                           
  7209                           ;ADC.c: 39: return temp + (ADRESH << 8);
  7210  001836  50C4               	movf	4036,w,c	;volatile
  7211  001838  6E04               	movwf	(??_ADCGetOutput+1)& (0+255),c
  7212  00183A  6A03               	clrf	??_ADCGetOutput& (0+255),c
  7213  00183C  5005               	movf	ADCGetOutput@temp,w,c
  7214  00183E  2403               	addwf	??_ADCGetOutput,w,c
  7215  001840  6E01               	movwf	?_ADCGetOutput,c
  7216  001842  5006               	movf	ADCGetOutput@temp+1,w,c
  7217  001844  2004               	addwfc	??_ADCGetOutput+1,w,c
  7218  001846  6E02               	movwf	?_ADCGetOutput+1,c
  7219  001848  0012               	return	
  7220  00184A                     __end_of_ADCGetOutput:
  7221                           	opt stack 0
  7222                           pclatu	equ	0xFFB
  7223                           pclath	equ	0xFFA
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           postinc0	equ	0xFEE
  7232                           fsr0h	equ	0xFEA
  7233                           fsr0l	equ	0xFE9
  7234                           wreg	equ	0xFE8
  7235                           postdec1	equ	0xFE5
  7236                           plusw1	equ	0xFE3
  7237                           fsr1h	equ	0xFE2
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           plusw2	equ	0xFDB
  7241                           fsr2h	equ	0xFDA
  7242                           fsr2l	equ	0xFD9
  7243                           status	equ	0xFD8
  7244                           pclatu	equ	0xFFB
  7245                           pclath	equ	0xFFA
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           postinc0	equ	0xFEE
  7254                           fsr0h	equ	0xFEA
  7255                           fsr0l	equ	0xFE9
  7256                           wreg	equ	0xFE8
  7257                           postdec1	equ	0xFE5
  7258                           plusw1	equ	0xFE3
  7259                           fsr1h	equ	0xFE2
  7260                           fsr1l	equ	0xFE1
  7261                           indf2	equ	0xFDF
  7262                           plusw2	equ	0xFDB
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267                           	psect	rparam
  7268  0000                     pclatu	equ	0xFFB
  7269                           pclath	equ	0xFFA
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           intcon	equ	0xFF2
  7277                           postinc0	equ	0xFEE
  7278                           fsr0h	equ	0xFEA
  7279                           fsr0l	equ	0xFE9
  7280                           wreg	equ	0xFE8
  7281                           postdec1	equ	0xFE5
  7282                           plusw1	equ	0xFE3
  7283                           fsr1h	equ	0xFE2
  7284                           fsr1l	equ	0xFE1
  7285                           indf2	equ	0xFDF
  7286                           plusw2	equ	0xFDB
  7287                           fsr2h	equ	0xFDA
  7288                           fsr2l	equ	0xFD9
  7289                           status	equ	0xFD8
  7290                           
  7291                           	psect	temp
  7292  00005E                     btemp:
  7293                           	opt stack 0
  7294  00005E                     	ds	1
  7295  0000                     int$flags	set	btemp
  7296                           pclatu	equ	0xFFB
  7297                           pclath	equ	0xFFA
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           intcon	equ	0xFF2
  7305                           postinc0	equ	0xFEE
  7306                           fsr0h	equ	0xFEA
  7307                           fsr0l	equ	0xFE9
  7308                           wreg	equ	0xFE8
  7309                           postdec1	equ	0xFE5
  7310                           plusw1	equ	0xFE3
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           plusw2	equ	0xFDB
  7315                           fsr2h	equ	0xFDA
  7316                           fsr2l	equ	0xFD9
  7317                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    0
    Data        70
    BSS         30
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      93
    BANK0           160     33     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    putsUSART@data	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_SetDistanceCentral
    _isr->_SetDistanceLeft
    _isr->_SetDistanceRight
    _putsUSART->_WriteUSART
    _SetSpeedRight->_ConvertPicSpeed
    _SetSpeedLeft->_ConvertPicSpeed
    _SetDistanceRight->___fttol
    _SetDistanceLeft->___fttol
    _SetDistanceCentral->___fttol
    ___ftadd->___ftmul
    _SetBattery->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lwtoft

Critical Paths under _main in BANK0

    _main->_Go
    _MotorInit->_SetPWMMotorLeft
    _MotorInit->_SetPWMMotorRight
    _LCDInit->_LCDByte
    _Go->_ReadParallel
    _TurnRight90->_SetMotorLeft
    _TurnRight90->_SetMotorRight
    _TurnRight135->_SetMotorLeft
    _TurnRight135->_SetMotorRight
    _TurnLeft90->_SetMotorLeft
    _TurnLeft90->_SetMotorRight
    _TurnLeft135->_SetMotorLeft
    _TurnLeft135->_SetMotorRight
    _SetMotorRight->_SetPWMMotorRight
    _SetPWMMotorRight->___lwdiv
    _SetMotorLeft->_SetPWMMotorLeft
    _SetPWMMotorLeft->___lwdiv
    _ReadParallel->_LCDWriteInt
    _LCDWriteInt->_LCDByte
    _LCDWriteInt->___awdiv
    _LCDGotoXY->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   25343
                            _ADCInit
              _ADCInitiateConversion
                                 _Go
                            _LCDInit
                          _MotorInit
                       _SetMotorLeft
                      _SetMotorRight
                       _TimerPWMInit
                       _parallelInit
 ---------------------------------------------------------------------------------
 (1) _parallelInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimerPWMInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorInit                                            0     0      0    1136
                    _SetPWMMotorLeft
                   _SetPWMMotorRight
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1186
                                              8 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _Go                                                   6     6      0   19913
                                             27 BANK0      6     6      0
                _ReadDistanceCentral
                   _ReadDistanceLeft
                  _ReadDistanceRight
                           _ReadMode
                       _ReadParallel
              _ReadParallelSpeedLeft
             _ReadParallelSpeedRight
                       _SetMotorLeft
                      _SetMotorRight
                        _TurnLeft135
                         _TurnLeft90
                       _TurnRight135
                        _TurnRight90
 ---------------------------------------------------------------------------------
 (2) _TurnRight90                                          1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnRight135                                         1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft90                                           1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft135                                          1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (1) _SetMotorRight                                        2     0      2    1554
                                              9 BANK0      2     0      2
                   _SetPWMMotorRight
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorRight                                     2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorLeft                                         2     0      2    1554
                                              9 BANK0      2     0      2
                    _SetPWMMotorLeft
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorLeft                                      2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedRight                               2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedLeft                                2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallel                                         5     5      0    4239
                                             22 BANK0      5     5      0
               _ConvertParallelSpeed
                          _LCDGotoXY
                        _LCDWriteInt
 ---------------------------------------------------------------------------------
 (3) _LCDWriteInt                                         14    11      3    2709
                                              8 BANK0     14    11      3
                            _LCDByte
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     424
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _LCDGotoXY                                            2     1      1    1305
                                              8 BANK0      2     1      1
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              5     4      1     979
                                              3 BANK0      5     4      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ConvertParallelSpeed                                 3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ReadMode                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceRight                                    2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceLeft                                     2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceCentral                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADCInitiateConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 19    19      0   34401
                                             57 COMRAM    19    19      0
                       _ADCGetOutput
                   _ReadPWMMotorLeft
                  _ReadPWMMotorRight
                          _ReadUSART
                         _SetBattery
                 _SetDistanceCentral
                    _SetDistanceLeft
                   _SetDistanceRight
                       _SetSpeedLeft
                      _SetSpeedRight
                         _WriteUSART
                          _putsUSART
 ---------------------------------------------------------------------------------
 (7) _putsUSART                                            2     0      2     187
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (8) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _SetSpeedRight                                        1     1      0      44
                                              3 COMRAM     1     1      0
                    _ConvertPicSpeed
 ---------------------------------------------------------------------------------
 (7) _SetSpeedLeft                                         1     1      0      44
                                              3 COMRAM     1     1      0
                    _ConvertPicSpeed
 ---------------------------------------------------------------------------------
 (8) _ConvertPicSpeed                                      3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _SetDistanceRight                                     4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetDistanceLeft                                      4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetDistanceCentral                                   4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3459
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) _SetBattery                                           2     0      2    5874
                                             53 COMRAM     2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2309
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     508
                                             38 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    2971
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorRight                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorLeft                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADCGetOutput                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCInitiateConversion
   _Go
     _ReadDistanceCentral
     _ReadDistanceLeft
     _ReadDistanceRight
     _ReadMode
     _ReadParallel
       _ConvertParallelSpeed
       _LCDGotoXY
         _LCDByte
           _LCDBusyLoop
       _LCDWriteInt
         _LCDByte
           _LCDBusyLoop
         ___awdiv
         ___awmod
     _ReadParallelSpeedLeft
     _ReadParallelSpeedRight
     _SetMotorLeft
       _SetPWMMotorLeft
         ___lwdiv
         _abs (ARG)
       _abs
     _SetMotorRight
       _SetPWMMotorRight
         ___lwdiv
         _abs (ARG)
       _abs
     _TurnLeft135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnLeft90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _MotorInit
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
   _SetMotorLeft
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _abs
   _SetMotorRight
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
     _abs
   _TimerPWMInit
   _parallelInit

 _isr (ROOT)
   _ADCGetOutput
   _ReadPWMMotorLeft
   _ReadPWMMotorRight
   _ReadUSART
   _SetBattery
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceCentral
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceLeft
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceRight
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetSpeedLeft
     _ConvertPicSpeed
   _SetSpeedRight
     _ConvertPicSpeed
   _WriteUSART
   _putsUSART
     _WriteUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      7A       5       76.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5D       1       98.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7      15        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 14 14:41:01 2016

           __size_of_TurnLeft135 0032        __size_of_SetPWMMotorRight 003A  
                   ?_LCDBusyLoop 0001                               _GO 007E11  
                             _Go 07C4                     ___awdiv@sign 00AB  
           __size_of_TurnRight90 0032                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 0026  
                   ___ftadd@exp2 0025                              ?_Go 0001  
                   ___ftadd@sign 0024                              l260 1384  
                            l259 1382                              l297 0A84  
                            l627 174C                              l984 11FC  
                            _GIE 007F97                     __CFG_CPB$OFF 000000  
                            _RC0 007C10                              _RC1 007C11  
                            _RC2 007C12                              _RC3 007C13  
                            _RC4 007C14                              _RC5 007C15  
                            _RD4 007C1C                              _RD5 007C1D  
                            _RD6 007C1E                     __CFG_CPD$OFF 000000  
                            _PSA 007EAB                SetMotorLeft@speed 00AF  
                            _abs 172A                              _isr 0008  
          __size_of_TurnRight135 0032                  __end_of_ADCInit 17D0  
                   __CFG_BORV$18 000000                     ___awmod@sign 00AB  
      __size_of_ReadPWMMotorLeft 000A                              prod 000FF3  
                            wreg 000FE8                             ??_Go 00C1  
        LCDWriteInt@field_length 00B0                  __end_of_LCDByte 13B2  
                __end_of_LCDInit 118E                     __CFG_LVP$OFF 000000  
                   ?_LCDWriteInt 00AE                      LCDByte@temp 00AD  
          __size_of_ADCGetOutput 001A                             ?_abs 00A6  
                           l2401 1086                             l2305 11EE  
                           l3025 1160                             l2251 13C0  
                           l2501 1428                             l2421 10F2  
                           l2413 10D0                             l2405 109A  
                           l3061 088C                             l3029 116A  
                           l2503 1444                             l2407 10A6  
                           l2431 154C                             l3071 08F4  
                           l3063 08A6                             l2521 0D6C  
                           l2353 0F0A                             l2409 10AC  
                           l2417 10DE                             l3081 092E  
                           l3073 08FA                             l3057 0854  
                           l2515 0D60                             l2435 1556  
                           l2443 1506                             l3059 0872  
                           l2533 0D84                             l2509 0D54  
                           l2365 0F3E                             l2381 0F8E  
                           l2461 0990                             l2293 11AC  
                           l3077 0914                             l2551 0DA8  
                           l2527 0D78                             l2367 0F4A  
                           l2359 0F20                             l2295 11B8  
                           l2447 1510                             l2545 0D9C  
                           l2385 0FA2                             l2377 0F80  
                           l2369 0F50                             l2473 09F8  
                           l2297 11BE                             l3185 15E4  
                           l2563 0DC0                             l2539 0D90  
                           l2483 0A5E                             l2475 09FE  
                           l2467 09E2                             l2715 0CBA  
                           l2557 0DB4                             l2493 1416  
                           l2397 1076                             l2477 0A16  
                           l2575 0DD8                             l2583 0DE4  
                           l2495 141C                             l2479 0A40  
                           l2569 0DCC                             l2497 1420  
                           _ADIE 007CEE                             _ADIF 007CF6  
                           ?_isr 0001                             _ADON 007E10  
                           _CHS0 007E12                             _CHS1 007E13  
                           _CHS2 007E14                             _CHS3 007E15  
                           _ANS0 007BF0                             STR_1 060D  
                           _ANS1 007BF1                             STR_2 0601  
                           _ANS2 007BF2                             _ANS3 007BF3  
                           _T0CS 007EAD   __size_of_ADCInitiateConversion 0004  
                           u1320 1546         __size_of_SetDistanceLeft 0072  
                           u1340 1500                             u1361 0956  
                           u2217 1108                             u2227 1686  
                           u2237 16B8                             u2247 16EA  
                           u2257 171C                             u1930 0804  
                           u1940 0818                             u1950 082C  
                           u1960 0840                             _PEIE 007F96  
                           _RCIF 007CF5                             i2l51 00F0  
                           i2l60 00B0                             i2l55 0054  
                           i2l56 00EE                             i2l57 006A  
                           i2l58 0080                             i2l83 01AA  
                           i2l59 009A                             i2l92 01D6  
                           i2l86 01BA                             i2l89 01C4  
  __end_of_ADCInitiateConversion 18DC                             _Mode 00CC  
                           abs@a 00A6                             _main 15B2  
                   ___ftpack@arg 0001               __size_of_LCDGotoXY 0050  
                   ___ftpack@exp 0004                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           btemp 005E                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 0212                    __CFG_IESO$OFF 000000  
   __end_of_ConvertParallelSpeed 0E2C                    __CFG_MCLRE$ON 000000  
               ADCGetOutput@temp 0005                     ___ftmul@cntr 0019  
                   ___param_bank 000010                     ___ftmul@sign 001A  
              ?_ReadDistanceLeft 00A6     ConvertParallelSpeed@velocity 00A8  
                   ___fttol@exp1 0035                            ??_abs 00A8  
                   _TurnRight135 1694                     ___fttol@lval 0031  
                          ??_isr 003A               ??_ReadDistanceLeft 00A8  
                  ?_ReadParallel 0001                            ?_main 0001  
                __end_of___awdiv 0FAC                  __end_of___ftadd 07C4  
                __end_of___awmod 10FC                     LCDInit@style 00AF  
                    isr@PWMRight 0055                  __end_of___ftmul 0C6E  
                ___awdiv@divisor 00A8                  __end_of___fttol 0B7A  
                          _T0PS0 007EA8                            _T0PS1 007EA9  
                          _T0PS2 007EAA                  __end_of___lwdiv 1206  
                          i2l562 1820                            i2l549 1756  
                          i2l806 103A                            i2l833 0686  
                          i2l844 0736                            i2l853 0752  
                          i2l829 065C                     _ADCGetOutput 1830  
                ___awdiv@counter 00AA                            _RCREG 000FAE  
                          _TMR0H 000FD7                            _TMR0L 000FD6  
                          _PORTB 000F81                            _PORTD 000F83  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TXREG 000FAD  
                  __CFG_PWRT$OFF 000000                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                _SetPWMMotorLeft 1628                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                    ___ftpack@sign 0005  
           SetSpeedRight@lecture 0004                            tablat 000FF5  
       __end_of_SetDistanceRight 1278                            plusw1 000FE3  
                          plusw2 000FDB                            status 000FD8  
                 __CFG_HFOFST$ON 000000                      isr@Readport 0057  
                 __CFG_PBADEN$ON 000000                   WriteUSART@data 0001  
                __initialization 149E                _ReadDistanceRight 189E  
                   __end_of_main 15EE                   ??_ReadParallel 00BC  
               __end_of_ReadMode 189E               ?_ReadDistanceRight 00A6  
                      ??_ADCInit 00A6          SetDistanceRight@lecture 0036  
                         ??_main 00C7                    ___fttol@sign1 0030  
              __end_of_LCDGotoXY 1458                    __activetblptr 000002  
                  LCDByte@isdata 00A9                        ??_LCDByte 00AA  
                      ??_LCDInit 00AE              ??_ReadDistanceRight 00A8  
                     _SetBattery 1570                           _ADCON1 000FC1  
                         _ADCON2 000FC0                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _T08BIT 007EAE  
               ___awdiv@dividend 00A6                 __end_of___ftpack 105A  
                         _ANSELH 000F7F                           i2l3103 00B8  
                         i2l3123 0130                           i2l3107 00C2  
                         i2l3127 013E                           i2l3119 0122  
                         i2l3135 014C                           i2l2601 1008  
                         i2l3161 01A2                           i2l3145 016E  
                         i2l2603 1026                           i2l3155 0192  
                         i2l2605 1030                           i2l3149 017E  
                 __CFG_WDTEN$OFF 000000                           i2l2703 0EA8  
                         i2l1583 1856                           i2l2801 0702  
                         i2l2641 0E44                           i2l3097 0094  
                         i2l2635 0E3A                           i2l2901 0B18  
                         i2l2653 0E58                           i2l2629 0E30  
                         i2l2911 0B40                           i2l2815 076E  
                         i2l2807 0724                           i2l2671 0E76  
                         i2l2647 0E4E                           i2l2593 0FCA  
                         i2l2841 0BCA                           i2l2913 0B4C  
                         i2l2905 0B28                           i2l2825 079E  
                         i2l2809 072E                           i2l2665 0E6C  
                         i2l2595 0FD4                           i2l2835 0BA2  
                         i2l2915 0B52                           i2l2683 0E8A  
                         i2l2659 0E62                           i2l2597 0FF2  
                         i2l2589 0FBC                           i2l2773 0694  
                         i2l2677 0E80                           i2l2855 0BFC  
                         i2l2919 0B68                           i2l2767 066A  
                         i2l2695 0E9E                           i2l2865 0C24  
                         i2l2689 0E94                           i2l2859 0C0C  
                         i2l2883 0AB2                           i2l2795 06E6  
                         i2l2869 0C34                           i2l2797 06F0  
                         i2l2789 06C4                           i2l2799 06FA  
                         u153_41 0628          ??_ReadParallelSpeedLeft 00A8  
                         u154_41 063C                           u180_41 0A96  
                         u174_41 0B8A                           u176_41 0BB2  
               __end_of___lwtoft 17F4               __size_of_ReadUSART 001E  
                         _TMR0IE 007F95                           _TMR0IF 007F92  
                         _TMR0ON 007EAF                           _TRISA0 007C90  
                         _TRISA1 007C91                           _TRISA2 007C92  
                         _TRISA3 007C93               SetMotorRight@speed 00AF  
              ??_SetDistanceLeft 0038        __end_of_ReadDistanceRight 18A8  
                 __CFG_XINST$OFF 000000                  _DistanceCentral 00A0  
                 _MotorLeftSpeed 00D4                 _SetPWMMotorRight 15EE  
                      ??___awdiv 00AA                        ??___ftadd 0021  
                 __CFG_STVREN$ON 000000                        ??___awmod 00AA  
                     _SpeedRight 0051                        ??___ftmul 0012  
                      ??___fttol 002B                        ??___lwdiv 00AA  
           __size_of_LCDBusyLoop 0056                           clear_0 14A4  
                         clear_1 14B0                 ___awdiv@quotient 00AC  
                ___awmod@divisor 00A8          __end_of_SetPWMMotorLeft 1662  
                ___awmod@counter 00AA       __end_of_SetDistanceCentral 135C  
             __size_of_MotorInit 002A                    ?_parallelInit 0001  
          ___ftmul@f3_as_product 0016                 _ReadPWMMotorLeft 18C6  
                   LCDWriteInt@i 00BA                     LCDWriteInt@j 00B8  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
       __size_of_ConvertPicSpeed 00C2             _ConvertParallelSpeed 0D4E  
                   Go@SpeedRight 00C5             __size_of_LCDWriteInt 013A  
                     __accesstop 0060          __end_of__initialization 14D6  
                     ___ftadd@f1 001B                       ___ftadd@f2 001E  
                  ___rparam_used 000001                        LCDByte@hn 00AA  
                      LCDByte@ln 00AB                    ?_SetMotorLeft 00AF  
                  ?_SetSpeedLeft 0001                       _TurnLeft90 16C6  
                     ___ftmul@f1 000C                       ___ftmul@f2 000F  
                     ___fttol@f1 0027                       _WriteUSART 184A  
                 __pcstackCOMRAM 0001                     __pidataBANK0 1458  
                     __end_of_Go 094C                __end_of_ReadUSART 1830  
                 ??_parallelInit 00A6                       ___lwtoft@c 0009  
                    ?_SetBattery 0036            ?_ConvertParallelSpeed 00A6  
   __size_of_ReadDistanceCentral 000A                    ReadUSART@data 0001  
              parallel@SpeedLeft 00D0                       __pbssBANK0 00C7  
           __end_of_ReadParallel 0D4E                        ?_ReadMode 00A6  
              __end_of_MotorInit 17AC                   ??_SetMotorLeft 00B1  
                  ??_TurnLeft135 00B1                   ??_SetSpeedLeft 0004  
     __size_of_ReadDistanceRight 000A                    ??_TurnRight90 00B1  
                  putsUSART@data 0002                          _ADCInit 17AC  
                      ?___ftpack 0001                    ?_TimerPWMInit 0001  
               ?_SetPWMMotorLeft 00AD                        ?___lwtoft 0009  
                        _LCDByte 135C                          _LCDInit 10FC  
         __size_of_SetMotorRight 0046         ??_ReadParallelSpeedRight 00A8  
      __size_of_ReadDistanceLeft 000A           __size_of_SetSpeedRight 0012  
             __size_of_putsUSART 002C                          _PWMLeft 00D6  
                        _Battery 004D                       ??_ReadMode 00A8  
              ??_ConvertPicSpeed 0003                ?_SetDistanceRight 0036  
                   isr@iteration 005B            _ADCInitiateConversion 18D8  
             ??_SetDistanceRight 0038                          __Hparam 0000  
                    ?_TurnLeft90 0001                          __Lparam 0000  
                   _DistanceLeft 00A2                      ?_WriteUSART 0001  
            __size_of_SetBattery 0042                          ___cgram 0060  
                        ___awdiv 0EEE                          ___ftadd 0618  
                        ___awmod 105A                          ___ftmul 0B7A  
                        ___fttol 0A86              __end_of_TurnLeft135 172A  
                        ___lwdiv 118E                     __psmallconst 0600  
              ReadParallel@right 00BF                   ??_TimerPWMInit 00A6  
                        __pcinit 149E                       ??___ftpack 0006  
                        __ramtop 0600                          __ptext0 15B2  
                        __ptext1 18D0                          __ptext2 17F4  
                        __ptext3 1782                          __ptext4 10FC  
                        __ptext5 07C4                          __ptext6 1662  
                        __ptext7 1694                          __ptext8 16C6  
                        __ptext9 16F8              __end_of_TurnRight90 1694  
                     ??___lwtoft 000C                     __size_of_abs 002C  
                   __size_of_isr 020A           ??_ConvertParallelSpeed 00A8  
               ___awmod@dividend 00A6                SetBattery@lecture 0036  
                      _LCDGotoXY 1408         __end_of_SetPWMMotorRight 1628  
                _SetDistanceLeft 1278             end_of_initialization 14D6  
                        isr@read 004A                    __Lmediumconst 0000  
 __size_of_ReadParallelSpeedLeft 000A             __end_of_parallelInit 18D8  
  __end_of_ReadParallelSpeedLeft 1894                _ReadPWMMotorRight 18BC  
                  _SetMotorRight 14E4         __end_of_ReadPWMMotorLeft 18D0  
                _MotorRightSpeed 00CE               ?_ReadPWMMotorRight 0001  
                  _SetSpeedRight 185C                        _RCSTAbits 000FAB  
                        postdec1 000FE5                          postinc0 000FEE  
              __end_of_putsUSART 1782       SetPWMMotorRight@percentage 00AD  
            ??_ReadPWMMotorRight 0003             __end_of_SetMotorLeft 1570  
           __end_of_SetSpeedLeft 1880            __size_of_ReadParallel 00E0  
                      _TRISDbits 000F95  __size_of_ReadParallelSpeedRight 000A  
                     ?_LCDGotoXY 00AE              __size_of_TurnLeft90 0032  
            __size_of_WriteUSART 0012               _SetDistanceCentral 12EA  
         ?_ADCInitiateConversion 0001        __end_of_ReadPWMMotorRight 18C6  
                     LCDInit@__i 00B0                        _TXSTAbits 000FAC  
                     LCDGotoXY@x 00AF                       LCDGotoXY@y 00AE  
                 ?_SetMotorRight 00AF              ?_SetDistanceCentral 0036  
                    _TurnLeft135 16F8                   ?_SetSpeedRight 0001  
                    ___ftmul@exp 0015              _ReadDistanceCentral 18B2  
                  ??_LCDBusyLoop 00A6                      _TurnRight90 1662  
                     isr@PWMLeft 0053                     _ReadParallel 0C6E  
        __end_of_SetDistanceLeft 12EA             ??_SetDistanceCentral 0038  
            start_initialization 149E                     ??_SetBattery 0038  
                      _ReadUSART 1812             ?_ReadDistanceCentral 00A6  
               _ReadDistanceLeft 18A8                      __end_of_abs 1756  
                    __end_of_isr 0212                    ??_LCDWriteInt 00B1  
           __end_of_TimerPWMInit 1812                       isr@counter 0059  
              __size_of_ReadMode 000A           _ReadParallelSpeedRight 1880  
                      _MotorInit 1782                        _SpeedLeft 004F  
             __end_of_SetBattery 15B2                    ?_TurnRight135 0001  
                    __pdataBANK0 0060                 __CFG_LPT1OSC$OFF 000000  
                       ?_ADCInit 0001          ConvertPicSpeed@velocity 0003  
            __end_of_LCDBusyLoop 1408               parallel@SpeedRight 00D2  
                  ?_ADCGetOutput 0001                      Go@SpeedLeft 00C3  
                       ?_LCDByte 00A9                         ?_LCDInit 0001  
              __size_of___ftpack 00AE                      __pbssCOMRAM 004D  
                _ConvertPicSpeed 0E2C                         LCDByte@c 00AC  
          ??_ReadDistanceCentral 00A8                       ?_ReadUSART 0001  
              __size_of___lwtoft 0024                    __pcstackBANK0 00A6  
                    ??_LCDGotoXY 00AF        SetDistanceCentral@lecture 0036  
          __size_of_parallelInit 0008              ReadParallel@lecture 00BE  
     __size_of_ReadPWMMotorRight 000A                 LCDWriteInt@F4236 00C7  
                ??_SetMotorRight 00B1              __end_of_LCDWriteInt 0A86  
                ??_SetSpeedRight 0004                        __pnvBANK0 00D4  
                   ??_TurnLeft90 00B1                 ___lwdiv@dividend 00A6  
              __CFG_CCP2MX$PORTC 000000                       ?_MotorInit 0001  
                   ??_WriteUSART 0001                        __pintcode 0008  
                 ??_TurnRight135 00B1                         ?___awdiv 00A6  
                       ?___ftadd 001B                         ?___awmod 00A6  
                       ?___ftmul 000C                         ?___fttol 0027  
                       ?___lwdiv 00A6            __size_of_SetMotorLeft 0046  
      __size_of_SetDistanceRight 0072            __size_of_SetSpeedLeft 0012  
                 ??_ADCGetOutput 0003                     _parallelInit 18D0  
                    __smallconst 0600                 ?_SetDistanceLeft 0036  
                LCDBusyLoop@busy 00A6                  LCDBusyLoop@temp 00A7  
               ___lwdiv@quotient 00AA               __end_of_TurnLeft90 16F8  
               ReadParallel@left 00C0         __size_of_SetPWMMotorLeft 003A  
               ReadParallel@temp 00BC                ?_SetPWMMotorRight 00AD  
             __end_of_WriteUSART 185C                      __size_of_Go 0188  
             ??_SetPWMMotorRight 00AF                     _SetMotorLeft 152A  
                       i2u182_40 0AD0                         i2u182_45 0AC8  
              ?_ReadPWMMotorLeft 0001                     _SetSpeedLeft 186E  
               __CFG_WDTPS$32768 000000                      _LCDBusyLoop 13B2  
             ??_ReadPWMMotorLeft 0003          __end_of_ConvertPicSpeed 0EEE  
               __size_of_ADCInit 0024                        _putsUSART 1756  
                       _PWMRight 00D8              SetSpeedLeft@lecture 0004  
                    ??_ReadUSART 0001                 __size_of_LCDByte 0056  
               __size_of_LCDInit 0092    __size_of_ConvertParallelSpeed 00DE  
          __size_of_TimerPWMInit 001E          ??_ADCInitiateConversion 00A6  
                    _LCDWriteInt 094C                        isr@CharRx 004C  
                      copy_data0 14CA           SetDistanceLeft@lecture 0036  
                       _ReadMode 1894                     ?_TurnLeft135 0001  
                       __Hrparam 0000            _ReadParallelSpeedLeft 188A  
                    ??_MotorInit 00AF                         __Lrparam 0000  
       __end_of_ReadDistanceLeft 18B2               __CFG_BOREN$SBORDIS 000000  
                  _DistanceRight 00A4                     ?_TurnRight90 0001  
               __size_of___awdiv 00BE                 __size_of___ftadd 01AC  
               __size_of___awmod 00A2                 __size_of___ftmul 00F4  
               __size_of___fttol 00F4                LCDBusyLoop@status 00A8  
               __size_of___lwdiv 0078                         ___ftpack 0FAC  
                     ?_putsUSART 0002                     _TimerPWMInit 17F4  
                       ___lwtoft 17D0                  ___lwdiv@divisor 00A8  
                ___lwdiv@counter 00AC                         __ptext10 14E4  
                       __ptext11 15EE                         __ptext20 105A  
                       __ptext12 152A                         __ptext21 0EEE  
                       __ptext13 172A                         __ptext30 18D8  
                       __ptext22 1408                         __ptext14 1628  
                       __ptext31 17AC                         __ptext23 135C  
                       __ptext15 118E                         __ptext40 12EA  
                       __ptext24 13B2                         __ptext16 1880  
                       __ptext41 0618                         __ptext33 1756  
                       __ptext25 0D4E                         __ptext17 188A  
                       __ptext50 1830                         __ptext42 1570  
                       __ptext34 184A                         __ptext26 1894  
                       __ptext18 0C6E                         __ptext43 17D0  
                       __ptext35 185C                         __ptext27 189E  
                       __ptext19 094C                         __ptext44 0A86  
                       __ptext36 186E                         __ptext28 18A8  
                       __ptext45 0B7A                         __ptext37 0E2C  
                       __ptext29 18B2                         __ptext46 0FAC  
                       __ptext38 1206                         __ptext47 1812  
                       __ptext39 1278                         __ptext48 18BC  
                       __ptext49 18C6             __end_of_TurnRight135 16C6  
        ?_ReadParallelSpeedRight 00A6                    __size_of_main 003C  
           __end_of_ADCGetOutput 184A                ??_SetPWMMotorLeft 00AF  
                       int$flags 005E                 ?_ConvertPicSpeed 0001  
               _SetDistanceRight 1206      __size_of_SetDistanceCentral 0072  
      SetPWMMotorLeft@percentage 00AD                         intlevel2 0000  
 __end_of_ReadParallelSpeedRight 188A                   LCDWriteInt@val 00AE  
                 LCDWriteInt@str 00B3           ?_ReadParallelSpeedLeft 00A6  
    __end_of_ReadDistanceCentral 18BC                      ??_putsUSART 0004  
              __CFG_FOSC$INTIO67 000000            __end_of_SetMotorRight 152A  
                   _USART_Status 005D            __end_of_SetSpeedRight 186E  
