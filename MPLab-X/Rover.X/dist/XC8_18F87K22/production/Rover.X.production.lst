

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 21 19:21:07 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataBANK0
    68  001392                     __pidataBANK0:
    69                           	opt stack 0
    70                           
    71                           ;initializer for ___cgram
    72  001392  0C                 	db	12
    73  001393  12                 	db	18
    74  001394  12                 	db	18
    75  001395  0C                 	db	12
    76  001396  00                 	db	0
    77  001397  00                 	db	0
    78  001398  00                 	db	0
    79  001399  00                 	db	0
    80  00139A  00                 	db	0
    81  00139B  04                 	db	4
    82  00139C  0E                 	db	14
    83  00139D  1F                 	db	31
    84  00139E  0E                 	db	14
    85  00139F  04                 	db	4
    86  0013A0  00                 	db	0
    87  0013A1  00                 	db	0
    88  0013A2  04                 	db	4
    89  0013A3  04                 	db	4
    90  0013A4  04                 	db	4
    91  0013A5  04                 	db	4
    92  0013A6  1F                 	db	31
    93  0013A7  0E                 	db	14
    94  0013A8  04                 	db	4
    95  0013A9  00                 	db	0
    96  0013AA  0A                 	db	10
    97  0013AB  15                 	db	21
    98  0013AC  11                 	db	17
    99  0013AD  0A                 	db	10
   100  0013AE  04                 	db	4
   101  0013AF  00                 	db	0
   102  0013B0  00                 	db	0
   103  0013B1  00                 	db	0
   104  0013B2  0A                 	db	10
   105  0013B3  1F                 	db	31
   106  0013B4  1F                 	db	31
   107  0013B5  0E                 	db	14
   108  0013B6  04                 	db	4
   109  0013B7  00                 	db	0
   110  0013B8  00                 	db	0
   111  0013B9  00                 	db	0
   112  0013BA  00                 	db	0
   113  0013BB  00                 	db	0
   114  0013BC  00                 	db	0
   115  0013BD  00                 	db	0
   116  0013BE  00                 	db	0
   117  0013BF  00                 	db	0
   118  0013C0  00                 	db	0
   119  0013C1  00                 	db	0
   120  0013C2  00                 	db	0
   121  0013C3  00                 	db	0
   122  0013C4  00                 	db	0
   123  0013C5  00                 	db	0
   124  0013C6  00                 	db	0
   125  0013C7  00                 	db	0
   126  0013C8  00                 	db	0
   127  0013C9  00                 	db	0
   128  0013CA  00                 	db	0
   129  0013CB  00                 	db	0
   130  0013CC  00                 	db	0
   131  0013CD  00                 	db	0
   132  0013CE  00                 	db	0
   133  0013CF  00                 	db	0
   134  0013D0  00                 	db	0
   135  0013D1  00                 	db	0
   136                           
   137                           ;initializer for _DistanceCentral
   138  0013D2  0032               	dw	50
   139                           
   140                           ;initializer for _DistanceLeft
   141  0013D4  0032               	dw	50
   142                           
   143                           ;initializer for _DistanceRight
   144  0013D6  0032               	dw	50
   145                           
   146                           	psect	nvCOMRAM
   147  00005B                     __pnvCOMRAM:
   148                           	opt stack 0
   149  00005B                     _PWMLeft:
   150                           	opt stack 0
   151  00005B                     	ds	2
   152  00005D                     _PWMRight:
   153                           	opt stack 0
   154  00005D                     	ds	2
   155  0000                     _ADCON1	set	4033
   156  0000                     _ADCON2	set	4032
   157  0000                     _ADRESH	set	4036
   158  0000                     _ADRESL	set	4035
   159  0000                     _ANSELH	set	3967
   160  0000                     _PORTB	set	3969
   161  0000                     _PORTD	set	3971
   162  0000                     _TMR0H	set	4055
   163  0000                     _TMR0L	set	4054
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISC	set	3988
   166  0000                     _TRISD	set	3989
   167  0000                     _TRISDbits	set	3989
   168  0000                     _ADIE	set	31982
   169  0000                     _ADIF	set	31990
   170  0000                     _ADON	set	32272
   171  0000                     _ANS0	set	31728
   172  0000                     _ANS1	set	31729
   173  0000                     _ANS2	set	31730
   174  0000                     _ANS3	set	31731
   175  0000                     _CHS0	set	32274
   176  0000                     _CHS1	set	32275
   177  0000                     _CHS2	set	32276
   178  0000                     _CHS3	set	32277
   179  0000                     _GIE	set	32663
   180  0000                     _GO	set	32273
   181  0000                     _PEIE	set	32662
   182  0000                     _PSA	set	32427
   183  0000                     _RC0	set	31760
   184  0000                     _RC1	set	31761
   185  0000                     _RC2	set	31762
   186  0000                     _RC3	set	31763
   187  0000                     _RC4	set	31764
   188  0000                     _RC5	set	31765
   189  0000                     _RD4	set	31772
   190  0000                     _RD5	set	31773
   191  0000                     _RD6	set	31774
   192  0000                     _T08BIT	set	32430
   193  0000                     _T0CS	set	32429
   194  0000                     _T0PS0	set	32424
   195  0000                     _T0PS1	set	32425
   196  0000                     _T0PS2	set	32426
   197  0000                     _TMR0IE	set	32661
   198  0000                     _TMR0IF	set	32658
   199  0000                     _TMR0ON	set	32431
   200  0000                     _TRISA0	set	31888
   201  0000                     _TRISA1	set	31889
   202  0000                     _TRISA2	set	31890
   203  0000                     _TRISA3	set	31891
   204                           
   205                           	psect	smallconst
   206  000600                     __psmallconst:
   207                           	opt stack 0
   208  000600  00                 	db	0
   209  000601                     STR_1:
   210  000601  52                 	db	82	;'R'
   211  000602  69                 	db	105	;'i'
   212  000603  67                 	db	103	;'g'
   213  000604  68                 	db	104	;'h'
   214  000605  74                 	db	116	;'t'
   215  000606  2D                 	db	45
   216  000607  46                 	db	70	;'F'
   217  000608  72                 	db	114	;'r'
   218  000609  6F                 	db	111	;'o'
   219  00060A  6E                 	db	110	;'n'
   220  00060B  74                 	db	116	;'t'
   221  00060C  2D                 	db	45
   222  00060D  4C                 	db	76	;'L'
   223  00060E  65                 	db	101	;'e'
   224  00060F  66                 	db	102	;'f'
   225  000610  74                 	db	116	;'t'
   226  000611  00                 	db	0
   227                           
   228                           ; #config settings
   229  000612  00                 	db	0	; dummy byte at the end
   230  0000                     
   231                           	psect	cinit
   232  0013D8                     __pcinit:
   233                           	opt stack 0
   234  0013D8                     start_initialization:
   235                           	opt stack 0
   236  0013D8                     __initialization:
   237                           	opt stack 0
   238                           
   239                           ; Clear objects allocated to BANK0 (15 bytes)
   240  0013D8  EE00  F0B8         	lfsr	0,__pbssBANK0
   241  0013DC  0E0F               	movlw	15
   242  0013DE                     clear_0:
   243  0013DE  6AEE               	clrf	postinc0,c
   244  0013E0  06E8               	decf	wreg,f,c
   245  0013E2  E1FD               	bnz	clear_0
   246                           
   247                           ; Clear objects allocated to COMRAM (14 bytes)
   248  0013E4  EE00  F04D         	lfsr	0,__pbssCOMRAM
   249  0013E8  0E0E               	movlw	14
   250  0013EA                     clear_1:
   251  0013EA  6AEE               	clrf	postinc0,c
   252  0013EC  06E8               	decf	wreg,f,c
   253  0013EE  E1FD               	bnz	clear_1
   254                           
   255                           ; Initialize objects allocated to BANK0 (70 bytes)
   256                           ; load TBLPTR registers with __pidataBANK0
   257  0013F0  0E92               	movlw	low __pidataBANK0
   258  0013F2  6EF6               	movwf	tblptrl,c
   259  0013F4  0E13               	movlw	high __pidataBANK0
   260  0013F6  6EF7               	movwf	tblptrh,c
   261  0013F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   262  0013FA  6EF8               	movwf	tblptru,c
   263  0013FC  EE00  F060         	lfsr	0,__pdataBANK0
   264  001400  EE10 F046          	lfsr	1,70
   265  001404                     copy_data0:
   266  001404  0009               	tblrd		*+
   267  001406  CFF5 FFEE          	movff	tablat,postinc0
   268  00140A  50E5               	movf	postdec1,w,c
   269  00140C  50E1               	movf	fsr1l,w,c
   270  00140E  E1FA               	bnz	copy_data0
   271  001410                     end_of_initialization:
   272                           	opt stack 0
   273  001410                     __end_of__initialization:
   274                           	opt stack 0
   275  001410  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   276  001412  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   277  001414  0E00               	movlw	low (__Lmediumconst shr (0+16))
   278  001416  6EF8               	movwf	tblptru,c
   279  001418  0100               	movlb	0
   280  00141A  EFB5  F00A         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	bssCOMRAM
   291  00004D                     __pbssCOMRAM:
   292                           	opt stack 0
   293  00004D                     _Battery:
   294                           	opt stack 0
   295  00004D                     	ds	2
   296  00004F                     _SpeedLeft:
   297                           	opt stack 0
   298  00004F                     	ds	2
   299  000051                     _SpeedRight:
   300                           	opt stack 0
   301  000051                     	ds	2
   302  000053                     isr@PWMLeft:
   303                           	opt stack 0
   304  000053                     	ds	2
   305  000055                     isr@PWMRight:
   306                           	opt stack 0
   307  000055                     	ds	2
   308  000057                     isr@Readport:
   309                           	opt stack 0
   310  000057                     	ds	2
   311  000059                     isr@iteration:
   312                           	opt stack 0
   313  000059                     	ds	2
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	bssBANK0
   324  0000B8                     __pbssBANK0:
   325                           	opt stack 0
   326  0000B8                     LCDWriteInt@F4236:
   327                           	opt stack 0
   328  0000B8                     	ds	5
   329  0000BD                     _Mode:
   330                           	opt stack 0
   331  0000BD                     	ds	2
   332  0000BF                     _MotorLeftSpeed:
   333                           	opt stack 0
   334  0000BF                     	ds	2
   335  0000C1                     _MotorRightSpeed:
   336                           	opt stack 0
   337  0000C1                     	ds	2
   338  0000C3                     parallel@SpeedLeft:
   339                           	opt stack 0
   340  0000C3                     	ds	2
   341  0000C5                     parallel@SpeedRight:
   342                           	opt stack 0
   343  0000C5                     	ds	2
   344                           tblptru	equ	0xFF8
   345                           tblptrh	equ	0xFF7
   346                           tblptrl	equ	0xFF6
   347                           tablat	equ	0xFF5
   348                           postinc0	equ	0xFEE
   349                           wreg	equ	0xFE8
   350                           postdec1	equ	0xFE5
   351                           fsr1l	equ	0xFE1
   352                           
   353                           	psect	dataBANK0
   354  000060                     __pdataBANK0:
   355                           	opt stack 0
   356  000060                     ___cgram:
   357                           	opt stack 0
   358  000060                     	ds	64
   359  0000A0                     _DistanceCentral:
   360                           	opt stack 0
   361  0000A0                     	ds	2
   362  0000A2                     _DistanceLeft:
   363                           	opt stack 0
   364  0000A2                     	ds	2
   365  0000A4                     _DistanceRight:
   366                           	opt stack 0
   367  0000A4                     	ds	2
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1l	equ	0xFE1
   376                           
   377                           	psect	cstackBANK0
   378  0000A6                     __pcstackBANK0:
   379                           	opt stack 0
   380  0000A6                     ?_abs:
   381                           	opt stack 0
   382  0000A6                     ?_ReadMode:
   383                           	opt stack 0
   384  0000A6                     ?_ReadParallelSpeedLeft:
   385                           	opt stack 0
   386  0000A6                     ?_ReadParallelSpeedRight:
   387                           	opt stack 0
   388  0000A6                     ?_ConvertParallelSpeed:
   389                           	opt stack 0
   390  0000A6                     ?_ReadDistanceLeft:
   391                           	opt stack 0
   392  0000A6                     ?_ReadDistanceRight:
   393                           	opt stack 0
   394  0000A6                     ?_ReadDistanceCentral:
   395                           	opt stack 0
   396  0000A6                     ?___lwdiv:
   397                           	opt stack 0
   398  0000A6                     LCDBusyLoop@busy:
   399                           	opt stack 0
   400  0000A6                     abs@a:
   401                           	opt stack 0
   402  0000A6                     ___lwdiv@dividend:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x0
   406  0000A6                     	ds	1
   407  0000A7                     LCDBusyLoop@temp:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x1
   411  0000A7                     	ds	1
   412  0000A8                     ??_abs:
   413  0000A8                     LCDBusyLoop@status:
   414                           	opt stack 0
   415  0000A8                     ConvertParallelSpeed@velocity:
   416                           	opt stack 0
   417  0000A8                     ___lwdiv@divisor:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421  0000A8                     	ds	1
   422  0000A9                     LCDByte@isdata:
   423                           	opt stack 0
   424  0000A9                     ReadParallel@right:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x3
   428  0000A9                     	ds	1
   429  0000AA                     LCDByte@hn:
   430                           	opt stack 0
   431  0000AA                     ReadParallel@lecture:
   432                           	opt stack 0
   433  0000AA                     ___lwdiv@quotient:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x4
   437  0000AA                     	ds	1
   438  0000AB                     LCDByte@ln:
   439                           	opt stack 0
   440  0000AB                     ReadParallel@left:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x5
   444  0000AB                     	ds	1
   445  0000AC                     LCDByte@c:
   446                           	opt stack 0
   447  0000AC                     ___lwdiv@counter:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x6
   451  0000AC                     	ds	1
   452  0000AD                     LCDByte@temp:
   453                           	opt stack 0
   454  0000AD                     SetPWMMotorLeft@percentage:
   455                           	opt stack 0
   456  0000AD                     SetPWMMotorRight@percentage:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x7
   460  0000AD                     	ds	1
   461  0000AE                     ??_LCDInit:
   462                           
   463                           ; 1 bytes @ 0x8
   464  0000AE                     	ds	1
   465  0000AF                     LCDInit@style:
   466                           	opt stack 0
   467  0000AF                     SetMotorLeft@speed:
   468                           	opt stack 0
   469  0000AF                     SetMotorRight@speed:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x9
   473  0000AF                     	ds	1
   474  0000B0                     LCDInit@__i:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0xA
   478  0000B0                     	ds	1
   479  0000B1                     ??_TurnRight135:
   480  0000B1                     ??_TurnLeft135:
   481  0000B1                     ??_TurnLeft90:
   482  0000B1                     ??_TurnRight90:
   483                           
   484                           ; 1 bytes @ 0xB
   485  0000B1                     	ds	1
   486  0000B2                     ??_Go:
   487                           
   488                           ; 1 bytes @ 0xC
   489  0000B2                     	ds	2
   490  0000B4                     Go@SpeedLeft:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0xE
   494  0000B4                     	ds	2
   495  0000B6                     Go@SpeedRight:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x10
   499  0000B6                     	ds	2
   500  0000B8                     tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           postdec1	equ	0xFE5
   507                           fsr1l	equ	0xFE1
   508                           
   509                           ; 1 bytes @ 0x12
   510                           
   511                           	psect	cstackCOMRAM
   512  000001                     __pcstackCOMRAM:
   513                           	opt stack 0
   514  000001                     ?_ADCGetOutput:
   515                           	opt stack 0
   516  000001                     ?_ReadPWMMotorRight:
   517                           	opt stack 0
   518  000001                     ?_ReadPWMMotorLeft:
   519                           	opt stack 0
   520  000001                     ?___awdiv:
   521                           	opt stack 0
   522  000001                     ?___awmod:
   523                           	opt stack 0
   524  000001                     ?___ftpack:
   525                           	opt stack 0
   526  000001                     i2LCDBusyLoop@busy:
   527                           	opt stack 0
   528  000001                     ___awdiv@dividend:
   529                           	opt stack 0
   530  000001                     ___awmod@dividend:
   531                           	opt stack 0
   532  000001                     ___ftpack@arg:
   533                           	opt stack 0
   534                           
   535                           ; 3 bytes @ 0x0
   536  000001                     	ds	1
   537  000002                     i2LCDBusyLoop@temp:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x1
   541  000002                     	ds	1
   542  000003                     ??_ADCGetOutput:
   543  000003                     i2LCDBusyLoop@status:
   544                           	opt stack 0
   545  000003                     ___awdiv@divisor:
   546                           	opt stack 0
   547  000003                     ___awmod@divisor:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x2
   551  000003                     	ds	1
   552  000004                     ___ftpack@exp:
   553                           	opt stack 0
   554  000004                     i2LCDByte@isdata:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x3
   558  000004                     	ds	1
   559  000005                     ___awdiv@counter:
   560                           	opt stack 0
   561  000005                     ___awmod@counter:
   562                           	opt stack 0
   563  000005                     ___ftpack@sign:
   564                           	opt stack 0
   565  000005                     i2LCDByte@hn:
   566                           	opt stack 0
   567  000005                     ADCGetOutput@temp:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x4
   571  000005                     	ds	1
   572  000006                     ??___ftpack:
   573  000006                     ___awdiv@sign:
   574                           	opt stack 0
   575  000006                     ___awmod@sign:
   576                           	opt stack 0
   577  000006                     i2LCDByte@ln:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x5
   581  000006                     	ds	1
   582  000007                     i2LCDByte@c:
   583                           	opt stack 0
   584  000007                     ___awdiv@quotient:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x6
   588  000007                     	ds	1
   589  000008                     i2LCDByte@temp:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x7
   593  000008                     	ds	1
   594  000009                     ?___lwtoft:
   595                           	opt stack 0
   596  000009                     LCDGotoXY@y:
   597                           	opt stack 0
   598  000009                     LCDWriteString@msg:
   599                           	opt stack 0
   600  000009                     LCDWriteInt@val:
   601                           	opt stack 0
   602  000009                     ___lwtoft@c:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x8
   606  000009                     	ds	1
   607  00000A                     LCDGotoXY@x:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x9
   611  00000A                     	ds	1
   612  00000B                     LCDWriteString@cc:
   613                           	opt stack 0
   614  00000B                     LCDWriteInt@field_length:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0xA
   618  00000B                     	ds	1
   619  00000C                     ??_LCDWriteInt:
   620  00000C                     ?___ftmul:
   621                           	opt stack 0
   622  00000C                     ___ftmul@f1:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0xB
   626  00000C                     	ds	2
   627  00000E                     LCDWriteInt@str:
   628                           	opt stack 0
   629                           
   630                           ; 5 bytes @ 0xD
   631  00000E                     	ds	1
   632  00000F                     ___ftmul@f2:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0xE
   636  00000F                     	ds	3
   637  000012                     ??___ftmul:
   638                           
   639                           ; 1 bytes @ 0x11
   640  000012                     	ds	1
   641  000013                     LCDWriteInt@j:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x12
   645  000013                     	ds	2
   646  000015                     ___ftmul@exp:
   647                           	opt stack 0
   648  000015                     LCDWriteInt@i:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x14
   652  000015                     	ds	1
   653  000016                     ___ftmul@f3_as_product:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0x15
   657  000016                     	ds	1
   658  000017                     
   659                           ; 1 bytes @ 0x16
   660  000017                     	ds	2
   661  000019                     ___ftmul@cntr:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x18
   665  000019                     	ds	1
   666  00001A                     ___ftmul@sign:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x19
   670  00001A                     	ds	1
   671  00001B                     ?___ftadd:
   672                           	opt stack 0
   673  00001B                     ___ftadd@f1:
   674                           	opt stack 0
   675                           
   676                           ; 3 bytes @ 0x1A
   677  00001B                     	ds	3
   678  00001E                     ___ftadd@f2:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x1D
   682  00001E                     	ds	3
   683  000021                     ??___ftadd:
   684                           
   685                           ; 1 bytes @ 0x20
   686  000021                     	ds	3
   687  000024                     ___ftadd@sign:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x23
   691  000024                     	ds	1
   692  000025                     ___ftadd@exp2:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x24
   696  000025                     	ds	1
   697  000026                     ___ftadd@exp1:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x25
   701  000026                     	ds	1
   702  000027                     ?___fttol:
   703                           	opt stack 0
   704  000027                     ___fttol@f1:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0x26
   708  000027                     	ds	4
   709  00002B                     ??___fttol:
   710                           
   711                           ; 1 bytes @ 0x2A
   712  00002B                     	ds	5
   713  000030                     ___fttol@sign1:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x2F
   717  000030                     	ds	1
   718  000031                     ___fttol@lval:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x30
   722  000031                     	ds	4
   723  000035                     ___fttol@exp1:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x34
   727  000035                     	ds	1
   728  000036                     SetDistanceLeft@lecture:
   729                           	opt stack 0
   730  000036                     SetDistanceRight@lecture:
   731                           	opt stack 0
   732  000036                     SetDistanceCentral@lecture:
   733                           	opt stack 0
   734  000036                     SetBattery@lecture:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x35
   738  000036                     	ds	2
   739  000038                     ??_SetDistanceLeft:
   740  000038                     ??_SetDistanceCentral:
   741  000038                     ??_SetDistanceRight:
   742  000038                     _SetBattery$1270:
   743                           	opt stack 0
   744                           
   745                           ; 3 bytes @ 0x37
   746  000038                     	ds	3
   747  00003B                     ??_isr:
   748                           
   749                           ; 1 bytes @ 0x3A
   750  00003B                     	ds	16
   751  00004B                     isr@read:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x4A
   755  00004B                     	ds	2
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765 ;;
   766 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   767 ;;
   768 ;; *************** function _main *****************
   769 ;; Defined at:
   770 ;;		line 9 in file "main.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   784 ;;      Params:         0       0       0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels required when called:   11
   790 ;; This function calls:
   791 ;;		_ADCInit
   792 ;;		_ADCInitiateConversion
   793 ;;		_Go
   794 ;;		_LCDInit
   795 ;;		_MotorInit
   796 ;;		_SetMotorLeft
   797 ;;		_SetMotorRight
   798 ;;		_TimerPWMInit
   799 ;;		_parallelInit
   800 ;; This function is called by:
   801 ;;		Startup code after reset
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text0
   806  00156A                     __ptext0:
   807                           	opt stack 0
   808  00156A                     _main:
   809                           	opt stack 20
   810                           
   811                           ;main.c: 11: ADCInit();
   812                           
   813                           ;incstack = 0
   814  00156A  EC98  F00B         	call	_ADCInit	;wreg free
   815                           
   816                           ;main.c: 12: MotorInit();
   817  00156E  EC83  F00B         	call	_MotorInit	;wreg free
   818                           
   819                           ;main.c: 13: TimerPWMInit();
   820  001572  ECBC  F00B         	call	_TimerPWMInit	;wreg free
   821                           
   822                           ;main.c: 14: LCDInit(0B00000000);
   823  001576  0E00               	movlw	0
   824  001578  ECDD  F006         	call	_LCDInit
   825                           
   826                           ;main.c: 15: parallelInit();
   827  00157C  EC00  F00C         	call	_parallelInit	;wreg free
   828                           
   829                           ;main.c: 16: SetMotorLeft(0);
   830  001580  0E00               	movlw	0
   831  001582  0100               	movlb	0	; () banked
   832  001584  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
   833  001586  0E00               	movlw	0
   834  001588  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
   835  00158A  EC32  F00A         	call	_SetMotorLeft	;wreg free
   836                           
   837                           ;main.c: 17: SetMotorRight(0);
   838  00158E  0E00               	movlw	0
   839  001590  0100               	movlb	0	; () banked
   840  001592  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
   841  001594  0E00               	movlw	0
   842  001596  6FAF               	movwf	SetMotorRight@speed& (0+255),b
   843  001598  EC0F  F00A         	call	_SetMotorRight	;wreg free
   844  00159C                     l3097:
   845                           
   846                           ;main.c: 21: ADCInitiateConversion();
   847  00159C  EC04  F00C         	call	_ADCInitiateConversion	;wreg free
   848                           
   849                           ;main.c: 22: Go();
   850  0015A0  ECE0  F003         	call	_Go	;wreg free
   851  0015A4  D7FB               	goto	l3097
   852  0015A6                     __end_of_main:
   853                           	opt stack 0
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           postdec1	equ	0xFE5
   861                           fsr1l	equ	0xFE1
   862                           
   863 ;; *************** function _parallelInit *****************
   864 ;; Defined at:
   865 ;;		line 24 in file "parallel.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, status,2
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   879 ;;      Params:         0       0       0       0       0       0       0
   880 ;;      Locals:         0       0       0       0       0       0       0
   881 ;;      Temps:          0       0       0       0       0       0       0
   882 ;;      Totals:         0       0       0       0       0       0       0
   883 ;;Total ram usage:        0 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    6
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text1
   894  001800                     __ptext1:
   895                           	opt stack 0
   896  001800                     _parallelInit:
   897                           	opt stack 24
   898                           
   899                           ;parallel.c: 26: TRISB=0b11111111;
   900                           
   901                           ;incstack = 0
   902  001800  6893               	setf	3987,c	;volatile
   903                           
   904                           ;parallel.c: 28: ANSELH=0b00000000;
   905  001802  0E00               	movlw	0
   906  001804  6E7F               	movwf	3967,c	;volatile
   907  001806  0012               	return		;funcret
   908  001808                     __end_of_parallelInit:
   909                           	opt stack 0
   910                           tblptru	equ	0xFF8
   911                           tblptrh	equ	0xFF7
   912                           tblptrl	equ	0xFF6
   913                           tablat	equ	0xFF5
   914                           postinc0	equ	0xFEE
   915                           wreg	equ	0xFE8
   916                           postdec1	equ	0xFE5
   917                           fsr1l	equ	0xFE1
   918                           
   919 ;; *************** function _TimerPWMInit *****************
   920 ;; Defined at:
   921 ;;		line 19 in file "TimerPWM.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, status,2
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   935 ;;      Params:         0       0       0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0       0       0
   938 ;;      Totals:         0       0       0       0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    6
   942 ;; This function calls:
   943 ;;		Nothing
   944 ;; This function is called by:
   945 ;;		_main
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           	psect	text2
   950  001778                     __ptext2:
   951                           	opt stack 0
   952  001778                     _TimerPWMInit:
   953                           	opt stack 24
   954                           
   955                           ;TimerPWM.c: 20: GIE=1;
   956                           
   957                           ;incstack = 0
   958  001778  8EF2               	bsf	intcon,7,c	;volatile
   959                           
   960                           ;TimerPWM.c: 21: TMR0IE=1;
   961  00177A  8AF2               	bsf	intcon,5,c	;volatile
   962                           
   963                           ;TimerPWM.c: 22: T08BIT=1;
   964  00177C  8CD5               	bsf	4053,6,c	;volatile
   965                           
   966                           ;TimerPWM.c: 23: T0CS=0;
   967  00177E  9AD5               	bcf	4053,5,c	;volatile
   968                           
   969                           ;TimerPWM.c: 24: PSA=1;
   970  001780  86D5               	bsf	4053,3,c	;volatile
   971                           
   972                           ;TimerPWM.c: 25: T0PS2=0;
   973  001782  94D5               	bcf	4053,2,c	;volatile
   974                           
   975                           ;TimerPWM.c: 26: T0PS1=0;
   976  001784  92D5               	bcf	4053,1,c	;volatile
   977                           
   978                           ;TimerPWM.c: 27: T0PS0=1;
   979  001786  80D5               	bsf	4053,0,c	;volatile
   980                           
   981                           ;TimerPWM.c: 29: TMR0IF=0;
   982  001788  94F2               	bcf	intcon,2,c	;volatile
   983                           
   984                           ;TimerPWM.c: 30: TMR0H=0x00;
   985  00178A  0E00               	movlw	0
   986  00178C  6ED7               	movwf	4055,c	;volatile
   987                           
   988                           ;TimerPWM.c: 31: TMR0L=156;
   989  00178E  0E9C               	movlw	156
   990  001790  6ED6               	movwf	4054,c	;volatile
   991                           
   992                           ;TimerPWM.c: 32: TMR0ON=1;
   993  001792  8ED5               	bsf	4053,7,c	;volatile
   994  001794  0012               	return		;funcret
   995  001796                     __end_of_TimerPWMInit:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           intcon	equ	0xFF2
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           postdec1	equ	0xFE5
  1005                           fsr1l	equ	0xFE1
  1006                           
  1007 ;; *************** function _MotorInit *****************
  1008 ;; Defined at:
  1009 ;;		line 27 in file "motors.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;		None
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, status,2, status,0, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : 0/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1023 ;;      Params:         0       0       0       0       0       0       0
  1024 ;;      Locals:         0       0       0       0       0       0       0
  1025 ;;      Temps:          0       0       0       0       0       0       0
  1026 ;;      Totals:         0       0       0       0       0       0       0
  1027 ;;Total ram usage:        0 bytes
  1028 ;; Hardware stack levels used:    1
  1029 ;; Hardware stack levels required when called:    8
  1030 ;; This function calls:
  1031 ;;		_SetPWMMotorLeft
  1032 ;;		_SetPWMMotorRight
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text3
  1039  001706                     __ptext3:
  1040                           	opt stack 0
  1041  001706                     _MotorInit:
  1042                           	opt stack 22
  1043                           
  1044                           ;motors.c: 28: TRISC = 0b11000000;
  1045                           
  1046                           ;incstack = 0
  1047  001706  0EC0               	movlw	192
  1048  001708  6E94               	movwf	3988,c	;volatile
  1049                           
  1050                           ;motors.c: 29: RC0=1;
  1051  00170A  8082               	bsf	3970,0,c	;volatile
  1052                           
  1053                           ;motors.c: 30: RC1=0;
  1054  00170C  9282               	bcf	3970,1,c	;volatile
  1055                           
  1056                           ;motors.c: 31: RC2=1;
  1057  00170E  8482               	bsf	3970,2,c	;volatile
  1058                           
  1059                           ;motors.c: 32: RC3=0;
  1060  001710  9682               	bcf	3970,3,c	;volatile
  1061                           
  1062                           ;motors.c: 33: SetPWMMotorLeft(0);
  1063  001712  0E00               	movlw	0
  1064  001714  0100               	movlb	0	; () banked
  1065  001716  6FAE               	movwf	(SetPWMMotorLeft@percentage+1)& (0+255),b
  1066  001718  0E00               	movlw	0
  1067  00171A  6FAD               	movwf	SetPWMMotorLeft@percentage& (0+255),b
  1068  00171C  ECEE  F00A         	call	_SetPWMMotorLeft	;wreg free
  1069                           
  1070                           ;motors.c: 34: SetPWMMotorRight(0);
  1071  001720  0E00               	movlw	0
  1072  001722  0100               	movlb	0	; () banked
  1073  001724  6FAE               	movwf	(SetPWMMotorRight@percentage+1)& (0+255),b
  1074  001726  0E00               	movlw	0
  1075  001728  6FAD               	movwf	SetPWMMotorRight@percentage& (0+255),b
  1076  00172A  ECD3  F00A         	call	_SetPWMMotorRight	;wreg free
  1077  00172E  0012               	return		;funcret
  1078  001730                     __end_of_MotorInit:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           intcon	equ	0xFF2
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postdec1	equ	0xFE5
  1088                           fsr1l	equ	0xFE1
  1089                           
  1090 ;; *************** function _LCDInit *****************
  1091 ;; Defined at:
  1092 ;;		line 196 in file "lcd_hd44780_pic16.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  style           1    wreg     unsigned char 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  style           1    9[BANK0 ] unsigned char 
  1097 ;;  __i             1   10[BANK0 ] unsigned char 
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1107 ;;      Params:         0       0       0       0       0       0       0
  1108 ;;      Locals:         0       2       0       0       0       0       0
  1109 ;;      Temps:          0       1       0       0       0       0       0
  1110 ;;      Totals:         0       3       0       0       0       0       0
  1111 ;;Total ram usage:        3 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    8
  1114 ;; This function calls:
  1115 ;;		_LCDBusyLoop
  1116 ;;		_LCDByte
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text4
  1123  000DBA                     __ptext4:
  1124                           	opt stack 0
  1125  000DBA                     _LCDInit:
  1126                           	opt stack 22
  1127                           
  1128                           ;incstack = 0
  1129                           ;LCDInit@style stored from wreg
  1130  000DBA  0100               	movlb	0	; () banked
  1131  000DBC  6FAF               	movwf	LCDInit@style& (0+255),b
  1132                           
  1133                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((30)*(1000000/4000.0)));
  1134  000DBE  0E0A               	movlw	10
  1135  000DC0  0100               	movlb	0	; () banked
  1136  000DC2  6FAE               	movwf	??_LCDInit& (0+255),b
  1137  000DC4  0EBC               	movlw	188
  1138  000DC6                     u1977:
  1139  000DC6  2EE8               	decfsz	wreg,f,c
  1140  000DC8  D7FE               	goto	u1977
  1141  000DCA  2FAE               	decfsz	??_LCDInit& (0+255),f,b
  1142  000DCC  D7FC               	goto	u1977
  1143  000DCE  F000 F000          	nop2	
  1144                           
  1145                           ;lcd_hd44780_pic16.c: 215: TRISD&=(~(0x0F<<0));
  1146  000DD2  0EF0               	movlw	240
  1147  000DD4  1695               	andwf	3989,f,c	;volatile
  1148                           
  1149                           ;lcd_hd44780_pic16.c: 217: TRISDbits.TRISD6=0;
  1150  000DD6  9C95               	bcf	3989,6,c	;volatile
  1151                           
  1152                           ;lcd_hd44780_pic16.c: 218: TRISDbits.TRISD4=0;
  1153  000DD8  9895               	bcf	3989,4,c	;volatile
  1154                           
  1155                           ;lcd_hd44780_pic16.c: 219: TRISDbits.TRISD5=0;
  1156  000DDA  9A95               	bcf	3989,5,c	;volatile
  1157                           
  1158                           ;lcd_hd44780_pic16.c: 221: PORTD&=(~(0x0F<<0));
  1159  000DDC  0EF0               	movlw	240
  1160  000DDE  1683               	andwf	3971,f,c	;volatile
  1161                           
  1162                           ;lcd_hd44780_pic16.c: 223: (RD6=0);
  1163  000DE0  9C83               	bcf	3971,6,c	;volatile
  1164                           
  1165                           ;lcd_hd44780_pic16.c: 224: (RD5=0);
  1166  000DE2  9A83               	bcf	3971,5,c	;volatile
  1167                           
  1168                           ;lcd_hd44780_pic16.c: 225: (RD4=0);
  1169  000DE4  9883               	bcf	3971,4,c	;volatile
  1170                           
  1171                           ;lcd_hd44780_pic16.c: 230: (RD6=1);
  1172                           
  1173                           ;lcd_hd44780_pic16.c: 228: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1174  000DE6  8C83               	bsf	3971,6,c	;volatile
  1175                           
  1176                           ;lcd_hd44780_pic16.c: 231: PORTD|=((0b00000010)<<0);
  1177  000DE8  8283               	bsf	3971,1,c	;volatile
  1178                           
  1179                           ;lcd_hd44780_pic16.c: 233: (RD6=0);
  1180                           
  1181                           ;lcd_hd44780_pic16.c: 232: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1182  000DEA  9C83               	bcf	3971,6,c	;volatile
  1183                           
  1184                           ;lcd_hd44780_pic16.c: 237: LCDBusyLoop();
  1185                           
  1186                           ;lcd_hd44780_pic16.c: 234: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1187  000DEC  EC9E  F009         	call	_LCDBusyLoop	;wreg free
  1188                           
  1189                           ;lcd_hd44780_pic16.c: 242: (LCDByte(0b00101000,0));
  1190  000DF0  0E00               	movlw	0
  1191  000DF2  0100               	movlb	0	; () banked
  1192  000DF4  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1193  000DF6  0E28               	movlw	40
  1194  000DF8  EC73  F009         	call	_LCDByte
  1195                           
  1196                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00001100|style,0));
  1197  000DFC  0E00               	movlw	0
  1198  000DFE  0100               	movlb	0	; () banked
  1199  000E00  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1200  000E02  0100               	movlb	0	; () banked
  1201  000E04  51AF               	movf	LCDInit@style& (0+255),w,b
  1202  000E06  090C               	iorlw	12
  1203  000E08  EC73  F009         	call	_LCDByte
  1204                           
  1205                           ;lcd_hd44780_pic16.c: 246: (LCDByte(0b01000000,0));
  1206  000E0C  0E00               	movlw	0
  1207  000E0E  0100               	movlb	0	; () banked
  1208  000E10  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1209  000E12  0E40               	movlw	64
  1210  000E14  EC73  F009         	call	_LCDByte
  1211                           
  1212                           ;lcd_hd44780_pic16.c: 248: uint8_t __i;
  1213                           ;lcd_hd44780_pic16.c: 249: for(__i=0;__i<sizeof(__cgram);__i++)
  1214  000E18  0E00               	movlw	0
  1215  000E1A  0100               	movlb	0	; () banked
  1216  000E1C  6FB0               	movwf	LCDInit@__i& (0+255),b
  1217  000E1E                     l2971:
  1218                           
  1219                           ; BSR set to: 0
  1220  000E1E  0E3F               	movlw	63
  1221  000E20  0100               	movlb	0	; () banked
  1222  000E22  65B0               	cpfsgt	LCDInit@__i& (0+255),b
  1223  000E24  D001               	goto	l2975
  1224  000E26  0012               	return	
  1225  000E28                     l2975:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;lcd_hd44780_pic16.c: 250: (LCDByte(__cgram[__i],1));
  1229  000E28  0E01               	movlw	1
  1230  000E2A  0100               	movlb	0	; () banked
  1231  000E2C  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1232  000E2E  0100               	movlb	0	; () banked
  1233  000E30  51B0               	movf	LCDInit@__i& (0+255),w,b
  1234  000E32  0D01               	mullw	1
  1235  000E34  0E60               	movlw	low ___cgram
  1236  000E36  24F3               	addwf	prodl,w,c
  1237  000E38  6ED9               	movwf	fsr2l,c
  1238  000E3A  0E00               	movlw	high ___cgram
  1239  000E3C  20F4               	addwfc	prodh,w,c
  1240  000E3E  6EDA               	movwf	fsr2h,c
  1241  000E40  50DF               	movf	indf2,w,c
  1242  000E42  EC73  F009         	call	_LCDByte
  1243  000E46  0100               	movlb	0	; () banked
  1244  000E48  2BB0               	incf	LCDInit@__i& (0+255),f,b
  1245  000E4A  D7E9               	goto	l2971
  1246  000E4C                     __end_of_LCDInit:
  1247                           	opt stack 0
  1248                           tblptru	equ	0xFF8
  1249                           tblptrh	equ	0xFF7
  1250                           tblptrl	equ	0xFF6
  1251                           tablat	equ	0xFF5
  1252                           prodh	equ	0xFF4
  1253                           prodl	equ	0xFF3
  1254                           intcon	equ	0xFF2
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           postdec1	equ	0xFE5
  1258                           fsr1l	equ	0xFE1
  1259                           indf2	equ	0xFDF
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           
  1263 ;; *************** function _LCDByte *****************
  1264 ;; Defined at:
  1265 ;;		line 83 in file "lcd_hd44780_pic16.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  c               1    wreg     unsigned char 
  1268 ;;  isdata          1    3[BANK0 ] unsigned char 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  c               1    6[BANK0 ] unsigned char 
  1271 ;;  temp            1    7[BANK0 ] unsigned char 
  1272 ;;  ln              1    5[BANK0 ] unsigned char 
  1273 ;;  hn              1    4[BANK0 ] unsigned char 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1283 ;;      Params:         0       1       0       0       0       0       0
  1284 ;;      Locals:         0       4       0       0       0       0       0
  1285 ;;      Temps:          0       0       0       0       0       0       0
  1286 ;;      Totals:         0       5       0       0       0       0       0
  1287 ;;Total ram usage:        5 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    7
  1290 ;; This function calls:
  1291 ;;		_LCDBusyLoop
  1292 ;; This function is called by:
  1293 ;;		_LCDInit
  1294 ;; This function uses a non-reentrant model
  1295 ;;
  1296                           
  1297                           	psect	text5
  1298  0012E6                     __ptext5:
  1299                           	opt stack 0
  1300  0012E6                     _LCDByte:
  1301                           	opt stack 22
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;incstack = 0
  1305                           ;LCDByte@c stored from wreg
  1306  0012E6  0100               	movlb	0	; () banked
  1307  0012E8  6FAC               	movwf	LCDByte@c& (0+255),b
  1308                           
  1309                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  1310                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  1311                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  1312  0012EA  0100               	movlb	0	; () banked
  1313  0012EC  39AC               	swapf	LCDByte@c& (0+255),w,b
  1314  0012EE  0B0F               	andlw	15
  1315  0012F0  0100               	movlb	0	; () banked
  1316  0012F2  6FAA               	movwf	LCDByte@hn& (0+255),b
  1317                           
  1318                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  1319  0012F4  0100               	movlb	0	; () banked
  1320  0012F6  51AC               	movf	LCDByte@c& (0+255),w,b
  1321  0012F8  0B0F               	andlw	15
  1322  0012FA  0100               	movlb	0	; () banked
  1323  0012FC  6FAB               	movwf	LCDByte@ln& (0+255),b
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  1327  0012FE  0100               	movlb	0	; () banked
  1328  001300  51A9               	movf	LCDByte@isdata& (0+255),w,b
  1329  001302  0100               	movlb	0	; () banked
  1330  001304  A4D8               	btfss	status,2,c
  1331  001306  D002               	goto	l231
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  1335  001308  9883               	bcf	3971,4,c	;volatile
  1336  00130A  D001               	goto	l232
  1337  00130C                     l231:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;lcd_hd44780_pic16.c: 100: else
  1341                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  1342  00130C  8883               	bsf	3971,4,c	;volatile
  1343  00130E                     l232:
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1347                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  1348  00130E  8C83               	bsf	3971,6,c	;volatile
  1349                           
  1350                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  1351  001310  5083               	movf	3971,w,c	;volatile
  1352  001312  0BF0               	andlw	240
  1353  001314  0100               	movlb	0	; () banked
  1354  001316  11AA               	iorwf	LCDByte@hn& (0+255),w,b
  1355  001318  0100               	movlb	0	; () banked
  1356  00131A  6FAD               	movwf	LCDByte@temp& (0+255),b
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  1360  00131C  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  1361                           
  1362                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1366  001320  9C83               	bcf	3971,6,c	;volatile
  1367                           
  1368                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  1369                           
  1370                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1371  001322  8C83               	bsf	3971,6,c	;volatile
  1372                           
  1373                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  1374  001324  5083               	movf	3971,w,c	;volatile
  1375  001326  0BF0               	andlw	240
  1376  001328  0100               	movlb	0	; () banked
  1377  00132A  11AB               	iorwf	LCDByte@ln& (0+255),w,b
  1378  00132C  0100               	movlb	0	; () banked
  1379  00132E  6FAD               	movwf	LCDByte@temp& (0+255),b
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  1383  001330  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  1384                           
  1385                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1389  001334  9C83               	bcf	3971,6,c	;volatile
  1390                           
  1391                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  1392                           
  1393                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1394  001336  EC9E  F009         	call	_LCDBusyLoop	;wreg free
  1395  00133A  0012               	return		;funcret
  1396  00133C                     __end_of_LCDByte:
  1397                           	opt stack 0
  1398                           tblptru	equ	0xFF8
  1399                           tblptrh	equ	0xFF7
  1400                           tblptrl	equ	0xFF6
  1401                           tablat	equ	0xFF5
  1402                           prodh	equ	0xFF4
  1403                           prodl	equ	0xFF3
  1404                           intcon	equ	0xFF2
  1405                           postinc0	equ	0xFEE
  1406                           wreg	equ	0xFE8
  1407                           postdec1	equ	0xFE5
  1408                           fsr1l	equ	0xFE1
  1409                           indf2	equ	0xFDF
  1410                           fsr2h	equ	0xFDA
  1411                           fsr2l	equ	0xFD9
  1412                           status	equ	0xFD8
  1413                           
  1414 ;; *************** function _LCDBusyLoop *****************
  1415 ;; Defined at:
  1416 ;;		line 138 in file "lcd_hd44780_pic16.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  status          1    2[BANK0 ] unsigned char 
  1421 ;;  temp            1    1[BANK0 ] unsigned char 
  1422 ;;  busy            1    0[BANK0 ] unsigned char 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1432 ;;      Params:         0       0       0       0       0       0       0
  1433 ;;      Locals:         0       3       0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0
  1435 ;;      Totals:         0       3       0       0       0       0       0
  1436 ;;Total ram usage:        3 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    6
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_LCDByte
  1443 ;;		_LCDInit
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text6
  1448  00133C                     __ptext6:
  1449                           	opt stack 0
  1450  00133C                     _LCDBusyLoop:
  1451                           	opt stack 22
  1452                           
  1453                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  1454                           
  1455                           ;incstack = 0
  1456  00133C  0E00               	movlw	0
  1457  00133E  0100               	movlb	0	; () banked
  1458  001340  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  1462  001342  0E0F               	movlw	15
  1463  001344  1295               	iorwf	3989,f,c	;volatile
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  1467  001346  8A83               	bsf	3971,5,c	;volatile
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  1471  001348  9883               	bcf	3971,4,c	;volatile
  1472  00134A                     l2477:
  1473                           
  1474                           ;lcd_hd44780_pic16.c: 157: {
  1475                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  1476  00134A  8C83               	bsf	3971,6,c	;volatile
  1477                           
  1478                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  1479                           
  1480                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1481  00134C  CF83 F0A8          	movff	3971,LCDBusyLoop@status	;volatile
  1482                           
  1483                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  1484  001350  0100               	movlb	0	; () banked
  1485  001352  39A8               	swapf	LCDBusyLoop@status& (0+255),w,b
  1486  001354  0BF0               	andlw	240
  1487  001356  0100               	movlb	0	; () banked
  1488  001358  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1489                           
  1490                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1494  00135A  9C83               	bcf	3971,6,c	;volatile
  1495                           
  1496                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  1497                           
  1498                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1499  00135C  8C83               	bsf	3971,6,c	;volatile
  1500                           
  1501                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  1502                           
  1503                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1504  00135E  CF83 F0A7          	movff	3971,LCDBusyLoop@temp	;volatile
  1505                           
  1506                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  1507  001362  0E0F               	movlw	15
  1508  001364  0100               	movlb	0	; () banked
  1509  001366  17A7               	andwf	LCDBusyLoop@temp& (0+255),f,b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  1513  001368  0100               	movlb	0	; () banked
  1514  00136A  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  1515  00136C  0100               	movlb	0	; () banked
  1516  00136E  11A7               	iorwf	LCDBusyLoop@temp& (0+255),w,b
  1517  001370  0100               	movlb	0	; () banked
  1518  001372  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  1522  001374  0100               	movlb	0	; () banked
  1523  001376  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  1524  001378  0B80               	andlw	128
  1525  00137A  0100               	movlb	0	; () banked
  1526  00137C  6FA6               	movwf	LCDBusyLoop@busy& (0+255),b
  1527                           
  1528                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1532  00137E  9C83               	bcf	3971,6,c	;volatile
  1533                           
  1534                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  1535                           
  1536                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1537  001380  0100               	movlb	0	; () banked
  1538  001382  51A6               	movf	LCDBusyLoop@busy& (0+255),w,b
  1539  001384  0100               	movlb	0	; () banked
  1540  001386  A4D8               	btfss	status,2,c
  1541  001388  D7E0               	goto	l2477
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  1545  00138A  9A83               	bcf	3971,5,c	;volatile
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  1549  00138C  0EF0               	movlw	240
  1550  00138E  1695               	andwf	3989,f,c	;volatile
  1551                           
  1552                           ; BSR set to: 0
  1553  001390  0012               	return		;funcret
  1554  001392                     __end_of_LCDBusyLoop:
  1555                           	opt stack 0
  1556                           tblptru	equ	0xFF8
  1557                           tblptrh	equ	0xFF7
  1558                           tblptrl	equ	0xFF6
  1559                           tablat	equ	0xFF5
  1560                           prodh	equ	0xFF4
  1561                           prodl	equ	0xFF3
  1562                           intcon	equ	0xFF2
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1l	equ	0xFE1
  1567                           indf2	equ	0xFDF
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _Go *****************
  1573 ;; Defined at:
  1574 ;;		line 23 in file "driver.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  SpeedRight      2   16[BANK0 ] int 
  1579 ;;  SpeedLeft       2   14[BANK0 ] int 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1589 ;;      Params:         0       0       0       0       0       0       0
  1590 ;;      Locals:         0       4       0       0       0       0       0
  1591 ;;      Temps:          0       2       0       0       0       0       0
  1592 ;;      Totals:         0       6       0       0       0       0       0
  1593 ;;Total ram usage:        6 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:   10
  1596 ;; This function calls:
  1597 ;;		_ReadDistanceCentral
  1598 ;;		_ReadDistanceLeft
  1599 ;;		_ReadDistanceRight
  1600 ;;		_ReadMode
  1601 ;;		_ReadParallel
  1602 ;;		_ReadParallelSpeedLeft
  1603 ;;		_ReadParallelSpeedRight
  1604 ;;		_SetMotorLeft
  1605 ;;		_SetMotorRight
  1606 ;;		_TurnLeft135
  1607 ;;		_TurnLeft90
  1608 ;;		_TurnRight135
  1609 ;;		_TurnRight90
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text7
  1616  0007C0                     __ptext7:
  1617                           	opt stack 0
  1618  0007C0                     _Go:
  1619                           	opt stack 20
  1620                           
  1621                           ;driver.c: 24: ReadParallel();
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;incstack = 0
  1625  0007C0  EC46  F009         	call	_ReadParallel	;wreg free
  1626                           
  1627                           ;driver.c: 28: if(ReadMode()==0){
  1628  0007C4  ECE2  F00B         	call	_ReadMode	;wreg free
  1629  0007C8  0100               	movlb	0	; () banked
  1630  0007CA  51A6               	movf	?_ReadMode& (0+255),w,b
  1631  0007CC  0100               	movlb	0	; () banked
  1632  0007CE  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1633  0007D0  A4D8               	btfss	status,2,c
  1634  0007D2  D067               	goto	l3007
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;driver.c: 29: signed int SpeedLeft, SpeedRight;
  1638                           ;driver.c: 30: SpeedLeft=ReadParallelSpeedLeft();
  1639  0007D4  ECDD  F00B         	call	_ReadParallelSpeedLeft	;wreg free
  1640  0007D8  C0A6  F0B4         	movff	?_ReadParallelSpeedLeft,Go@SpeedLeft
  1641  0007DC  C0A7  F0B5         	movff	?_ReadParallelSpeedLeft+1,Go@SpeedLeft+1
  1642                           
  1643                           ;driver.c: 31: SpeedRight=ReadParallelSpeedRight();
  1644  0007E0  ECD8  F00B         	call	_ReadParallelSpeedRight	;wreg free
  1645  0007E4  C0A6  F0B6         	movff	?_ReadParallelSpeedRight,Go@SpeedRight
  1646  0007E8  C0A7  F0B7         	movff	?_ReadParallelSpeedRight+1,Go@SpeedRight+1
  1647                           
  1648                           ;driver.c: 33: if(SpeedRight>0 && SpeedLeft>0){
  1649  0007EC  0100               	movlb	0	; () banked
  1650  0007EE  BFB7               	btfsc	(Go@SpeedRight+1)& (0+255),7,b
  1651  0007F0  D04B               	goto	l3005
  1652  0007F2  0100               	movlb	0	; () banked
  1653  0007F4  51B7               	movf	(Go@SpeedRight+1)& (0+255),w,b
  1654  0007F6  E104               	bnz	u1820
  1655  0007F8  0100               	movlb	0	; () banked
  1656  0007FA  05B6               	decf	Go@SpeedRight& (0+255),w,b
  1657  0007FC  A0D8               	btfss	status,0,c
  1658  0007FE  D044               	goto	l3005
  1659  000800                     u1820:
  1660                           
  1661                           ; BSR set to: 0
  1662  000800  0100               	movlb	0	; () banked
  1663  000802  BFB5               	btfsc	(Go@SpeedLeft+1)& (0+255),7,b
  1664  000804  D041               	goto	l3005
  1665  000806  0100               	movlb	0	; () banked
  1666  000808  51B5               	movf	(Go@SpeedLeft+1)& (0+255),w,b
  1667  00080A  E104               	bnz	u1830
  1668  00080C  0100               	movlb	0	; () banked
  1669  00080E  05B4               	decf	Go@SpeedLeft& (0+255),w,b
  1670  000810  A0D8               	btfss	status,0,c
  1671  000812  D03A               	goto	l3005
  1672  000814                     u1830:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;driver.c: 34: if ((ReadDistanceCentral()<37) || (ReadDistanceRight()<30) || (ReadDistan
      +                          ceLeft()<30)){
  1676  000814  ECF1  F00B         	call	_ReadDistanceCentral	;wreg free
  1677  000818  0100               	movlb	0	; () banked
  1678  00081A  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1679  00081C  E105               	bnz	u1840
  1680  00081E  0E25               	movlw	37
  1681  000820  0100               	movlb	0	; () banked
  1682  000822  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1683  000824  A0D8               	btfss	status,0,c
  1684  000826  D014               	goto	l3001
  1685  000828                     u1840:
  1686                           
  1687                           ; BSR set to: 0
  1688  000828  ECE7  F00B         	call	_ReadDistanceRight	;wreg free
  1689  00082C  0100               	movlb	0	; () banked
  1690  00082E  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1691  000830  E105               	bnz	u1850
  1692  000832  0E1E               	movlw	30
  1693  000834  0100               	movlb	0	; () banked
  1694  000836  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1695  000838  A0D8               	btfss	status,0,c
  1696  00083A  D00A               	goto	l3001
  1697  00083C                     u1850:
  1698                           
  1699                           ; BSR set to: 0
  1700  00083C  ECEC  F00B         	call	_ReadDistanceLeft	;wreg free
  1701  000840  0100               	movlb	0	; () banked
  1702  000842  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1703  000844  E114               	bnz	l3003
  1704  000846  0E1E               	movlw	30
  1705  000848  0100               	movlb	0	; () banked
  1706  00084A  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1707  00084C  B0D8               	btfsc	status,0,c
  1708  00084E  D00F               	goto	l3003
  1709  000850                     l3001:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;driver.c: 35: SetMotorLeft(0);
  1713  000850  0E00               	movlw	0
  1714  000852  0100               	movlb	0	; () banked
  1715  000854  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1716  000856  0E00               	movlw	0
  1717  000858  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1718  00085A  EC32  F00A         	call	_SetMotorLeft	;wreg free
  1719                           
  1720                           ;driver.c: 36: SetMotorRight(0);
  1721  00085E  0E00               	movlw	0
  1722  000860  0100               	movlb	0	; () banked
  1723  000862  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1724  000864  0E00               	movlw	0
  1725  000866  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1726  000868  EC0F  F00A         	call	_SetMotorRight	;wreg free
  1727                           
  1728                           ;driver.c: 37: }else{
  1729  00086C  0012               	return	
  1730  00086E                     l3003:
  1731                           
  1732                           ;driver.c: 38: SetMotorLeft (SpeedLeft);
  1733  00086E  C0B4  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1734  000872  C0B5  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1735  000876  EC32  F00A         	call	_SetMotorLeft	;wreg free
  1736                           
  1737                           ;driver.c: 39: SetMotorRight(SpeedRight);
  1738  00087A  C0B6  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1739  00087E  C0B7  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1740  000882  EC0F  F00A         	call	_SetMotorRight	;wreg free
  1741                           
  1742                           ;driver.c: 40: }
  1743                           ;driver.c: 41: }else{
  1744  000886  0012               	return	
  1745  000888                     l3005:
  1746                           
  1747                           ;driver.c: 42: SetMotorLeft (SpeedLeft);
  1748  000888  C0B4  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1749  00088C  C0B5  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1750  000890  EC32  F00A         	call	_SetMotorLeft	;wreg free
  1751                           
  1752                           ;driver.c: 43: SetMotorRight(SpeedRight);
  1753  000894  C0B6  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1754  000898  C0B7  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1755  00089C  EC0F  F00A         	call	_SetMotorRight	;wreg free
  1756                           
  1757                           ;driver.c: 44: }
  1758                           ;driver.c: 46: }else if (ReadMode()==1){
  1759  0008A0  0012               	return	
  1760  0008A2                     l3007:
  1761  0008A2  ECE2  F00B         	call	_ReadMode	;wreg free
  1762  0008A6  0100               	movlb	0	; () banked
  1763  0008A8  05A6               	decf	?_ReadMode& (0+255),w,b
  1764  0008AA  0100               	movlb	0	; () banked
  1765  0008AC  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1766  0008AE  A4D8               	btfss	status,2,c
  1767  0008B0  0012               	return	
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;driver.c: 48: if (ReadDistanceCentral()<37){
  1771  0008B2  ECF1  F00B         	call	_ReadDistanceCentral	;wreg free
  1772  0008B6  0100               	movlb	0	; () banked
  1773  0008B8  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1774  0008BA  E11D               	bnz	l3017
  1775  0008BC  0E25               	movlw	37
  1776  0008BE  0100               	movlb	0	; () banked
  1777  0008C0  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1778  0008C2  B0D8               	btfsc	status,0,c
  1779  0008C4  D018               	goto	l3017
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;driver.c: 49: if(ReadDistanceRight()>ReadDistanceLeft()){
  1783  0008C6  ECEC  F00B         	call	_ReadDistanceLeft	;wreg free
  1784  0008CA  C0A6  F0B2         	movff	?_ReadDistanceLeft,??_Go
  1785  0008CE  C0A7  F0B3         	movff	?_ReadDistanceLeft+1,??_Go+1
  1786  0008D2  ECE7  F00B         	call	_ReadDistanceRight	;wreg free
  1787  0008D6  0100               	movlb	0	; () banked
  1788  0008D8  51A6               	movf	?_ReadDistanceRight& (0+255),w,b
  1789  0008DA  0100               	movlb	0	; () banked
  1790  0008DC  5DB2               	subwf	??_Go& (0+255),w,b
  1791  0008DE  0100               	movlb	0	; () banked
  1792  0008E0  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1793  0008E2  0100               	movlb	0	; () banked
  1794  0008E4  59B3               	subwfb	(??_Go+1)& (0+255),w,b
  1795  0008E6  B0D8               	btfsc	status,0,c
  1796  0008E8  D003               	goto	l3015
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;driver.c: 50: TurnRight135();
  1800  0008EA  EC22  F00B         	call	_TurnRight135	;wreg free
  1801                           
  1802                           ;driver.c: 51: }else{
  1803  0008EE  0012               	return	
  1804  0008F0                     l3015:
  1805                           
  1806                           ;driver.c: 52: TurnLeft135();
  1807  0008F0  EC54  F00B         	call	_TurnLeft135	;wreg free
  1808                           
  1809                           ;driver.c: 53: }
  1810                           ;driver.c: 54: }else if (ReadDistanceRight()<30){
  1811  0008F4  0012               	return	
  1812  0008F6                     l3017:
  1813  0008F6  ECE7  F00B         	call	_ReadDistanceRight	;wreg free
  1814  0008FA  0100               	movlb	0	; () banked
  1815  0008FC  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1816  0008FE  E108               	bnz	l3021
  1817  000900  0E1E               	movlw	30
  1818  000902  0100               	movlb	0	; () banked
  1819  000904  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1820  000906  B0D8               	btfsc	status,0,c
  1821  000908  D003               	goto	l3021
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;driver.c: 55: TurnLeft90();
  1825  00090A  EC3B  F00B         	call	_TurnLeft90	;wreg free
  1826                           
  1827                           ;driver.c: 56: }else if (ReadDistanceLeft()<30){
  1828  00090E  0012               	return	
  1829  000910                     l3021:
  1830  000910  ECEC  F00B         	call	_ReadDistanceLeft	;wreg free
  1831  000914  0100               	movlb	0	; () banked
  1832  000916  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1833  000918  E108               	bnz	l3025
  1834  00091A  0E1E               	movlw	30
  1835  00091C  0100               	movlb	0	; () banked
  1836  00091E  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1837  000920  B0D8               	btfsc	status,0,c
  1838  000922  D003               	goto	l3025
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;driver.c: 57: TurnRight90();
  1842  000924  EC09  F00B         	call	_TurnRight90	;wreg free
  1843                           
  1844                           ;driver.c: 58: }else{
  1845  000928  0012               	return	
  1846  00092A                     l3025:
  1847                           
  1848                           ;driver.c: 59: SetMotorRight(40);
  1849  00092A  0E00               	movlw	0
  1850  00092C  0100               	movlb	0	; () banked
  1851  00092E  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1852  000930  0E28               	movlw	40
  1853  000932  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1854  000934  EC0F  F00A         	call	_SetMotorRight	;wreg free
  1855                           
  1856                           ;driver.c: 60: SetMotorLeft(40);
  1857  000938  0E00               	movlw	0
  1858  00093A  0100               	movlb	0	; () banked
  1859  00093C  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1860  00093E  0E28               	movlw	40
  1861  000940  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1862  000942  EC32  F00A         	call	_SetMotorLeft	;wreg free
  1863  000946  0012               	return	
  1864  000948                     __end_of_Go:
  1865                           	opt stack 0
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           prodh	equ	0xFF4
  1871                           prodl	equ	0xFF3
  1872                           intcon	equ	0xFF2
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1l	equ	0xFE1
  1877                           indf2	equ	0xFDF
  1878                           fsr2h	equ	0xFDA
  1879                           fsr2l	equ	0xFD9
  1880                           status	equ	0xFD8
  1881                           
  1882 ;; *************** function _TurnRight90 *****************
  1883 ;; Defined at:
  1884 ;;		line 69 in file "driver.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         0       0       0       0       0       0       0
  1899 ;;      Locals:         0       0       0       0       0       0       0
  1900 ;;      Temps:          0       1       0       0       0       0       0
  1901 ;;      Totals:         0       1       0       0       0       0       0
  1902 ;;Total ram usage:        1 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    9
  1905 ;; This function calls:
  1906 ;;		_SetMotorLeft
  1907 ;;		_SetMotorRight
  1908 ;; This function is called by:
  1909 ;;		_Go
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text8
  1914  001612                     __ptext8:
  1915                           	opt stack 0
  1916  001612                     _TurnRight90:
  1917                           	opt stack 20
  1918                           
  1919                           ;driver.c: 70: SetMotorRight(-100);
  1920                           
  1921                           ;incstack = 0
  1922  001612  0EFF               	movlw	255
  1923  001614  0100               	movlb	0	; () banked
  1924  001616  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1925  001618  0E9C               	movlw	156
  1926  00161A  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1927  00161C  EC0F  F00A         	call	_SetMotorRight	;wreg free
  1928                           
  1929                           ;driver.c: 71: SetMotorLeft(100);
  1930  001620  0E00               	movlw	0
  1931  001622  0100               	movlb	0	; () banked
  1932  001624  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1933  001626  0E64               	movlw	100
  1934  001628  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1935  00162A  EC32  F00A         	call	_SetMotorLeft	;wreg free
  1936                           
  1937                           ;driver.c: 72: _delay((unsigned long)((100)*(1000000/4000.0)));
  1938  00162E  0E21               	movlw	33
  1939  001630  0100               	movlb	0	; () banked
  1940  001632  6FB1               	movwf	??_TurnRight90& (0+255),b
  1941  001634  0E76               	movlw	118
  1942  001636                     u1987:
  1943  001636  2EE8               	decfsz	wreg,f,c
  1944  001638  D7FE               	goto	u1987
  1945  00163A  2FB1               	decfsz	??_TurnRight90& (0+255),f,b
  1946  00163C  D7FC               	goto	u1987
  1947  00163E  F000 F000          	nop2	
  1948  001642  0012               	return		;funcret
  1949  001644                     __end_of_TurnRight90:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           prodh	equ	0xFF4
  1956                           prodl	equ	0xFF3
  1957                           intcon	equ	0xFF2
  1958                           postinc0	equ	0xFEE
  1959                           wreg	equ	0xFE8
  1960                           postdec1	equ	0xFE5
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function _TurnRight135 *****************
  1968 ;; Defined at:
  1969 ;;		line 81 in file "driver.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  1    wreg      void 
  1976 ;; Registers used:
  1977 ;;		wreg, status,2, status,0, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1983 ;;      Params:         0       0       0       0       0       0       0
  1984 ;;      Locals:         0       0       0       0       0       0       0
  1985 ;;      Temps:          0       1       0       0       0       0       0
  1986 ;;      Totals:         0       1       0       0       0       0       0
  1987 ;;Total ram usage:        1 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    9
  1990 ;; This function calls:
  1991 ;;		_SetMotorLeft
  1992 ;;		_SetMotorRight
  1993 ;; This function is called by:
  1994 ;;		_Go
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text9
  1999  001644                     __ptext9:
  2000                           	opt stack 0
  2001  001644                     _TurnRight135:
  2002                           	opt stack 20
  2003                           
  2004                           ;driver.c: 82: SetMotorRight(-100);
  2005                           
  2006                           ;incstack = 0
  2007  001644  0EFF               	movlw	255
  2008  001646  0100               	movlb	0	; () banked
  2009  001648  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2010  00164A  0E9C               	movlw	156
  2011  00164C  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2012  00164E  EC0F  F00A         	call	_SetMotorRight	;wreg free
  2013                           
  2014                           ;driver.c: 83: SetMotorLeft(100);
  2015  001652  0E00               	movlw	0
  2016  001654  0100               	movlb	0	; () banked
  2017  001656  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2018  001658  0E64               	movlw	100
  2019  00165A  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2020  00165C  EC32  F00A         	call	_SetMotorLeft	;wreg free
  2021                           
  2022                           ;driver.c: 84: _delay((unsigned long)((150)*(1000000/4000.0)));
  2023  001660  0E31               	movlw	49
  2024  001662  0100               	movlb	0	; () banked
  2025  001664  6FB1               	movwf	??_TurnRight135& (0+255),b
  2026  001666  0EB2               	movlw	178
  2027  001668                     u1997:
  2028  001668  2EE8               	decfsz	wreg,f,c
  2029  00166A  D7FE               	goto	u1997
  2030  00166C  2FB1               	decfsz	??_TurnRight135& (0+255),f,b
  2031  00166E  D7FC               	goto	u1997
  2032  001670  F000 F000          	nop2	
  2033  001674  0012               	return		;funcret
  2034  001676                     __end_of_TurnRight135:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           prodh	equ	0xFF4
  2041                           prodl	equ	0xFF3
  2042                           intcon	equ	0xFF2
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1l	equ	0xFE1
  2047                           indf2	equ	0xFDF
  2048                           fsr2h	equ	0xFDA
  2049                           fsr2l	equ	0xFD9
  2050                           status	equ	0xFD8
  2051                           
  2052 ;; *************** function _TurnLeft90 *****************
  2053 ;; Defined at:
  2054 ;;		line 75 in file "driver.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;		None
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2068 ;;      Params:         0       0       0       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0
  2070 ;;      Temps:          0       1       0       0       0       0       0
  2071 ;;      Totals:         0       1       0       0       0       0       0
  2072 ;;Total ram usage:        1 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    9
  2075 ;; This function calls:
  2076 ;;		_SetMotorLeft
  2077 ;;		_SetMotorRight
  2078 ;; This function is called by:
  2079 ;;		_Go
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text10
  2084  001676                     __ptext10:
  2085                           	opt stack 0
  2086  001676                     _TurnLeft90:
  2087                           	opt stack 20
  2088                           
  2089                           ;driver.c: 76: SetMotorRight(100);
  2090                           
  2091                           ;incstack = 0
  2092  001676  0E00               	movlw	0
  2093  001678  0100               	movlb	0	; () banked
  2094  00167A  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2095  00167C  0E64               	movlw	100
  2096  00167E  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2097  001680  EC0F  F00A         	call	_SetMotorRight	;wreg free
  2098                           
  2099                           ;driver.c: 77: SetMotorLeft(-100);
  2100  001684  0EFF               	movlw	255
  2101  001686  0100               	movlb	0	; () banked
  2102  001688  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2103  00168A  0E9C               	movlw	156
  2104  00168C  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2105  00168E  EC32  F00A         	call	_SetMotorLeft	;wreg free
  2106                           
  2107                           ;driver.c: 78: _delay((unsigned long)((100)*(1000000/4000.0)));
  2108  001692  0E21               	movlw	33
  2109  001694  0100               	movlb	0	; () banked
  2110  001696  6FB1               	movwf	??_TurnLeft90& (0+255),b
  2111  001698  0E76               	movlw	118
  2112  00169A                     u2007:
  2113  00169A  2EE8               	decfsz	wreg,f,c
  2114  00169C  D7FE               	goto	u2007
  2115  00169E  2FB1               	decfsz	??_TurnLeft90& (0+255),f,b
  2116  0016A0  D7FC               	goto	u2007
  2117  0016A2  F000 F000          	nop2	
  2118  0016A6  0012               	return		;funcret
  2119  0016A8                     __end_of_TurnLeft90:
  2120                           	opt stack 0
  2121                           tblptru	equ	0xFF8
  2122                           tblptrh	equ	0xFF7
  2123                           tblptrl	equ	0xFF6
  2124                           tablat	equ	0xFF5
  2125                           prodh	equ	0xFF4
  2126                           prodl	equ	0xFF3
  2127                           intcon	equ	0xFF2
  2128                           postinc0	equ	0xFEE
  2129                           wreg	equ	0xFE8
  2130                           postdec1	equ	0xFE5
  2131                           fsr1l	equ	0xFE1
  2132                           indf2	equ	0xFDF
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _TurnLeft135 *****************
  2138 ;; Defined at:
  2139 ;;		line 87 in file "driver.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg, status,2, status,0, cstack
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2153 ;;      Params:         0       0       0       0       0       0       0
  2154 ;;      Locals:         0       0       0       0       0       0       0
  2155 ;;      Temps:          0       1       0       0       0       0       0
  2156 ;;      Totals:         0       1       0       0       0       0       0
  2157 ;;Total ram usage:        1 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    9
  2160 ;; This function calls:
  2161 ;;		_SetMotorLeft
  2162 ;;		_SetMotorRight
  2163 ;; This function is called by:
  2164 ;;		_Go
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text11
  2169  0016A8                     __ptext11:
  2170                           	opt stack 0
  2171  0016A8                     _TurnLeft135:
  2172                           	opt stack 20
  2173                           
  2174                           ;driver.c: 88: SetMotorRight(100);
  2175                           
  2176                           ;incstack = 0
  2177  0016A8  0E00               	movlw	0
  2178  0016AA  0100               	movlb	0	; () banked
  2179  0016AC  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2180  0016AE  0E64               	movlw	100
  2181  0016B0  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2182  0016B2  EC0F  F00A         	call	_SetMotorRight	;wreg free
  2183                           
  2184                           ;driver.c: 89: SetMotorLeft(-100);
  2185  0016B6  0EFF               	movlw	255
  2186  0016B8  0100               	movlb	0	; () banked
  2187  0016BA  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2188  0016BC  0E9C               	movlw	156
  2189  0016BE  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2190  0016C0  EC32  F00A         	call	_SetMotorLeft	;wreg free
  2191                           
  2192                           ;driver.c: 90: _delay((unsigned long)((150)*(1000000/4000.0)));
  2193  0016C4  0E31               	movlw	49
  2194  0016C6  0100               	movlb	0	; () banked
  2195  0016C8  6FB1               	movwf	??_TurnLeft135& (0+255),b
  2196  0016CA  0EB2               	movlw	178
  2197  0016CC                     u2017:
  2198  0016CC  2EE8               	decfsz	wreg,f,c
  2199  0016CE  D7FE               	goto	u2017
  2200  0016D0  2FB1               	decfsz	??_TurnLeft135& (0+255),f,b
  2201  0016D2  D7FC               	goto	u2017
  2202  0016D4  F000 F000          	nop2	
  2203  0016D8  0012               	return		;funcret
  2204  0016DA                     __end_of_TurnLeft135:
  2205                           	opt stack 0
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           postinc0	equ	0xFEE
  2214                           wreg	equ	0xFE8
  2215                           postdec1	equ	0xFE5
  2216                           fsr1l	equ	0xFE1
  2217                           indf2	equ	0xFDF
  2218                           fsr2h	equ	0xFDA
  2219                           fsr2l	equ	0xFD9
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _SetMotorRight *****************
  2223 ;; Defined at:
  2224 ;;		line 61 in file "motors.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  speed           2    9[BANK0 ] int 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;		None
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2, status,0, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2238 ;;      Params:         0       2       0       0       0       0       0
  2239 ;;      Locals:         0       0       0       0       0       0       0
  2240 ;;      Temps:          0       0       0       0       0       0       0
  2241 ;;      Totals:         0       2       0       0       0       0       0
  2242 ;;Total ram usage:        2 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    8
  2245 ;; This function calls:
  2246 ;;		_SetPWMMotorRight
  2247 ;;		_abs
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;;		_Go
  2251 ;;		_TurnRight90
  2252 ;;		_TurnLeft90
  2253 ;;		_TurnRight135
  2254 ;;		_TurnLeft135
  2255 ;;		_Turn180
  2256 ;;		_GoBack
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text12
  2261  00141E                     __ptext12:
  2262                           	opt stack 0
  2263  00141E                     _SetMotorRight:
  2264                           	opt stack 22
  2265                           
  2266                           ;motors.c: 63: MotorRightSpeed=speed;
  2267                           
  2268                           ;incstack = 0
  2269  00141E  C0AF  F0C1         	movff	SetMotorRight@speed,_MotorRightSpeed
  2270  001422  C0B0  F0C2         	movff	SetMotorRight@speed+1,_MotorRightSpeed+1
  2271                           
  2272                           ;motors.c: 65: if(speed>0){
  2273  001426  0100               	movlb	0	; () banked
  2274  001428  BFB0               	btfsc	(SetMotorRight@speed+1)& (0+255),7,b
  2275  00142A  D00A               	goto	l2379
  2276  00142C  0100               	movlb	0	; () banked
  2277  00142E  51B0               	movf	(SetMotorRight@speed+1)& (0+255),w,b
  2278  001430  E104               	bnz	u1190
  2279  001432  0100               	movlb	0	; () banked
  2280  001434  05AF               	decf	SetMotorRight@speed& (0+255),w,b
  2281  001436  A0D8               	btfss	status,0,c
  2282  001438  D003               	goto	l2379
  2283  00143A                     u1190:
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;motors.c: 67: RC2=1;
  2287  00143A  8482               	bsf	3970,2,c	;volatile
  2288                           
  2289                           ;motors.c: 68: RC3=0;
  2290  00143C  9682               	bcf	3970,3,c	;volatile
  2291                           
  2292                           ;motors.c: 69: }else if (speed<0){
  2293  00143E  D005               	goto	l2383
  2294  001440                     l2379:
  2295                           
  2296                           ; BSR set to: 0
  2297  001440  0100               	movlb	0	; () banked
  2298  001442  AFB0               	btfss	(SetMotorRight@speed+1)& (0+255),7,b
  2299  001444  D002               	goto	l2383
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;motors.c: 71: RC2=0;
  2303  001446  9482               	bcf	3970,2,c	;volatile
  2304                           
  2305                           ;motors.c: 72: RC3=1;
  2306  001448  8682               	bsf	3970,3,c	;volatile
  2307  00144A                     l2383:
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;motors.c: 73: }
  2311                           ;motors.c: 76: SetPWMMotorRight(abs(speed));
  2312  00144A  C0AF  F0A6         	movff	SetMotorRight@speed,abs@a
  2313  00144E  C0B0  F0A7         	movff	SetMotorRight@speed+1,abs@a+1
  2314  001452  EC6D  F00B         	call	_abs	;wreg free
  2315  001456  C0A6  F0AD         	movff	?_abs,SetPWMMotorRight@percentage
  2316  00145A  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorRight@percentage+1
  2317  00145E  ECD3  F00A         	call	_SetPWMMotorRight	;wreg free
  2318  001462  0012               	return		;funcret
  2319  001464                     __end_of_SetMotorRight:
  2320                           	opt stack 0
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           intcon	equ	0xFF2
  2328                           postinc0	equ	0xFEE
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _SetPWMMotorRight *****************
  2338 ;; Defined at:
  2339 ;;		line 43 in file "TimerPWM.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  percentage      2    7[BANK0 ] unsigned int 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2353 ;;      Params:         0       2       0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0
  2356 ;;      Totals:         0       2       0       0       0       0       0
  2357 ;;Total ram usage:        2 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    7
  2360 ;; This function calls:
  2361 ;;		___lwdiv
  2362 ;; This function is called by:
  2363 ;;		_MotorInit
  2364 ;;		_SetMotorRight
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text13
  2369  0015A6                     __ptext13:
  2370                           	opt stack 0
  2371  0015A6                     _SetPWMMotorRight:
  2372                           	opt stack 22
  2373                           
  2374                           ;TimerPWM.c: 44: PWMRight=20-percentage/5;
  2375                           
  2376                           ;incstack = 0
  2377  0015A6  C0AD  F0A6         	movff	SetPWMMotorRight@percentage,___lwdiv@dividend
  2378  0015AA  C0AE  F0A7         	movff	SetPWMMotorRight@percentage+1,___lwdiv@dividend+1
  2379  0015AE  0E00               	movlw	0
  2380  0015B0  0100               	movlb	0	; () banked
  2381  0015B2  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2382  0015B4  0E05               	movlw	5
  2383  0015B6  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2384  0015B8  ECF2  F007         	call	___lwdiv	;wreg free
  2385  0015BC  0100               	movlb	0	; () banked
  2386  0015BE  1FA6               	comf	?___lwdiv& (0+255),f,b
  2387  0015C0  0100               	movlb	0	; () banked
  2388  0015C2  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2389  0015C4  0100               	movlb	0	; () banked
  2390  0015C6  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2391  0015C8  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2392  0015CA  0E14               	movlw	20
  2393  0015CC  0100               	movlb	0	; () banked
  2394  0015CE  25A6               	addwf	?___lwdiv& (0+255),w,b
  2395  0015D0  6E5D               	movwf	_PWMRight,c
  2396  0015D2  0E00               	movlw	0
  2397  0015D4  0100               	movlb	0	; () banked
  2398  0015D6  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2399  0015D8  6E5E               	movwf	_PWMRight+1,c
  2400                           
  2401                           ; BSR set to: 0
  2402  0015DA  0012               	return		;funcret
  2403  0015DC                     __end_of_SetPWMMotorRight:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           intcon	equ	0xFF2
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           indf2	equ	0xFDF
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _SetMotorLeft *****************
  2422 ;; Defined at:
  2423 ;;		line 41 in file "motors.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  speed           2    9[BANK0 ] int 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2437 ;;      Params:         0       2       0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0
  2440 ;;      Totals:         0       2       0       0       0       0       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    8
  2444 ;; This function calls:
  2445 ;;		_SetPWMMotorLeft
  2446 ;;		_abs
  2447 ;; This function is called by:
  2448 ;;		_main
  2449 ;;		_Go
  2450 ;;		_TurnRight90
  2451 ;;		_TurnLeft90
  2452 ;;		_TurnRight135
  2453 ;;		_TurnLeft135
  2454 ;;		_Turn180
  2455 ;;		_GoBack
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text14
  2460  001464                     __ptext14:
  2461                           	opt stack 0
  2462  001464                     _SetMotorLeft:
  2463                           	opt stack 22
  2464                           
  2465                           ;motors.c: 43: MotorLeftSpeed=speed;
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;incstack = 0
  2469  001464  C0AF  F0BF         	movff	SetMotorLeft@speed,_MotorLeftSpeed
  2470  001468  C0B0  F0C0         	movff	SetMotorLeft@speed+1,_MotorLeftSpeed+1
  2471                           
  2472                           ;motors.c: 45: if(speed>0){
  2473  00146C  0100               	movlb	0	; () banked
  2474  00146E  BFB0               	btfsc	(SetMotorLeft@speed+1)& (0+255),7,b
  2475  001470  D00A               	goto	l2367
  2476  001472  0100               	movlb	0	; () banked
  2477  001474  51B0               	movf	(SetMotorLeft@speed+1)& (0+255),w,b
  2478  001476  E104               	bnz	u1170
  2479  001478  0100               	movlb	0	; () banked
  2480  00147A  05AF               	decf	SetMotorLeft@speed& (0+255),w,b
  2481  00147C  A0D8               	btfss	status,0,c
  2482  00147E  D003               	goto	l2367
  2483  001480                     u1170:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;motors.c: 47: RC0=1;
  2487  001480  8082               	bsf	3970,0,c	;volatile
  2488                           
  2489                           ;motors.c: 48: RC1=0;
  2490  001482  9282               	bcf	3970,1,c	;volatile
  2491                           
  2492                           ;motors.c: 49: }else if (speed<0){
  2493  001484  D005               	goto	l2371
  2494  001486                     l2367:
  2495                           
  2496                           ; BSR set to: 0
  2497  001486  0100               	movlb	0	; () banked
  2498  001488  AFB0               	btfss	(SetMotorLeft@speed+1)& (0+255),7,b
  2499  00148A  D002               	goto	l2371
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;motors.c: 51: RC0=0;
  2503  00148C  9082               	bcf	3970,0,c	;volatile
  2504                           
  2505                           ;motors.c: 52: RC1=1;
  2506  00148E  8282               	bsf	3970,1,c	;volatile
  2507  001490                     l2371:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;motors.c: 53: }
  2511                           ;motors.c: 56: SetPWMMotorLeft(abs(speed));
  2512  001490  C0AF  F0A6         	movff	SetMotorLeft@speed,abs@a
  2513  001494  C0B0  F0A7         	movff	SetMotorLeft@speed+1,abs@a+1
  2514  001498  EC6D  F00B         	call	_abs	;wreg free
  2515  00149C  C0A6  F0AD         	movff	?_abs,SetPWMMotorLeft@percentage
  2516  0014A0  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorLeft@percentage+1
  2517  0014A4  ECEE  F00A         	call	_SetPWMMotorLeft	;wreg free
  2518  0014A8  0012               	return		;funcret
  2519  0014AA                     __end_of_SetMotorLeft:
  2520                           	opt stack 0
  2521                           tblptru	equ	0xFF8
  2522                           tblptrh	equ	0xFF7
  2523                           tblptrl	equ	0xFF6
  2524                           tablat	equ	0xFF5
  2525                           prodh	equ	0xFF4
  2526                           prodl	equ	0xFF3
  2527                           intcon	equ	0xFF2
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postdec1	equ	0xFE5
  2531                           fsr1l	equ	0xFE1
  2532                           indf2	equ	0xFDF
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _abs *****************
  2538 ;; Defined at:
  2539 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\abs.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  a               2    0[BANK0 ] int 
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  2    0[BANK0 ] int 
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2553 ;;      Params:         0       2       0       0       0       0       0
  2554 ;;      Locals:         0       0       0       0       0       0       0
  2555 ;;      Temps:          0       2       0       0       0       0       0
  2556 ;;      Totals:         0       4       0       0       0       0       0
  2557 ;;Total ram usage:        4 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    6
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		_SetMotorLeft
  2564 ;;		_SetMotorRight
  2565 ;; This function uses a non-reentrant model
  2566 ;;
  2567                           
  2568                           	psect	text15
  2569  0016DA                     __ptext15:
  2570                           	opt stack 0
  2571  0016DA                     _abs:
  2572                           	opt stack 23
  2573                           
  2574                           ;incstack = 0
  2575  0016DA  0100               	movlb	0	; () banked
  2576  0016DC  AFA7               	btfss	(abs@a+1)& (0+255),7,b
  2577  0016DE  D00E               	goto	l559
  2578                           
  2579                           ; BSR set to: 0
  2580  0016E0  C0A6  F0A8         	movff	abs@a,??_abs
  2581  0016E4  C0A7  F0A9         	movff	abs@a+1,??_abs+1
  2582  0016E8  0100               	movlb	0	; () banked
  2583  0016EA  1FA8               	comf	??_abs& (0+255),f,b
  2584  0016EC  1FA9               	comf	(??_abs+1)& (0+255),f,b
  2585  0016EE  4BA8               	infsnz	??_abs& (0+255),f,b
  2586  0016F0  2BA9               	incf	(??_abs+1)& (0+255),f,b
  2587  0016F2  C0A8  F0A6         	movff	??_abs,?_abs
  2588  0016F6  C0A9  F0A7         	movff	??_abs+1,?_abs+1
  2589  0016FA  0012               	return	
  2590  0016FC                     l559:
  2591                           
  2592                           ; BSR set to: 0
  2593  0016FC  C0A6  F0A6         	movff	abs@a,?_abs
  2594  001700  C0A7  F0A7         	movff	abs@a+1,?_abs+1
  2595                           
  2596                           ; BSR set to: 0
  2597  001704  0012               	return		;funcret
  2598  001706                     __end_of_abs:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           wreg	equ	0xFE8
  2609                           postdec1	equ	0xFE5
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           status	equ	0xFD8
  2615                           
  2616 ;; *************** function _SetPWMMotorLeft *****************
  2617 ;; Defined at:
  2618 ;;		line 40 in file "TimerPWM.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  percentage      2    7[BANK0 ] unsigned int 
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;		None
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      void 
  2625 ;; Registers used:
  2626 ;;		wreg, status,2, status,0, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2632 ;;      Params:         0       2       0       0       0       0       0
  2633 ;;      Locals:         0       0       0       0       0       0       0
  2634 ;;      Temps:          0       0       0       0       0       0       0
  2635 ;;      Totals:         0       2       0       0       0       0       0
  2636 ;;Total ram usage:        2 bytes
  2637 ;; Hardware stack levels used:    1
  2638 ;; Hardware stack levels required when called:    7
  2639 ;; This function calls:
  2640 ;;		___lwdiv
  2641 ;; This function is called by:
  2642 ;;		_MotorInit
  2643 ;;		_SetMotorLeft
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text16
  2648  0015DC                     __ptext16:
  2649                           	opt stack 0
  2650  0015DC                     _SetPWMMotorLeft:
  2651                           	opt stack 22
  2652                           
  2653                           ;TimerPWM.c: 41: PWMLeft=20-percentage/5;
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;incstack = 0
  2657  0015DC  C0AD  F0A6         	movff	SetPWMMotorLeft@percentage,___lwdiv@dividend
  2658  0015E0  C0AE  F0A7         	movff	SetPWMMotorLeft@percentage+1,___lwdiv@dividend+1
  2659  0015E4  0E00               	movlw	0
  2660  0015E6  0100               	movlb	0	; () banked
  2661  0015E8  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2662  0015EA  0E05               	movlw	5
  2663  0015EC  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2664  0015EE  ECF2  F007         	call	___lwdiv	;wreg free
  2665  0015F2  0100               	movlb	0	; () banked
  2666  0015F4  1FA6               	comf	?___lwdiv& (0+255),f,b
  2667  0015F6  0100               	movlb	0	; () banked
  2668  0015F8  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2669  0015FA  0100               	movlb	0	; () banked
  2670  0015FC  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2671  0015FE  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2672  001600  0E14               	movlw	20
  2673  001602  0100               	movlb	0	; () banked
  2674  001604  25A6               	addwf	?___lwdiv& (0+255),w,b
  2675  001606  6E5B               	movwf	_PWMLeft,c
  2676  001608  0E00               	movlw	0
  2677  00160A  0100               	movlb	0	; () banked
  2678  00160C  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2679  00160E  6E5C               	movwf	_PWMLeft+1,c
  2680                           
  2681                           ; BSR set to: 0
  2682  001610  0012               	return		;funcret
  2683  001612                     __end_of_SetPWMMotorLeft:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           fsr1l	equ	0xFE1
  2696                           indf2	equ	0xFDF
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function ___lwdiv *****************
  2702 ;; Defined at:
  2703 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  dividend        2    0[BANK0 ] unsigned int 
  2706 ;;  divisor         2    2[BANK0 ] unsigned int 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  quotient        2    4[BANK0 ] unsigned int 
  2709 ;;  counter         1    6[BANK0 ] unsigned char 
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  2    0[BANK0 ] unsigned int 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2719 ;;      Params:         0       4       0       0       0       0       0
  2720 ;;      Locals:         0       3       0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0
  2722 ;;      Totals:         0       7       0       0       0       0       0
  2723 ;;Total ram usage:        7 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    6
  2726 ;; This function calls:
  2727 ;;		Nothing
  2728 ;; This function is called by:
  2729 ;;		_SetPWMMotorLeft
  2730 ;;		_SetPWMMotorRight
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text17
  2735  000FE4                     __ptext17:
  2736                           	opt stack 0
  2737  000FE4                     ___lwdiv:
  2738                           	opt stack 22
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;incstack = 0
  2742  000FE4  0E00               	movlw	0
  2743  000FE6  0100               	movlb	0	; () banked
  2744  000FE8  6FAB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2745  000FEA  0E00               	movlw	0
  2746  000FEC  6FAA               	movwf	___lwdiv@quotient& (0+255),b
  2747                           
  2748                           ; BSR set to: 0
  2749  000FEE  0100               	movlb	0	; () banked
  2750  000FF0  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2751  000FF2  0100               	movlb	0	; () banked
  2752  000FF4  11A9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2753  000FF6  B4D8               	btfsc	status,2,c
  2754  000FF8  D02C               	goto	l916
  2755                           
  2756                           ; BSR set to: 0
  2757  000FFA  0E01               	movlw	1
  2758  000FFC  0100               	movlb	0	; () banked
  2759  000FFE  6FAC               	movwf	___lwdiv@counter& (0+255),b
  2760  001000  D006               	goto	l2185
  2761  001002                     l2183:
  2762                           
  2763                           ; BSR set to: 0
  2764  001002  0100               	movlb	0	; () banked
  2765  001004  90D8               	bcf	status,0,c
  2766  001006  37A8               	rlcf	___lwdiv@divisor& (0+255),f,b
  2767  001008  37A9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2768  00100A  0100               	movlb	0	; () banked
  2769  00100C  2BAC               	incf	___lwdiv@counter& (0+255),f,b
  2770  00100E                     l2185:
  2771                           
  2772                           ; BSR set to: 0
  2773  00100E  0100               	movlb	0	; () banked
  2774  001010  AFA9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2775  001012  D7F7               	goto	l2183
  2776  001014                     l2187:
  2777                           
  2778                           ; BSR set to: 0
  2779  001014  0100               	movlb	0	; () banked
  2780  001016  90D8               	bcf	status,0,c
  2781  001018  37AA               	rlcf	___lwdiv@quotient& (0+255),f,b
  2782  00101A  37AB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2783                           
  2784                           ; BSR set to: 0
  2785  00101C  0100               	movlb	0	; () banked
  2786  00101E  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2787  001020  0100               	movlb	0	; () banked
  2788  001022  5DA6               	subwf	___lwdiv@dividend& (0+255),w,b
  2789  001024  0100               	movlb	0	; () banked
  2790  001026  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2791  001028  0100               	movlb	0	; () banked
  2792  00102A  59A7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2793  00102C  A0D8               	btfss	status,0,c
  2794  00102E  D00A               	goto	l2195
  2795                           
  2796                           ; BSR set to: 0
  2797  001030  0100               	movlb	0	; () banked
  2798  001032  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2799  001034  0100               	movlb	0	; () banked
  2800  001036  5FA6               	subwf	___lwdiv@dividend& (0+255),f,b
  2801  001038  0100               	movlb	0	; () banked
  2802  00103A  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2803  00103C  0100               	movlb	0	; () banked
  2804  00103E  5BA7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2805                           
  2806                           ; BSR set to: 0
  2807  001040  0100               	movlb	0	; () banked
  2808  001042  81AA               	bsf	___lwdiv@quotient& (0+255),0,b
  2809  001044                     l2195:
  2810                           
  2811                           ; BSR set to: 0
  2812  001044  0100               	movlb	0	; () banked
  2813  001046  90D8               	bcf	status,0,c
  2814  001048  33A9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2815  00104A  33A8               	rrcf	___lwdiv@divisor& (0+255),f,b
  2816                           
  2817                           ; BSR set to: 0
  2818  00104C  0100               	movlb	0	; () banked
  2819  00104E  2FAC               	decfsz	___lwdiv@counter& (0+255),f,b
  2820  001050  D7E1               	goto	l2187
  2821  001052                     l916:
  2822                           
  2823                           ; BSR set to: 0
  2824  001052  C0AA  F0A6         	movff	___lwdiv@quotient,?___lwdiv
  2825  001056  C0AB  F0A7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2826                           
  2827                           ; BSR set to: 0
  2828  00105A  0012               	return		;funcret
  2829  00105C                     __end_of___lwdiv:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           prodh	equ	0xFF4
  2836                           prodl	equ	0xFF3
  2837                           intcon	equ	0xFF2
  2838                           postinc0	equ	0xFEE
  2839                           wreg	equ	0xFE8
  2840                           postdec1	equ	0xFE5
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _ReadParallelSpeedRight *****************
  2848 ;; Defined at:
  2849 ;;		line 56 in file "parallel.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  2    0[BANK0 ] int 
  2856 ;; Registers used:
  2857 ;;		None
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2863 ;;      Params:         0       2       0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0
  2866 ;;      Totals:         0       2       0       0       0       0       0
  2867 ;;Total ram usage:        2 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    6
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_Go
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text18
  2878  0017B0                     __ptext18:
  2879                           	opt stack 0
  2880  0017B0                     _ReadParallelSpeedRight:
  2881                           	opt stack 23
  2882                           
  2883                           ;parallel.c: 57: return SpeedRight;
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;incstack = 0
  2887  0017B0  C0C5  F0A6         	movff	parallel@SpeedRight,?_ReadParallelSpeedRight
  2888  0017B4  C0C6  F0A7         	movff	parallel@SpeedRight+1,?_ReadParallelSpeedRight+1
  2889  0017B8  0012               	return		;funcret
  2890  0017BA                     __end_of_ReadParallelSpeedRight:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           intcon	equ	0xFF2
  2899                           postinc0	equ	0xFEE
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           indf2	equ	0xFDF
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _ReadParallelSpeedLeft *****************
  2909 ;; Defined at:
  2910 ;;		line 59 in file "parallel.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  2    0[BANK0 ] int 
  2917 ;; Registers used:
  2918 ;;		None
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2924 ;;      Params:         0       2       0       0       0       0       0
  2925 ;;      Locals:         0       0       0       0       0       0       0
  2926 ;;      Temps:          0       0       0       0       0       0       0
  2927 ;;      Totals:         0       2       0       0       0       0       0
  2928 ;;Total ram usage:        2 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    6
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_Go
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text19
  2939  0017BA                     __ptext19:
  2940                           	opt stack 0
  2941  0017BA                     _ReadParallelSpeedLeft:
  2942                           	opt stack 23
  2943                           
  2944                           ;parallel.c: 60: return SpeedLeft;
  2945                           
  2946                           ;incstack = 0
  2947  0017BA  C0C3  F0A6         	movff	parallel@SpeedLeft,?_ReadParallelSpeedLeft
  2948  0017BE  C0C4  F0A7         	movff	parallel@SpeedLeft+1,?_ReadParallelSpeedLeft+1
  2949  0017C2  0012               	return		;funcret
  2950  0017C4                     __end_of_ReadParallelSpeedLeft:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           tblptrh	equ	0xFF7
  2954                           tblptrl	equ	0xFF6
  2955                           tablat	equ	0xFF5
  2956                           prodh	equ	0xFF4
  2957                           prodl	equ	0xFF3
  2958                           intcon	equ	0xFF2
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1l	equ	0xFE1
  2963                           indf2	equ	0xFDF
  2964                           fsr2h	equ	0xFDA
  2965                           fsr2l	equ	0xFD9
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _ReadParallel *****************
  2969 ;; Defined at:
  2970 ;;		line 39 in file "parallel.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  left            1    5[BANK0 ] unsigned char 
  2975 ;;  lecture         1    4[BANK0 ] unsigned char 
  2976 ;;  right           1    3[BANK0 ] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, status,2, status,0, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2986 ;;      Params:         0       0       0       0       0       0       0
  2987 ;;      Locals:         0       3       0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0
  2989 ;;      Totals:         0       3       0       0       0       0       0
  2990 ;;Total ram usage:        3 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    7
  2993 ;; This function calls:
  2994 ;;		_ConvertParallelSpeed
  2995 ;; This function is called by:
  2996 ;;		_Go
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text20
  3001  00128C                     __ptext20:
  3002                           	opt stack 0
  3003  00128C                     _ReadParallel:
  3004                           	opt stack 22
  3005                           
  3006                           ;parallel.c: 40: unsigned char lecture=PORTB;
  3007                           
  3008                           ;incstack = 0
  3009  00128C  CF81 F0AA          	movff	3969,ReadParallel@lecture	;volatile
  3010                           
  3011                           ;parallel.c: 41: unsigned char left=lecture>>4;
  3012  001290  0100               	movlb	0	; () banked
  3013  001292  39AA               	swapf	ReadParallel@lecture& (0+255),w,b
  3014  001294  0B0F               	andlw	15
  3015  001296  0100               	movlb	0	; () banked
  3016  001298  6FAB               	movwf	ReadParallel@left& (0+255),b
  3017                           
  3018                           ;parallel.c: 42: unsigned char right=lecture & 0x0f;
  3019  00129A  0100               	movlb	0	; () banked
  3020  00129C  51AA               	movf	ReadParallel@lecture& (0+255),w,b
  3021  00129E  0B0F               	andlw	15
  3022  0012A0  0100               	movlb	0	; () banked
  3023  0012A2  6FA9               	movwf	ReadParallel@right& (0+255),b
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;parallel.c: 43: SpeedRight=ConvertParallelSpeed(right);
  3027  0012A4  0100               	movlb	0	; () banked
  3028  0012A6  51A9               	movf	ReadParallel@right& (0+255),w,b
  3029  0012A8  EC17  F006         	call	_ConvertParallelSpeed
  3030  0012AC  C0A6  F0C5         	movff	?_ConvertParallelSpeed,parallel@SpeedRight
  3031  0012B0  C0A7  F0C6         	movff	?_ConvertParallelSpeed+1,parallel@SpeedRight+1
  3032                           
  3033                           ;parallel.c: 44: SpeedLeft=ConvertParallelSpeed(left);
  3034  0012B4  0100               	movlb	0	; () banked
  3035  0012B6  51AB               	movf	ReadParallel@left& (0+255),w,b
  3036  0012B8  EC17  F006         	call	_ConvertParallelSpeed
  3037  0012BC  C0A6  F0C3         	movff	?_ConvertParallelSpeed,parallel@SpeedLeft
  3038  0012C0  C0A7  F0C4         	movff	?_ConvertParallelSpeed+1,parallel@SpeedLeft+1
  3039                           
  3040                           ;parallel.c: 46: if (left==0x0c){
  3041  0012C4  0E0C               	movlw	12
  3042  0012C6  0100               	movlb	0	; () banked
  3043  0012C8  19AB               	xorwf	ReadParallel@left& (0+255),w,b
  3044  0012CA  A4D8               	btfss	status,2,c
  3045  0012CC  D006               	goto	l2687
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;parallel.c: 47: Mode=1;
  3049  0012CE  0E00               	movlw	0
  3050  0012D0  0100               	movlb	0	; () banked
  3051  0012D2  6FBE               	movwf	(_Mode+1)& (0+255),b
  3052  0012D4  0E01               	movlw	1
  3053  0012D6  6FBD               	movwf	_Mode& (0+255),b
  3054                           
  3055                           ;parallel.c: 48: }else{
  3056  0012D8  0012               	return	
  3057  0012DA                     l2687:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;parallel.c: 49: Mode=0;
  3061  0012DA  0E00               	movlw	0
  3062  0012DC  0100               	movlb	0	; () banked
  3063  0012DE  6FBE               	movwf	(_Mode+1)& (0+255),b
  3064  0012E0  0E00               	movlw	0
  3065  0012E2  6FBD               	movwf	_Mode& (0+255),b
  3066  0012E4  0012               	return	
  3067  0012E6                     __end_of_ReadParallel:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           intcon	equ	0xFF2
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8
  3084                           
  3085 ;; *************** function _ConvertParallelSpeed *****************
  3086 ;; Defined at:
  3087 ;;		line 70 in file "parallel.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;  velocity        1    wreg     unsigned char 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  velocity        1    2[BANK0 ] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  2    0[BANK0 ] int 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3101 ;;      Params:         0       2       0       0       0       0       0
  3102 ;;      Locals:         0       1       0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0
  3104 ;;      Totals:         0       3       0       0       0       0       0
  3105 ;;Total ram usage:        3 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    6
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_ReadParallel
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text21
  3116  000C2E                     __ptext21:
  3117                           	opt stack 0
  3118  000C2E                     _ConvertParallelSpeed:
  3119                           	opt stack 22
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;incstack = 0
  3123                           ;ConvertParallelSpeed@velocity stored from wreg
  3124  000C2E  0100               	movlb	0	; () banked
  3125  000C30  6FA8               	movwf	ConvertParallelSpeed@velocity& (0+255),b
  3126                           
  3127                           ;parallel.c: 71: switch(velocity){
  3128  000C32  D048               	goto	l2589
  3129  000C34                     l2515:
  3130                           
  3131                           ;parallel.c: 73: return -100;
  3132  000C34  0EFF               	movlw	255
  3133  000C36  0100               	movlb	0	; () banked
  3134  000C38  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3135  000C3A  0E9C               	movlw	156
  3136  000C3C  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;parallel.c: 74: break;
  3140                           
  3141                           ; BSR set to: 0
  3142  000C3E  0012               	return	
  3143  000C40                     l2521:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;parallel.c: 76: return -80;
  3147  000C40  0EFF               	movlw	255
  3148  000C42  0100               	movlb	0	; () banked
  3149  000C44  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3150  000C46  0EB0               	movlw	176
  3151  000C48  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;parallel.c: 77: break;
  3155                           
  3156                           ; BSR set to: 0
  3157  000C4A  0012               	return	
  3158  000C4C                     l2527:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;parallel.c: 79: return -60;
  3162  000C4C  0EFF               	movlw	255
  3163  000C4E  0100               	movlb	0	; () banked
  3164  000C50  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3165  000C52  0EC4               	movlw	196
  3166  000C54  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;parallel.c: 80: break;
  3170                           
  3171                           ; BSR set to: 0
  3172  000C56  0012               	return	
  3173  000C58                     l2533:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;parallel.c: 82: return -40;
  3177  000C58  0EFF               	movlw	255
  3178  000C5A  0100               	movlb	0	; () banked
  3179  000C5C  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3180  000C5E  0ED8               	movlw	216
  3181  000C60  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;parallel.c: 83: break;
  3185                           
  3186                           ; BSR set to: 0
  3187  000C62  0012               	return	
  3188  000C64                     l2539:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;parallel.c: 85: return -20;
  3192  000C64  0EFF               	movlw	255
  3193  000C66  0100               	movlb	0	; () banked
  3194  000C68  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3195  000C6A  0EEC               	movlw	236
  3196  000C6C  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;parallel.c: 86: break;
  3200                           
  3201                           ; BSR set to: 0
  3202  000C6E  0012               	return	
  3203  000C70                     l2545:
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;parallel.c: 88: return 0;
  3207  000C70  0E00               	movlw	0
  3208  000C72  0100               	movlb	0	; () banked
  3209  000C74  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3210  000C76  0E00               	movlw	0
  3211  000C78  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;parallel.c: 89: break;
  3215                           
  3216                           ; BSR set to: 0
  3217  000C7A  0012               	return	
  3218  000C7C                     l2551:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;parallel.c: 91: return 20;
  3222  000C7C  0E00               	movlw	0
  3223  000C7E  0100               	movlb	0	; () banked
  3224  000C80  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3225  000C82  0E14               	movlw	20
  3226  000C84  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;parallel.c: 92: break;
  3230                           
  3231                           ; BSR set to: 0
  3232  000C86  0012               	return	
  3233  000C88                     l2557:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;parallel.c: 94: return 40;
  3237  000C88  0E00               	movlw	0
  3238  000C8A  0100               	movlb	0	; () banked
  3239  000C8C  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3240  000C8E  0E28               	movlw	40
  3241  000C90  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;parallel.c: 95: break;
  3245                           
  3246                           ; BSR set to: 0
  3247  000C92  0012               	return	
  3248  000C94                     l2563:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;parallel.c: 97: return 60;
  3252  000C94  0E00               	movlw	0
  3253  000C96  0100               	movlb	0	; () banked
  3254  000C98  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3255  000C9A  0E3C               	movlw	60
  3256  000C9C  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;parallel.c: 98: break;
  3260                           
  3261                           ; BSR set to: 0
  3262  000C9E  0012               	return	
  3263  000CA0                     l2569:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;parallel.c: 100: return 80;
  3267  000CA0  0E00               	movlw	0
  3268  000CA2  0100               	movlb	0	; () banked
  3269  000CA4  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3270  000CA6  0E50               	movlw	80
  3271  000CA8  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;parallel.c: 101: break;
  3275                           
  3276                           ; BSR set to: 0
  3277  000CAA  0012               	return	
  3278  000CAC                     l2575:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;parallel.c: 103: return 100;
  3282  000CAC  0E00               	movlw	0
  3283  000CAE  0100               	movlb	0	; () banked
  3284  000CB0  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3285  000CB2  0E64               	movlw	100
  3286  000CB4  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;parallel.c: 104: break;
  3290                           
  3291                           ; BSR set to: 0
  3292  000CB6  0012               	return	
  3293  000CB8                     l2581:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;parallel.c: 106: return 0;
  3297  000CB8  0E00               	movlw	0
  3298  000CBA  0100               	movlb	0	; () banked
  3299  000CBC  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3300  000CBE  0E00               	movlw	0
  3301  000CC0  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;parallel.c: 108: }
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;parallel.c: 107: break;
  3308                           
  3309                           ; BSR set to: 0
  3310  000CC2  0012               	return	
  3311  000CC4                     l2589:
  3312  000CC4  0100               	movlb	0	; () banked
  3313  000CC6  51A8               	movf	ConvertParallelSpeed@velocity& (0+255),w,b
  3314                           
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 11, Range of values is 1 to 11
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           34    18 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  000CC8  0A01               	xorlw	1	; case 1
  3322  000CCA  B4D8               	btfsc	status,2,c
  3323  000CCC  D7B3               	goto	l2515
  3324  000CCE  0A03               	xorlw	3	; case 2
  3325  000CD0  B4D8               	btfsc	status,2,c
  3326  000CD2  D7B6               	goto	l2521
  3327  000CD4  0A01               	xorlw	1	; case 3
  3328  000CD6  B4D8               	btfsc	status,2,c
  3329  000CD8  D7B9               	goto	l2527
  3330  000CDA  0A07               	xorlw	7	; case 4
  3331  000CDC  B4D8               	btfsc	status,2,c
  3332  000CDE  D7BC               	goto	l2533
  3333  000CE0  0A01               	xorlw	1	; case 5
  3334  000CE2  B4D8               	btfsc	status,2,c
  3335  000CE4  D7BF               	goto	l2539
  3336  000CE6  0A03               	xorlw	3	; case 6
  3337  000CE8  B4D8               	btfsc	status,2,c
  3338  000CEA  D7C2               	goto	l2545
  3339  000CEC  0A01               	xorlw	1	; case 7
  3340  000CEE  B4D8               	btfsc	status,2,c
  3341  000CF0  D7C5               	goto	l2551
  3342  000CF2  0A0F               	xorlw	15	; case 8
  3343  000CF4  B4D8               	btfsc	status,2,c
  3344  000CF6  D7C8               	goto	l2557
  3345  000CF8  0A01               	xorlw	1	; case 9
  3346  000CFA  B4D8               	btfsc	status,2,c
  3347  000CFC  D7CB               	goto	l2563
  3348  000CFE  0A03               	xorlw	3	; case 10
  3349  000D00  B4D8               	btfsc	status,2,c
  3350  000D02  D7CE               	goto	l2569
  3351  000D04  0A01               	xorlw	1	; case 11
  3352  000D06  B4D8               	btfsc	status,2,c
  3353  000D08  D7D1               	goto	l2575
  3354  000D0A  D7D6               	goto	l2581
  3355  000D0C                     __end_of_ConvertParallelSpeed:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1l	equ	0xFE1
  3368                           indf2	equ	0xFDF
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _ReadMode *****************
  3374 ;; Defined at:
  3375 ;;		line 62 in file "parallel.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;		None
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  2    0[BANK0 ] unsigned int 
  3382 ;; Registers used:
  3383 ;;		None
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3389 ;;      Params:         0       2       0       0       0       0       0
  3390 ;;      Locals:         0       0       0       0       0       0       0
  3391 ;;      Temps:          0       0       0       0       0       0       0
  3392 ;;      Totals:         0       2       0       0       0       0       0
  3393 ;;Total ram usage:        2 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    6
  3396 ;; This function calls:
  3397 ;;		Nothing
  3398 ;; This function is called by:
  3399 ;;		_Go
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text22
  3404  0017C4                     __ptext22:
  3405                           	opt stack 0
  3406  0017C4                     _ReadMode:
  3407                           	opt stack 23
  3408                           
  3409                           ;parallel.c: 63: return Mode;
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;incstack = 0
  3413  0017C4  C0BD  F0A6         	movff	_Mode,?_ReadMode
  3414  0017C8  C0BE  F0A7         	movff	_Mode+1,?_ReadMode+1
  3415  0017CC  0012               	return		;funcret
  3416  0017CE                     __end_of_ReadMode:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           prodh	equ	0xFF4
  3423                           prodl	equ	0xFF3
  3424                           intcon	equ	0xFF2
  3425                           postinc0	equ	0xFEE
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434 ;; *************** function _ReadDistanceRight *****************
  3435 ;; Defined at:
  3436 ;;		line 70 in file "ADC.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2    0[BANK0 ] unsigned int 
  3443 ;; Registers used:
  3444 ;;		None
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         0       2       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:         0       2       0       0       0       0       0
  3454 ;;Total ram usage:        2 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    6
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_Go
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text23
  3465  0017CE                     __ptext23:
  3466                           	opt stack 0
  3467  0017CE                     _ReadDistanceRight:
  3468                           	opt stack 23
  3469                           
  3470                           ;ADC.c: 71: return DistanceRight;
  3471                           
  3472                           ;incstack = 0
  3473  0017CE  C0A4  F0A6         	movff	_DistanceRight,?_ReadDistanceRight
  3474  0017D2  C0A5  F0A7         	movff	_DistanceRight+1,?_ReadDistanceRight+1
  3475  0017D6  0012               	return		;funcret
  3476  0017D8                     __end_of_ReadDistanceRight:
  3477                           	opt stack 0
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           postdec1	equ	0xFE5
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _ReadDistanceLeft *****************
  3495 ;; Defined at:
  3496 ;;		line 61 in file "ADC.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  2    0[BANK0 ] unsigned int 
  3503 ;; Registers used:
  3504 ;;		None
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3510 ;;      Params:         0       2       0       0       0       0       0
  3511 ;;      Locals:         0       0       0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0
  3513 ;;      Totals:         0       2       0       0       0       0       0
  3514 ;;Total ram usage:        2 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    6
  3517 ;; This function calls:
  3518 ;;		Nothing
  3519 ;; This function is called by:
  3520 ;;		_Go
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text24
  3525  0017D8                     __ptext24:
  3526                           	opt stack 0
  3527  0017D8                     _ReadDistanceLeft:
  3528                           	opt stack 23
  3529                           
  3530                           ;ADC.c: 62: return DistanceLeft;
  3531                           
  3532                           ;incstack = 0
  3533  0017D8  C0A2  F0A6         	movff	_DistanceLeft,?_ReadDistanceLeft
  3534  0017DC  C0A3  F0A7         	movff	_DistanceLeft+1,?_ReadDistanceLeft+1
  3535  0017E0  0012               	return		;funcret
  3536  0017E2                     __end_of_ReadDistanceLeft:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           intcon	equ	0xFF2
  3545                           postinc0	equ	0xFEE
  3546                           wreg	equ	0xFE8
  3547                           postdec1	equ	0xFE5
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _ReadDistanceCentral *****************
  3555 ;; Defined at:
  3556 ;;		line 78 in file "ADC.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;		None
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;		None
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  2    0[BANK0 ] unsigned int 
  3563 ;; Registers used:
  3564 ;;		None
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3570 ;;      Params:         0       2       0       0       0       0       0
  3571 ;;      Locals:         0       0       0       0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0
  3573 ;;      Totals:         0       2       0       0       0       0       0
  3574 ;;Total ram usage:        2 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    6
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_Go
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text25
  3585  0017E2                     __ptext25:
  3586                           	opt stack 0
  3587  0017E2                     _ReadDistanceCentral:
  3588                           	opt stack 23
  3589                           
  3590                           ;ADC.c: 79: return DistanceCentral;
  3591                           
  3592                           ;incstack = 0
  3593  0017E2  C0A0  F0A6         	movff	_DistanceCentral,?_ReadDistanceCentral
  3594  0017E6  C0A1  F0A7         	movff	_DistanceCentral+1,?_ReadDistanceCentral+1
  3595  0017EA  0012               	return		;funcret
  3596  0017EC                     __end_of_ReadDistanceCentral:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           postinc0	equ	0xFEE
  3606                           wreg	equ	0xFE8
  3607                           postdec1	equ	0xFE5
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _ADCInitiateConversion *****************
  3615 ;; Defined at:
  3616 ;;		line 34 in file "ADC.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;		None
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		None
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3630 ;;      Params:         0       0       0       0       0       0       0
  3631 ;;      Locals:         0       0       0       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0
  3633 ;;      Totals:         0       0       0       0       0       0       0
  3634 ;;Total ram usage:        0 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    6
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text26
  3645  001808                     __ptext26:
  3646                           	opt stack 0
  3647  001808                     _ADCInitiateConversion:
  3648                           	opt stack 24
  3649                           
  3650                           ;ADC.c: 35: GO = 1;
  3651                           
  3652                           ;incstack = 0
  3653  001808  82C2               	bsf	4034,1,c	;volatile
  3654  00180A  0012               	return		;funcret
  3655  00180C                     __end_of_ADCInitiateConversion:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _ADCInit *****************
  3674 ;; Defined at:
  3675 ;;		line 10 in file "ADC.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;		None
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  1    wreg      void 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3689 ;;      Params:         0       0       0       0       0       0       0
  3690 ;;      Locals:         0       0       0       0       0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0
  3692 ;;      Totals:         0       0       0       0       0       0       0
  3693 ;;Total ram usage:        0 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    6
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text27
  3704  001730                     __ptext27:
  3705                           	opt stack 0
  3706  001730                     _ADCInit:
  3707                           	opt stack 24
  3708                           
  3709                           ;ADC.c: 13: TRISA0 = 1;
  3710                           
  3711                           ;incstack = 0
  3712  001730  8092               	bsf	3986,0,c	;volatile
  3713                           
  3714                           ;ADC.c: 14: TRISA1 = 1;
  3715  001732  8292               	bsf	3986,1,c	;volatile
  3716                           
  3717                           ;ADC.c: 15: TRISA2 = 1;
  3718  001734  8492               	bsf	3986,2,c	;volatile
  3719                           
  3720                           ;ADC.c: 16: TRISA3 = 1;
  3721  001736  8692               	bsf	3986,3,c	;volatile
  3722                           
  3723                           ;ADC.c: 18: ANS0 = 1;
  3724  001738  807E               	bsf	3966,0,c	;volatile
  3725                           
  3726                           ;ADC.c: 19: ANS1 = 1;
  3727  00173A  827E               	bsf	3966,1,c	;volatile
  3728                           
  3729                           ;ADC.c: 20: ANS2 = 1;
  3730  00173C  847E               	bsf	3966,2,c	;volatile
  3731                           
  3732                           ;ADC.c: 21: ANS3 = 1;
  3733  00173E  867E               	bsf	3966,3,c	;volatile
  3734                           
  3735                           ;ADC.c: 23: ADON = 1;
  3736  001740  80C2               	bsf	4034,0,c	;volatile
  3737                           
  3738                           ;ADC.c: 24: ADCON1 = 0;
  3739  001742  0E00               	movlw	0
  3740  001744  6EC1               	movwf	4033,c	;volatile
  3741                           
  3742                           ;ADC.c: 25: ADCON2 = 0x91;
  3743  001746  0E91               	movlw	145
  3744  001748  6EC0               	movwf	4032,c	;volatile
  3745                           
  3746                           ;ADC.c: 26: ADIF = 0;
  3747  00174A  9C9E               	bcf	3998,6,c	;volatile
  3748                           
  3749                           ;ADC.c: 27: ADIE = 1;
  3750  00174C  8C9D               	bsf	3997,6,c	;volatile
  3751                           
  3752                           ;ADC.c: 29: PEIE = 1;
  3753  00174E  8CF2               	bsf	intcon,6,c	;volatile
  3754                           
  3755                           ;ADC.c: 30: GIE = 1;
  3756  001750  8EF2               	bsf	intcon,7,c	;volatile
  3757  001752  0012               	return		;funcret
  3758  001754                     __end_of_ADCInit:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           prodh	equ	0xFF4
  3765                           prodl	equ	0xFF3
  3766                           intcon	equ	0xFF2
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           postdec1	equ	0xFE5
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           status	equ	0xFD8
  3775                           
  3776 ;; *************** function _isr *****************
  3777 ;; Defined at:
  3778 ;;		line 9 in file "interrupts.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  read            2   74[COMRAM] unsigned int 
  3783 ;; Return value:  Size  Location     Type
  3784 ;;                  1    wreg      void 
  3785 ;; Registers used:
  3786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3792 ;;      Params:         0       0       0       0       0       0       0
  3793 ;;      Locals:         2       0       0       0       0       0       0
  3794 ;;      Temps:         16       0       0       0       0       0       0
  3795 ;;      Totals:        18       0       0       0       0       0       0
  3796 ;;Total ram usage:       18 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    5
  3799 ;; This function calls:
  3800 ;;		_ADCGetOutput
  3801 ;;		_ReadPWMMotorLeft
  3802 ;;		_ReadPWMMotorRight
  3803 ;;		_SetBattery
  3804 ;;		_SetDistanceCentral
  3805 ;;		_SetDistanceLeft
  3806 ;;		_SetDistanceRight
  3807 ;; This function is called by:
  3808 ;;		Interrupt level 2
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	intcode
  3813  000008                     __pintcode:
  3814                           	opt stack 0
  3815  000008                     _isr:
  3816                           	opt stack 20
  3817                           
  3818                           ;incstack = 0
  3819  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3820  00000A  CFFA F03D          	movff	pclath,??_isr+2
  3821  00000E  CFFB F03E          	movff	pclatu,??_isr+3
  3822  000012  CFE9 F03F          	movff	fsr0l,??_isr+4
  3823  000016  CFEA F040          	movff	fsr0h,??_isr+5
  3824  00001A  CFE1 F041          	movff	fsr1l,??_isr+6
  3825  00001E  CFE2 F042          	movff	fsr1h,??_isr+7
  3826  000022  CFD9 F043          	movff	fsr2l,??_isr+8
  3827  000026  CFDA F044          	movff	fsr2h,??_isr+9
  3828  00002A  CFF3 F045          	movff	prodl,??_isr+10
  3829  00002E  CFF4 F046          	movff	prodh,??_isr+11
  3830  000032  CFF6 F047          	movff	tblptrl,??_isr+12
  3831  000036  CFF7 F048          	movff	tblptrh,??_isr+13
  3832  00003A  CFF8 F049          	movff	tblptru,??_isr+14
  3833  00003E  CFF5 F04A          	movff	tablat,??_isr+15
  3834                           
  3835                           ;interrupts.c: 15: if (ADIF == 1) {
  3836  000042  AC9E               	btfss	3998,6,c	;volatile
  3837  000044  D055               	goto	i2l37
  3838                           
  3839                           ;interrupts.c: 17: static unsigned int Readport=0;
  3840                           ;interrupts.c: 18: unsigned int read=ADCGetOutput();
  3841  000046  ECCB  F00B         	call	_ADCGetOutput	;wreg free
  3842  00004A  C001  F04B         	movff	?_ADCGetOutput,isr@read
  3843  00004E  C002  F04C         	movff	?_ADCGetOutput+1,isr@read+1
  3844                           
  3845                           ;interrupts.c: 20: switch (Readport){
  3846  000052  D037               	goto	i2l3051
  3847  000054                     i2l41:
  3848                           
  3849                           ;interrupts.c: 22: CHS3=0;
  3850  000054  9AC2               	bcf	4034,5,c	;volatile
  3851                           
  3852                           ;interrupts.c: 23: CHS2=0;
  3853  000056  98C2               	bcf	4034,4,c	;volatile
  3854                           
  3855                           ;interrupts.c: 24: CHS1=0;
  3856  000058  96C2               	bcf	4034,3,c	;volatile
  3857                           
  3858                           ;interrupts.c: 25: CHS0=1;
  3859  00005A  84C2               	bsf	4034,2,c	;volatile
  3860                           
  3861                           ;interrupts.c: 26: SetDistanceLeft (read);
  3862  00005C  C04B  F036         	movff	isr@read,SetDistanceLeft@lecture
  3863  000060  C04C  F037         	movff	isr@read+1,SetDistanceLeft@lecture+1
  3864  000064  EC69  F008         	call	_SetDistanceLeft	;wreg free
  3865  000068  D015               	goto	i2l3041
  3866  00006A                     i2l43:
  3867                           
  3868                           ;interrupts.c: 30: CHS3=0;
  3869  00006A  9AC2               	bcf	4034,5,c	;volatile
  3870                           
  3871                           ;interrupts.c: 31: CHS2=0;
  3872  00006C  98C2               	bcf	4034,4,c	;volatile
  3873                           
  3874                           ;interrupts.c: 32: CHS1=1;
  3875  00006E  86C2               	bsf	4034,3,c	;volatile
  3876                           
  3877                           ;interrupts.c: 33: CHS0=0;
  3878  000070  94C2               	bcf	4034,2,c	;volatile
  3879                           
  3880                           ;interrupts.c: 34: SetDistanceCentral (read);
  3881  000072  C04B  F036         	movff	isr@read,SetDistanceCentral@lecture
  3882  000076  C04C  F037         	movff	isr@read+1,SetDistanceCentral@lecture+1
  3883  00007A  ECA2  F008         	call	_SetDistanceCentral	;wreg free
  3884  00007E  D00A               	goto	i2l3041
  3885  000080                     i2l44:
  3886                           
  3887                           ;interrupts.c: 38: CHS3=0;
  3888  000080  9AC2               	bcf	4034,5,c	;volatile
  3889                           
  3890                           ;interrupts.c: 39: CHS2=0;
  3891  000082  98C2               	bcf	4034,4,c	;volatile
  3892                           
  3893                           ;interrupts.c: 40: CHS1=1;
  3894  000084  86C2               	bsf	4034,3,c	;volatile
  3895                           
  3896                           ;interrupts.c: 41: CHS0=1;
  3897  000086  84C2               	bsf	4034,2,c	;volatile
  3898                           
  3899                           ;interrupts.c: 42: SetDistanceRight (read);
  3900  000088  C04B  F036         	movff	isr@read,SetDistanceRight@lecture
  3901  00008C  C04C  F037         	movff	isr@read+1,SetDistanceRight@lecture+1
  3902  000090  EC2E  F008         	call	_SetDistanceRight	;wreg free
  3903  000094                     i2l3041:
  3904                           
  3905                           ;interrupts.c: 43: Readport++;
  3906  000094  4A57               	infsnz	isr@Readport,f,c
  3907  000096  2A58               	incf	isr@Readport+1,f,c
  3908                           
  3909                           ;interrupts.c: 44: break;
  3910  000098  D02A               	goto	i2l42
  3911  00009A                     i2l45:
  3912                           
  3913                           ;interrupts.c: 46: CHS3=0;
  3914  00009A  9AC2               	bcf	4034,5,c	;volatile
  3915                           
  3916                           ;interrupts.c: 47: CHS2=0;
  3917  00009C  98C2               	bcf	4034,4,c	;volatile
  3918                           
  3919                           ;interrupts.c: 48: CHS1=0;
  3920  00009E  96C2               	bcf	4034,3,c	;volatile
  3921                           
  3922                           ;interrupts.c: 49: CHS0=0;
  3923  0000A0  94C2               	bcf	4034,2,c	;volatile
  3924                           
  3925                           ;interrupts.c: 50: SetBattery (read);
  3926  0000A2  C04B  F036         	movff	isr@read,SetBattery@lecture
  3927  0000A6  C04C  F037         	movff	isr@read+1,SetBattery@lecture+1
  3928  0000AA  EC6D  F007         	call	_SetBattery	;wreg free
  3929  0000AE  D004               	goto	i2l3047
  3930  0000B0                     i2l46:
  3931                           
  3932                           ;interrupts.c: 54: CHS3=0;
  3933  0000B0  9AC2               	bcf	4034,5,c	;volatile
  3934                           
  3935                           ;interrupts.c: 55: CHS2=0;
  3936  0000B2  98C2               	bcf	4034,4,c	;volatile
  3937                           
  3938                           ;interrupts.c: 56: CHS1=0;
  3939  0000B4  96C2               	bcf	4034,3,c	;volatile
  3940                           
  3941                           ;interrupts.c: 57: CHS0=0;
  3942  0000B6  94C2               	bcf	4034,2,c	;volatile
  3943  0000B8                     i2l3047:
  3944                           
  3945                           ;interrupts.c: 58: Readport=0;
  3946  0000B8  0E00               	movlw	0
  3947  0000BA  6E58               	movwf	isr@Readport+1,c
  3948  0000BC  0E00               	movlw	0
  3949  0000BE  6E57               	movwf	isr@Readport,c
  3950                           
  3951                           ;interrupts.c: 60: }
  3952                           
  3953                           ;interrupts.c: 59: break;
  3954  0000C0  D016               	goto	i2l42
  3955  0000C2                     i2l3051:
  3956  0000C2  C057  F03B         	movff	isr@Readport,??_isr
  3957  0000C6  C058  F03C         	movff	isr@Readport+1,??_isr+1
  3958                           
  3959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3960                           ; Switch size 1, requested type "space"
  3961                           ; Number of cases is 1, Range of values is 0 to 0
  3962                           ; switch strategies available:
  3963                           ; Name         Instructions Cycles
  3964                           ; simple_byte            4     3 (average)
  3965                           ;	Chosen strategy is simple_byte
  3966  0000CA  503C               	movf	??_isr+1,w,c
  3967  0000CC  0A00               	xorlw	0	; case 0
  3968  0000CE  A4D8               	btfss	status,2,c
  3969  0000D0  D7EF               	goto	i2l46
  3970                           
  3971                           ; Switch size 1, requested type "space"
  3972                           ; Number of cases is 4, Range of values is 0 to 3
  3973                           ; switch strategies available:
  3974                           ; Name         Instructions Cycles
  3975                           ; simple_byte           13     7 (average)
  3976                           ;	Chosen strategy is simple_byte
  3977  0000D2  503B               	movf	??_isr,w,c
  3978  0000D4  0A00               	xorlw	0	; case 0
  3979  0000D6  B4D8               	btfsc	status,2,c
  3980  0000D8  D7BD               	goto	i2l41
  3981  0000DA  0A01               	xorlw	1	; case 1
  3982  0000DC  B4D8               	btfsc	status,2,c
  3983  0000DE  D7C5               	goto	i2l43
  3984  0000E0  0A03               	xorlw	3	; case 2
  3985  0000E2  B4D8               	btfsc	status,2,c
  3986  0000E4  D7CD               	goto	i2l44
  3987  0000E6  0A01               	xorlw	1	; case 3
  3988  0000E8  B4D8               	btfsc	status,2,c
  3989  0000EA  D7D7               	goto	i2l45
  3990  0000EC  D7E1               	goto	i2l46
  3991  0000EE                     i2l42:
  3992                           
  3993                           ;interrupts.c: 62: ADIF=0;
  3994  0000EE  9C9E               	bcf	3998,6,c	;volatile
  3995  0000F0                     i2l37:
  3996                           
  3997                           ;interrupts.c: 63: }
  3998                           ;interrupts.c: 72: if (TMR0IF==1){
  3999  0000F0  A4F2               	btfss	intcon,2,c	;volatile
  4000  0000F2  D02C               	goto	i2l57
  4001                           
  4002                           ;interrupts.c: 74: static unsigned int PWMLeft;
  4003                           ;interrupts.c: 75: static unsigned int PWMRight;
  4004                           ;interrupts.c: 76: static unsigned int iteration;
  4005                           ;interrupts.c: 78: if (iteration==20){
  4006  0000F4  0E14               	movlw	20
  4007  0000F6  1859               	xorwf	isr@iteration,w,c
  4008  0000F8  105A               	iorwf	isr@iteration+1,w,c
  4009  0000FA  A4D8               	btfss	status,2,c
  4010  0000FC  D012               	goto	i2l3063
  4011                           
  4012                           ;interrupts.c: 79: RC5=0;
  4013  0000FE  9A82               	bcf	3970,5,c	;volatile
  4014                           
  4015                           ;interrupts.c: 80: RC4=0;
  4016  000100  9882               	bcf	3970,4,c	;volatile
  4017                           
  4018                           ;interrupts.c: 81: iteration=0;
  4019  000102  0E00               	movlw	0
  4020  000104  6E5A               	movwf	isr@iteration+1,c
  4021  000106  0E00               	movlw	0
  4022  000108  6E59               	movwf	isr@iteration,c
  4023                           
  4024                           ;interrupts.c: 82: PWMRight=ReadPWMMotorRight();
  4025  00010A  ECF6  F00B         	call	_ReadPWMMotorRight	;wreg free
  4026  00010E  C001  F055         	movff	?_ReadPWMMotorRight,isr@PWMRight
  4027  000112  C002  F056         	movff	?_ReadPWMMotorRight+1,isr@PWMRight+1
  4028                           
  4029                           ;interrupts.c: 83: PWMLeft=ReadPWMMotorLeft();
  4030  000116  ECFB  F00B         	call	_ReadPWMMotorLeft	;wreg free
  4031  00011A  C001  F053         	movff	?_ReadPWMMotorLeft,isr@PWMLeft
  4032  00011E  C002  F054         	movff	?_ReadPWMMotorLeft+1,isr@PWMLeft+1
  4033  000122                     i2l3063:
  4034                           
  4035                           ;interrupts.c: 84: }
  4036                           ;interrupts.c: 85: if (PWMRight==iteration){
  4037  000122  5059               	movf	isr@iteration,w,c
  4038  000124  1855               	xorwf	isr@PWMRight,w,c
  4039  000126  E104               	bnz	i2l3067
  4040  000128  505A               	movf	isr@iteration+1,w,c
  4041  00012A  1856               	xorwf	isr@PWMRight+1,w,c
  4042  00012C  B4D8               	btfsc	status,2,c
  4043                           
  4044                           ;interrupts.c: 86: RC5=1;
  4045  00012E  8A82               	bsf	3970,5,c	;volatile
  4046  000130                     i2l3067:
  4047                           
  4048                           ;interrupts.c: 87: }
  4049                           ;interrupts.c: 88: if (PWMLeft==iteration){
  4050  000130  5059               	movf	isr@iteration,w,c
  4051  000132  1853               	xorwf	isr@PWMLeft,w,c
  4052  000134  E104               	bnz	i2l3071
  4053  000136  505A               	movf	isr@iteration+1,w,c
  4054  000138  1854               	xorwf	isr@PWMLeft+1,w,c
  4055  00013A  B4D8               	btfsc	status,2,c
  4056                           
  4057                           ;interrupts.c: 89: RC4=1;
  4058  00013C  8882               	bsf	3970,4,c	;volatile
  4059  00013E                     i2l3071:
  4060                           
  4061                           ;interrupts.c: 90: }
  4062                           ;interrupts.c: 91: iteration++;
  4063  00013E  4A59               	infsnz	isr@iteration,f,c
  4064  000140  2A5A               	incf	isr@iteration+1,f,c
  4065                           
  4066                           ;interrupts.c: 93: TMR0IF=0;
  4067  000142  94F2               	bcf	intcon,2,c	;volatile
  4068                           
  4069                           ;interrupts.c: 94: TMR0H=0x00;
  4070  000144  0E00               	movlw	0
  4071  000146  6ED7               	movwf	4055,c	;volatile
  4072                           
  4073                           ;interrupts.c: 95: TMR0L=0x156;
  4074  000148  0E56               	movlw	86
  4075  00014A  6ED6               	movwf	4054,c	;volatile
  4076  00014C                     i2l57:
  4077  00014C  C04A  FFF5         	movff	??_isr+15,tablat
  4078  000150  C049  FFF8         	movff	??_isr+14,tblptru
  4079  000154  C048  FFF7         	movff	??_isr+13,tblptrh
  4080  000158  C047  FFF6         	movff	??_isr+12,tblptrl
  4081  00015C  C046  FFF4         	movff	??_isr+11,prodh
  4082  000160  C045  FFF3         	movff	??_isr+10,prodl
  4083  000164  C044  FFDA         	movff	??_isr+9,fsr2h
  4084  000168  C043  FFD9         	movff	??_isr+8,fsr2l
  4085  00016C  C042  FFE2         	movff	??_isr+7,fsr1h
  4086  000170  C041  FFE1         	movff	??_isr+6,fsr1l
  4087  000174  C040  FFEA         	movff	??_isr+5,fsr0h
  4088  000178  C03F  FFE9         	movff	??_isr+4,fsr0l
  4089  00017C  C03E  FFFB         	movff	??_isr+3,pclatu
  4090  000180  C03D  FFFA         	movff	??_isr+2,pclath
  4091  000184  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4092  000186  0011               	retfie		f
  4093  000188                     __end_of_isr:
  4094                           	opt stack 0
  4095                           pclatu	equ	0xFFB
  4096                           pclath	equ	0xFFA
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           postinc0	equ	0xFEE
  4105                           fsr0h	equ	0xFEA
  4106                           fsr0l	equ	0xFE9
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1h	equ	0xFE2
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _SetDistanceRight *****************
  4117 ;; Defined at:
  4118 ;;		line 65 in file "ADC.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  lecture         2   53[COMRAM] unsigned int 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;		None
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4132 ;;      Params:         2       0       0       0       0       0       0
  4133 ;;      Locals:         0       0       0       0       0       0       0
  4134 ;;      Temps:          2       0       0       0       0       0       0
  4135 ;;      Totals:         4       0       0       0       0       0       0
  4136 ;;Total ram usage:        4 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    4
  4139 ;; This function calls:
  4140 ;;		_ShowLecturesInLCD
  4141 ;;		___ftadd
  4142 ;;		___ftmul
  4143 ;;		___fttol
  4144 ;;		___lwtoft
  4145 ;; This function is called by:
  4146 ;;		_isr
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text29
  4151  00105C                     __ptext29:
  4152                           	opt stack 0
  4153  00105C                     _SetDistanceRight:
  4154                           	opt stack 20
  4155                           
  4156                           ;ADC.c: 66: ShowLecturesInLCD ();
  4157                           
  4158                           ;incstack = 0
  4159  00105C  EC13  F009         	call	_ShowLecturesInLCD	;wreg free
  4160                           
  4161                           ;ADC.c: 67: DistanceRight=5+(1023-lecture)*0.042;
  4162  001060  0E00               	movlw	0
  4163  001062  6E1E               	movwf	___ftadd@f2,c
  4164  001064  0EA0               	movlw	160
  4165  001066  6E1F               	movwf	___ftadd@f2+1,c
  4166  001068  0E40               	movlw	64
  4167  00106A  6E20               	movwf	___ftadd@f2+2,c
  4168  00106C  0E08               	movlw	8
  4169  00106E  6E0F               	movwf	___ftmul@f2,c
  4170  001070  0E2C               	movlw	44
  4171  001072  6E10               	movwf	___ftmul@f2+1,c
  4172  001074  0E3D               	movlw	61
  4173  001076  6E11               	movwf	___ftmul@f2+2,c
  4174  001078  C036  F038         	movff	SetDistanceRight@lecture,??_SetDistanceRight
  4175  00107C  C037  F039         	movff	SetDistanceRight@lecture+1,??_SetDistanceRight+1
  4176  001080  1E38               	comf	??_SetDistanceRight,f,c
  4177  001082  1E39               	comf	??_SetDistanceRight+1,f,c
  4178  001084  4A38               	infsnz	??_SetDistanceRight,f,c
  4179  001086  2A39               	incf	??_SetDistanceRight+1,f,c
  4180  001088  0EFF               	movlw	255
  4181  00108A  2438               	addwf	??_SetDistanceRight,w,c
  4182  00108C  6E09               	movwf	___lwtoft@c,c
  4183  00108E  0E03               	movlw	3
  4184  001090  2039               	addwfc	??_SetDistanceRight+1,w,c
  4185  001092  6E0A               	movwf	___lwtoft@c+1,c
  4186  001094  ECAA  F00B         	call	___lwtoft	;wreg free
  4187  001098  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4188  00109C  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4189  0010A0  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4190  0010A4  EC9D  F005         	call	___ftmul	;wreg free
  4191  0010A8  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  4192  0010AC  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  4193  0010B0  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  4194  0010B4  EC0A  F003         	call	___ftadd	;wreg free
  4195  0010B8  C01B  F027         	movff	?___ftadd,___fttol@f1
  4196  0010BC  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  4197  0010C0  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  4198  0010C4  EC23  F005         	call	___fttol	;wreg free
  4199  0010C8  C027  F0A4         	movff	?___fttol,_DistanceRight
  4200  0010CC  C028  F0A5         	movff	?___fttol+1,_DistanceRight+1
  4201  0010D0  0012               	return		;funcret
  4202  0010D2                     __end_of_SetDistanceRight:
  4203                           	opt stack 0
  4204                           pclatu	equ	0xFFB
  4205                           pclath	equ	0xFFA
  4206                           tblptru	equ	0xFF8
  4207                           tblptrh	equ	0xFF7
  4208                           tblptrl	equ	0xFF6
  4209                           tablat	equ	0xFF5
  4210                           prodh	equ	0xFF4
  4211                           prodl	equ	0xFF3
  4212                           intcon	equ	0xFF2
  4213                           postinc0	equ	0xFEE
  4214                           fsr0h	equ	0xFEA
  4215                           fsr0l	equ	0xFE9
  4216                           wreg	equ	0xFE8
  4217                           postdec1	equ	0xFE5
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           fsr2h	equ	0xFDA
  4222                           fsr2l	equ	0xFD9
  4223                           status	equ	0xFD8
  4224                           
  4225 ;; *************** function _ShowLecturesInLCD *****************
  4226 ;; Defined at:
  4227 ;;		line 92 in file "ADC.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4241 ;;      Params:         0       0       0       0       0       0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0
  4244 ;;      Totals:         0       0       0       0       0       0       0
  4245 ;;Total ram usage:        0 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    3
  4248 ;; This function calls:
  4249 ;;		_LCDGotoXY
  4250 ;;		_LCDWriteInt
  4251 ;;		_LCDWriteString
  4252 ;; This function is called by:
  4253 ;;		_SetDistanceRight
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text30
  4258  001226                     __ptext30:
  4259                           	opt stack 0
  4260  001226                     _ShowLecturesInLCD:
  4261                           	opt stack 20
  4262                           
  4263                           ;ADC.c: 94: LCDGotoXY(0,0);
  4264                           
  4265                           ;incstack = 0
  4266  001226  0E00               	movlw	0
  4267  001228  6E09               	movwf	LCDGotoXY@y,c
  4268  00122A  0E00               	movlw	0
  4269  00122C  EC55  F00A         	call	_LCDGotoXY
  4270                           
  4271                           ;ADC.c: 95: LCDWriteString("Right-Front-Left");
  4272  001230  0E01               	movlw	low STR_1
  4273  001232  6E09               	movwf	LCDWriteString@msg,c
  4274  001234  0E06               	movlw	high STR_1
  4275  001236  6E0A               	movwf	LCDWriteString@msg+1,c
  4276  001238  EC26  F007         	call	_LCDWriteString	;wreg free
  4277                           
  4278                           ;ADC.c: 97: LCDGotoXY(0,1);
  4279  00123C  0E01               	movlw	1
  4280  00123E  6E09               	movwf	LCDGotoXY@y,c
  4281  001240  0E00               	movlw	0
  4282  001242  EC55  F00A         	call	_LCDGotoXY
  4283                           
  4284                           ;ADC.c: 98: LCDWriteInt(DistanceRight, 3);
  4285  001246  C0A4  F009         	movff	_DistanceRight,LCDWriteInt@val
  4286  00124A  C0A5  F00A         	movff	_DistanceRight+1,LCDWriteInt@val+1
  4287  00124E  0E03               	movlw	3
  4288  001250  6E0B               	movwf	LCDWriteInt@field_length,c
  4289  001252  ECA4  F004         	call	_LCDWriteInt	;wreg free
  4290                           
  4291                           ;ADC.c: 100: LCDGotoXY(6,1);
  4292  001256  0E01               	movlw	1
  4293  001258  6E09               	movwf	LCDGotoXY@y,c
  4294  00125A  0E06               	movlw	6
  4295  00125C  EC55  F00A         	call	_LCDGotoXY
  4296                           
  4297                           ;ADC.c: 101: LCDWriteInt(DistanceCentral, 3);
  4298  001260  C0A0  F009         	movff	_DistanceCentral,LCDWriteInt@val
  4299  001264  C0A1  F00A         	movff	_DistanceCentral+1,LCDWriteInt@val+1
  4300  001268  0E03               	movlw	3
  4301  00126A  6E0B               	movwf	LCDWriteInt@field_length,c
  4302  00126C  ECA4  F004         	call	_LCDWriteInt	;wreg free
  4303                           
  4304                           ;ADC.c: 103: LCDGotoXY(12,1);
  4305  001270  0E01               	movlw	1
  4306  001272  6E09               	movwf	LCDGotoXY@y,c
  4307  001274  0E0C               	movlw	12
  4308  001276  EC55  F00A         	call	_LCDGotoXY
  4309                           
  4310                           ;ADC.c: 104: LCDWriteInt(DistanceLeft,3);
  4311  00127A  C0A2  F009         	movff	_DistanceLeft,LCDWriteInt@val
  4312  00127E  C0A3  F00A         	movff	_DistanceLeft+1,LCDWriteInt@val+1
  4313  001282  0E03               	movlw	3
  4314  001284  6E0B               	movwf	LCDWriteInt@field_length,c
  4315  001286  ECA4  F004         	call	_LCDWriteInt	;wreg free
  4316  00128A  0012               	return		;funcret
  4317  00128C                     __end_of_ShowLecturesInLCD:
  4318                           	opt stack 0
  4319                           pclatu	equ	0xFFB
  4320                           pclath	equ	0xFFA
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           postinc0	equ	0xFEE
  4329                           fsr0h	equ	0xFEA
  4330                           fsr0l	equ	0xFE9
  4331                           wreg	equ	0xFE8
  4332                           postdec1	equ	0xFE5
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           indf2	equ	0xFDF
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function _LCDWriteString *****************
  4341 ;; Defined at:
  4342 ;;		line 254 in file "lcd_hd44780_pic16.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  msg             2    8[COMRAM] PTR const unsigned char 
  4345 ;;		 -> STR_1(17), 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  cc              1   10[COMRAM] char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      void 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4357 ;;      Params:         2       0       0       0       0       0       0
  4358 ;;      Locals:         1       0       0       0       0       0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0
  4360 ;;      Totals:         3       0       0       0       0       0       0
  4361 ;;Total ram usage:        3 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    2
  4364 ;; This function calls:
  4365 ;;		i2_LCDByte
  4366 ;; This function is called by:
  4367 ;;		_ShowLecturesInLCD
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text31
  4372  000E4C                     __ptext31:
  4373                           	opt stack 0
  4374  000E4C                     _LCDWriteString:
  4375                           	opt stack 20
  4376                           
  4377                           ;lcd_hd44780_pic16.c: 284: while(*msg!='\0')
  4378                           
  4379                           ;incstack = 0
  4380  000E4C  D03C               	goto	i2l2425
  4381  000E4E                     i2l2405:
  4382                           
  4383                           ;lcd_hd44780_pic16.c: 285: {
  4384                           ;lcd_hd44780_pic16.c: 287: if(*msg=='%')
  4385  000E4E  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  4386  000E52  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  4387  000E56                     	if	0	;tblptru may be non-zero
  4388  000E56                     	endif
  4389  000E56                     	if	0	;tblptru may be non-zero
  4390  000E56                     	endif
  4391  000E56  0008               	tblrd		*
  4392  000E58  50F5               	movf	tablat,w,c
  4393  000E5A  0A25               	xorlw	37
  4394  000E5C  A4D8               	btfss	status,2,c
  4395  000E5E  D027               	goto	i2l2421
  4396                           
  4397                           ;lcd_hd44780_pic16.c: 288: {
  4398                           ;lcd_hd44780_pic16.c: 289: msg++;
  4399  000E60  4A09               	infsnz	LCDWriteString@msg,f,c
  4400  000E62  2A0A               	incf	LCDWriteString@msg+1,f,c
  4401                           
  4402                           ;lcd_hd44780_pic16.c: 290: int8_t cc=*msg-'0';
  4403  000E64  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  4404  000E68  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  4405  000E6C                     	if	0	;tblptru may be non-zero
  4406  000E6C                     	endif
  4407  000E6C                     	if	0	;tblptru may be non-zero
  4408  000E6C                     	endif
  4409  000E6C  0008               	tblrd		*
  4410  000E6E  50F5               	movf	tablat,w,c
  4411  000E70  0FD0               	addlw	208
  4412  000E72  6E0B               	movwf	LCDWriteString@cc,c
  4413                           
  4414                           ;lcd_hd44780_pic16.c: 292: if(cc>=0 && cc<=7)
  4415  000E74  BE0B               	btfsc	LCDWriteString@cc,7,c
  4416  000E76  D00B               	goto	i2l2417
  4417  000E78  500B               	movf	LCDWriteString@cc,w,c
  4418  000E7A  0A80               	xorlw	128
  4419  000E7C  0F78               	addlw	-136
  4420  000E7E  B0D8               	btfsc	status,0,c
  4421  000E80  D006               	goto	i2l2417
  4422                           
  4423                           ;lcd_hd44780_pic16.c: 293: {
  4424                           ;lcd_hd44780_pic16.c: 294: (LCDByte(cc,1));
  4425  000E82  0E01               	movlw	1
  4426  000E84  6E04               	movwf	i2LCDByte@isdata,c
  4427  000E86  500B               	movf	LCDWriteString@cc,w,c
  4428  000E88  EC75  F00A         	call	i2_LCDByte
  4429                           
  4430                           ;lcd_hd44780_pic16.c: 295: }
  4431  000E8C  D01A               	goto	i2l2423
  4432  000E8E                     i2l2417:
  4433                           
  4434                           ;lcd_hd44780_pic16.c: 296: else
  4435                           ;lcd_hd44780_pic16.c: 297: {
  4436                           ;lcd_hd44780_pic16.c: 298: (LCDByte('%',1));
  4437  000E8E  0E01               	movlw	1
  4438  000E90  6E04               	movwf	i2LCDByte@isdata,c
  4439  000E92  0E25               	movlw	37
  4440  000E94  EC75  F00A         	call	i2_LCDByte
  4441                           
  4442                           ;lcd_hd44780_pic16.c: 299: (LCDByte(*msg,1));
  4443  000E98  0E01               	movlw	1
  4444  000E9A  6E04               	movwf	i2LCDByte@isdata,c
  4445  000E9C  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  4446  000EA0  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  4447  000EA4                     	if	0	;tblptru may be non-zero
  4448  000EA4                     	endif
  4449  000EA4                     	if	0	;tblptru may be non-zero
  4450  000EA4                     	endif
  4451  000EA4  0008               	tblrd		*
  4452  000EA6  50F5               	movf	tablat,w,c
  4453  000EA8  EC75  F00A         	call	i2_LCDByte
  4454                           
  4455                           ;lcd_hd44780_pic16.c: 300: }
  4456                           ;lcd_hd44780_pic16.c: 301: }
  4457  000EAC  D00A               	goto	i2l2423
  4458  000EAE                     i2l2421:
  4459                           
  4460                           ;lcd_hd44780_pic16.c: 302: else
  4461                           ;lcd_hd44780_pic16.c: 303: {
  4462                           ;lcd_hd44780_pic16.c: 304: (LCDByte(*msg,1));
  4463  000EAE  0E01               	movlw	1
  4464  000EB0  6E04               	movwf	i2LCDByte@isdata,c
  4465  000EB2  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  4466  000EB6  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  4467  000EBA                     	if	0	;tblptru may be non-zero
  4468  000EBA                     	endif
  4469  000EBA                     	if	0	;tblptru may be non-zero
  4470  000EBA                     	endif
  4471  000EBA  0008               	tblrd		*
  4472  000EBC  50F5               	movf	tablat,w,c
  4473  000EBE  EC75  F00A         	call	i2_LCDByte
  4474  000EC2                     i2l2423:
  4475                           
  4476                           ;lcd_hd44780_pic16.c: 305: }
  4477                           ;lcd_hd44780_pic16.c: 306: msg++;
  4478  000EC2  4A09               	infsnz	LCDWriteString@msg,f,c
  4479  000EC4  2A0A               	incf	LCDWriteString@msg+1,f,c
  4480  000EC6                     i2l2425:
  4481  000EC6  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  4482  000ECA  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  4483  000ECE                     	if	0	;tblptru may be non-zero
  4484  000ECE                     	endif
  4485  000ECE                     	if	0	;tblptru may be non-zero
  4486  000ECE                     	endif
  4487  000ECE  0008               	tblrd		*
  4488  000ED0  50F5               	movf	tablat,w,c
  4489  000ED2  0900               	iorlw	0
  4490  000ED4  B4D8               	btfsc	status,2,c
  4491  000ED6  0012               	return	
  4492  000ED8  D7BA               	goto	i2l2405
  4493  000EDA                     __end_of_LCDWriteString:
  4494                           	opt stack 0
  4495                           pclatu	equ	0xFFB
  4496                           pclath	equ	0xFFA
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           intcon	equ	0xFF2
  4504                           postinc0	equ	0xFEE
  4505                           fsr0h	equ	0xFEA
  4506                           fsr0l	equ	0xFE9
  4507                           wreg	equ	0xFE8
  4508                           postdec1	equ	0xFE5
  4509                           fsr1h	equ	0xFE2
  4510                           fsr1l	equ	0xFE1
  4511                           indf2	equ	0xFDF
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function _LCDWriteInt *****************
  4517 ;; Defined at:
  4518 ;;		line 310 in file "lcd_hd44780_pic16.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  val             2    8[COMRAM] int 
  4521 ;;  field_length    1   10[COMRAM] char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  str             5   13[COMRAM] unsigned char [5]
  4524 ;;  i               2   20[COMRAM] int 
  4525 ;;  j               2   18[COMRAM] int 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4535 ;;      Params:         3       0       0       0       0       0       0
  4536 ;;      Locals:         9       0       0       0       0       0       0
  4537 ;;      Temps:          2       0       0       0       0       0       0
  4538 ;;      Totals:        14       0       0       0       0       0       0
  4539 ;;Total ram usage:       14 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    2
  4542 ;; This function calls:
  4543 ;;		___awdiv
  4544 ;;		___awmod
  4545 ;;		i2_LCDByte
  4546 ;; This function is called by:
  4547 ;;		_ShowLecturesInLCD
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text32
  4552  000948                     __ptext32:
  4553                           	opt stack 0
  4554  000948                     _LCDWriteInt:
  4555                           	opt stack 20
  4556                           
  4557                           ;lcd_hd44780_pic16.c: 323: char str[5]={0,0,0,0,0};
  4558                           
  4559                           ;incstack = 0
  4560  000948  EE20  F0B8         	lfsr	2,LCDWriteInt@F4236
  4561  00094C  EE10  F00E         	lfsr	1,LCDWriteInt@str
  4562  000950  0E04               	movlw	4
  4563  000952                     i2u126_41:
  4564  000952  CFDB FFE3          	movff	plusw2,plusw1
  4565  000956  06E8               	decf	wreg,f,c
  4566  000958  E2FC               	bc	i2u126_41
  4567                           
  4568                           ;lcd_hd44780_pic16.c: 324: int i=4,j=0;
  4569  00095A  0E00               	movlw	0
  4570  00095C  6E16               	movwf	LCDWriteInt@i+1,c
  4571  00095E  0E04               	movlw	4
  4572  000960  6E15               	movwf	LCDWriteInt@i,c
  4573  000962  0E00               	movlw	0
  4574  000964  6E14               	movwf	LCDWriteInt@j+1,c
  4575  000966  0E00               	movlw	0
  4576  000968  6E13               	movwf	LCDWriteInt@j,c
  4577                           
  4578                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  4579  00096A  AE0A               	btfss	LCDWriteInt@val+1,7,c
  4580  00096C  D02D               	goto	i2l2445
  4581                           
  4582                           ;lcd_hd44780_pic16.c: 328: {
  4583                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  4584  00096E  0E01               	movlw	1
  4585  000970  6E04               	movwf	i2LCDByte@isdata,c
  4586  000972  0E2D               	movlw	45
  4587  000974  EC75  F00A         	call	i2_LCDByte
  4588                           
  4589                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  4590  000978  6C09               	negf	LCDWriteInt@val,c
  4591  00097A  1E0A               	comf	LCDWriteInt@val+1,f,c
  4592  00097C  B0D8               	btfsc	status,0,c
  4593  00097E  2A0A               	incf	LCDWriteInt@val+1,f,c
  4594                           
  4595                           ;lcd_hd44780_pic16.c: 331: }
  4596                           ;lcd_hd44780_pic16.c: 333: while(val)
  4597  000980  D023               	goto	i2l2445
  4598  000982                     i2l2439:
  4599                           
  4600                           ;lcd_hd44780_pic16.c: 334: {
  4601                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  4602  000982  0E0E               	movlw	low LCDWriteInt@str
  4603  000984  2415               	addwf	LCDWriteInt@i,w,c
  4604  000986  6ED9               	movwf	fsr2l,c
  4605  000988  0E00               	movlw	high LCDWriteInt@str
  4606  00098A  2016               	addwfc	LCDWriteInt@i+1,w,c
  4607  00098C  6EDA               	movwf	fsr2h,c
  4608  00098E  C009  F001         	movff	LCDWriteInt@val,___awmod@dividend
  4609  000992  C00A  F002         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  4610  000996  0E00               	movlw	0
  4611  000998  6E04               	movwf	___awmod@divisor+1,c
  4612  00099A  0E0A               	movlw	10
  4613  00099C  6E03               	movwf	___awmod@divisor,c
  4614  00099E  ECDB  F008         	call	___awmod	;wreg free
  4615  0009A2  5001               	movf	?___awmod,w,c
  4616  0009A4  6EDF               	movwf	indf2,c
  4617                           
  4618                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  4619  0009A6  C009  F001         	movff	LCDWriteInt@val,___awdiv@dividend
  4620  0009AA  C00A  F002         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  4621  0009AE  0E00               	movlw	0
  4622  0009B0  6E04               	movwf	___awdiv@divisor+1,c
  4623  0009B2  0E0A               	movlw	10
  4624  0009B4  6E03               	movwf	___awdiv@divisor,c
  4625  0009B6  ECB0  F007         	call	___awdiv	;wreg free
  4626  0009BA  C001  F009         	movff	?___awdiv,LCDWriteInt@val
  4627  0009BE  C002  F00A         	movff	?___awdiv+1,LCDWriteInt@val+1
  4628                           
  4629                           ;lcd_hd44780_pic16.c: 337: i--;
  4630  0009C2  0615               	decf	LCDWriteInt@i,f,c
  4631  0009C4  A0D8               	btfss	status,0,c
  4632  0009C6  0616               	decf	LCDWriteInt@i+1,f,c
  4633  0009C8                     i2l2445:
  4634  0009C8  5009               	movf	LCDWriteInt@val,w,c
  4635  0009CA  100A               	iorwf	LCDWriteInt@val+1,w,c
  4636  0009CC  A4D8               	btfss	status,2,c
  4637  0009CE  D7D9               	goto	i2l2439
  4638                           
  4639                           ;lcd_hd44780_pic16.c: 338: }
  4640                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  4641  0009D0  280B               	incf	LCDWriteInt@field_length,w,c
  4642  0009D2  B4D8               	btfsc	status,2,c
  4643  0009D4  D003               	goto	i2l2453
  4644  0009D6  D00C               	goto	i2l2455
  4645  0009D8                     i2l2451:
  4646  0009D8  4A13               	infsnz	LCDWriteInt@j,f,c
  4647  0009DA  2A14               	incf	LCDWriteInt@j+1,f,c
  4648  0009DC                     i2l2453:
  4649  0009DC  0E0E               	movlw	low LCDWriteInt@str
  4650  0009DE  2413               	addwf	LCDWriteInt@j,w,c
  4651  0009E0  6ED9               	movwf	fsr2l,c
  4652  0009E2  0E00               	movlw	high LCDWriteInt@str
  4653  0009E4  2014               	addwfc	LCDWriteInt@j+1,w,c
  4654  0009E6  6EDA               	movwf	fsr2h,c
  4655  0009E8  50DF               	movf	indf2,w,c
  4656  0009EA  A4D8               	btfss	status,2,c
  4657  0009EC  D010               	goto	i2l2457
  4658  0009EE  D7F4               	goto	i2l2451
  4659  0009F0                     i2l2455:
  4660                           
  4661                           ;lcd_hd44780_pic16.c: 341: else
  4662                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  4663  0009F0  C00B  F00C         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  4664  0009F4  6A0D               	clrf	(??_LCDWriteInt+1)& (0+255),c
  4665  0009F6  BE0C               	btfsc	??_LCDWriteInt& (0+255),7,c
  4666  0009F8  060D               	decf	(??_LCDWriteInt+1)& (0+255),f,c
  4667  0009FA  1E0C               	comf	??_LCDWriteInt,f,c
  4668  0009FC  1E0D               	comf	??_LCDWriteInt+1,f,c
  4669  0009FE  4A0C               	infsnz	??_LCDWriteInt,f,c
  4670  000A00  2A0D               	incf	??_LCDWriteInt+1,f,c
  4671  000A02  0E05               	movlw	5
  4672  000A04  240C               	addwf	??_LCDWriteInt,w,c
  4673  000A06  6E13               	movwf	LCDWriteInt@j,c
  4674  000A08  0E00               	movlw	0
  4675  000A0A  200D               	addwfc	??_LCDWriteInt+1,w,c
  4676  000A0C  6E14               	movwf	LCDWriteInt@j+1,c
  4677  000A0E                     i2l2457:
  4678                           
  4679                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  4680  000A0E  C013  F015         	movff	LCDWriteInt@j,LCDWriteInt@i
  4681  000A12  C014  F016         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  4682  000A16  BE16               	btfsc	LCDWriteInt@i+1,7,c
  4683  000A18  D006               	goto	i2l2461
  4684  000A1A  5016               	movf	LCDWriteInt@i+1,w,c
  4685  000A1C  E113               	bnz	i2l269
  4686  000A1E  0E05               	movlw	5
  4687  000A20  5C15               	subwf	LCDWriteInt@i,w,c
  4688  000A22  B0D8               	btfsc	status,0,c
  4689  000A24  0012               	return	
  4690  000A26                     i2l2461:
  4691                           
  4692                           ;lcd_hd44780_pic16.c: 346: {
  4693                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  4694  000A26  0E01               	movlw	1
  4695  000A28  6E04               	movwf	i2LCDByte@isdata,c
  4696  000A2A  0E0E               	movlw	low LCDWriteInt@str
  4697  000A2C  2415               	addwf	LCDWriteInt@i,w,c
  4698  000A2E  6ED9               	movwf	fsr2l,c
  4699  000A30  0E00               	movlw	high LCDWriteInt@str
  4700  000A32  2016               	addwfc	LCDWriteInt@i+1,w,c
  4701  000A34  6EDA               	movwf	fsr2h,c
  4702  000A36  50DF               	movf	indf2,w,c
  4703  000A38  0F30               	addlw	48
  4704  000A3A  EC75  F00A         	call	i2_LCDByte
  4705  000A3E  4A15               	infsnz	LCDWriteInt@i,f,c
  4706  000A40  2A16               	incf	LCDWriteInt@i+1,f,c
  4707  000A42  D7E9               	goto	L1
  4708  000A44                     i2l269:
  4709  000A44  0012               	return		;funcret
  4710  000A46                     __end_of_LCDWriteInt:
  4711                           	opt stack 0
  4712                           pclatu	equ	0xFFB
  4713                           pclath	equ	0xFFA
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           postinc0	equ	0xFEE
  4722                           fsr0h	equ	0xFEA
  4723                           fsr0l	equ	0xFE9
  4724                           wreg	equ	0xFE8
  4725                           postdec1	equ	0xFE5
  4726                           plusw1	equ	0xFE3
  4727                           fsr1h	equ	0xFE2
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           plusw2	equ	0xFDB
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function ___awmod *****************
  4736 ;; Defined at:
  4737 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  dividend        2    0[COMRAM] int 
  4740 ;;  divisor         2    2[COMRAM] int 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  sign            1    5[COMRAM] unsigned char 
  4743 ;;  counter         1    4[COMRAM] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  2    0[COMRAM] int 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4753 ;;      Params:         4       0       0       0       0       0       0
  4754 ;;      Locals:         2       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0
  4756 ;;      Totals:         6       0       0       0       0       0       0
  4757 ;;Total ram usage:        6 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_LCDWriteInt
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text33
  4767  0011B6                     __ptext33:
  4768                           	opt stack 0
  4769  0011B6                     ___awmod:
  4770                           	opt stack 21
  4771                           
  4772                           ;incstack = 0
  4773  0011B6  0E00               	movlw	0
  4774  0011B8  6E06               	movwf	___awmod@sign,c
  4775  0011BA  AE02               	btfss	___awmod@dividend+1,7,c
  4776  0011BC  D006               	goto	i2l2305
  4777  0011BE  6C01               	negf	___awmod@dividend,c
  4778  0011C0  1E02               	comf	___awmod@dividend+1,f,c
  4779  0011C2  B0D8               	btfsc	status,0,c
  4780  0011C4  2A02               	incf	___awmod@dividend+1,f,c
  4781  0011C6  0E01               	movlw	1
  4782  0011C8  6E06               	movwf	___awmod@sign,c
  4783  0011CA                     i2l2305:
  4784  0011CA  AE04               	btfss	___awmod@divisor+1,7,c
  4785  0011CC  D004               	goto	i2l2309
  4786  0011CE  6C03               	negf	___awmod@divisor,c
  4787  0011D0  1E04               	comf	___awmod@divisor+1,f,c
  4788  0011D2  B0D8               	btfsc	status,0,c
  4789  0011D4  2A04               	incf	___awmod@divisor+1,f,c
  4790  0011D6                     i2l2309:
  4791  0011D6  5003               	movf	___awmod@divisor,w,c
  4792  0011D8  1004               	iorwf	___awmod@divisor+1,w,c
  4793  0011DA  B4D8               	btfsc	status,2,c
  4794  0011DC  D018               	goto	i2l2325
  4795  0011DE  0E01               	movlw	1
  4796  0011E0  6E05               	movwf	___awmod@counter,c
  4797  0011E2  D004               	goto	i2l2315
  4798  0011E4                     i2l2313:
  4799  0011E4  90D8               	bcf	status,0,c
  4800  0011E6  3603               	rlcf	___awmod@divisor,f,c
  4801  0011E8  3604               	rlcf	___awmod@divisor+1,f,c
  4802  0011EA  2A05               	incf	___awmod@counter,f,c
  4803  0011EC                     i2l2315:
  4804  0011EC  AE04               	btfss	___awmod@divisor+1,7,c
  4805  0011EE  D7FA               	goto	i2l2313
  4806  0011F0                     i2l2317:
  4807  0011F0  5003               	movf	___awmod@divisor,w,c
  4808  0011F2  5C01               	subwf	___awmod@dividend,w,c
  4809  0011F4  5004               	movf	___awmod@divisor+1,w,c
  4810  0011F6  5802               	subwfb	___awmod@dividend+1,w,c
  4811  0011F8  A0D8               	btfss	status,0,c
  4812  0011FA  D004               	goto	i2l2321
  4813  0011FC  5003               	movf	___awmod@divisor,w,c
  4814  0011FE  5E01               	subwf	___awmod@dividend,f,c
  4815  001200  5004               	movf	___awmod@divisor+1,w,c
  4816  001202  5A02               	subwfb	___awmod@dividend+1,f,c
  4817  001204                     i2l2321:
  4818  001204  90D8               	bcf	status,0,c
  4819  001206  3204               	rrcf	___awmod@divisor+1,f,c
  4820  001208  3203               	rrcf	___awmod@divisor,f,c
  4821  00120A  2E05               	decfsz	___awmod@counter,f,c
  4822  00120C  D7F1               	goto	i2l2317
  4823  00120E                     i2l2325:
  4824  00120E  5006               	movf	___awmod@sign,w,c
  4825  001210  B4D8               	btfsc	status,2,c
  4826  001212  D004               	goto	i2l2329
  4827  001214  6C01               	negf	___awmod@dividend,c
  4828  001216  1E02               	comf	___awmod@dividend+1,f,c
  4829  001218  B0D8               	btfsc	status,0,c
  4830  00121A  2A02               	incf	___awmod@dividend+1,f,c
  4831  00121C                     i2l2329:
  4832  00121C  C001  F001         	movff	___awmod@dividend,?___awmod
  4833  001220  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4834  001224  0012               	return	
  4835  001226                     __end_of___awmod:
  4836                           	opt stack 0
  4837                           pclatu	equ	0xFFB
  4838                           pclath	equ	0xFFA
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           postinc0	equ	0xFEE
  4847                           fsr0h	equ	0xFEA
  4848                           fsr0l	equ	0xFE9
  4849                           wreg	equ	0xFE8
  4850                           postdec1	equ	0xFE5
  4851                           plusw1	equ	0xFE3
  4852                           fsr1h	equ	0xFE2
  4853                           fsr1l	equ	0xFE1
  4854                           indf2	equ	0xFDF
  4855                           plusw2	equ	0xFDB
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function ___awdiv *****************
  4861 ;; Defined at:
  4862 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  dividend        2    0[COMRAM] int 
  4865 ;;  divisor         2    2[COMRAM] int 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  quotient        2    6[COMRAM] int 
  4868 ;;  sign            1    5[COMRAM] unsigned char 
  4869 ;;  counter         1    4[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  2    0[COMRAM] int 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4879 ;;      Params:         4       0       0       0       0       0       0
  4880 ;;      Locals:         4       0       0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0       0       0
  4882 ;;      Totals:         8       0       0       0       0       0       0
  4883 ;;Total ram usage:        8 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_LCDWriteInt
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text34
  4893  000F60                     __ptext34:
  4894                           	opt stack 0
  4895  000F60                     ___awdiv:
  4896                           	opt stack 21
  4897                           
  4898                           ;incstack = 0
  4899  000F60  0E00               	movlw	0
  4900  000F62  6E06               	movwf	___awdiv@sign,c
  4901  000F64  AE04               	btfss	___awdiv@divisor+1,7,c
  4902  000F66  D006               	goto	i2l2261
  4903  000F68  6C03               	negf	___awdiv@divisor,c
  4904  000F6A  1E04               	comf	___awdiv@divisor+1,f,c
  4905  000F6C  B0D8               	btfsc	status,0,c
  4906  000F6E  2A04               	incf	___awdiv@divisor+1,f,c
  4907  000F70  0E01               	movlw	1
  4908  000F72  6E06               	movwf	___awdiv@sign,c
  4909  000F74                     i2l2261:
  4910  000F74  AE02               	btfss	___awdiv@dividend+1,7,c
  4911  000F76  D006               	goto	i2l2267
  4912  000F78  6C01               	negf	___awdiv@dividend,c
  4913  000F7A  1E02               	comf	___awdiv@dividend+1,f,c
  4914  000F7C  B0D8               	btfsc	status,0,c
  4915  000F7E  2A02               	incf	___awdiv@dividend+1,f,c
  4916  000F80  0E01               	movlw	1
  4917  000F82  1A06               	xorwf	___awdiv@sign,f,c
  4918  000F84                     i2l2267:
  4919  000F84  0E00               	movlw	0
  4920  000F86  6E08               	movwf	___awdiv@quotient+1,c
  4921  000F88  0E00               	movlw	0
  4922  000F8A  6E07               	movwf	___awdiv@quotient,c
  4923  000F8C  5003               	movf	___awdiv@divisor,w,c
  4924  000F8E  1004               	iorwf	___awdiv@divisor+1,w,c
  4925  000F90  B4D8               	btfsc	status,2,c
  4926  000F92  D01C               	goto	i2l2289
  4927  000F94  0E01               	movlw	1
  4928  000F96  6E05               	movwf	___awdiv@counter,c
  4929  000F98  D004               	goto	i2l2275
  4930  000F9A                     i2l2273:
  4931  000F9A  90D8               	bcf	status,0,c
  4932  000F9C  3603               	rlcf	___awdiv@divisor,f,c
  4933  000F9E  3604               	rlcf	___awdiv@divisor+1,f,c
  4934  000FA0  2A05               	incf	___awdiv@counter,f,c
  4935  000FA2                     i2l2275:
  4936  000FA2  AE04               	btfss	___awdiv@divisor+1,7,c
  4937  000FA4  D7FA               	goto	i2l2273
  4938  000FA6                     i2l2277:
  4939  000FA6  90D8               	bcf	status,0,c
  4940  000FA8  3607               	rlcf	___awdiv@quotient,f,c
  4941  000FAA  3608               	rlcf	___awdiv@quotient+1,f,c
  4942  000FAC  5003               	movf	___awdiv@divisor,w,c
  4943  000FAE  5C01               	subwf	___awdiv@dividend,w,c
  4944  000FB0  5004               	movf	___awdiv@divisor+1,w,c
  4945  000FB2  5802               	subwfb	___awdiv@dividend+1,w,c
  4946  000FB4  A0D8               	btfss	status,0,c
  4947  000FB6  D005               	goto	i2l2285
  4948  000FB8  5003               	movf	___awdiv@divisor,w,c
  4949  000FBA  5E01               	subwf	___awdiv@dividend,f,c
  4950  000FBC  5004               	movf	___awdiv@divisor+1,w,c
  4951  000FBE  5A02               	subwfb	___awdiv@dividend+1,f,c
  4952  000FC0  8007               	bsf	___awdiv@quotient,0,c
  4953  000FC2                     i2l2285:
  4954  000FC2  90D8               	bcf	status,0,c
  4955  000FC4  3204               	rrcf	___awdiv@divisor+1,f,c
  4956  000FC6  3203               	rrcf	___awdiv@divisor,f,c
  4957  000FC8  2E05               	decfsz	___awdiv@counter,f,c
  4958  000FCA  D7ED               	goto	i2l2277
  4959  000FCC                     i2l2289:
  4960  000FCC  5006               	movf	___awdiv@sign,w,c
  4961  000FCE  B4D8               	btfsc	status,2,c
  4962  000FD0  D004               	goto	i2l2293
  4963  000FD2  6C07               	negf	___awdiv@quotient,c
  4964  000FD4  1E08               	comf	___awdiv@quotient+1,f,c
  4965  000FD6  B0D8               	btfsc	status,0,c
  4966  000FD8  2A08               	incf	___awdiv@quotient+1,f,c
  4967  000FDA                     i2l2293:
  4968  000FDA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4969  000FDE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4970  000FE2  0012               	return	
  4971  000FE4                     __end_of___awdiv:
  4972                           	opt stack 0
  4973                           pclatu	equ	0xFFB
  4974                           pclath	equ	0xFFA
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           fsr0h	equ	0xFEA
  4984                           fsr0l	equ	0xFE9
  4985                           wreg	equ	0xFE8
  4986                           postdec1	equ	0xFE5
  4987                           plusw1	equ	0xFE3
  4988                           fsr1h	equ	0xFE2
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           plusw2	equ	0xFDB
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function _LCDGotoXY *****************
  4997 ;; Defined at:
  4998 ;;		line 355 in file "lcd_hd44780_pic16.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  x               1    wreg     unsigned char 
  5001 ;;  y               1    8[COMRAM] unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  x               1    9[COMRAM] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, status,0, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5013 ;;      Params:         1       0       0       0       0       0       0
  5014 ;;      Locals:         1       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0
  5016 ;;      Totals:         2       0       0       0       0       0       0
  5017 ;;Total ram usage:        2 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    2
  5020 ;; This function calls:
  5021 ;;		i2_LCDByte
  5022 ;; This function is called by:
  5023 ;;		_ShowLecturesInLCD
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text35
  5028  0014AA                     __ptext35:
  5029                           	opt stack 0
  5030  0014AA                     _LCDGotoXY:
  5031                           	opt stack 20
  5032                           
  5033                           ;incstack = 0
  5034                           ;LCDGotoXY@x stored from wreg
  5035  0014AA  6E0A               	movwf	LCDGotoXY@x,c
  5036                           
  5037                           ;lcd_hd44780_pic16.c: 357: if(x>=20) return;
  5038  0014AC  0E13               	movlw	19
  5039  0014AE  640A               	cpfsgt	LCDGotoXY@x,c
  5040  0014B0  D008               	goto	i2l2397
  5041  0014B2  0012               	return	
  5042  0014B4                     i2l2389:
  5043                           
  5044                           ;lcd_hd44780_pic16.c: 366: x|=0b01000000;
  5045  0014B4  8C0A               	bsf	LCDGotoXY@x,6,c
  5046                           
  5047                           ;lcd_hd44780_pic16.c: 367: break;
  5048  0014B6  D012               	goto	i2l2399
  5049  0014B8                     i2l2391:
  5050                           
  5051                           ;lcd_hd44780_pic16.c: 369: x+=0x14;
  5052  0014B8  0E14               	movlw	20
  5053  0014BA  D001               	goto	L2
  5054  0014BC                     i2l2393:
  5055                           
  5056                           ;lcd_hd44780_pic16.c: 372: x+=0x54;
  5057  0014BC  0E54               	movlw	84
  5058  0014BE                     L2:
  5059  0014BE  260A               	addwf	LCDGotoXY@x,f,c
  5060                           
  5061                           ;lcd_hd44780_pic16.c: 374: }
  5062                           
  5063                           ;lcd_hd44780_pic16.c: 373: break;
  5064  0014C0  D00D               	goto	i2l2399
  5065  0014C2                     i2l2397:
  5066  0014C2  5009               	movf	LCDGotoXY@y,w,c
  5067                           
  5068                           ; Switch size 1, requested type "space"
  5069                           ; Number of cases is 4, Range of values is 0 to 3
  5070                           ; switch strategies available:
  5071                           ; Name         Instructions Cycles
  5072                           ; simple_byte           13     7 (average)
  5073                           ;	Chosen strategy is simple_byte
  5074  0014C4  0A00               	xorlw	0	; case 0
  5075  0014C6  B4D8               	btfsc	status,2,c
  5076  0014C8  D009               	goto	i2l2399
  5077  0014CA  0A01               	xorlw	1	; case 1
  5078  0014CC  B4D8               	btfsc	status,2,c
  5079  0014CE  D7F2               	goto	i2l2389
  5080  0014D0  0A03               	xorlw	3	; case 2
  5081  0014D2  B4D8               	btfsc	status,2,c
  5082  0014D4  D7F1               	goto	i2l2391
  5083  0014D6  0A01               	xorlw	1	; case 3
  5084  0014D8  B4D8               	btfsc	status,2,c
  5085  0014DA  D7F0               	goto	i2l2393
  5086  0014DC                     i2l2399:
  5087                           
  5088                           ;lcd_hd44780_pic16.c: 396: x|=0b10000000;
  5089  0014DC  8E0A               	bsf	LCDGotoXY@x,7,c
  5090                           
  5091                           ;lcd_hd44780_pic16.c: 397: (LCDByte(x,0));
  5092  0014DE  0E00               	movlw	0
  5093  0014E0  6E04               	movwf	i2LCDByte@isdata,c
  5094  0014E2  500A               	movf	LCDGotoXY@x,w,c
  5095  0014E4  EC75  F00A         	call	i2_LCDByte
  5096  0014E8  0012               	return		;funcret
  5097  0014EA                     __end_of_LCDGotoXY:
  5098                           	opt stack 0
  5099                           pclatu	equ	0xFFB
  5100                           pclath	equ	0xFFA
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           postinc0	equ	0xFEE
  5109                           fsr0h	equ	0xFEA
  5110                           fsr0l	equ	0xFE9
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           plusw1	equ	0xFE3
  5114                           fsr1h	equ	0xFE2
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function i2_LCDByte *****************
  5123 ;; Defined at:
  5124 ;;		line 83 in file "lcd_hd44780_pic16.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  c               1    wreg     unsigned char 
  5127 ;;  isdata          1    3[COMRAM] unsigned char 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  c               1    6[COMRAM] unsigned char 
  5130 ;;  LCDByte         1    7[COMRAM] unsigned char 
  5131 ;;  LCDByte         1    5[COMRAM] unsigned char 
  5132 ;;  LCDByte         1    4[COMRAM] unsigned char 
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      void 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2, status,0, cstack
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5142 ;;      Params:         1       0       0       0       0       0       0
  5143 ;;      Locals:         4       0       0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0
  5145 ;;      Totals:         5       0       0       0       0       0       0
  5146 ;;Total ram usage:        5 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    1
  5149 ;; This function calls:
  5150 ;;		i2_LCDBusyLoop
  5151 ;; This function is called by:
  5152 ;;		_LCDWriteString
  5153 ;;		_LCDWriteInt
  5154 ;;		_LCDGotoXY
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text36
  5159  0014EA                     __ptext36:
  5160                           	opt stack 0
  5161  0014EA                     i2_LCDByte:
  5162                           	opt stack 20
  5163                           
  5164                           ;incstack = 0
  5165                           ;i2LCDByte@c stored from wreg
  5166  0014EA  6E07               	movwf	i2LCDByte@c,c
  5167                           
  5168                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  5169                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  5170                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  5171  0014EC  3807               	swapf	i2LCDByte@c,w,c
  5172  0014EE  0B0F               	andlw	15
  5173  0014F0  6E05               	movwf	i2LCDByte@hn,c
  5174                           
  5175                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  5176  0014F2  5007               	movf	i2LCDByte@c,w,c
  5177  0014F4  0B0F               	andlw	15
  5178  0014F6  6E06               	movwf	i2LCDByte@ln,c
  5179                           
  5180                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  5181  0014F8  5004               	movf	i2LCDByte@isdata,w,c
  5182  0014FA  A4D8               	btfss	status,2,c
  5183  0014FC  D002               	goto	i2l231
  5184                           
  5185                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  5186  0014FE  9883               	bcf	3971,4,c	;volatile
  5187  001500  D001               	goto	i2l232
  5188  001502                     i2l231:
  5189                           
  5190                           ;lcd_hd44780_pic16.c: 100: else
  5191                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  5192  001502  8883               	bsf	3971,4,c	;volatile
  5193  001504                     i2l232:
  5194                           
  5195                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5196                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  5197  001504  8C83               	bsf	3971,6,c	;volatile
  5198                           
  5199                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  5200  001506  5083               	movf	3971,w,c	;volatile
  5201  001508  0BF0               	andlw	240
  5202  00150A  1005               	iorwf	i2LCDByte@hn,w,c
  5203  00150C  6E08               	movwf	i2LCDByte@temp,c
  5204                           
  5205                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  5206  00150E  C008  FF83         	movff	i2LCDByte@temp,3971	;volatile
  5207                           
  5208                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  5209                           
  5210                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5211  001512  9C83               	bcf	3971,6,c	;volatile
  5212                           
  5213                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  5214                           
  5215                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5216  001514  8C83               	bsf	3971,6,c	;volatile
  5217                           
  5218                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  5219  001516  5083               	movf	3971,w,c	;volatile
  5220  001518  0BF0               	andlw	240
  5221  00151A  1006               	iorwf	i2LCDByte@ln,w,c
  5222  00151C  6E08               	movwf	i2LCDByte@temp,c
  5223                           
  5224                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  5225  00151E  C008  FF83         	movff	i2LCDByte@temp,3971	;volatile
  5226                           
  5227                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  5228                           
  5229                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5230  001522  9C83               	bcf	3971,6,c	;volatile
  5231                           
  5232                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  5233                           
  5234                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5235  001524  EC95  F00A         	call	i2_LCDBusyLoop	;wreg free
  5236  001528  0012               	return		;funcret
  5237  00152A                     __end_ofi2_LCDByte:
  5238                           	opt stack 0
  5239                           pclatu	equ	0xFFB
  5240                           pclath	equ	0xFFA
  5241                           tblptru	equ	0xFF8
  5242                           tblptrh	equ	0xFF7
  5243                           tblptrl	equ	0xFF6
  5244                           tablat	equ	0xFF5
  5245                           prodh	equ	0xFF4
  5246                           prodl	equ	0xFF3
  5247                           intcon	equ	0xFF2
  5248                           postinc0	equ	0xFEE
  5249                           fsr0h	equ	0xFEA
  5250                           fsr0l	equ	0xFE9
  5251                           wreg	equ	0xFE8
  5252                           postdec1	equ	0xFE5
  5253                           plusw1	equ	0xFE3
  5254                           fsr1h	equ	0xFE2
  5255                           fsr1l	equ	0xFE1
  5256                           indf2	equ	0xFDF
  5257                           plusw2	equ	0xFDB
  5258                           fsr2h	equ	0xFDA
  5259                           fsr2l	equ	0xFD9
  5260                           status	equ	0xFD8
  5261                           
  5262 ;; *************** function i2_LCDBusyLoop *****************
  5263 ;; Defined at:
  5264 ;;		line 138 in file "lcd_hd44780_pic16.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  LCDBusyLoop     1    2[COMRAM] unsigned char 
  5269 ;;  LCDBusyLoop     1    1[COMRAM] unsigned char 
  5270 ;;  LCDBusyLoop     1    0[COMRAM] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      void 
  5273 ;; Registers used:
  5274 ;;		wreg, status,2, status,0
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5280 ;;      Params:         0       0       0       0       0       0       0
  5281 ;;      Locals:         3       0       0       0       0       0       0
  5282 ;;      Temps:          0       0       0       0       0       0       0
  5283 ;;      Totals:         3       0       0       0       0       0       0
  5284 ;;Total ram usage:        3 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; This function calls:
  5287 ;;		Nothing
  5288 ;; This function is called by:
  5289 ;;		i2_LCDByte
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text37
  5294  00152A                     __ptext37:
  5295                           	opt stack 0
  5296  00152A                     i2_LCDBusyLoop:
  5297                           	opt stack 20
  5298                           
  5299                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  5300                           
  5301                           ;incstack = 0
  5302  00152A  0E00               	movlw	0
  5303  00152C  6E03               	movwf	i2LCDBusyLoop@status,c
  5304                           
  5305                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  5306  00152E  0E0F               	movlw	15
  5307  001530  1295               	iorwf	3989,f,c	;volatile
  5308                           
  5309                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  5310  001532  8A83               	bsf	3971,5,c	;volatile
  5311                           
  5312                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  5313  001534  9883               	bcf	3971,4,c	;volatile
  5314  001536                     i2l2209:
  5315                           
  5316                           ;lcd_hd44780_pic16.c: 157: {
  5317                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  5318  001536  8C83               	bsf	3971,6,c	;volatile
  5319                           
  5320                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  5321                           
  5322                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5323  001538  CF83 F003          	movff	3971,i2LCDBusyLoop@status	;volatile
  5324                           
  5325                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  5326  00153C  3803               	swapf	i2LCDBusyLoop@status,w,c
  5327  00153E  0BF0               	andlw	240
  5328  001540  6E03               	movwf	i2LCDBusyLoop@status,c
  5329                           
  5330                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  5331                           
  5332                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5333  001542  9C83               	bcf	3971,6,c	;volatile
  5334                           
  5335                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  5336                           
  5337                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5338  001544  8C83               	bsf	3971,6,c	;volatile
  5339                           
  5340                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  5341                           
  5342                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5343  001546  CF83 F002          	movff	3971,i2LCDBusyLoop@temp	;volatile
  5344                           
  5345                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  5346  00154A  0E0F               	movlw	15
  5347  00154C  1602               	andwf	i2LCDBusyLoop@temp,f,c
  5348                           
  5349                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  5350  00154E  5003               	movf	i2LCDBusyLoop@status,w,c
  5351  001550  1002               	iorwf	i2LCDBusyLoop@temp,w,c
  5352  001552  6E03               	movwf	i2LCDBusyLoop@status,c
  5353                           
  5354                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  5355  001554  5003               	movf	i2LCDBusyLoop@status,w,c
  5356  001556  0B80               	andlw	128
  5357  001558  6E01               	movwf	i2LCDBusyLoop@busy,c
  5358                           
  5359                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  5360                           
  5361                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5362  00155A  9C83               	bcf	3971,6,c	;volatile
  5363                           
  5364                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  5365                           
  5366                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5367  00155C  5001               	movf	i2LCDBusyLoop@busy,w,c
  5368  00155E  A4D8               	btfss	status,2,c
  5369  001560  D7EA               	goto	i2l2209
  5370                           
  5371                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  5372  001562  9A83               	bcf	3971,5,c	;volatile
  5373                           
  5374                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  5375  001564  0EF0               	movlw	240
  5376  001566  1695               	andwf	3989,f,c	;volatile
  5377  001568  0012               	return		;funcret
  5378  00156A                     __end_ofi2_LCDBusyLoop:
  5379                           	opt stack 0
  5380                           pclatu	equ	0xFFB
  5381                           pclath	equ	0xFFA
  5382                           tblptru	equ	0xFF8
  5383                           tblptrh	equ	0xFF7
  5384                           tblptrl	equ	0xFF6
  5385                           tablat	equ	0xFF5
  5386                           prodh	equ	0xFF4
  5387                           prodl	equ	0xFF3
  5388                           intcon	equ	0xFF2
  5389                           postinc0	equ	0xFEE
  5390                           fsr0h	equ	0xFEA
  5391                           fsr0l	equ	0xFE9
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           plusw1	equ	0xFE3
  5395                           fsr1h	equ	0xFE2
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           plusw2	equ	0xFDB
  5399                           fsr2h	equ	0xFDA
  5400                           fsr2l	equ	0xFD9
  5401                           status	equ	0xFD8
  5402                           
  5403 ;; *************** function _SetDistanceLeft *****************
  5404 ;; Defined at:
  5405 ;;		line 56 in file "ADC.c"
  5406 ;; Parameters:    Size  Location     Type
  5407 ;;  lecture         2   53[COMRAM] unsigned int 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;		None
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      void 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5419 ;;      Params:         2       0       0       0       0       0       0
  5420 ;;      Locals:         0       0       0       0       0       0       0
  5421 ;;      Temps:          2       0       0       0       0       0       0
  5422 ;;      Totals:         4       0       0       0       0       0       0
  5423 ;;Total ram usage:        4 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    2
  5426 ;; This function calls:
  5427 ;;		___ftadd
  5428 ;;		___ftmul
  5429 ;;		___fttol
  5430 ;;		___lwtoft
  5431 ;; This function is called by:
  5432 ;;		_isr
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text38
  5437  0010D2                     __ptext38:
  5438                           	opt stack 0
  5439  0010D2                     _SetDistanceLeft:
  5440                           	opt stack 22
  5441                           
  5442                           ;ADC.c: 57: DistanceLeft=5+(1023-lecture)*0.042;
  5443                           
  5444                           ;incstack = 0
  5445  0010D2  0E00               	movlw	0
  5446  0010D4  6E1E               	movwf	___ftadd@f2,c
  5447  0010D6  0EA0               	movlw	160
  5448  0010D8  6E1F               	movwf	___ftadd@f2+1,c
  5449  0010DA  0E40               	movlw	64
  5450  0010DC  6E20               	movwf	___ftadd@f2+2,c
  5451  0010DE  0E08               	movlw	8
  5452  0010E0  6E0F               	movwf	___ftmul@f2,c
  5453  0010E2  0E2C               	movlw	44
  5454  0010E4  6E10               	movwf	___ftmul@f2+1,c
  5455  0010E6  0E3D               	movlw	61
  5456  0010E8  6E11               	movwf	___ftmul@f2+2,c
  5457  0010EA  C036  F038         	movff	SetDistanceLeft@lecture,??_SetDistanceLeft
  5458  0010EE  C037  F039         	movff	SetDistanceLeft@lecture+1,??_SetDistanceLeft+1
  5459  0010F2  1E38               	comf	??_SetDistanceLeft,f,c
  5460  0010F4  1E39               	comf	??_SetDistanceLeft+1,f,c
  5461  0010F6  4A38               	infsnz	??_SetDistanceLeft,f,c
  5462  0010F8  2A39               	incf	??_SetDistanceLeft+1,f,c
  5463  0010FA  0EFF               	movlw	255
  5464  0010FC  2438               	addwf	??_SetDistanceLeft,w,c
  5465  0010FE  6E09               	movwf	___lwtoft@c,c
  5466  001100  0E03               	movlw	3
  5467  001102  2039               	addwfc	??_SetDistanceLeft+1,w,c
  5468  001104  6E0A               	movwf	___lwtoft@c+1,c
  5469  001106  ECAA  F00B         	call	___lwtoft	;wreg free
  5470  00110A  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5471  00110E  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5472  001112  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5473  001116  EC9D  F005         	call	___ftmul	;wreg free
  5474  00111A  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5475  00111E  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5476  001122  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5477  001126  EC0A  F003         	call	___ftadd	;wreg free
  5478  00112A  C01B  F027         	movff	?___ftadd,___fttol@f1
  5479  00112E  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  5480  001132  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  5481  001136  EC23  F005         	call	___fttol	;wreg free
  5482  00113A  C027  F0A2         	movff	?___fttol,_DistanceLeft
  5483  00113E  C028  F0A3         	movff	?___fttol+1,_DistanceLeft+1
  5484  001142  0012               	return		;funcret
  5485  001144                     __end_of_SetDistanceLeft:
  5486                           	opt stack 0
  5487                           pclatu	equ	0xFFB
  5488                           pclath	equ	0xFFA
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           prodh	equ	0xFF4
  5494                           prodl	equ	0xFF3
  5495                           intcon	equ	0xFF2
  5496                           postinc0	equ	0xFEE
  5497                           fsr0h	equ	0xFEA
  5498                           fsr0l	equ	0xFE9
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           plusw1	equ	0xFE3
  5502                           fsr1h	equ	0xFE2
  5503                           fsr1l	equ	0xFE1
  5504                           indf2	equ	0xFDF
  5505                           plusw2	equ	0xFDB
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function _SetDistanceCentral *****************
  5511 ;; Defined at:
  5512 ;;		line 74 in file "ADC.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  lecture         2   53[COMRAM] unsigned int 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;		None
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  1    wreg      void 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0, cstack
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5526 ;;      Params:         2       0       0       0       0       0       0
  5527 ;;      Locals:         0       0       0       0       0       0       0
  5528 ;;      Temps:          2       0       0       0       0       0       0
  5529 ;;      Totals:         4       0       0       0       0       0       0
  5530 ;;Total ram usage:        4 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    2
  5533 ;; This function calls:
  5534 ;;		___ftadd
  5535 ;;		___ftmul
  5536 ;;		___fttol
  5537 ;;		___lwtoft
  5538 ;; This function is called by:
  5539 ;;		_isr
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           	psect	text39
  5544  001144                     __ptext39:
  5545                           	opt stack 0
  5546  001144                     _SetDistanceCentral:
  5547                           	opt stack 22
  5548                           
  5549                           ;ADC.c: 75: DistanceCentral=5+(1023-lecture)*0.042;
  5550                           
  5551                           ;incstack = 0
  5552  001144  0E00               	movlw	0
  5553  001146  6E1E               	movwf	___ftadd@f2,c
  5554  001148  0EA0               	movlw	160
  5555  00114A  6E1F               	movwf	___ftadd@f2+1,c
  5556  00114C  0E40               	movlw	64
  5557  00114E  6E20               	movwf	___ftadd@f2+2,c
  5558  001150  0E08               	movlw	8
  5559  001152  6E0F               	movwf	___ftmul@f2,c
  5560  001154  0E2C               	movlw	44
  5561  001156  6E10               	movwf	___ftmul@f2+1,c
  5562  001158  0E3D               	movlw	61
  5563  00115A  6E11               	movwf	___ftmul@f2+2,c
  5564  00115C  C036  F038         	movff	SetDistanceCentral@lecture,??_SetDistanceCentral
  5565  001160  C037  F039         	movff	SetDistanceCentral@lecture+1,??_SetDistanceCentral+1
  5566  001164  1E38               	comf	??_SetDistanceCentral,f,c
  5567  001166  1E39               	comf	??_SetDistanceCentral+1,f,c
  5568  001168  4A38               	infsnz	??_SetDistanceCentral,f,c
  5569  00116A  2A39               	incf	??_SetDistanceCentral+1,f,c
  5570  00116C  0EFF               	movlw	255
  5571  00116E  2438               	addwf	??_SetDistanceCentral,w,c
  5572  001170  6E09               	movwf	___lwtoft@c,c
  5573  001172  0E03               	movlw	3
  5574  001174  2039               	addwfc	??_SetDistanceCentral+1,w,c
  5575  001176  6E0A               	movwf	___lwtoft@c+1,c
  5576  001178  ECAA  F00B         	call	___lwtoft	;wreg free
  5577  00117C  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5578  001180  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5579  001184  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5580  001188  EC9D  F005         	call	___ftmul	;wreg free
  5581  00118C  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5582  001190  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5583  001194  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5584  001198  EC0A  F003         	call	___ftadd	;wreg free
  5585  00119C  C01B  F027         	movff	?___ftadd,___fttol@f1
  5586  0011A0  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  5587  0011A4  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  5588  0011A8  EC23  F005         	call	___fttol	;wreg free
  5589  0011AC  C027  F0A0         	movff	?___fttol,_DistanceCentral
  5590  0011B0  C028  F0A1         	movff	?___fttol+1,_DistanceCentral+1
  5591  0011B4  0012               	return		;funcret
  5592  0011B6                     __end_of_SetDistanceCentral:
  5593                           	opt stack 0
  5594                           pclatu	equ	0xFFB
  5595                           pclath	equ	0xFFA
  5596                           tblptru	equ	0xFF8
  5597                           tblptrh	equ	0xFF7
  5598                           tblptrl	equ	0xFF6
  5599                           tablat	equ	0xFF5
  5600                           prodh	equ	0xFF4
  5601                           prodl	equ	0xFF3
  5602                           intcon	equ	0xFF2
  5603                           postinc0	equ	0xFEE
  5604                           fsr0h	equ	0xFEA
  5605                           fsr0l	equ	0xFE9
  5606                           wreg	equ	0xFE8
  5607                           postdec1	equ	0xFE5
  5608                           plusw1	equ	0xFE3
  5609                           fsr1h	equ	0xFE2
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           plusw2	equ	0xFDB
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _SetBattery *****************
  5618 ;; Defined at:
  5619 ;;		line 82 in file "ADC.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  lecture         2   53[COMRAM] unsigned int 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5633 ;;      Params:         2       0       0       0       0       0       0
  5634 ;;      Locals:         3       0       0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0
  5636 ;;      Totals:         5       0       0       0       0       0       0
  5637 ;;Total ram usage:        5 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    2
  5640 ;; This function calls:
  5641 ;;		___ftadd
  5642 ;;		___ftmul
  5643 ;;		___fttol
  5644 ;;		___lwtoft
  5645 ;; This function is called by:
  5646 ;;		_isr
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text40
  5651  000EDA                     __ptext40:
  5652                           	opt stack 0
  5653  000EDA                     _SetBattery:
  5654                           	opt stack 22
  5655                           
  5656                           ;ADC.c: 84: Battery=((lecture*3.548)-11)*100;
  5657                           
  5658                           ;incstack = 0
  5659  000EDA  0E00               	movlw	0
  5660  000EDC  6E1E               	movwf	___ftadd@f2,c
  5661  000EDE  0E30               	movlw	48
  5662  000EE0  6E1F               	movwf	___ftadd@f2+1,c
  5663  000EE2  0EC1               	movlw	193
  5664  000EE4  6E20               	movwf	___ftadd@f2+2,c
  5665  000EE6  0E12               	movlw	18
  5666  000EE8  6E0F               	movwf	___ftmul@f2,c
  5667  000EEA  0E63               	movlw	99
  5668  000EEC  6E10               	movwf	___ftmul@f2+1,c
  5669  000EEE  0E40               	movlw	64
  5670  000EF0  6E11               	movwf	___ftmul@f2+2,c
  5671  000EF2  C036  F009         	movff	SetBattery@lecture,___lwtoft@c
  5672  000EF6  C037  F00A         	movff	SetBattery@lecture+1,___lwtoft@c+1
  5673  000EFA  ECAA  F00B         	call	___lwtoft	;wreg free
  5674  000EFE  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  5675  000F02  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  5676  000F06  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  5677  000F0A  EC9D  F005         	call	___ftmul	;wreg free
  5678  000F0E  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  5679  000F12  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  5680  000F16  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  5681  000F1A  EC0A  F003         	call	___ftadd	;wreg free
  5682  000F1E  C01B  F038         	movff	?___ftadd,_SetBattery$1270
  5683  000F22  C01C  F039         	movff	?___ftadd+1,_SetBattery$1270+1
  5684  000F26  C01D  F03A         	movff	?___ftadd+2,_SetBattery$1270+2
  5685                           
  5686                           ;ADC.c: 84: Battery=((lecture*3.548)-11)*100;
  5687  000F2A  0E00               	movlw	0
  5688  000F2C  6E0F               	movwf	___ftmul@f2,c
  5689  000F2E  0EC8               	movlw	200
  5690  000F30  6E10               	movwf	___ftmul@f2+1,c
  5691  000F32  0E42               	movlw	66
  5692  000F34  6E11               	movwf	___ftmul@f2+2,c
  5693  000F36  C038  F00C         	movff	_SetBattery$1270,___ftmul@f1
  5694  000F3A  C039  F00D         	movff	_SetBattery$1270+1,___ftmul@f1+1
  5695  000F3E  C03A  F00E         	movff	_SetBattery$1270+2,___ftmul@f1+2
  5696  000F42  EC9D  F005         	call	___ftmul	;wreg free
  5697  000F46  C00C  F027         	movff	?___ftmul,___fttol@f1
  5698  000F4A  C00D  F028         	movff	?___ftmul+1,___fttol@f1+1
  5699  000F4E  C00E  F029         	movff	?___ftmul+2,___fttol@f1+2
  5700  000F52  EC23  F005         	call	___fttol	;wreg free
  5701  000F56  C027  F04D         	movff	?___fttol,_Battery
  5702  000F5A  C028  F04E         	movff	?___fttol+1,_Battery+1
  5703  000F5E  0012               	return		;funcret
  5704  000F60                     __end_of_SetBattery:
  5705                           	opt stack 0
  5706                           pclatu	equ	0xFFB
  5707                           pclath	equ	0xFFA
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           postinc0	equ	0xFEE
  5716                           fsr0h	equ	0xFEA
  5717                           fsr0l	equ	0xFE9
  5718                           wreg	equ	0xFE8
  5719                           postdec1	equ	0xFE5
  5720                           plusw1	equ	0xFE3
  5721                           fsr1h	equ	0xFE2
  5722                           fsr1l	equ	0xFE1
  5723                           indf2	equ	0xFDF
  5724                           plusw2	equ	0xFDB
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function ___lwtoft *****************
  5730 ;; Defined at:
  5731 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  c               2    8[COMRAM] unsigned int 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  3    8[COMRAM] float 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5745 ;;      Params:         3       0       0       0       0       0       0
  5746 ;;      Locals:         0       0       0       0       0       0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0
  5748 ;;      Totals:         3       0       0       0       0       0       0
  5749 ;;Total ram usage:        3 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    1
  5752 ;; This function calls:
  5753 ;;		___ftpack
  5754 ;; This function is called by:
  5755 ;;		_SetDistanceLeft
  5756 ;;		_SetDistanceRight
  5757 ;;		_SetDistanceCentral
  5758 ;;		_SetBattery
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text41
  5763  001754                     __ptext41:
  5764                           	opt stack 0
  5765  001754                     ___lwtoft:
  5766                           	opt stack 22
  5767                           
  5768                           ;incstack = 0
  5769  001754  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5770  001758  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5771  00175C  6A03               	clrf	___ftpack@arg+2,c
  5772  00175E  0E8E               	movlw	142
  5773  001760  6E04               	movwf	___ftpack@exp,c
  5774  001762  0E00               	movlw	0
  5775  001764  6E05               	movwf	___ftpack@sign,c
  5776  001766  EC86  F006         	call	___ftpack	;wreg free
  5777  00176A  C001  F009         	movff	?___ftpack,?___lwtoft
  5778  00176E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5779  001772  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5780  001776  0012               	return	
  5781  001778                     __end_of___lwtoft:
  5782                           	opt stack 0
  5783                           pclatu	equ	0xFFB
  5784                           pclath	equ	0xFFA
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           prodh	equ	0xFF4
  5790                           prodl	equ	0xFF3
  5791                           intcon	equ	0xFF2
  5792                           postinc0	equ	0xFEE
  5793                           fsr0h	equ	0xFEA
  5794                           fsr0l	equ	0xFE9
  5795                           wreg	equ	0xFE8
  5796                           postdec1	equ	0xFE5
  5797                           plusw1	equ	0xFE3
  5798                           fsr1h	equ	0xFE2
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           plusw2	equ	0xFDB
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function ___fttol *****************
  5807 ;; Defined at:
  5808 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  f1              3   38[COMRAM] float 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  lval            4   48[COMRAM] unsigned long 
  5813 ;;  exp1            1   52[COMRAM] unsigned char 
  5814 ;;  sign1           1   47[COMRAM] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  4   38[COMRAM] long 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5824 ;;      Params:         4       0       0       0       0       0       0
  5825 ;;      Locals:         6       0       0       0       0       0       0
  5826 ;;      Temps:          5       0       0       0       0       0       0
  5827 ;;      Totals:        15       0       0       0       0       0       0
  5828 ;;Total ram usage:       15 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_SetDistanceLeft
  5834 ;;		_SetDistanceRight
  5835 ;;		_SetDistanceCentral
  5836 ;;		_SetBattery
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text42
  5841  000A46                     __ptext42:
  5842                           	opt stack 0
  5843  000A46                     ___fttol:
  5844                           	opt stack 23
  5845                           
  5846                           ;incstack = 0
  5847  000A46  C029  F02B         	movff	___fttol@f1+2,??___fttol
  5848  000A4A  6A2C               	clrf	(??___fttol+1)& (0+255),c
  5849  000A4C  6A2D               	clrf	(??___fttol+2)& (0+255),c
  5850  000A4E  3428               	rlcf	___fttol@f1+1,w,c
  5851  000A50  362B               	rlcf	??___fttol& (0+255),f,c
  5852  000A52  E301               	bnc	u171_41
  5853  000A54  802C               	bsf	(??___fttol+1)& (0+255),0,c
  5854  000A56                     u171_41:
  5855  000A56  502B               	movf	??___fttol,w,c
  5856  000A58  6E35               	movwf	___fttol@exp1,c
  5857  000A5A  5035               	movf	___fttol@exp1,w,c
  5858  000A5C  A4D8               	btfss	status,2,c
  5859  000A5E  D009               	goto	i2l2835
  5860  000A60  0E00               	movlw	0
  5861  000A62  6E27               	movwf	?___fttol,c
  5862  000A64  0E00               	movlw	0
  5863  000A66  6E28               	movwf	?___fttol+1,c
  5864  000A68  0E00               	movlw	0
  5865  000A6A  6E29               	movwf	?___fttol+2,c
  5866  000A6C  0E00               	movlw	0
  5867  000A6E  6E2A               	movwf	?___fttol+3,c
  5868  000A70  0012               	return	
  5869  000A72                     i2l2835:
  5870  000A72  0E17               	movlw	23
  5871  000A74  6E2B               	movwf	??___fttol& (0+255),c
  5872  000A76  C027  F02C         	movff	___fttol@f1,??___fttol+1
  5873  000A7A  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  5874  000A7E  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  5875  000A82  282B               	incf	??___fttol,w,c
  5876  000A84  6E2F               	movwf	(??___fttol+4)& (0+255),c
  5877  000A86  D004               	goto	i2u173_40
  5878  000A88                     i2u173_45:
  5879  000A88  90D8               	bcf	status,0,c
  5880  000A8A  322E               	rrcf	??___fttol+3,f,c
  5881  000A8C  322D               	rrcf	??___fttol+2,f,c
  5882  000A8E  322C               	rrcf	??___fttol+1,f,c
  5883  000A90                     i2u173_40:
  5884  000A90  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  5885  000A92  D7FA               	goto	i2u173_45
  5886  000A94  502C               	movf	??___fttol+1,w,c
  5887  000A96  6E30               	movwf	___fttol@sign1,c
  5888  000A98  8E28               	bsf	___fttol@f1+1,7,c
  5889  000A9A  0EFF               	movlw	255
  5890  000A9C  1627               	andwf	___fttol@f1,f,c
  5891  000A9E  0EFF               	movlw	255
  5892  000AA0  1628               	andwf	___fttol@f1+1,f,c
  5893  000AA2  0E00               	movlw	0
  5894  000AA4  1629               	andwf	___fttol@f1+2,f,c
  5895  000AA6  5027               	movf	___fttol@f1,w,c
  5896  000AA8  6E31               	movwf	___fttol@lval,c
  5897  000AAA  5028               	movf	___fttol@f1+1,w,c
  5898  000AAC  6E32               	movwf	___fttol@lval+1,c
  5899  000AAE  5029               	movf	___fttol@f1+2,w,c
  5900  000AB0  6E33               	movwf	___fttol@lval+2,c
  5901  000AB2  6A34               	clrf	___fttol@lval+3,c
  5902  000AB4  0E8E               	movlw	142
  5903  000AB6  5E35               	subwf	___fttol@exp1,f,c
  5904  000AB8  AE35               	btfss	___fttol@exp1,7,c
  5905  000ABA  D016               	goto	i2l2857
  5906  000ABC  5035               	movf	___fttol@exp1,w,c
  5907  000ABE  0A80               	xorlw	128
  5908  000AC0  0F8F               	addlw	143
  5909  000AC2  B0D8               	btfsc	status,0,c
  5910  000AC4  D009               	goto	i2l2853
  5911  000AC6  0E00               	movlw	0
  5912  000AC8  6E27               	movwf	?___fttol,c
  5913  000ACA  0E00               	movlw	0
  5914  000ACC  6E28               	movwf	?___fttol+1,c
  5915  000ACE  0E00               	movlw	0
  5916  000AD0  6E29               	movwf	?___fttol+2,c
  5917  000AD2  0E00               	movlw	0
  5918  000AD4  6E2A               	movwf	?___fttol+3,c
  5919  000AD6  0012               	return	
  5920  000AD8                     i2l2853:
  5921  000AD8  90D8               	bcf	status,0,c
  5922  000ADA  3234               	rrcf	___fttol@lval+3,f,c
  5923  000ADC  3233               	rrcf	___fttol@lval+2,f,c
  5924  000ADE  3232               	rrcf	___fttol@lval+1,f,c
  5925  000AE0  3231               	rrcf	___fttol@lval,f,c
  5926  000AE2  3E35               	incfsz	___fttol@exp1,f,c
  5927  000AE4  D7F9               	goto	i2l2853
  5928  000AE6  D015               	goto	i2l2867
  5929  000AE8                     i2l2857:
  5930  000AE8  0E17               	movlw	23
  5931  000AEA  6435               	cpfsgt	___fttol@exp1,c
  5932  000AEC  D00F               	goto	i2l2865
  5933  000AEE  0E00               	movlw	0
  5934  000AF0  6E27               	movwf	?___fttol,c
  5935  000AF2  0E00               	movlw	0
  5936  000AF4  6E28               	movwf	?___fttol+1,c
  5937  000AF6  0E00               	movlw	0
  5938  000AF8  6E29               	movwf	?___fttol+2,c
  5939  000AFA  0E00               	movlw	0
  5940  000AFC  6E2A               	movwf	?___fttol+3,c
  5941  000AFE  0012               	return	
  5942  000B00                     i2l2863:
  5943  000B00  90D8               	bcf	status,0,c
  5944  000B02  3631               	rlcf	___fttol@lval,f,c
  5945  000B04  3632               	rlcf	___fttol@lval+1,f,c
  5946  000B06  3633               	rlcf	___fttol@lval+2,f,c
  5947  000B08  3634               	rlcf	___fttol@lval+3,f,c
  5948  000B0A  0635               	decf	___fttol@exp1,f,c
  5949  000B0C                     i2l2865:
  5950  000B0C  5035               	movf	___fttol@exp1,w,c
  5951  000B0E  A4D8               	btfss	status,2,c
  5952  000B10  D7F7               	goto	i2l2863
  5953  000B12                     i2l2867:
  5954  000B12  5030               	movf	___fttol@sign1,w,c
  5955  000B14  B4D8               	btfsc	status,2,c
  5956  000B16  D008               	goto	i2l2871
  5957  000B18  1E34               	comf	___fttol@lval+3,f,c
  5958  000B1A  1E33               	comf	___fttol@lval+2,f,c
  5959  000B1C  1E32               	comf	___fttol@lval+1,f,c
  5960  000B1E  6C31               	negf	___fttol@lval,c
  5961  000B20  0E00               	movlw	0
  5962  000B22  2232               	addwfc	___fttol@lval+1,f,c
  5963  000B24  2233               	addwfc	___fttol@lval+2,f,c
  5964  000B26  2234               	addwfc	___fttol@lval+3,f,c
  5965  000B28                     i2l2871:
  5966  000B28  C031  F027         	movff	___fttol@lval,?___fttol
  5967  000B2C  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  5968  000B30  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  5969  000B34  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  5970  000B38  0012               	return	
  5971  000B3A                     __end_of___fttol:
  5972                           	opt stack 0
  5973                           pclatu	equ	0xFFB
  5974                           pclath	equ	0xFFA
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           postinc0	equ	0xFEE
  5983                           fsr0h	equ	0xFEA
  5984                           fsr0l	equ	0xFE9
  5985                           wreg	equ	0xFE8
  5986                           postdec1	equ	0xFE5
  5987                           plusw1	equ	0xFE3
  5988                           fsr1h	equ	0xFE2
  5989                           fsr1l	equ	0xFE1
  5990                           indf2	equ	0xFDF
  5991                           plusw2	equ	0xFDB
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function ___ftmul *****************
  5997 ;; Defined at:
  5998 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  f1              3   11[COMRAM] float 
  6001 ;;  f2              3   14[COMRAM] float 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  6004 ;;  sign            1   25[COMRAM] unsigned char 
  6005 ;;  cntr            1   24[COMRAM] unsigned char 
  6006 ;;  exp             1   20[COMRAM] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  3   11[COMRAM] float 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6016 ;;      Params:         6       0       0       0       0       0       0
  6017 ;;      Locals:         6       0       0       0       0       0       0
  6018 ;;      Temps:          3       0       0       0       0       0       0
  6019 ;;      Totals:        15       0       0       0       0       0       0
  6020 ;;Total ram usage:       15 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    1
  6023 ;; This function calls:
  6024 ;;		___ftpack
  6025 ;; This function is called by:
  6026 ;;		_SetDistanceLeft
  6027 ;;		_SetDistanceRight
  6028 ;;		_SetDistanceCentral
  6029 ;;		_SetBattery
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text43
  6034  000B3A                     __ptext43:
  6035                           	opt stack 0
  6036  000B3A                     ___ftmul:
  6037                           	opt stack 22
  6038                           
  6039                           ;incstack = 0
  6040  000B3A  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  6041  000B3E  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6042  000B40  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6043  000B42  340D               	rlcf	___ftmul@f1+1,w,c
  6044  000B44  3612               	rlcf	??___ftmul& (0+255),f,c
  6045  000B46  E301               	bnc	u165_41
  6046  000B48  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6047  000B4A                     u165_41:
  6048  000B4A  5012               	movf	??___ftmul,w,c
  6049  000B4C  6E15               	movwf	___ftmul@exp,c
  6050  000B4E  5015               	movf	___ftmul@exp,w,c
  6051  000B50  A4D8               	btfss	status,2,c
  6052  000B52  D007               	goto	i2l2787
  6053  000B54  0E00               	movlw	0
  6054  000B56  6E0C               	movwf	?___ftmul,c
  6055  000B58  0E00               	movlw	0
  6056  000B5A  6E0D               	movwf	?___ftmul+1,c
  6057  000B5C  0E00               	movlw	0
  6058  000B5E  6E0E               	movwf	?___ftmul+2,c
  6059  000B60  0012               	return	
  6060  000B62                     i2l2787:
  6061  000B62  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  6062  000B66  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6063  000B68  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6064  000B6A  3410               	rlcf	___ftmul@f2+1,w,c
  6065  000B6C  3612               	rlcf	??___ftmul& (0+255),f,c
  6066  000B6E  E301               	bnc	u167_41
  6067  000B70  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6068  000B72                     u167_41:
  6069  000B72  5012               	movf	??___ftmul,w,c
  6070  000B74  6E1A               	movwf	___ftmul@sign,c
  6071  000B76  501A               	movf	___ftmul@sign,w,c
  6072  000B78  A4D8               	btfss	status,2,c
  6073  000B7A  D007               	goto	i2l2793
  6074  000B7C  0E00               	movlw	0
  6075  000B7E  6E0C               	movwf	?___ftmul,c
  6076  000B80  0E00               	movlw	0
  6077  000B82  6E0D               	movwf	?___ftmul+1,c
  6078  000B84  0E00               	movlw	0
  6079  000B86  6E0E               	movwf	?___ftmul+2,c
  6080  000B88  0012               	return	
  6081  000B8A                     i2l2793:
  6082  000B8A  501A               	movf	___ftmul@sign,w,c
  6083  000B8C  0F7B               	addlw	123
  6084  000B8E  2615               	addwf	___ftmul@exp,f,c
  6085  000B90  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  6086  000B94  5011               	movf	___ftmul@f2+2,w,c
  6087  000B96  1A1A               	xorwf	___ftmul@sign,f,c
  6088  000B98  0E80               	movlw	128
  6089  000B9A  161A               	andwf	___ftmul@sign,f,c
  6090  000B9C  8E0D               	bsf	___ftmul@f1+1,7,c
  6091  000B9E  8E10               	bsf	___ftmul@f2+1,7,c
  6092  000BA0  0EFF               	movlw	255
  6093  000BA2  160F               	andwf	___ftmul@f2,f,c
  6094  000BA4  0EFF               	movlw	255
  6095  000BA6  1610               	andwf	___ftmul@f2+1,f,c
  6096  000BA8  0E00               	movlw	0
  6097  000BAA  1611               	andwf	___ftmul@f2+2,f,c
  6098  000BAC  0E00               	movlw	0
  6099  000BAE  6E16               	movwf	___ftmul@f3_as_product,c
  6100  000BB0  0E00               	movlw	0
  6101  000BB2  6E17               	movwf	___ftmul@f3_as_product+1,c
  6102  000BB4  0E00               	movlw	0
  6103  000BB6  6E18               	movwf	___ftmul@f3_as_product+2,c
  6104  000BB8  0E07               	movlw	7
  6105  000BBA  6E19               	movwf	___ftmul@cntr,c
  6106  000BBC                     i2l2807:
  6107  000BBC  A00C               	btfss	___ftmul@f1,0,c
  6108  000BBE  D006               	goto	i2l2811
  6109  000BC0  500F               	movf	___ftmul@f2,w,c
  6110  000BC2  2616               	addwf	___ftmul@f3_as_product,f,c
  6111  000BC4  5010               	movf	___ftmul@f2+1,w,c
  6112  000BC6  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6113  000BC8  5011               	movf	___ftmul@f2+2,w,c
  6114  000BCA  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6115  000BCC                     i2l2811:
  6116  000BCC  90D8               	bcf	status,0,c
  6117  000BCE  320E               	rrcf	___ftmul@f1+2,f,c
  6118  000BD0  320D               	rrcf	___ftmul@f1+1,f,c
  6119  000BD2  320C               	rrcf	___ftmul@f1,f,c
  6120  000BD4  90D8               	bcf	status,0,c
  6121  000BD6  360F               	rlcf	___ftmul@f2,f,c
  6122  000BD8  3610               	rlcf	___ftmul@f2+1,f,c
  6123  000BDA  3611               	rlcf	___ftmul@f2+2,f,c
  6124  000BDC  2E19               	decfsz	___ftmul@cntr,f,c
  6125  000BDE  D7EE               	goto	i2l2807
  6126  000BE0  0E09               	movlw	9
  6127  000BE2  6E19               	movwf	___ftmul@cntr,c
  6128  000BE4                     i2l2817:
  6129  000BE4  A00C               	btfss	___ftmul@f1,0,c
  6130  000BE6  D006               	goto	i2l2821
  6131  000BE8  500F               	movf	___ftmul@f2,w,c
  6132  000BEA  2616               	addwf	___ftmul@f3_as_product,f,c
  6133  000BEC  5010               	movf	___ftmul@f2+1,w,c
  6134  000BEE  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6135  000BF0  5011               	movf	___ftmul@f2+2,w,c
  6136  000BF2  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6137  000BF4                     i2l2821:
  6138  000BF4  90D8               	bcf	status,0,c
  6139  000BF6  320E               	rrcf	___ftmul@f1+2,f,c
  6140  000BF8  320D               	rrcf	___ftmul@f1+1,f,c
  6141  000BFA  320C               	rrcf	___ftmul@f1,f,c
  6142  000BFC  90D8               	bcf	status,0,c
  6143  000BFE  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  6144  000C00  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  6145  000C02  3216               	rrcf	___ftmul@f3_as_product,f,c
  6146  000C04  2E19               	decfsz	___ftmul@cntr,f,c
  6147  000C06  D7EE               	goto	i2l2817
  6148  000C08  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6149  000C0C  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6150  000C10  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6151  000C14  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  6152  000C18  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  6153  000C1C  EC86  F006         	call	___ftpack	;wreg free
  6154  000C20  C001  F00C         	movff	?___ftpack,?___ftmul
  6155  000C24  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  6156  000C28  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  6157  000C2C  0012               	return	
  6158  000C2E                     __end_of___ftmul:
  6159                           	opt stack 0
  6160                           pclatu	equ	0xFFB
  6161                           pclath	equ	0xFFA
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           postinc0	equ	0xFEE
  6170                           fsr0h	equ	0xFEA
  6171                           fsr0l	equ	0xFE9
  6172                           wreg	equ	0xFE8
  6173                           postdec1	equ	0xFE5
  6174                           plusw1	equ	0xFE3
  6175                           fsr1h	equ	0xFE2
  6176                           fsr1l	equ	0xFE1
  6177                           indf2	equ	0xFDF
  6178                           plusw2	equ	0xFDB
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183 ;; *************** function ___ftadd *****************
  6184 ;; Defined at:
  6185 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  f1              3   26[COMRAM] float 
  6188 ;;  f2              3   29[COMRAM] float 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  exp1            1   37[COMRAM] unsigned char 
  6191 ;;  exp2            1   36[COMRAM] unsigned char 
  6192 ;;  sign            1   35[COMRAM] unsigned char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  3   26[COMRAM] float 
  6195 ;; Registers used:
  6196 ;;		wreg, status,2, status,0, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6202 ;;      Params:         6       0       0       0       0       0       0
  6203 ;;      Locals:         3       0       0       0       0       0       0
  6204 ;;      Temps:          3       0       0       0       0       0       0
  6205 ;;      Totals:        12       0       0       0       0       0       0
  6206 ;;Total ram usage:       12 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    1
  6209 ;; This function calls:
  6210 ;;		___ftpack
  6211 ;; This function is called by:
  6212 ;;		_SetDistanceLeft
  6213 ;;		_SetDistanceRight
  6214 ;;		_SetDistanceCentral
  6215 ;;		_SetBattery
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text44
  6220  000614                     __ptext44:
  6221                           	opt stack 0
  6222  000614                     ___ftadd:
  6223                           	opt stack 22
  6224                           
  6225                           ;incstack = 0
  6226  000614  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  6227  000618  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6228  00061A  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6229  00061C  341C               	rlcf	___ftadd@f1+1,w,c
  6230  00061E  3621               	rlcf	??___ftadd& (0+255),f,c
  6231  000620  E301               	bnc	u144_41
  6232  000622  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6233  000624                     u144_41:
  6234  000624  5021               	movf	??___ftadd,w,c
  6235  000626  6E26               	movwf	___ftadd@exp1,c
  6236  000628  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  6237  00062C  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6238  00062E  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6239  000630  341F               	rlcf	___ftadd@f2+1,w,c
  6240  000632  3621               	rlcf	??___ftadd& (0+255),f,c
  6241  000634  E301               	bnc	u145_41
  6242  000636  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6243  000638                     u145_41:
  6244  000638  5021               	movf	??___ftadd,w,c
  6245  00063A  6E25               	movwf	___ftadd@exp2,c
  6246  00063C  5026               	movf	___ftadd@exp1,w,c
  6247  00063E  B4D8               	btfsc	status,2,c
  6248  000640  D00B               	goto	i2l761
  6249  000642  5025               	movf	___ftadd@exp2,w,c
  6250  000644  5C26               	subwf	___ftadd@exp1,w,c
  6251  000646  B0D8               	btfsc	status,0,c
  6252  000648  D00E               	goto	i2l2719
  6253  00064A  5026               	movf	___ftadd@exp1,w,c
  6254  00064C  0800               	sublw	0
  6255  00064E  2425               	addwf	___ftadd@exp2,w,c
  6256  000650  6E21               	movwf	??___ftadd& (0+255),c
  6257  000652  0E18               	movlw	24
  6258  000654  6421               	cpfsgt	??___ftadd,c
  6259  000656  D007               	goto	i2l2719
  6260  000658                     i2l761:
  6261  000658  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  6262  00065C  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  6263  000660  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  6264  000664  0012               	return	
  6265  000666                     i2l2719:
  6266  000666  5025               	movf	___ftadd@exp2,w,c
  6267  000668  B4D8               	btfsc	status,2,c
  6268  00066A  D00B               	goto	i2l765
  6269  00066C  5026               	movf	___ftadd@exp1,w,c
  6270  00066E  5C25               	subwf	___ftadd@exp2,w,c
  6271  000670  B0D8               	btfsc	status,0,c
  6272  000672  D00E               	goto	i2l2725
  6273  000674  5025               	movf	___ftadd@exp2,w,c
  6274  000676  0800               	sublw	0
  6275  000678  2426               	addwf	___ftadd@exp1,w,c
  6276  00067A  6E21               	movwf	??___ftadd& (0+255),c
  6277  00067C  0E18               	movlw	24
  6278  00067E  6421               	cpfsgt	??___ftadd,c
  6279  000680  D007               	goto	i2l2725
  6280  000682                     i2l765:
  6281  000682  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  6282  000686  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  6283  00068A  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  6284  00068E  0012               	return	
  6285  000690                     i2l2725:
  6286  000690  0E06               	movlw	6
  6287  000692  6E24               	movwf	___ftadd@sign,c
  6288  000694  BE1D               	btfsc	___ftadd@f1+2,7,c
  6289  000696  8E24               	bsf	___ftadd@sign,7,c
  6290  000698  BE20               	btfsc	___ftadd@f2+2,7,c
  6291  00069A  8C24               	bsf	___ftadd@sign,6,c
  6292  00069C  8E1C               	bsf	___ftadd@f1+1,7,c
  6293  00069E  0EFF               	movlw	255
  6294  0006A0  161B               	andwf	___ftadd@f1,f,c
  6295  0006A2  0EFF               	movlw	255
  6296  0006A4  161C               	andwf	___ftadd@f1+1,f,c
  6297  0006A6  0E00               	movlw	0
  6298  0006A8  161D               	andwf	___ftadd@f1+2,f,c
  6299  0006AA  8E1F               	bsf	___ftadd@f2+1,7,c
  6300  0006AC  0EFF               	movlw	255
  6301  0006AE  161E               	andwf	___ftadd@f2,f,c
  6302  0006B0  0EFF               	movlw	255
  6303  0006B2  161F               	andwf	___ftadd@f2+1,f,c
  6304  0006B4  0E00               	movlw	0
  6305  0006B6  1620               	andwf	___ftadd@f2+2,f,c
  6306  0006B8  5025               	movf	___ftadd@exp2,w,c
  6307  0006BA  5C26               	subwf	___ftadd@exp1,w,c
  6308  0006BC  B0D8               	btfsc	status,0,c
  6309  0006BE  D01B               	goto	i2l2751
  6310  0006C0                     i2l2741:
  6311  0006C0  90D8               	bcf	status,0,c
  6312  0006C2  361E               	rlcf	___ftadd@f2,f,c
  6313  0006C4  361F               	rlcf	___ftadd@f2+1,f,c
  6314  0006C6  3620               	rlcf	___ftadd@f2+2,f,c
  6315  0006C8  0625               	decf	___ftadd@exp2,f,c
  6316  0006CA  5026               	movf	___ftadd@exp1,w,c
  6317  0006CC  1825               	xorwf	___ftadd@exp2,w,c
  6318  0006CE  B4D8               	btfsc	status,2,c
  6319  0006D0  D00D               	goto	i2l2749
  6320  0006D2  0624               	decf	___ftadd@sign,f,c
  6321  0006D4  C024  F021         	movff	___ftadd@sign,??___ftadd
  6322  0006D8  0E07               	movlw	7
  6323  0006DA  1621               	andwf	??___ftadd,f,c
  6324  0006DC  B4D8               	btfsc	status,2,c
  6325  0006DE  D006               	goto	i2l2749
  6326  0006E0  D7EF               	goto	i2l2741
  6327  0006E2                     i2l2747:
  6328  0006E2  90D8               	bcf	status,0,c
  6329  0006E4  321D               	rrcf	___ftadd@f1+2,f,c
  6330  0006E6  321C               	rrcf	___ftadd@f1+1,f,c
  6331  0006E8  321B               	rrcf	___ftadd@f1,f,c
  6332  0006EA  2A26               	incf	___ftadd@exp1,f,c
  6333  0006EC                     i2l2749:
  6334  0006EC  5025               	movf	___ftadd@exp2,w,c
  6335  0006EE  1826               	xorwf	___ftadd@exp1,w,c
  6336  0006F0  B4D8               	btfsc	status,2,c
  6337  0006F2  D01F               	goto	i2l776
  6338  0006F4  D7F6               	goto	i2l2747
  6339  0006F6                     i2l2751:
  6340  0006F6  5026               	movf	___ftadd@exp1,w,c
  6341  0006F8  5C25               	subwf	___ftadd@exp2,w,c
  6342  0006FA  B0D8               	btfsc	status,0,c
  6343  0006FC  D01A               	goto	i2l776
  6344  0006FE                     i2l2753:
  6345  0006FE  90D8               	bcf	status,0,c
  6346  000700  361B               	rlcf	___ftadd@f1,f,c
  6347  000702  361C               	rlcf	___ftadd@f1+1,f,c
  6348  000704  361D               	rlcf	___ftadd@f1+2,f,c
  6349  000706  0626               	decf	___ftadd@exp1,f,c
  6350  000708  5026               	movf	___ftadd@exp1,w,c
  6351  00070A  1825               	xorwf	___ftadd@exp2,w,c
  6352  00070C  B4D8               	btfsc	status,2,c
  6353  00070E  D00D               	goto	i2l2761
  6354  000710  0624               	decf	___ftadd@sign,f,c
  6355  000712  C024  F021         	movff	___ftadd@sign,??___ftadd
  6356  000716  0E07               	movlw	7
  6357  000718  1621               	andwf	??___ftadd,f,c
  6358  00071A  B4D8               	btfsc	status,2,c
  6359  00071C  D006               	goto	i2l2761
  6360  00071E  D7EF               	goto	i2l2753
  6361  000720                     i2l2759:
  6362  000720  90D8               	bcf	status,0,c
  6363  000722  3220               	rrcf	___ftadd@f2+2,f,c
  6364  000724  321F               	rrcf	___ftadd@f2+1,f,c
  6365  000726  321E               	rrcf	___ftadd@f2,f,c
  6366  000728  2A25               	incf	___ftadd@exp2,f,c
  6367  00072A                     i2l2761:
  6368  00072A  5025               	movf	___ftadd@exp2,w,c
  6369  00072C  1826               	xorwf	___ftadd@exp1,w,c
  6370  00072E  A4D8               	btfss	status,2,c
  6371  000730  D7F7               	goto	i2l2759
  6372  000732                     i2l776:
  6373  000732  AE24               	btfss	___ftadd@sign,7,c
  6374  000734  D00C               	goto	i2l785
  6375  000736  0EFF               	movlw	255
  6376  000738  1A1B               	xorwf	___ftadd@f1,f,c
  6377  00073A  0EFF               	movlw	255
  6378  00073C  1A1C               	xorwf	___ftadd@f1+1,f,c
  6379  00073E  0EFF               	movlw	255
  6380  000740  1A1D               	xorwf	___ftadd@f1+2,f,c
  6381  000742  0E01               	movlw	1
  6382  000744  261B               	addwf	___ftadd@f1,f,c
  6383  000746  0E00               	movlw	0
  6384  000748  221C               	addwfc	___ftadd@f1+1,f,c
  6385  00074A  0E00               	movlw	0
  6386  00074C  221D               	addwfc	___ftadd@f1+2,f,c
  6387  00074E                     i2l785:
  6388  00074E  AC24               	btfss	___ftadd@sign,6,c
  6389  000750  D00C               	goto	i2l2767
  6390  000752  0EFF               	movlw	255
  6391  000754  1A1E               	xorwf	___ftadd@f2,f,c
  6392  000756  0EFF               	movlw	255
  6393  000758  1A1F               	xorwf	___ftadd@f2+1,f,c
  6394  00075A  0EFF               	movlw	255
  6395  00075C  1A20               	xorwf	___ftadd@f2+2,f,c
  6396  00075E  0E01               	movlw	1
  6397  000760  261E               	addwf	___ftadd@f2,f,c
  6398  000762  0E00               	movlw	0
  6399  000764  221F               	addwfc	___ftadd@f2+1,f,c
  6400  000766  0E00               	movlw	0
  6401  000768  2220               	addwfc	___ftadd@f2+2,f,c
  6402  00076A                     i2l2767:
  6403  00076A  0E00               	movlw	0
  6404  00076C  6E24               	movwf	___ftadd@sign,c
  6405  00076E  501B               	movf	___ftadd@f1,w,c
  6406  000770  261E               	addwf	___ftadd@f2,f,c
  6407  000772  501C               	movf	___ftadd@f1+1,w,c
  6408  000774  221F               	addwfc	___ftadd@f2+1,f,c
  6409  000776  501D               	movf	___ftadd@f1+2,w,c
  6410  000778  2220               	addwfc	___ftadd@f2+2,f,c
  6411  00077A  AE20               	btfss	___ftadd@f2+2,7,c
  6412  00077C  D00E               	goto	i2l2777
  6413  00077E  0EFF               	movlw	255
  6414  000780  1A1E               	xorwf	___ftadd@f2,f,c
  6415  000782  0EFF               	movlw	255
  6416  000784  1A1F               	xorwf	___ftadd@f2+1,f,c
  6417  000786  0EFF               	movlw	255
  6418  000788  1A20               	xorwf	___ftadd@f2+2,f,c
  6419  00078A  0E01               	movlw	1
  6420  00078C  261E               	addwf	___ftadd@f2,f,c
  6421  00078E  0E00               	movlw	0
  6422  000790  221F               	addwfc	___ftadd@f2+1,f,c
  6423  000792  0E00               	movlw	0
  6424  000794  2220               	addwfc	___ftadd@f2+2,f,c
  6425  000796  0E01               	movlw	1
  6426  000798  6E24               	movwf	___ftadd@sign,c
  6427  00079A                     i2l2777:
  6428  00079A  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  6429  00079E  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6430  0007A2  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6431  0007A6  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  6432  0007AA  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  6433  0007AE  EC86  F006         	call	___ftpack	;wreg free
  6434  0007B2  C001  F01B         	movff	?___ftpack,?___ftadd
  6435  0007B6  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  6436  0007BA  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  6437  0007BE  0012               	return	
  6438  0007C0                     __end_of___ftadd:
  6439                           	opt stack 0
  6440                           pclatu	equ	0xFFB
  6441                           pclath	equ	0xFFA
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           postinc0	equ	0xFEE
  6450                           fsr0h	equ	0xFEA
  6451                           fsr0l	equ	0xFE9
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           plusw1	equ	0xFE3
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           plusw2	equ	0xFDB
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function ___ftpack *****************
  6464 ;; Defined at:
  6465 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  arg             3    0[COMRAM] unsigned um
  6468 ;;  exp             1    3[COMRAM] unsigned char 
  6469 ;;  sign            1    4[COMRAM] unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;		None
  6472 ;; Return value:  Size  Location     Type
  6473 ;;                  3    0[COMRAM] float 
  6474 ;; Registers used:
  6475 ;;		wreg, status,2, status,0
  6476 ;; Tracked objects:
  6477 ;;		On entry : 0/0
  6478 ;;		On exit  : 0/0
  6479 ;;		Unchanged: 0/0
  6480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6481 ;;      Params:         5       0       0       0       0       0       0
  6482 ;;      Locals:         0       0       0       0       0       0       0
  6483 ;;      Temps:          3       0       0       0       0       0       0
  6484 ;;      Totals:         8       0       0       0       0       0       0
  6485 ;;Total ram usage:        8 bytes
  6486 ;; Hardware stack levels used:    1
  6487 ;; This function calls:
  6488 ;;		Nothing
  6489 ;; This function is called by:
  6490 ;;		___ftadd
  6491 ;;		___ftmul
  6492 ;;		___lwtoft
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text45
  6497  000D0C                     __ptext45:
  6498                           	opt stack 0
  6499  000D0C                     ___ftpack:
  6500                           	opt stack 22
  6501                           
  6502                           ;incstack = 0
  6503  000D0C  5004               	movf	___ftpack@exp,w,c
  6504  000D0E  B4D8               	btfsc	status,2,c
  6505  000D10  D005               	goto	i2l2595
  6506  000D12  5001               	movf	___ftpack@arg,w,c
  6507  000D14  1002               	iorwf	___ftpack@arg+1,w,c
  6508  000D16  1003               	iorwf	___ftpack@arg+2,w,c
  6509  000D18  A4D8               	btfss	status,2,c
  6510  000D1A  D00C               	goto	i2l2601
  6511  000D1C                     i2l2595:
  6512  000D1C  0E00               	movlw	0
  6513  000D1E  6E01               	movwf	?___ftpack,c
  6514  000D20  0E00               	movlw	0
  6515  000D22  6E02               	movwf	?___ftpack+1,c
  6516  000D24  0E00               	movlw	0
  6517  000D26  6E03               	movwf	?___ftpack+2,c
  6518  000D28  0012               	return	
  6519  000D2A                     i2l2599:
  6520  000D2A  2A04               	incf	___ftpack@exp,f,c
  6521  000D2C  90D8               	bcf	status,0,c
  6522  000D2E  3203               	rrcf	___ftpack@arg+2,f,c
  6523  000D30  3202               	rrcf	___ftpack@arg+1,f,c
  6524  000D32  3201               	rrcf	___ftpack@arg,f,c
  6525  000D34                     i2l2601:
  6526  000D34  0E00               	movlw	0
  6527  000D36  1401               	andwf	___ftpack@arg,w,c
  6528  000D38  6E06               	movwf	??___ftpack& (0+255),c
  6529  000D3A  0E00               	movlw	0
  6530  000D3C  1402               	andwf	___ftpack@arg+1,w,c
  6531  000D3E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6532  000D40  0EFE               	movlw	254
  6533  000D42  1403               	andwf	___ftpack@arg+2,w,c
  6534  000D44  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6535  000D46  5006               	movf	??___ftpack,w,c
  6536  000D48  1007               	iorwf	??___ftpack+1,w,c
  6537  000D4A  1008               	iorwf	??___ftpack+2,w,c
  6538  000D4C  B4D8               	btfsc	status,2,c
  6539  000D4E  D00C               	goto	i2l2607
  6540  000D50  D7EC               	goto	i2l2599
  6541  000D52                     i2l2603:
  6542  000D52  2A04               	incf	___ftpack@exp,f,c
  6543  000D54  0E01               	movlw	1
  6544  000D56  2601               	addwf	___ftpack@arg,f,c
  6545  000D58  0E00               	movlw	0
  6546  000D5A  2202               	addwfc	___ftpack@arg+1,f,c
  6547  000D5C  0E00               	movlw	0
  6548  000D5E  2203               	addwfc	___ftpack@arg+2,f,c
  6549  000D60  90D8               	bcf	status,0,c
  6550  000D62  3203               	rrcf	___ftpack@arg+2,f,c
  6551  000D64  3202               	rrcf	___ftpack@arg+1,f,c
  6552  000D66  3201               	rrcf	___ftpack@arg,f,c
  6553  000D68                     i2l2607:
  6554  000D68  0E00               	movlw	0
  6555  000D6A  1401               	andwf	___ftpack@arg,w,c
  6556  000D6C  6E06               	movwf	??___ftpack& (0+255),c
  6557  000D6E  0E00               	movlw	0
  6558  000D70  1402               	andwf	___ftpack@arg+1,w,c
  6559  000D72  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6560  000D74  0EFF               	movlw	255
  6561  000D76  1403               	andwf	___ftpack@arg+2,w,c
  6562  000D78  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6563  000D7A  5006               	movf	??___ftpack,w,c
  6564  000D7C  1007               	iorwf	??___ftpack+1,w,c
  6565  000D7E  1008               	iorwf	??___ftpack+2,w,c
  6566  000D80  B4D8               	btfsc	status,2,c
  6567  000D82  D006               	goto	i2l2611
  6568  000D84  D7E6               	goto	i2l2603
  6569  000D86                     i2l2609:
  6570  000D86  0604               	decf	___ftpack@exp,f,c
  6571  000D88  90D8               	bcf	status,0,c
  6572  000D8A  3601               	rlcf	___ftpack@arg,f,c
  6573  000D8C  3602               	rlcf	___ftpack@arg+1,f,c
  6574  000D8E  3603               	rlcf	___ftpack@arg+2,f,c
  6575  000D90                     i2l2611:
  6576  000D90  BE02               	btfsc	___ftpack@arg+1,7,c
  6577  000D92  D003               	goto	i2l738
  6578  000D94  0E02               	movlw	2
  6579  000D96  6004               	cpfslt	___ftpack@exp,c
  6580  000D98  D7F6               	goto	i2l2609
  6581  000D9A                     i2l738:
  6582  000D9A  A004               	btfss	___ftpack@exp,0,c
  6583  000D9C  9E02               	bcf	___ftpack@arg+1,7,c
  6584  000D9E  90D8               	bcf	status,0,c
  6585  000DA0  3204               	rrcf	___ftpack@exp,f,c
  6586  000DA2  5004               	movf	___ftpack@exp,w,c
  6587  000DA4  1203               	iorwf	___ftpack@arg+2,f,c
  6588  000DA6  5005               	movf	___ftpack@sign,w,c
  6589  000DA8  A4D8               	btfss	status,2,c
  6590  000DAA  8E03               	bsf	___ftpack@arg+2,7,c
  6591  000DAC  C001  F001         	movff	___ftpack@arg,?___ftpack
  6592  000DB0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6593  000DB4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6594  000DB8  0012               	return	
  6595  000DBA                     __end_of___ftpack:
  6596                           	opt stack 0
  6597                           pclatu	equ	0xFFB
  6598                           pclath	equ	0xFFA
  6599                           tblptru	equ	0xFF8
  6600                           tblptrh	equ	0xFF7
  6601                           tblptrl	equ	0xFF6
  6602                           tablat	equ	0xFF5
  6603                           prodh	equ	0xFF4
  6604                           prodl	equ	0xFF3
  6605                           intcon	equ	0xFF2
  6606                           postinc0	equ	0xFEE
  6607                           fsr0h	equ	0xFEA
  6608                           fsr0l	equ	0xFE9
  6609                           wreg	equ	0xFE8
  6610                           postdec1	equ	0xFE5
  6611                           plusw1	equ	0xFE3
  6612                           fsr1h	equ	0xFE2
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           plusw2	equ	0xFDB
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function _ReadPWMMotorRight *****************
  6621 ;; Defined at:
  6622 ;;		line 49 in file "TimerPWM.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;		None
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  2    0[COMRAM] unsigned int 
  6629 ;; Registers used:
  6630 ;;		None
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6636 ;;      Params:         2       0       0       0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0
  6639 ;;      Totals:         2       0       0       0       0       0       0
  6640 ;;Total ram usage:        2 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_isr
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text46
  6650  0017EC                     __ptext46:
  6651                           	opt stack 0
  6652  0017EC                     _ReadPWMMotorRight:
  6653                           	opt stack 24
  6654                           
  6655                           ;TimerPWM.c: 50: return PWMRight;
  6656                           
  6657                           ;incstack = 0
  6658  0017EC  C05D  F001         	movff	_PWMRight,?_ReadPWMMotorRight
  6659  0017F0  C05E  F002         	movff	_PWMRight+1,?_ReadPWMMotorRight+1
  6660  0017F4  0012               	return		;funcret
  6661  0017F6                     __end_of_ReadPWMMotorRight:
  6662                           	opt stack 0
  6663                           pclatu	equ	0xFFB
  6664                           pclath	equ	0xFFA
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           intcon	equ	0xFF2
  6672                           postinc0	equ	0xFEE
  6673                           fsr0h	equ	0xFEA
  6674                           fsr0l	equ	0xFE9
  6675                           wreg	equ	0xFE8
  6676                           postdec1	equ	0xFE5
  6677                           plusw1	equ	0xFE3
  6678                           fsr1h	equ	0xFE2
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           plusw2	equ	0xFDB
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _ReadPWMMotorLeft *****************
  6687 ;; Defined at:
  6688 ;;		line 52 in file "TimerPWM.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;		None
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  2    0[COMRAM] unsigned int 
  6695 ;; Registers used:
  6696 ;;		None
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6702 ;;      Params:         2       0       0       0       0       0       0
  6703 ;;      Locals:         0       0       0       0       0       0       0
  6704 ;;      Temps:          0       0       0       0       0       0       0
  6705 ;;      Totals:         2       0       0       0       0       0       0
  6706 ;;Total ram usage:        2 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; This function calls:
  6709 ;;		Nothing
  6710 ;; This function is called by:
  6711 ;;		_isr
  6712 ;; This function uses a non-reentrant model
  6713 ;;
  6714                           
  6715                           	psect	text47
  6716  0017F6                     __ptext47:
  6717                           	opt stack 0
  6718  0017F6                     _ReadPWMMotorLeft:
  6719                           	opt stack 24
  6720                           
  6721                           ;TimerPWM.c: 53: return PWMLeft;
  6722                           
  6723                           ;incstack = 0
  6724  0017F6  C05B  F001         	movff	_PWMLeft,?_ReadPWMMotorLeft
  6725  0017FA  C05C  F002         	movff	_PWMLeft+1,?_ReadPWMMotorLeft+1
  6726  0017FE  0012               	return		;funcret
  6727  001800                     __end_of_ReadPWMMotorLeft:
  6728                           	opt stack 0
  6729                           pclatu	equ	0xFFB
  6730                           pclath	equ	0xFFA
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           postinc0	equ	0xFEE
  6739                           fsr0h	equ	0xFEA
  6740                           fsr0l	equ	0xFE9
  6741                           wreg	equ	0xFE8
  6742                           postdec1	equ	0xFE5
  6743                           plusw1	equ	0xFE3
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           plusw2	equ	0xFDB
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _ADCGetOutput *****************
  6753 ;; Defined at:
  6754 ;;		line 39 in file "ADC.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  temp            2    4[COMRAM] int 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  2    0[COMRAM] unsigned int 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6768 ;;      Params:         2       0       0       0       0       0       0
  6769 ;;      Locals:         2       0       0       0       0       0       0
  6770 ;;      Temps:          2       0       0       0       0       0       0
  6771 ;;      Totals:         6       0       0       0       0       0       0
  6772 ;;Total ram usage:        6 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_isr
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text48
  6782  001796                     __ptext48:
  6783                           	opt stack 0
  6784  001796                     _ADCGetOutput:
  6785                           	opt stack 24
  6786                           
  6787                           ;ADC.c: 40: int temp;
  6788                           ;ADC.c: 41: temp = ADRESL;
  6789                           
  6790                           ;incstack = 0
  6791  001796  CFC3 F005          	movff	4035,ADCGetOutput@temp	;volatile
  6792  00179A  6A06               	clrf	ADCGetOutput@temp+1,c
  6793                           
  6794                           ;ADC.c: 42: return temp + (ADRESH << 8);
  6795  00179C  50C4               	movf	4036,w,c	;volatile
  6796  00179E  6E04               	movwf	(??_ADCGetOutput+1)& (0+255),c
  6797  0017A0  6A03               	clrf	??_ADCGetOutput& (0+255),c
  6798  0017A2  5005               	movf	ADCGetOutput@temp,w,c
  6799  0017A4  2403               	addwf	??_ADCGetOutput,w,c
  6800  0017A6  6E01               	movwf	?_ADCGetOutput,c
  6801  0017A8  5006               	movf	ADCGetOutput@temp+1,w,c
  6802  0017AA  2004               	addwfc	??_ADCGetOutput+1,w,c
  6803  0017AC  6E02               	movwf	?_ADCGetOutput+1,c
  6804  0017AE  0012               	return	
  6805  0017B0                     __end_of_ADCGetOutput:
  6806                           	opt stack 0
  6807                           pclatu	equ	0xFFB
  6808                           pclath	equ	0xFFA
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           prodh	equ	0xFF4
  6814                           prodl	equ	0xFF3
  6815                           intcon	equ	0xFF2
  6816                           postinc0	equ	0xFEE
  6817                           fsr0h	equ	0xFEA
  6818                           fsr0l	equ	0xFE9
  6819                           wreg	equ	0xFE8
  6820                           postdec1	equ	0xFE5
  6821                           plusw1	equ	0xFE3
  6822                           fsr1h	equ	0xFE2
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           plusw2	equ	0xFDB
  6826                           fsr2h	equ	0xFDA
  6827                           fsr2l	equ	0xFD9
  6828                           status	equ	0xFD8
  6829                           pclatu	equ	0xFFB
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           postinc0	equ	0xFEE
  6839                           fsr0h	equ	0xFEA
  6840                           fsr0l	equ	0xFE9
  6841                           wreg	equ	0xFE8
  6842                           postdec1	equ	0xFE5
  6843                           plusw1	equ	0xFE3
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           plusw2	equ	0xFDB
  6848                           fsr2h	equ	0xFDA
  6849                           fsr2l	equ	0xFD9
  6850                           status	equ	0xFD8
  6851                           
  6852                           	psect	rparam
  6853  0000                     pclatu	equ	0xFFB
  6854                           pclath	equ	0xFFA
  6855                           tblptru	equ	0xFF8
  6856                           tblptrh	equ	0xFF7
  6857                           tblptrl	equ	0xFF6
  6858                           tablat	equ	0xFF5
  6859                           prodh	equ	0xFF4
  6860                           prodl	equ	0xFF3
  6861                           intcon	equ	0xFF2
  6862                           postinc0	equ	0xFEE
  6863                           fsr0h	equ	0xFEA
  6864                           fsr0l	equ	0xFE9
  6865                           wreg	equ	0xFE8
  6866                           postdec1	equ	0xFE5
  6867                           plusw1	equ	0xFE3
  6868                           fsr1h	equ	0xFE2
  6869                           fsr1l	equ	0xFE1
  6870                           indf2	equ	0xFDF
  6871                           plusw2	equ	0xFDB
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876                           	psect	temp
  6877  00005F                     btemp:
  6878                           	opt stack 0
  6879  00005F                     	ds	1
  6880  0000                     int$flags	set	btemp
  6881                           pclatu	equ	0xFFB
  6882                           pclath	equ	0xFFA
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           postinc0	equ	0xFEE
  6891                           fsr0h	equ	0xFEA
  6892                           fsr0l	equ	0xFE9
  6893                           wreg	equ	0xFE8
  6894                           postdec1	equ	0xFE5
  6895                           plusw1	equ	0xFE3
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           plusw2	equ	0xFDB
  6900                           fsr2h	equ	0xFDA
  6901                           fsr2l	equ	0xFD9
  6902                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        70
    BSS         29
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      94
    BANK0           160     18     103
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_SetBattery
    _SetDistanceRight->___fttol
    _ShowLecturesInLCD->_LCDWriteInt
    _LCDWriteString->i2_LCDByte
    _LCDWriteInt->___awdiv
    _LCDWriteInt->i2_LCDByte
    _LCDGotoXY->i2_LCDByte
    i2_LCDByte->i2_LCDBusyLoop
    _SetDistanceLeft->___fttol
    _SetDistanceCentral->___fttol
    _SetBattery->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lwtoft
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_Go
    _MotorInit->_SetPWMMotorLeft
    _MotorInit->_SetPWMMotorRight
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _Go->_TurnLeft135
    _Go->_TurnLeft90
    _Go->_TurnRight135
    _Go->_TurnRight90
    _TurnRight90->_SetMotorLeft
    _TurnRight90->_SetMotorRight
    _TurnRight135->_SetMotorLeft
    _TurnRight135->_SetMotorRight
    _TurnLeft90->_SetMotorLeft
    _TurnLeft90->_SetMotorRight
    _TurnLeft135->_SetMotorLeft
    _TurnLeft135->_SetMotorRight
    _SetMotorRight->_SetPWMMotorRight
    _SetPWMMotorRight->___lwdiv
    _SetMotorLeft->_SetPWMMotorLeft
    _SetPWMMotorLeft->___lwdiv
    _ReadParallel->_ConvertParallelSpeed

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   21057
                            _ADCInit
              _ADCInitiateConversion
                                 _Go
                            _LCDInit
                          _MotorInit
                       _SetMotorLeft
                      _SetMotorRight
                       _TimerPWMInit
                       _parallelInit
 ---------------------------------------------------------------------------------
 (1) _parallelInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimerPWMInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorInit                                            0     0      0    1136
                    _SetPWMMotorLeft
                   _SetPWMMotorRight
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1004
                                              8 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              5     4      1     797
                                              3 BANK0      5     4      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Go                                                   6     6      0   15809
                                             12 BANK0      6     6      0
                _ReadDistanceCentral
                   _ReadDistanceLeft
                  _ReadDistanceRight
                           _ReadMode
                       _ReadParallel
              _ReadParallelSpeedLeft
             _ReadParallelSpeedRight
                       _SetMotorLeft
                      _SetMotorRight
                        _TurnLeft135
                         _TurnLeft90
                       _TurnRight135
                        _TurnRight90
 ---------------------------------------------------------------------------------
 (2) _TurnRight90                                          1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnRight135                                         1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft90                                           1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft135                                          1     1      0    3108
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (1) _SetMotorRight                                        2     0      2    1554
                                              9 BANK0      2     0      2
                   _SetPWMMotorRight
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorRight                                     2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorLeft                                         2     0      2    1554
                                              9 BANK0      2     0      2
                    _SetPWMMotorLeft
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorLeft                                      2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedRight                               2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedLeft                                2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallel                                         3     3      0     135
                                              3 BANK0      3     3      0
               _ConvertParallelSpeed
 ---------------------------------------------------------------------------------
 (3) _ConvertParallelSpeed                                 3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ReadMode                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceRight                                    2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceLeft                                     2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceCentral                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADCInitiateConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 18    18      0   42033
                                             58 COMRAM    18    18      0
                       _ADCGetOutput
                   _ReadPWMMotorLeft
                  _ReadPWMMotorRight
                         _SetBattery
                 _SetDistanceCentral
                    _SetDistanceLeft
                   _SetDistanceRight
 ---------------------------------------------------------------------------------
 (7) _SetDistanceRight                                     4     2      2   13131
                                             53 COMRAM     4     2      2
                  _ShowLecturesInLCD
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) _ShowLecturesInLCD                                    0     0      0    3542
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (9) _LCDWriteString                                       3     1      2     700
                                              8 COMRAM     3     1      2
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (9) _LCDWriteInt                                         14    11      3    2059
                                              8 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) _LCDGotoXY                                            2     1      1     783
                                              8 COMRAM     2     1      1
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (10) i2_LCDByte                                           5     4      1     457
                                              3 COMRAM     5     4      1
                      i2_LCDBusyLoop
 ---------------------------------------------------------------------------------
 (11) i2_LCDBusyLoop                                       3     3      0     117
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _SetDistanceLeft                                      4     2      2    9589
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetDistanceCentral                                   4     2      2    9589
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetBattery                                           5     3      2    9612
                                             53 COMRAM     5     3      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2309
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     508
                                             38 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3099
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3587
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorRight                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorLeft                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADCGetOutput                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCInitiateConversion
   _Go
     _ReadDistanceCentral
     _ReadDistanceLeft
     _ReadDistanceRight
     _ReadMode
     _ReadParallel
       _ConvertParallelSpeed
     _ReadParallelSpeedLeft
     _ReadParallelSpeedRight
     _SetMotorLeft
       _SetPWMMotorLeft
         ___lwdiv
         _abs (ARG)
       _abs
     _SetMotorRight
       _SetPWMMotorRight
         ___lwdiv
         _abs (ARG)
       _abs
     _TurnLeft135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnLeft90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _MotorInit
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
   _SetMotorLeft
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _abs
   _SetMotorRight
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
     _abs
   _TimerPWMInit
   _parallelInit

 _isr (ROOT)
   _ADCGetOutput
   _ReadPWMMotorLeft
   _ReadPWMMotorRight
   _SetBattery
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceCentral
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceLeft
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceRight
     _ShowLecturesInLCD
       _LCDGotoXY
         i2_LCDByte
           i2_LCDBusyLoop
       _LCDWriteInt
         ___awdiv
         ___awmod
         i2_LCDByte
           i2_LCDBusyLoop
       _LCDWriteString
         i2_LCDByte
           i2_LCDBusyLoop
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5E       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      15        0.0%
DATA                 0      0      C5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 21 19:21:07 2016

           __size_of_TurnLeft135 0032        __size_of_SetPWMMotorRight 0036  
                   ?_LCDBusyLoop 0001                               _GO 007E11  
                             _Go 07C0                     ___awdiv@sign 0006  
           __size_of_TurnRight90 0032                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 0026  
                   ___ftadd@exp2 0025                              ?_Go 0001  
                   ___ftadd@sign 0024                              l231 130C  
                            l232 130E                              l559 16FC  
                            l916 1052                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                              _RC0 007C10  
                            _RC1 007C11                              _RC2 007C12  
                            _RC3 007C13                              _RC4 007C14  
                            _RC5 007C15                              _RD4 007C1C  
                            _RD5 007C1D                              _RD6 007C1E  
                   __CFG_CPD$OFF 000000                              _PSA 007EAB  
              SetMotorLeft@speed 00AF                              _abs 16DA  
                            _isr 0008            __size_of_TurnRight135 0032  
                __end_of_ADCInit 1754                     __CFG_BORV$18 000000  
                   ___awmod@sign 0006        __size_of_ReadPWMMotorLeft 000A  
                            prod 000FF3                              wreg 000FE8  
                           ??_Go 00B2          LCDWriteInt@field_length 000B  
                __end_of_LCDByte 133C                  __end_of_LCDInit 0E4C  
                   __CFG_LVP$OFF 000000                     ?_LCDWriteInt 0009  
                    LCDByte@temp 00AD            __size_of_ADCGetOutput 001A  
                           ?_abs 00A6                             l3001 0850  
                           l3003 086E                             l3021 0910  
                           l3005 0888                             l3015 08F0  
                           l3007 08A2                             l3025 092A  
                           l3017 08F6                             l2183 1002  
                           l2521 0C40                             l2185 100E  
                           l2515 0C34                             l2195 1044  
                           l2187 1014                             l2371 1490  
                           l2533 0C58                             l2551 0C7C  
                           l2527 0C4C                             l2367 1486  
                           l2383 144A                             l2545 0C70  
                           l3097 159C                             l2563 0C94  
                           l2539 0C64                             l2379 1440  
                           l2581 0CB8                             l2557 0C88  
                           l2477 134A                             l2575 0CAC  
                           l2569 0CA0                             l2589 0CC4  
                           l2687 12DA                             l2971 0E1E  
                           l2975 0E28                             _ADIE 007CEE  
                           _ADIF 007CF6                             ?_isr 0001  
                           _ADON 007E10                             _CHS0 007E12  
                           _CHS1 007E13                             _CHS2 007E14  
                           _CHS3 007E15                             _ANS0 007BF0  
                           STR_1 0601                             _ANS1 007BF1  
                           _ANS2 007BF2                             _ANS3 007BF3  
                           _T0CS 007EAD   __size_of_ADCInitiateConversion 0004  
                           u2007 169A                             u2017 16CC  
                           u1170 1480         __size_of_SetDistanceLeft 0072  
                           u1190 143A                             u1820 0800  
                           u1830 0814                             u1840 0828  
                           u1850 083C                             _PEIE 007F96  
                           u1977 0DC6                             u1987 1636  
                           u1997 1668                             i2l41 0054  
                           i2l42 00EE                             i2l43 006A  
                           i2l44 0080                             i2l45 009A  
                           i2l37 00F0                             i2l46 00B0  
                           i2l57 014C    __end_of_ADCInitiateConversion 180C  
                           _Mode 00BD                             abs@a 00A6  
                           _main 156A                     ___ftpack@arg 0001  
             __size_of_LCDGotoXY 0040                     ___ftpack@exp 0004  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr0l 000FE9                             fsr2h 000FDA  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             btemp 005F  
                           pclat 000FFA                             prodh 000FF4  
                           prodl 000FF3                             start 0188  
                  __CFG_IESO$OFF 000000     __end_of_ConvertParallelSpeed 0D0C  
                  __CFG_MCLRE$ON 000000                 ADCGetOutput@temp 0005  
                   ___ftmul@cntr 0019                     ___param_bank 000010  
                   ___ftmul@sign 001A                ?_ReadDistanceLeft 00A6  
   ConvertParallelSpeed@velocity 00A8                     ___fttol@exp1 0035  
                          ??_abs 00A8                     _TurnRight135 1644  
                   ___fttol@lval 0031                            ??_isr 003B  
             __size_ofi2_LCDByte 0040               ??_ReadDistanceLeft 00A8  
                  ?_ReadParallel 0001                            ?_main 0001  
                __end_of___awdiv 0FE4                  __end_of___ftadd 07C0  
                __end_of___awmod 1226                     LCDInit@style 00AF  
                    isr@PWMRight 0055                  __end_of___ftmul 0C2E  
                ___awdiv@divisor 0003                  __end_of___fttol 0B3A  
                          _T0PS0 007EA8                            _T0PS1 007EA9  
                          _T0PS2 007EAA                  __end_of___lwdiv 105C  
                          i2l231 1502                            i2l232 1504  
                          i2l269 0A44                            i2l761 0658  
                          i2l738 0D9A                            i2l765 0682  
                   _ADCGetOutput 1796                            i2l776 0732  
                          i2l785 074E                  ___awdiv@counter 0005  
                          _TMR0H 000FD7                            _TMR0L 000FD6  
                          _PORTB 000F81                            _PORTD 000F83  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                    __CFG_PWRT$OFF 000000  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000                  _SetPWMMotorLeft 15DC  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                  ___ftpack@sign 0005                            tablat 000FF5  
       __end_of_SetDistanceRight 10D2                            plusw1 000FE3  
                          plusw2 000FDB                            status 000FD8  
                 __CFG_HFOFST$ON 000000                      isr@Readport 0057  
                 __CFG_PBADEN$ON 000000                  __initialization 13D8  
              _ReadDistanceRight 17CE                     __end_of_main 15A6  
                 ??_ReadParallel 00A9                 __end_of_ReadMode 17CE  
             ?_ReadDistanceRight 00A6                        ??_ADCInit 00A6  
        SetDistanceRight@lecture 0036                           ??_main 00B8  
                  ___fttol@sign1 0030                __end_of_LCDGotoXY 14EA  
                  __activetblptr 000002                    LCDByte@isdata 00A9  
                      ??_LCDByte 00AA                        ??_LCDInit 00AE  
            ??_ReadDistanceRight 00A8                       _SetBattery 0EDA  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
                         _T08BIT 007EAE                 ___awdiv@dividend 0001  
               __end_of___ftpack 0DBA                           _ANSELH 000F7F  
              __end_ofi2_LCDByte 152A                           i2l2209 1536  
                         i2l2321 1204                           i2l2313 11E4  
                         i2l2305 11CA                           i2l3041 0094  
                         i2l2315 11EC                           i2l3051 00C2  
                         i2l2261 0F74                           i2l2317 11F0  
                         i2l2325 120E                           i2l2309 11D6  
                         i2l2421 0EAE                           i2l2405 0E4E  
                         i2l2423 0EC2                           i2l3071 013E  
                         i2l3063 0122                           i2l3047 00B8  
                         i2l2601 0D34                           i2l2273 0F9A  
                         i2l2329 121C                           i2l2417 0E8E  
                         i2l2425 0EC6                           i2l2611 0D90  
                         i2l2603 0D52                           i2l2275 0FA2  
                         i2l2267 0F84                           i2l2451 09D8  
                         i2l3067 0130                           i2l2293 0FDA  
                         i2l2285 0FC2                           i2l2277 0FA6  
                         i2l2461 0A26                           i2l2453 09DC  
                         i2l2445 09C8                   __CFG_WDTEN$OFF 000000  
                         i2l2607 0D68                           i2l2391 14B8  
                         i2l2455 09F0                           i2l2439 0982  
                         i2l2609 0D86                           i2l2393 14BC  
                         i2l2289 0FCC                           i2l2457 0A0E  
                         i2l2811 0BCC                           i2l2741 06C0  
                         i2l2725 0690                           i2l2821 0BF4  
                         i2l2389 14B4                           i2l2397 14C2  
                         i2l2751 06F6                           i2l2719 0666  
                         i2l2807 0BBC                           i2l2399 14DC  
                         i2l2761 072A                           i2l2753 06FE  
                         i2l2817 0BE4                           i2l2595 0D1C  
                         i2l2747 06E2                           i2l2835 0A72  
                         i2l2749 06EC                           i2l2853 0AD8  
                         i2l2599 0D2A                           i2l2767 076A  
                         i2l2759 0720                           i2l2871 0B28  
                         i2l2863 0B00                           i2l2777 079A  
                         i2l2793 0B8A                           i2l2865 0B0C  
                         i2l2857 0AE8                           i2l2787 0B62  
                         i2l2867 0B12                           u144_41 0624  
                         u145_41 0638          ??_ReadParallelSpeedLeft 00A8  
                         u171_41 0A56                           u165_41 0B4A  
                         u167_41 0B72                 __end_of___lwtoft 1778  
                         _TMR0IE 007F95                           _TMR0IF 007F92  
                         _TMR0ON 007EAF                           _TRISA0 007C90  
                         _TRISA1 007C91                           _TRISA2 007C92  
                         _TRISA3 007C93               SetMotorRight@speed 00AF  
              ??_SetDistanceLeft 0038        __end_of_ReadDistanceRight 17D8  
                 __CFG_XINST$OFF 000000                   _LCDWriteString 0E4C  
                _DistanceCentral 00A0                   _MotorLeftSpeed 00BF  
               _SetPWMMotorRight 15A6                        ??___awdiv 0005  
                      ??___ftadd 0021                   __CFG_STVREN$ON 000000  
                      ??___awmod 0005                       _SpeedRight 0051  
                      ??___ftmul 0012                        ??___fttol 002B  
                      ??___lwdiv 00AA             __size_of_LCDBusyLoop 0056  
                         clear_0 13DE                           clear_1 13EA  
               ___awdiv@quotient 0007                  ___awmod@divisor 0003  
        __end_of_SetPWMMotorLeft 1612                  ___awmod@counter 0005  
     __end_of_SetDistanceCentral 11B6               __size_of_MotorInit 002A  
                  ?_parallelInit 0001            ___ftmul@f3_as_product 0016  
               _ReadPWMMotorLeft 17F6                     LCDWriteInt@i 0015  
                   LCDWriteInt@j 0013                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8             _ConvertParallelSpeed 0C2E  
                _SetBattery$1270 0038           __size_ofi2_LCDBusyLoop 0040  
                   Go@SpeedRight 00B6             __size_of_LCDWriteInt 00FE  
                     __accesstop 0060          __end_of__initialization 1410  
                     ___ftadd@f1 001B                       ___ftadd@f2 001E  
         __end_of_LCDWriteString 0EDA                    ___rparam_used 000001  
                      LCDByte@hn 00AA                        LCDByte@ln 00AB  
                  ?_SetMotorLeft 00AF                       _TurnLeft90 1676  
                     ___ftmul@f1 000C                       ___ftmul@f2 000F  
                     ___fttol@f1 0027                   __pcstackCOMRAM 0001  
                   __pidataBANK0 1392                       __end_of_Go 0948  
                 ??_parallelInit 00A6                       ___lwtoft@c 0009  
                    ?_SetBattery 0036            ?_ConvertParallelSpeed 00A6  
   __size_of_ReadDistanceCentral 000A                parallel@SpeedLeft 00C3  
                     __pbssBANK0 00B8             __end_of_ReadParallel 12E6  
                      ?_ReadMode 00A6                       __pnvCOMRAM 005B  
              __end_of_MotorInit 1730                   ??_SetMotorLeft 00B1  
                ?_LCDWriteString 0009                    ??_TurnLeft135 00B1  
     __size_of_ReadDistanceRight 000A                    ??_TurnRight90 00B1  
                  i2_LCDBusyLoop 152A                          _ADCInit 1730  
                      ?___ftpack 0001                    ?_TimerPWMInit 0001  
               ?_SetPWMMotorLeft 00AD                        ?___lwtoft 0009  
                        _LCDByte 12E6                          _LCDInit 0DBA  
         __size_of_SetMotorRight 0046         ??_ReadParallelSpeedRight 00A8  
      __size_of_ReadDistanceLeft 000A                          _PWMLeft 005B  
              i2LCDBusyLoop@busy 0001                i2LCDBusyLoop@temp 0002  
                        _Battery 004D                       ??_ReadMode 00A8  
              ?_SetDistanceRight 0036                     isr@iteration 0059  
          _ADCInitiateConversion 1808               ??_SetDistanceRight 0038  
                        __Hparam 0000                      ?_TurnLeft90 0001  
                        __Lparam 0000                     _DistanceLeft 00A2  
            __size_of_SetBattery 0086                          ___cgram 0060  
                 ?i2_LCDBusyLoop 0001                          ___awdiv 0F60  
                        ___ftadd 0614                          ___awmod 11B6  
                        ___ftmul 0B3A                          ___fttol 0A46  
            __end_of_TurnLeft135 16DA                          ___lwdiv 0FE4  
                   __psmallconst 0600                ReadParallel@right 00A9  
                 ??_TimerPWMInit 00A6                          __pcinit 13D8  
                     ??___ftpack 0006                          __ramtop 0600  
                        __ptext0 156A                          __ptext1 1800  
                        __ptext2 1778                          __ptext3 1706  
                        __ptext4 0DBA                          __ptext5 12E6  
                        __ptext6 133C                          __ptext7 07C0  
                        __ptext8 1612                          __ptext9 1644  
            __end_of_TurnRight90 1644                       ??___lwtoft 000C  
                   __size_of_abs 002C                     __size_of_isr 0180  
         ??_ConvertParallelSpeed 00A8                 ___awmod@dividend 0001  
              SetBattery@lecture 0036                        _LCDGotoXY 14AA  
       __end_of_SetPWMMotorRight 15DC                  _SetDistanceLeft 10D2  
              _ShowLecturesInLCD 1226             end_of_initialization 1410  
                        isr@read 004B               ?_ShowLecturesInLCD 0001  
                  __Lmediumconst 0000   __size_of_ReadParallelSpeedLeft 000A  
           __end_of_parallelInit 1808    __end_of_ReadParallelSpeedLeft 17C4  
              _ReadPWMMotorRight 17EC                        i2_LCDByte 14EA  
                  _SetMotorRight 141E         __end_of_ReadPWMMotorLeft 1800  
                _MotorRightSpeed 00C1               ?_ReadPWMMotorRight 0001  
            ??_ShowLecturesInLCD 0017                          postdec1 000FE5  
                        postinc0 000FEE       SetPWMMotorRight@percentage 00AD  
            ??_ReadPWMMotorRight 0003                LCDWriteString@msg 0009  
           __end_of_SetMotorLeft 14AA            __size_of_ReadParallel 005A  
                      _TRISDbits 000F95  __size_of_ReadParallelSpeedRight 000A  
      __end_of_ShowLecturesInLCD 128C                       ?_LCDGotoXY 0009  
            __size_of_TurnLeft90 0032               _SetDistanceCentral 1144  
            i2LCDBusyLoop@status 0003           ?_ADCInitiateConversion 0001  
      __end_of_ReadPWMMotorRight 17F6                       LCDInit@__i 00B0  
                     LCDGotoXY@x 000A                       LCDGotoXY@y 0009  
                 ?_SetMotorRight 00AF                       ?i2_LCDByte 0004  
            ?_SetDistanceCentral 0036                      _TurnLeft135 16A8  
                ??i2_LCDBusyLoop 0001                      ___ftmul@exp 0015  
            _ReadDistanceCentral 17E2                    ??_LCDBusyLoop 00A6  
                    _TurnRight90 1612                       isr@PWMLeft 0053  
                   _ReadParallel 128C          __end_of_SetDistanceLeft 1144  
           ??_SetDistanceCentral 0038              start_initialization 13D8  
                   ??_SetBattery 0038             ?_ReadDistanceCentral 00A6  
               _ReadDistanceLeft 17D8                      __end_of_abs 1706  
                    __end_of_isr 0188                    ??_LCDWriteInt 000C  
                i2LCDByte@isdata 0004                 ??_LCDWriteString 000B  
           __end_of_TimerPWMInit 1796                __size_of_ReadMode 000A  
         _ReadParallelSpeedRight 17B0                        _MotorInit 1706  
                      _SpeedLeft 004F               __end_of_SetBattery 0F60  
                  ?_TurnRight135 0001                      __pdataBANK0 0060  
               __CFG_LPT1OSC$OFF 000000                         ?_ADCInit 0001  
            __end_of_LCDBusyLoop 1392               parallel@SpeedRight 00C5  
                  ?_ADCGetOutput 0001                      Go@SpeedLeft 00B4  
                       ?_LCDByte 00A9                         ?_LCDInit 0001  
              __size_of___ftpack 00AE                      __pbssCOMRAM 004D  
                       LCDByte@c 00AC            ??_ReadDistanceCentral 00A8  
              __size_of___lwtoft 0024                    __pcstackBANK0 00A6  
                    ??_LCDGotoXY 000A       __size_of_ShowLecturesInLCD 0066  
      SetDistanceCentral@lecture 0036            __size_of_parallelInit 0008  
            ReadParallel@lecture 00AA                    i2LCDByte@temp 0008  
     __size_of_ReadPWMMotorRight 000A                 LCDWriteInt@F4236 00B8  
                ??_SetMotorRight 00B1              __end_of_LCDWriteInt 0A46  
                    ??i2_LCDByte 0005                      i2LCDByte@hn 0005  
                    i2LCDByte@ln 0006                     ??_TurnLeft90 00B1  
               ___lwdiv@dividend 00A6                __CFG_CCP2MX$PORTC 000000  
                     ?_MotorInit 0001                        __pintcode 0008  
                 ??_TurnRight135 00B1                         ?___awdiv 0001  
                       ?___ftadd 001B                         ?___awmod 0001  
                       ?___ftmul 000C                         ?___fttol 0027  
                       ?___lwdiv 00A6            __size_of_SetMotorLeft 0046  
      __size_of_SetDistanceRight 0076                   ??_ADCGetOutput 0003  
                   _parallelInit 1800                      __smallconst 0600  
               ?_SetDistanceLeft 0036                  LCDBusyLoop@busy 00A6  
                LCDBusyLoop@temp 00A7                 ___lwdiv@quotient 00AA  
             __end_of_TurnLeft90 16A8                 ReadParallel@left 00AB  
       __size_of_SetPWMMotorLeft 0036                ?_SetPWMMotorRight 00AD  
                    __size_of_Go 0188               ??_SetPWMMotorRight 00AF  
                   _SetMotorLeft 1464                         i2u126_41 0952  
                       i2u173_40 0A90                         i2u173_45 0A88  
              ?_ReadPWMMotorLeft 0001                 __CFG_WDTPS$32768 000000  
                    _LCDBusyLoop 133C               ??_ReadPWMMotorLeft 0003  
               LCDWriteString@cc 000B                 __size_of_ADCInit 0024  
                       _PWMRight 005D                 __size_of_LCDByte 0056  
               __size_of_LCDInit 0092    __size_of_ConvertParallelSpeed 00DE  
          __size_of_TimerPWMInit 001E          ??_ADCInitiateConversion 00A6  
                    _LCDWriteInt 0948                        copy_data0 1404  
         SetDistanceLeft@lecture 0036                         _ReadMode 17C4  
                   ?_TurnLeft135 0001                         __Hrparam 0000  
          _ReadParallelSpeedLeft 17BA                      ??_MotorInit 00AF  
                       __Lrparam 0000         __end_of_ReadDistanceLeft 17E2  
             __CFG_BOREN$SBORDIS 000000                    _DistanceRight 00A4  
                   ?_TurnRight90 0001                 __size_of___awdiv 0084  
               __size_of___ftadd 01AC                 __size_of___awmod 0070  
               __size_of___ftmul 00F4                 __size_of___fttol 00F4  
              LCDBusyLoop@status 00A8                 __size_of___lwdiv 0078  
                       ___ftpack 0D0C                     _TimerPWMInit 1778  
                       ___lwtoft 1754                       i2LCDByte@c 0007  
                ___lwdiv@divisor 00A8                  ___lwdiv@counter 00AC  
                       __ptext10 1676                         __ptext11 16A8  
                       __ptext20 128C                         __ptext12 141E  
                       __ptext21 0C2E                         __ptext13 15A6  
                       __ptext30 1226                         __ptext22 17C4  
                       __ptext14 1464                         __ptext31 0E4C  
                       __ptext23 17CE                         __ptext15 16DA  
                       __ptext40 0EDA                         __ptext32 0948  
                       __ptext24 17D8                         __ptext16 15DC  
                       __ptext41 1754                         __ptext33 11B6  
                       __ptext25 17E2                         __ptext17 0FE4  
                       __ptext42 0A46                         __ptext34 0F60  
                       __ptext26 1808                         __ptext18 17B0  
                       __ptext43 0B3A                         __ptext35 14AA  
                       __ptext27 1730                         __ptext19 17BA  
                       __ptext44 0614                         __ptext36 14EA  
                       __ptext45 0D0C                         __ptext37 152A  
                       __ptext29 105C                         __ptext46 17EC  
                       __ptext38 10D2                         __ptext47 17F6  
                       __ptext39 1144                         __ptext48 1796  
           __end_of_TurnRight135 1676          ?_ReadParallelSpeedRight 00A6  
                  __size_of_main 003C             __end_of_ADCGetOutput 17B0  
              ??_SetPWMMotorLeft 00AF            __end_ofi2_LCDBusyLoop 156A  
                       int$flags 005F                 _SetDistanceRight 105C  
    __size_of_SetDistanceCentral 0072        SetPWMMotorLeft@percentage 00AD  
                       intlevel2 0000   __end_of_ReadParallelSpeedRight 17BA  
                 LCDWriteInt@val 0009                   LCDWriteInt@str 000E  
         ?_ReadParallelSpeedLeft 00A6      __end_of_ReadDistanceCentral 17EC  
              __CFG_FOSC$INTIO67 000000            __end_of_SetMotorRight 1464  
        __size_of_LCDWriteString 008E  
