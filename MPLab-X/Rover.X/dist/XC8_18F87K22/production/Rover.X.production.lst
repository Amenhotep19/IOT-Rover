

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Wed Apr 20 00:31:22 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataBANK0
    74  00147E                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for ___cgram
    78  00147E  0C                 	db	12
    79  00147F  12                 	db	18
    80  001480  12                 	db	18
    81  001481  0C                 	db	12
    82  001482  00                 	db	0
    83  001483  00                 	db	0
    84  001484  00                 	db	0
    85  001485  00                 	db	0
    86  001486  00                 	db	0
    87  001487  04                 	db	4
    88  001488  0E                 	db	14
    89  001489  1F                 	db	31
    90  00148A  0E                 	db	14
    91  00148B  04                 	db	4
    92  00148C  00                 	db	0
    93  00148D  00                 	db	0
    94  00148E  04                 	db	4
    95  00148F  04                 	db	4
    96  001490  04                 	db	4
    97  001491  04                 	db	4
    98  001492  1F                 	db	31
    99  001493  0E                 	db	14
   100  001494  04                 	db	4
   101  001495  00                 	db	0
   102  001496  0A                 	db	10
   103  001497  15                 	db	21
   104  001498  11                 	db	17
   105  001499  0A                 	db	10
   106  00149A  04                 	db	4
   107  00149B  00                 	db	0
   108  00149C  00                 	db	0
   109  00149D  00                 	db	0
   110  00149E  0A                 	db	10
   111  00149F  1F                 	db	31
   112  0014A0  1F                 	db	31
   113  0014A1  0E                 	db	14
   114  0014A2  04                 	db	4
   115  0014A3  00                 	db	0
   116  0014A4  00                 	db	0
   117  0014A5  00                 	db	0
   118  0014A6  00                 	db	0
   119  0014A7  00                 	db	0
   120  0014A8  00                 	db	0
   121  0014A9  00                 	db	0
   122  0014AA  00                 	db	0
   123  0014AB  00                 	db	0
   124  0014AC  00                 	db	0
   125  0014AD  00                 	db	0
   126  0014AE  00                 	db	0
   127  0014AF  00                 	db	0
   128  0014B0  00                 	db	0
   129  0014B1  00                 	db	0
   130  0014B2  00                 	db	0
   131  0014B3  00                 	db	0
   132  0014B4  00                 	db	0
   133  0014B5  00                 	db	0
   134  0014B6  00                 	db	0
   135  0014B7  00                 	db	0
   136  0014B8  00                 	db	0
   137  0014B9  00                 	db	0
   138  0014BA  00                 	db	0
   139  0014BB  00                 	db	0
   140  0014BC  00                 	db	0
   141  0014BD  00                 	db	0
   142                           
   143                           ;initializer for _DistanceCentral
   144  0014BE  0032               	dw	50
   145                           
   146                           ;initializer for _DistanceLeft
   147  0014C0  0032               	dw	50
   148                           
   149                           ;initializer for _DistanceRight
   150  0014C2  0032               	dw	50
   151                           
   152                           	psect	nvBANK0
   153  0000C7                     __pnvBANK0:
   154                           	opt stack 0
   155  0000C7                     _PWMLeft:
   156                           	opt stack 0
   157  0000C7                     	ds	2
   158  0000C9                     _PWMRight:
   159                           	opt stack 0
   160  0000C9                     	ds	2
   161  0000                     _ADCON1	set	4033
   162  0000                     _ADCON2	set	4032
   163  0000                     _ADRESH	set	4036
   164  0000                     _ADRESL	set	4035
   165  0000                     _ANSELH	set	3967
   166  0000                     _PORTB	set	3969
   167  0000                     _PORTD	set	3971
   168  0000                     _RCREG	set	4014
   169  0000                     _RCSTAbits	set	4011
   170  0000                     _TMR0H	set	4055
   171  0000                     _TMR0L	set	4054
   172  0000                     _TRISB	set	3987
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISD	set	3989
   175  0000                     _TRISDbits	set	3989
   176  0000                     _TXREG	set	4013
   177  0000                     _TXSTAbits	set	4012
   178  0000                     _ADIE	set	31982
   179  0000                     _ADIF	set	31990
   180  0000                     _ADON	set	32272
   181  0000                     _ANS0	set	31728
   182  0000                     _ANS1	set	31729
   183  0000                     _ANS2	set	31730
   184  0000                     _ANS3	set	31731
   185  0000                     _CHS0	set	32274
   186  0000                     _CHS1	set	32275
   187  0000                     _CHS2	set	32276
   188  0000                     _CHS3	set	32277
   189  0000                     _GIE	set	32663
   190  0000                     _GO	set	32273
   191  0000                     _PEIE	set	32662
   192  0000                     _PSA	set	32427
   193  0000                     _RC0	set	31760
   194  0000                     _RC1	set	31761
   195  0000                     _RC2	set	31762
   196  0000                     _RC3	set	31763
   197  0000                     _RC4	set	31764
   198  0000                     _RC5	set	31765
   199  0000                     _RCIF	set	31989
   200  0000                     _RD4	set	31772
   201  0000                     _RD5	set	31773
   202  0000                     _RD6	set	31774
   203  0000                     _T08BIT	set	32430
   204  0000                     _T0CS	set	32429
   205  0000                     _T0PS0	set	32424
   206  0000                     _T0PS1	set	32425
   207  0000                     _T0PS2	set	32426
   208  0000                     _TMR0IE	set	32661
   209  0000                     _TMR0IF	set	32658
   210  0000                     _TMR0ON	set	32431
   211  0000                     _TRISA0	set	31888
   212  0000                     _TRISA1	set	31889
   213  0000                     _TRISA2	set	31890
   214  0000                     _TRISA3	set	31891
   215                           
   216                           	psect	smallconst
   217  000600                     __psmallconst:
   218                           	opt stack 0
   219  000600  00                 	db	0
   220  000601  3C                 	db	60	;'<'
   221  000602  52                 	db	82	;'R'
   222  000603  69                 	db	105	;'i'
   223  000604  67                 	db	103	;'g'
   224  000605  68                 	db	104	;'h'
   225  000606  74                 	db	116	;'t'
   226  000607  20                 	db	32
   227  000608  20                 	db	32
   228  000609  2D                 	db	45
   229  00060A  20                 	db	32
   230  00060B  20                 	db	32
   231  00060C  4C                 	db	76	;'L'
   232  00060D  65                 	db	101	;'e'
   233  00060E  66                 	db	102	;'f'
   234  00060F  74                 	db	116	;'t'
   235  000610  3E                 	db	62	;'>'
   236  000611  00                 	db	0
   237  000612                     STR_3:
   238  000612  52                 	db	82	;'R'
   239  000613  69                 	db	105	;'i'
   240  000614  67                 	db	103	;'g'
   241  000615  68                 	db	104	;'h'
   242  000616  74                 	db	116	;'t'
   243  000617  2D                 	db	45
   244  000618  46                 	db	70	;'F'
   245  000619  72                 	db	114	;'r'
   246  00061A  6F                 	db	111	;'o'
   247  00061B  6E                 	db	110	;'n'
   248  00061C  74                 	db	116	;'t'
   249  00061D  2D                 	db	45
   250  00061E  4C                 	db	76	;'L'
   251  00061F  65                 	db	101	;'e'
   252  000620  66                 	db	102	;'f'
   253  000621  74                 	db	116	;'t'
   254  000622  00                 	db	0
   255  000623                     STR_2:
   256  000623  0A                 	db	10
   257  000624  0D                 	db	13
   258  000625  0A                 	db	10
   259  000626  0D                 	db	13
   260  000627  57                 	db	87	;'W'
   261  000628  72                 	db	114	;'r'
   262  000629  69                 	db	105	;'i'
   263  00062A  74                 	db	116	;'t'
   264  00062B  65                 	db	101	;'e'
   265  00062C  3A                 	db	58	;':'
   266  00062D  20                 	db	32
   267  00062E  00                 	db	0
   268  00062F                     STR_1:
   269  00062F  0A                 	db	10
   270  000630  0D                 	db	13
   271  000631  45                 	db	69	;'E'
   272  000632  63                 	db	99	;'c'
   273  000633  68                 	db	104	;'h'
   274  000634  6F                 	db	111	;'o'
   275  000635  3A                 	db	58	;':'
   276  000636  20                 	db	32
   277  000637  00                 	db	0
   278  000638                     STR_6:
   279  000638  2B                 	db	43
   280  000639  00                 	db	0
   281  00063A                     STR_5:
   282  00063A  2D                 	db	45
   283  00063B  00                 	db	0
   284  0000                     
   285                           ; #config settings
   286  00063C  00                 	db	0	; dummy byte at the end
   287  0000                     
   288                           	psect	cinit
   289  0014C4                     __pcinit:
   290                           	opt stack 0
   291  0014C4                     start_initialization:
   292                           	opt stack 0
   293  0014C4                     __initialization:
   294                           	opt stack 0
   295                           
   296                           ; Clear objects allocated to BANK0 (15 bytes)
   297  0014C4  EE00  F0B8         	lfsr	0,__pbssBANK0
   298  0014C8  0E0F               	movlw	15
   299  0014CA                     clear_0:
   300  0014CA  6AEE               	clrf	postinc0,c
   301  0014CC  06E8               	decf	wreg,f,c
   302  0014CE  E1FD               	bnz	clear_0
   303                           
   304                           ; Clear objects allocated to COMRAM (17 bytes)
   305  0014D0  EE00  F04E         	lfsr	0,__pbssCOMRAM
   306  0014D4  0E11               	movlw	17
   307  0014D6                     clear_1:
   308  0014D6  6AEE               	clrf	postinc0,c
   309  0014D8  06E8               	decf	wreg,f,c
   310  0014DA  E1FD               	bnz	clear_1
   311                           
   312                           ; Initialize objects allocated to BANK0 (70 bytes)
   313                           ; load TBLPTR registers with __pidataBANK0
   314  0014DC  0E7E               	movlw	low __pidataBANK0
   315  0014DE  6EF6               	movwf	tblptrl,c
   316  0014E0  0E14               	movlw	high __pidataBANK0
   317  0014E2  6EF7               	movwf	tblptrh,c
   318  0014E4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   319  0014E6  6EF8               	movwf	tblptru,c
   320  0014E8  EE00  F060         	lfsr	0,__pdataBANK0
   321  0014EC  EE10 F046          	lfsr	1,70
   322  0014F0                     copy_data0:
   323  0014F0  0009               	tblrd		*+
   324  0014F2  CFF5 FFEE          	movff	tablat,postinc0
   325  0014F6  50E5               	movf	postdec1,w,c
   326  0014F8  50E1               	movf	fsr1l,w,c
   327  0014FA  E1FA               	bnz	copy_data0
   328  0014FC                     end_of_initialization:
   329                           	opt stack 0
   330  0014FC                     __end_of__initialization:
   331                           	opt stack 0
   332  0014FC  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   333  0014FE  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   334  001500  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  001502  6EF8               	movwf	tblptru,c
   336  001504  0100               	movlb	0
   337  001506  EF2B  F00B         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	bssCOMRAM
   348  00004E                     __pbssCOMRAM:
   349                           	opt stack 0
   350  00004E                     _Battery:
   351                           	opt stack 0
   352  00004E                     	ds	2
   353  000050                     _SpeedLeft:
   354                           	opt stack 0
   355  000050                     	ds	2
   356  000052                     _SpeedRight:
   357                           	opt stack 0
   358  000052                     	ds	2
   359  000054                     isr@PWMLeft:
   360                           	opt stack 0
   361  000054                     	ds	2
   362  000056                     isr@PWMRight:
   363                           	opt stack 0
   364  000056                     	ds	2
   365  000058                     isr@Readport:
   366                           	opt stack 0
   367  000058                     	ds	2
   368  00005A                     isr@counter:
   369                           	opt stack 0
   370  00005A                     	ds	2
   371  00005C                     isr@iteration:
   372                           	opt stack 0
   373  00005C                     	ds	2
   374  00005E                     _USART_Status:
   375                           	opt stack 0
   376  00005E                     	ds	1
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bssBANK0
   387  0000B8                     __pbssBANK0:
   388                           	opt stack 0
   389  0000B8                     LCDWriteInt@F4236:
   390                           	opt stack 0
   391  0000B8                     	ds	5
   392  0000BD                     _Mode:
   393                           	opt stack 0
   394  0000BD                     	ds	2
   395  0000BF                     _MotorLeftSpeed:
   396                           	opt stack 0
   397  0000BF                     	ds	2
   398  0000C1                     _MotorRightSpeed:
   399                           	opt stack 0
   400  0000C1                     	ds	2
   401  0000C3                     parallel@SpeedLeft:
   402                           	opt stack 0
   403  0000C3                     	ds	2
   404  0000C5                     parallel@SpeedRight:
   405                           	opt stack 0
   406  0000C5                     	ds	2
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	dataBANK0
   417  000060                     __pdataBANK0:
   418                           	opt stack 0
   419  000060                     ___cgram:
   420                           	opt stack 0
   421  000060                     	ds	64
   422  0000A0                     _DistanceCentral:
   423                           	opt stack 0
   424  0000A0                     	ds	2
   425  0000A2                     _DistanceLeft:
   426                           	opt stack 0
   427  0000A2                     	ds	2
   428  0000A4                     _DistanceRight:
   429                           	opt stack 0
   430  0000A4                     	ds	2
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	cstackBANK0
   441  0000A6                     __pcstackBANK0:
   442                           	opt stack 0
   443  0000A6                     ?_abs:
   444                           	opt stack 0
   445  0000A6                     ?_ReadMode:
   446                           	opt stack 0
   447  0000A6                     ?_ReadParallelSpeedLeft:
   448                           	opt stack 0
   449  0000A6                     ?_ReadParallelSpeedRight:
   450                           	opt stack 0
   451  0000A6                     ?_ConvertParallelSpeed:
   452                           	opt stack 0
   453  0000A6                     ?_ReadDistanceLeft:
   454                           	opt stack 0
   455  0000A6                     ?_ReadDistanceRight:
   456                           	opt stack 0
   457  0000A6                     ?_ReadDistanceCentral:
   458                           	opt stack 0
   459  0000A6                     ?___lwdiv:
   460                           	opt stack 0
   461  0000A6                     LCDBusyLoop@busy:
   462                           	opt stack 0
   463  0000A6                     abs@a:
   464                           	opt stack 0
   465  0000A6                     ___lwdiv@dividend:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x0
   469  0000A6                     	ds	1
   470  0000A7                     LCDBusyLoop@temp:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x1
   474  0000A7                     	ds	1
   475  0000A8                     ??_abs:
   476  0000A8                     LCDBusyLoop@status:
   477                           	opt stack 0
   478  0000A8                     ConvertParallelSpeed@velocity:
   479                           	opt stack 0
   480  0000A8                     ___lwdiv@divisor:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x2
   484  0000A8                     	ds	1
   485  0000A9                     LCDByte@isdata:
   486                           	opt stack 0
   487  0000A9                     ReadParallel@right:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x3
   491  0000A9                     	ds	1
   492  0000AA                     LCDByte@hn:
   493                           	opt stack 0
   494  0000AA                     ReadParallel@lecture:
   495                           	opt stack 0
   496  0000AA                     ___lwdiv@quotient:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x4
   500  0000AA                     	ds	1
   501  0000AB                     LCDByte@ln:
   502                           	opt stack 0
   503  0000AB                     ReadParallel@left:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x5
   507  0000AB                     	ds	1
   508  0000AC                     LCDByte@c:
   509                           	opt stack 0
   510  0000AC                     ___lwdiv@counter:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x6
   514  0000AC                     	ds	1
   515  0000AD                     LCDByte@temp:
   516                           	opt stack 0
   517  0000AD                     SetPWMMotorLeft@percentage:
   518                           	opt stack 0
   519  0000AD                     SetPWMMotorRight@percentage:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x7
   523  0000AD                     	ds	1
   524  0000AE                     ??_LCDInit:
   525                           
   526                           ; 1 bytes @ 0x8
   527  0000AE                     	ds	1
   528  0000AF                     LCDInit@style:
   529                           	opt stack 0
   530  0000AF                     SetMotorLeft@speed:
   531                           	opt stack 0
   532  0000AF                     SetMotorRight@speed:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x9
   536  0000AF                     	ds	1
   537  0000B0                     LCDInit@__i:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0xA
   541  0000B0                     	ds	1
   542  0000B1                     ??_TurnRight135:
   543  0000B1                     ??_TurnLeft135:
   544  0000B1                     ??_TurnLeft90:
   545  0000B1                     ??_TurnRight90:
   546                           
   547                           ; 1 bytes @ 0xB
   548  0000B1                     	ds	1
   549  0000B2                     ??_Go:
   550                           
   551                           ; 1 bytes @ 0xC
   552  0000B2                     	ds	2
   553  0000B4                     Go@SpeedLeft:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0xE
   557  0000B4                     	ds	2
   558  0000B6                     Go@SpeedRight:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x10
   562  0000B6                     	ds	2
   563  0000B8                     tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           ; 1 bytes @ 0x12
   573                           
   574                           	psect	cstackCOMRAM
   575  000001                     __pcstackCOMRAM:
   576                           	opt stack 0
   577  000001                     ?_ADCGetOutput:
   578                           	opt stack 0
   579  000001                     ?_ReadPWMMotorRight:
   580                           	opt stack 0
   581  000001                     ?_ReadPWMMotorLeft:
   582                           	opt stack 0
   583  000001                     ?_ConvertPicSpeed:
   584                           	opt stack 0
   585  000001                     ?___awdiv:
   586                           	opt stack 0
   587  000001                     ?___awmod:
   588                           	opt stack 0
   589  000001                     ?___ftpack:
   590                           	opt stack 0
   591  000001                     ReadUSART@data:
   592                           	opt stack 0
   593  000001                     WriteUSART@data:
   594                           	opt stack 0
   595  000001                     i2LCDBusyLoop@busy:
   596                           	opt stack 0
   597  000001                     ___awdiv@dividend:
   598                           	opt stack 0
   599  000001                     ___awmod@dividend:
   600                           	opt stack 0
   601  000001                     ___ftpack@arg:
   602                           	opt stack 0
   603                           
   604                           ; 3 bytes @ 0x0
   605  000001                     	ds	1
   606  000002                     i2LCDBusyLoop@temp:
   607                           	opt stack 0
   608  000002                     putsUSART@data:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x1
   612  000002                     	ds	1
   613  000003                     ??_ADCGetOutput:
   614  000003                     ConvertPicSpeed@velocity:
   615                           	opt stack 0
   616  000003                     i2LCDBusyLoop@status:
   617                           	opt stack 0
   618  000003                     ___awdiv@divisor:
   619                           	opt stack 0
   620  000003                     ___awmod@divisor:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x2
   624  000003                     	ds	1
   625  000004                     SetSpeedRight@lecture:
   626                           	opt stack 0
   627  000004                     SetSpeedLeft@lecture:
   628                           	opt stack 0
   629  000004                     ___ftpack@exp:
   630                           	opt stack 0
   631  000004                     i2LCDByte@isdata:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x3
   635  000004                     	ds	1
   636  000005                     ___awdiv@counter:
   637                           	opt stack 0
   638  000005                     ___awmod@counter:
   639                           	opt stack 0
   640  000005                     ___ftpack@sign:
   641                           	opt stack 0
   642  000005                     i2LCDByte@hn:
   643                           	opt stack 0
   644  000005                     ADCGetOutput@temp:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x4
   648  000005                     	ds	1
   649  000006                     ??___ftpack:
   650  000006                     ___awdiv@sign:
   651                           	opt stack 0
   652  000006                     ___awmod@sign:
   653                           	opt stack 0
   654  000006                     i2LCDByte@ln:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x5
   658  000006                     	ds	1
   659  000007                     i2LCDByte@c:
   660                           	opt stack 0
   661  000007                     ___awdiv@quotient:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x6
   665  000007                     	ds	1
   666  000008                     i2LCDByte@temp:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x7
   670  000008                     	ds	1
   671  000009                     ?___lwtoft:
   672                           	opt stack 0
   673  000009                     LCDGotoXY@y:
   674                           	opt stack 0
   675  000009                     LCDWriteString@msg:
   676                           	opt stack 0
   677  000009                     LCDWriteInt@val:
   678                           	opt stack 0
   679  000009                     ___lwtoft@c:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x8
   683  000009                     	ds	1
   684  00000A                     LCDGotoXY@x:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x9
   688  00000A                     	ds	1
   689  00000B                     LCDWriteString@cc:
   690                           	opt stack 0
   691  00000B                     LCDWriteInt@field_length:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0xA
   695  00000B                     	ds	1
   696  00000C                     ??_LCDWriteInt:
   697  00000C                     ?___ftmul:
   698                           	opt stack 0
   699  00000C                     ___ftmul@f1:
   700                           	opt stack 0
   701                           
   702                           ; 3 bytes @ 0xB
   703  00000C                     	ds	2
   704  00000E                     LCDWriteInt@str:
   705                           	opt stack 0
   706                           
   707                           ; 5 bytes @ 0xD
   708  00000E                     	ds	1
   709  00000F                     ___ftmul@f2:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0xE
   713  00000F                     	ds	3
   714  000012                     ??___ftmul:
   715                           
   716                           ; 1 bytes @ 0x11
   717  000012                     	ds	1
   718  000013                     LCDWriteInt@j:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x12
   722  000013                     	ds	2
   723  000015                     ___ftmul@exp:
   724                           	opt stack 0
   725  000015                     LCDWriteInt@i:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x14
   729  000015                     	ds	1
   730  000016                     ___ftmul@f3_as_product:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x15
   734  000016                     	ds	1
   735  000017                     
   736                           ; 1 bytes @ 0x16
   737  000017                     	ds	2
   738  000019                     ___ftmul@cntr:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x18
   742  000019                     	ds	1
   743  00001A                     ___ftmul@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x19
   747  00001A                     	ds	1
   748  00001B                     ?___ftadd:
   749                           	opt stack 0
   750  00001B                     ___ftadd@f1:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x1A
   754  00001B                     	ds	3
   755  00001E                     ___ftadd@f2:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x1D
   759  00001E                     	ds	3
   760  000021                     ??___ftadd:
   761                           
   762                           ; 1 bytes @ 0x20
   763  000021                     	ds	3
   764  000024                     ___ftadd@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x23
   768  000024                     	ds	1
   769  000025                     ___ftadd@exp2:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x24
   773  000025                     	ds	1
   774  000026                     ___ftadd@exp1:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x25
   778  000026                     	ds	1
   779  000027                     ?___fttol:
   780                           	opt stack 0
   781  000027                     ___fttol@f1:
   782                           	opt stack 0
   783                           
   784                           ; 3 bytes @ 0x26
   785  000027                     	ds	4
   786  00002B                     ??___fttol:
   787                           
   788                           ; 1 bytes @ 0x2A
   789  00002B                     	ds	5
   790  000030                     ___fttol@sign1:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x2F
   794  000030                     	ds	1
   795  000031                     ___fttol@lval:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x30
   799  000031                     	ds	4
   800  000035                     ___fttol@exp1:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x34
   804  000035                     	ds	1
   805  000036                     SetDistanceLeft@lecture:
   806                           	opt stack 0
   807  000036                     SetDistanceRight@lecture:
   808                           	opt stack 0
   809  000036                     SetDistanceCentral@lecture:
   810                           	opt stack 0
   811  000036                     SetBattery@lecture:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x35
   815  000036                     	ds	2
   816  000038                     ??_SetDistanceLeft:
   817  000038                     ??_SetDistanceCentral:
   818  000038                     ??_SetDistanceRight:
   819  000038                     _SetBattery$1541:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x37
   823  000038                     	ds	3
   824  00003B                     ??_isr:
   825                           
   826                           ; 1 bytes @ 0x3A
   827  00003B                     	ds	16
   828  00004B                     isr@read:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x4A
   832  00004B                     	ds	2
   833  00004D                     isr@CharRx:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x4C
   837  00004D                     	ds	1
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847 ;;
   848 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   849 ;;
   850 ;; *************** function _main *****************
   851 ;; Defined at:
   852 ;;		line 11 in file "main.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   866 ;;      Params:         0       0       0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0
   869 ;;      Totals:         0       0       0       0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels required when called:   11
   872 ;; This function calls:
   873 ;;		_ADCInit
   874 ;;		_ADCInitiateConversion
   875 ;;		_Go
   876 ;;		_LCDInit
   877 ;;		_MotorInit
   878 ;;		_SetMotorLeft
   879 ;;		_SetMotorRight
   880 ;;		_TimerPWMInit
   881 ;;		_parallelInit
   882 ;; This function is called by:
   883 ;;		Startup code after reset
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text0
   888  001656                     __ptext0:
   889                           	opt stack 0
   890  001656                     _main:
   891                           	opt stack 20
   892                           
   893                           ;main.c: 13: ADCInit();
   894                           
   895                           ;incstack = 0
   896  001656  EC28  F00C         	call	_ADCInit	;wreg free
   897                           
   898                           ;main.c: 18: MotorInit();
   899  00165A  EC13  F00C         	call	_MotorInit	;wreg free
   900                           
   901                           ;main.c: 20: TimerPWMInit();
   902  00165E  EC4C  F00C         	call	_TimerPWMInit	;wreg free
   903                           
   904                           ;main.c: 21: LCDInit(0B00000000);
   905  001662  0E00               	movlw	0
   906  001664  EC53  F007         	call	_LCDInit
   907                           
   908                           ;main.c: 22: parallelInit();
   909  001668  ECBA  F00C         	call	_parallelInit	;wreg free
   910                           
   911                           ;main.c: 23: SetMotorLeft(0);
   912  00166C  0E00               	movlw	0
   913  00166E  0100               	movlb	0	; () banked
   914  001670  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
   915  001672  0E00               	movlw	0
   916  001674  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
   917  001676  ECA8  F00A         	call	_SetMotorLeft	;wreg free
   918                           
   919                           ;main.c: 24: SetMotorRight(0);
   920  00167A  0E00               	movlw	0
   921  00167C  0100               	movlb	0	; () banked
   922  00167E  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
   923  001680  0E00               	movlw	0
   924  001682  6FAF               	movwf	SetMotorRight@speed& (0+255),b
   925  001684  EC85  F00A         	call	_SetMotorRight	;wreg free
   926  001688                     l3405:
   927                           
   928                           ;main.c: 30: ADCInitiateConversion();
   929  001688  ECBE  F00C         	call	_ADCInitiateConversion	;wreg free
   930                           
   931                           ;main.c: 31: Go();
   932  00168C  ECF5  F003         	call	_Go	;wreg free
   933  001690  D7FB               	goto	l3405
   934  001692                     __end_of_main:
   935                           	opt stack 0
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           postdec1	equ	0xFE5
   943                           fsr1l	equ	0xFE1
   944                           
   945 ;; *************** function _parallelInit *****************
   946 ;; Defined at:
   947 ;;		line 21 in file "parallel.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, status,2
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   961 ;;      Params:         0       0       0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0
   964 ;;      Totals:         0       0       0       0       0       0       0
   965 ;;Total ram usage:        0 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    6
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text1
   976  001974                     __ptext1:
   977                           	opt stack 0
   978  001974                     _parallelInit:
   979                           	opt stack 24
   980                           
   981                           ;parallel.c: 24: TRISB=0b11111111;
   982                           
   983                           ;incstack = 0
   984  001974  6893               	setf	3987,c	;volatile
   985                           
   986                           ;parallel.c: 26: ANSELH=0b00000000;
   987  001976  0E00               	movlw	0
   988  001978  6E7F               	movwf	3967,c	;volatile
   989  00197A  0012               	return		;funcret
   990  00197C                     __end_of_parallelInit:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1l	equ	0xFE1
  1000                           
  1001 ;; *************** function _TimerPWMInit *****************
  1002 ;; Defined at:
  1003 ;;		line 14 in file "TimerPWM.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1017 ;;      Params:         0       0       0       0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0       0       0
  1020 ;;      Totals:         0       0       0       0       0       0       0
  1021 ;;Total ram usage:        0 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    6
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text2
  1032  001898                     __ptext2:
  1033                           	opt stack 0
  1034  001898                     _TimerPWMInit:
  1035                           	opt stack 24
  1036                           
  1037                           ;TimerPWM.c: 15: GIE=1;
  1038                           
  1039                           ;incstack = 0
  1040  001898  8EF2               	bsf	intcon,7,c	;volatile
  1041                           
  1042                           ;TimerPWM.c: 16: TMR0IE=1;
  1043  00189A  8AF2               	bsf	intcon,5,c	;volatile
  1044                           
  1045                           ;TimerPWM.c: 17: T08BIT=1;
  1046  00189C  8CD5               	bsf	4053,6,c	;volatile
  1047                           
  1048                           ;TimerPWM.c: 18: T0CS=0;
  1049  00189E  9AD5               	bcf	4053,5,c	;volatile
  1050                           
  1051                           ;TimerPWM.c: 19: PSA=1;
  1052  0018A0  86D5               	bsf	4053,3,c	;volatile
  1053                           
  1054                           ;TimerPWM.c: 20: T0PS2=0;
  1055  0018A2  94D5               	bcf	4053,2,c	;volatile
  1056                           
  1057                           ;TimerPWM.c: 21: T0PS1=0;
  1058  0018A4  92D5               	bcf	4053,1,c	;volatile
  1059                           
  1060                           ;TimerPWM.c: 22: T0PS0=1;
  1061  0018A6  80D5               	bsf	4053,0,c	;volatile
  1062                           
  1063                           ;TimerPWM.c: 24: TMR0IF=0;
  1064  0018A8  94F2               	bcf	intcon,2,c	;volatile
  1065                           
  1066                           ;TimerPWM.c: 25: TMR0H=0x00;
  1067  0018AA  0E00               	movlw	0
  1068  0018AC  6ED7               	movwf	4055,c	;volatile
  1069                           
  1070                           ;TimerPWM.c: 26: TMR0L=156;
  1071  0018AE  0E9C               	movlw	156
  1072  0018B0  6ED6               	movwf	4054,c	;volatile
  1073                           
  1074                           ;TimerPWM.c: 27: TMR0ON=1;
  1075  0018B2  8ED5               	bsf	4053,7,c	;volatile
  1076  0018B4  0012               	return		;funcret
  1077  0018B6                     __end_of_TimerPWMInit:
  1078                           	opt stack 0
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           intcon	equ	0xFF2
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089 ;; *************** function _MotorInit *****************
  1090 ;; Defined at:
  1091 ;;		line 28 in file "motors.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1105 ;;      Params:         0       0       0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0
  1108 ;;      Totals:         0       0       0       0       0       0       0
  1109 ;;Total ram usage:        0 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    8
  1112 ;; This function calls:
  1113 ;;		_SetPWMMotorLeft
  1114 ;;		_SetPWMMotorRight
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text3
  1121  001826                     __ptext3:
  1122                           	opt stack 0
  1123  001826                     _MotorInit:
  1124                           	opt stack 22
  1125                           
  1126                           ;motors.c: 29: TRISC = 0b11000000;
  1127                           
  1128                           ;incstack = 0
  1129  001826  0EC0               	movlw	192
  1130  001828  6E94               	movwf	3988,c	;volatile
  1131                           
  1132                           ;motors.c: 30: RC0=1;
  1133  00182A  8082               	bsf	3970,0,c	;volatile
  1134                           
  1135                           ;motors.c: 31: RC1=0;
  1136  00182C  9282               	bcf	3970,1,c	;volatile
  1137                           
  1138                           ;motors.c: 32: RC2=1;
  1139  00182E  8482               	bsf	3970,2,c	;volatile
  1140                           
  1141                           ;motors.c: 33: RC3=0;
  1142  001830  9682               	bcf	3970,3,c	;volatile
  1143                           
  1144                           ;motors.c: 34: SetPWMMotorLeft(0);
  1145  001832  0E00               	movlw	0
  1146  001834  0100               	movlb	0	; () banked
  1147  001836  6FAE               	movwf	(SetPWMMotorLeft@percentage+1)& (0+255),b
  1148  001838  0E00               	movlw	0
  1149  00183A  6FAD               	movwf	SetPWMMotorLeft@percentage& (0+255),b
  1150  00183C  EC66  F00B         	call	_SetPWMMotorLeft	;wreg free
  1151                           
  1152                           ;motors.c: 35: SetPWMMotorRight(0);
  1153  001840  0E00               	movlw	0
  1154  001842  0100               	movlb	0	; () banked
  1155  001844  6FAE               	movwf	(SetPWMMotorRight@percentage+1)& (0+255),b
  1156  001846  0E00               	movlw	0
  1157  001848  6FAD               	movwf	SetPWMMotorRight@percentage& (0+255),b
  1158  00184A  EC49  F00B         	call	_SetPWMMotorRight	;wreg free
  1159  00184E  0012               	return		;funcret
  1160  001850                     __end_of_MotorInit:
  1161                           	opt stack 0
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           intcon	equ	0xFF2
  1167                           postinc0	equ	0xFEE
  1168                           wreg	equ	0xFE8
  1169                           postdec1	equ	0xFE5
  1170                           fsr1l	equ	0xFE1
  1171                           
  1172 ;; *************** function _LCDInit *****************
  1173 ;; Defined at:
  1174 ;;		line 196 in file "lcd_hd44780_pic16.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  style           1    wreg     unsigned char 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  style           1    9[BANK0 ] unsigned char 
  1179 ;;  __i             1   10[BANK0 ] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1189 ;;      Params:         0       0       0       0       0       0       0
  1190 ;;      Locals:         0       2       0       0       0       0       0
  1191 ;;      Temps:          0       1       0       0       0       0       0
  1192 ;;      Totals:         0       3       0       0       0       0       0
  1193 ;;Total ram usage:        3 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    8
  1196 ;; This function calls:
  1197 ;;		_LCDBusyLoop
  1198 ;;		_LCDByte
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text4
  1205  000EA6                     __ptext4:
  1206                           	opt stack 0
  1207  000EA6                     _LCDInit:
  1208                           	opt stack 22
  1209                           
  1210                           ;incstack = 0
  1211                           ;LCDInit@style stored from wreg
  1212  000EA6  0100               	movlb	0	; () banked
  1213  000EA8  6FAF               	movwf	LCDInit@style& (0+255),b
  1214                           
  1215                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((30)*(1000000/4000.0)));
  1216  000EAA  0E0A               	movlw	10
  1217  000EAC  0100               	movlb	0	; () banked
  1218  000EAE  6FAE               	movwf	??_LCDInit& (0+255),b
  1219  000EB0  0EBC               	movlw	188
  1220  000EB2                     u2297:
  1221  000EB2  2EE8               	decfsz	wreg,f,c
  1222  000EB4  D7FE               	goto	u2297
  1223  000EB6  2FAE               	decfsz	??_LCDInit& (0+255),f,b
  1224  000EB8  D7FC               	goto	u2297
  1225  000EBA  F000 F000          	nop2	
  1226                           
  1227                           ;lcd_hd44780_pic16.c: 215: TRISD&=(~(0x0F<<0));
  1228  000EBE  0EF0               	movlw	240
  1229  000EC0  1695               	andwf	3989,f,c	;volatile
  1230                           
  1231                           ;lcd_hd44780_pic16.c: 217: TRISDbits.TRISD6=0;
  1232  000EC2  9C95               	bcf	3989,6,c	;volatile
  1233                           
  1234                           ;lcd_hd44780_pic16.c: 218: TRISDbits.TRISD4=0;
  1235  000EC4  9895               	bcf	3989,4,c	;volatile
  1236                           
  1237                           ;lcd_hd44780_pic16.c: 219: TRISDbits.TRISD5=0;
  1238  000EC6  9A95               	bcf	3989,5,c	;volatile
  1239                           
  1240                           ;lcd_hd44780_pic16.c: 221: PORTD&=(~(0x0F<<0));
  1241  000EC8  0EF0               	movlw	240
  1242  000ECA  1683               	andwf	3971,f,c	;volatile
  1243                           
  1244                           ;lcd_hd44780_pic16.c: 223: (RD6=0);
  1245  000ECC  9C83               	bcf	3971,6,c	;volatile
  1246                           
  1247                           ;lcd_hd44780_pic16.c: 224: (RD5=0);
  1248  000ECE  9A83               	bcf	3971,5,c	;volatile
  1249                           
  1250                           ;lcd_hd44780_pic16.c: 225: (RD4=0);
  1251  000ED0  9883               	bcf	3971,4,c	;volatile
  1252                           
  1253                           ;lcd_hd44780_pic16.c: 230: (RD6=1);
  1254                           
  1255                           ;lcd_hd44780_pic16.c: 228: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1256  000ED2  8C83               	bsf	3971,6,c	;volatile
  1257                           
  1258                           ;lcd_hd44780_pic16.c: 231: PORTD|=((0b00000010)<<0);
  1259  000ED4  8283               	bsf	3971,1,c	;volatile
  1260                           
  1261                           ;lcd_hd44780_pic16.c: 233: (RD6=0);
  1262                           
  1263                           ;lcd_hd44780_pic16.c: 232: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1264  000ED6  9C83               	bcf	3971,6,c	;volatile
  1265                           
  1266                           ;lcd_hd44780_pic16.c: 237: LCDBusyLoop();
  1267                           
  1268                           ;lcd_hd44780_pic16.c: 234: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1269  000ED8  EC14  F00A         	call	_LCDBusyLoop	;wreg free
  1270                           
  1271                           ;lcd_hd44780_pic16.c: 242: (LCDByte(0b00101000,0));
  1272  000EDC  0E00               	movlw	0
  1273  000EDE  0100               	movlb	0	; () banked
  1274  000EE0  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1275  000EE2  0E28               	movlw	40
  1276  000EE4  ECE9  F009         	call	_LCDByte
  1277                           
  1278                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00001100|style,0));
  1279  000EE8  0E00               	movlw	0
  1280  000EEA  0100               	movlb	0	; () banked
  1281  000EEC  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1282  000EEE  0100               	movlb	0	; () banked
  1283  000EF0  51AF               	movf	LCDInit@style& (0+255),w,b
  1284  000EF2  090C               	iorlw	12
  1285  000EF4  ECE9  F009         	call	_LCDByte
  1286                           
  1287                           ;lcd_hd44780_pic16.c: 246: (LCDByte(0b01000000,0));
  1288  000EF8  0E00               	movlw	0
  1289  000EFA  0100               	movlb	0	; () banked
  1290  000EFC  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1291  000EFE  0E40               	movlw	64
  1292  000F00  ECE9  F009         	call	_LCDByte
  1293                           
  1294                           ;lcd_hd44780_pic16.c: 248: uint8_t __i;
  1295                           ;lcd_hd44780_pic16.c: 249: for(__i=0;__i<sizeof(__cgram);__i++)
  1296  000F04  0E00               	movlw	0
  1297  000F06  0100               	movlb	0	; () banked
  1298  000F08  6FB0               	movwf	LCDInit@__i& (0+255),b
  1299  000F0A                     l3243:
  1300                           
  1301                           ; BSR set to: 0
  1302  000F0A  0E3F               	movlw	63
  1303  000F0C  0100               	movlb	0	; () banked
  1304  000F0E  65B0               	cpfsgt	LCDInit@__i& (0+255),b
  1305  000F10  D001               	goto	l3247
  1306  000F12  0012               	return	
  1307  000F14                     l3247:
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;lcd_hd44780_pic16.c: 250: (LCDByte(__cgram[__i],1));
  1311  000F14  0E01               	movlw	1
  1312  000F16  0100               	movlb	0	; () banked
  1313  000F18  6FA9               	movwf	LCDByte@isdata& (0+255),b
  1314  000F1A  0100               	movlb	0	; () banked
  1315  000F1C  51B0               	movf	LCDInit@__i& (0+255),w,b
  1316  000F1E  0D01               	mullw	1
  1317  000F20  0E60               	movlw	low ___cgram
  1318  000F22  24F3               	addwf	prodl,w,c
  1319  000F24  6ED9               	movwf	fsr2l,c
  1320  000F26  0E00               	movlw	high ___cgram
  1321  000F28  20F4               	addwfc	prodh,w,c
  1322  000F2A  6EDA               	movwf	fsr2h,c
  1323  000F2C  50DF               	movf	indf2,w,c
  1324  000F2E  ECE9  F009         	call	_LCDByte
  1325  000F32  0100               	movlb	0	; () banked
  1326  000F34  2BB0               	incf	LCDInit@__i& (0+255),f,b
  1327  000F36  D7E9               	goto	l3243
  1328  000F38                     __end_of_LCDInit:
  1329                           	opt stack 0
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           prodh	equ	0xFF4
  1335                           prodl	equ	0xFF3
  1336                           intcon	equ	0xFF2
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           
  1345 ;; *************** function _LCDByte *****************
  1346 ;; Defined at:
  1347 ;;		line 83 in file "lcd_hd44780_pic16.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  c               1    wreg     unsigned char 
  1350 ;;  isdata          1    3[BANK0 ] unsigned char 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  c               1    6[BANK0 ] unsigned char 
  1353 ;;  temp            1    7[BANK0 ] unsigned char 
  1354 ;;  ln              1    5[BANK0 ] unsigned char 
  1355 ;;  hn              1    4[BANK0 ] unsigned char 
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1365 ;;      Params:         0       1       0       0       0       0       0
  1366 ;;      Locals:         0       4       0       0       0       0       0
  1367 ;;      Temps:          0       0       0       0       0       0       0
  1368 ;;      Totals:         0       5       0       0       0       0       0
  1369 ;;Total ram usage:        5 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    7
  1372 ;; This function calls:
  1373 ;;		_LCDBusyLoop
  1374 ;; This function is called by:
  1375 ;;		_LCDInit
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text5
  1380  0013D2                     __ptext5:
  1381                           	opt stack 0
  1382  0013D2                     _LCDByte:
  1383                           	opt stack 22
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;incstack = 0
  1387                           ;LCDByte@c stored from wreg
  1388  0013D2  0100               	movlb	0	; () banked
  1389  0013D4  6FAC               	movwf	LCDByte@c& (0+255),b
  1390                           
  1391                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  1392                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  1393                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  1394  0013D6  0100               	movlb	0	; () banked
  1395  0013D8  39AC               	swapf	LCDByte@c& (0+255),w,b
  1396  0013DA  0B0F               	andlw	15
  1397  0013DC  0100               	movlb	0	; () banked
  1398  0013DE  6FAA               	movwf	LCDByte@hn& (0+255),b
  1399                           
  1400                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  1401  0013E0  0100               	movlb	0	; () banked
  1402  0013E2  51AC               	movf	LCDByte@c& (0+255),w,b
  1403  0013E4  0B0F               	andlw	15
  1404  0013E6  0100               	movlb	0	; () banked
  1405  0013E8  6FAB               	movwf	LCDByte@ln& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  1409  0013EA  0100               	movlb	0	; () banked
  1410  0013EC  51A9               	movf	LCDByte@isdata& (0+255),w,b
  1411  0013EE  0100               	movlb	0	; () banked
  1412  0013F0  A4D8               	btfss	status,2,c
  1413  0013F2  D002               	goto	l283
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  1417  0013F4  9883               	bcf	3971,4,c	;volatile
  1418  0013F6  D001               	goto	l284
  1419  0013F8                     l283:
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;lcd_hd44780_pic16.c: 100: else
  1423                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  1424  0013F8  8883               	bsf	3971,4,c	;volatile
  1425  0013FA                     l284:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1429                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  1430  0013FA  8C83               	bsf	3971,6,c	;volatile
  1431                           
  1432                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  1433  0013FC  5083               	movf	3971,w,c	;volatile
  1434  0013FE  0BF0               	andlw	240
  1435  001400  0100               	movlb	0	; () banked
  1436  001402  11AA               	iorwf	LCDByte@hn& (0+255),w,b
  1437  001404  0100               	movlb	0	; () banked
  1438  001406  6FAD               	movwf	LCDByte@temp& (0+255),b
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  1442  001408  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  1443                           
  1444                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1448  00140C  9C83               	bcf	3971,6,c	;volatile
  1449                           
  1450                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  1451                           
  1452                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1453  00140E  8C83               	bsf	3971,6,c	;volatile
  1454                           
  1455                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  1456  001410  5083               	movf	3971,w,c	;volatile
  1457  001412  0BF0               	andlw	240
  1458  001414  0100               	movlb	0	; () banked
  1459  001416  11AB               	iorwf	LCDByte@ln& (0+255),w,b
  1460  001418  0100               	movlb	0	; () banked
  1461  00141A  6FAD               	movwf	LCDByte@temp& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  1465  00141C  C0AD  FF83         	movff	LCDByte@temp,3971	;volatile
  1466                           
  1467                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1471  001420  9C83               	bcf	3971,6,c	;volatile
  1472                           
  1473                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  1474                           
  1475                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1476  001422  EC14  F00A         	call	_LCDBusyLoop	;wreg free
  1477  001426  0012               	return		;funcret
  1478  001428                     __end_of_LCDByte:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           prodh	equ	0xFF4
  1485                           prodl	equ	0xFF3
  1486                           intcon	equ	0xFF2
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           indf2	equ	0xFDF
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8
  1495                           
  1496 ;; *************** function _LCDBusyLoop *****************
  1497 ;; Defined at:
  1498 ;;		line 138 in file "lcd_hd44780_pic16.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;  status          1    2[BANK0 ] unsigned char 
  1503 ;;  temp            1    1[BANK0 ] unsigned char 
  1504 ;;  busy            1    0[BANK0 ] unsigned char 
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, status,2, status,0
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1514 ;;      Params:         0       0       0       0       0       0       0
  1515 ;;      Locals:         0       3       0       0       0       0       0
  1516 ;;      Temps:          0       0       0       0       0       0       0
  1517 ;;      Totals:         0       3       0       0       0       0       0
  1518 ;;Total ram usage:        3 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:    6
  1521 ;; This function calls:
  1522 ;;		Nothing
  1523 ;; This function is called by:
  1524 ;;		_LCDByte
  1525 ;;		_LCDInit
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text6
  1530  001428                     __ptext6:
  1531                           	opt stack 0
  1532  001428                     _LCDBusyLoop:
  1533                           	opt stack 22
  1534                           
  1535                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  1536                           
  1537                           ;incstack = 0
  1538  001428  0E00               	movlw	0
  1539  00142A  0100               	movlb	0	; () banked
  1540  00142C  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  1544  00142E  0E0F               	movlw	15
  1545  001430  1295               	iorwf	3989,f,c	;volatile
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  1549  001432  8A83               	bsf	3971,5,c	;volatile
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  1553  001434  9883               	bcf	3971,4,c	;volatile
  1554  001436                     l2663:
  1555                           
  1556                           ;lcd_hd44780_pic16.c: 157: {
  1557                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  1558  001436  8C83               	bsf	3971,6,c	;volatile
  1559                           
  1560                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  1561                           
  1562                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1563  001438  CF83 F0A8          	movff	3971,LCDBusyLoop@status	;volatile
  1564                           
  1565                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  1566  00143C  0100               	movlb	0	; () banked
  1567  00143E  39A8               	swapf	LCDBusyLoop@status& (0+255),w,b
  1568  001440  0BF0               	andlw	240
  1569  001442  0100               	movlb	0	; () banked
  1570  001444  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1571                           
  1572                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1576  001446  9C83               	bcf	3971,6,c	;volatile
  1577                           
  1578                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  1579                           
  1580                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1581  001448  8C83               	bsf	3971,6,c	;volatile
  1582                           
  1583                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  1584                           
  1585                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1586  00144A  CF83 F0A7          	movff	3971,LCDBusyLoop@temp	;volatile
  1587                           
  1588                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  1589  00144E  0E0F               	movlw	15
  1590  001450  0100               	movlb	0	; () banked
  1591  001452  17A7               	andwf	LCDBusyLoop@temp& (0+255),f,b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  1595  001454  0100               	movlb	0	; () banked
  1596  001456  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  1597  001458  0100               	movlb	0	; () banked
  1598  00145A  11A7               	iorwf	LCDBusyLoop@temp& (0+255),w,b
  1599  00145C  0100               	movlb	0	; () banked
  1600  00145E  6FA8               	movwf	LCDBusyLoop@status& (0+255),b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  1604  001460  0100               	movlb	0	; () banked
  1605  001462  51A8               	movf	LCDBusyLoop@status& (0+255),w,b
  1606  001464  0B80               	andlw	128
  1607  001466  0100               	movlb	0	; () banked
  1608  001468  6FA6               	movwf	LCDBusyLoop@busy& (0+255),b
  1609                           
  1610                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  1614  00146A  9C83               	bcf	3971,6,c	;volatile
  1615                           
  1616                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  1617                           
  1618                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  1619  00146C  0100               	movlb	0	; () banked
  1620  00146E  51A6               	movf	LCDBusyLoop@busy& (0+255),w,b
  1621  001470  0100               	movlb	0	; () banked
  1622  001472  A4D8               	btfss	status,2,c
  1623  001474  D7E0               	goto	l2663
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  1627  001476  9A83               	bcf	3971,5,c	;volatile
  1628                           
  1629                           ; BSR set to: 0
  1630                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  1631  001478  0EF0               	movlw	240
  1632  00147A  1695               	andwf	3989,f,c	;volatile
  1633                           
  1634                           ; BSR set to: 0
  1635  00147C  0012               	return		;funcret
  1636  00147E                     __end_of_LCDBusyLoop:
  1637                           	opt stack 0
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           prodh	equ	0xFF4
  1643                           prodl	equ	0xFF3
  1644                           intcon	equ	0xFF2
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           fsr1l	equ	0xFE1
  1649                           indf2	equ	0xFDF
  1650                           fsr2h	equ	0xFDA
  1651                           fsr2l	equ	0xFD9
  1652                           status	equ	0xFD8
  1653                           
  1654 ;; *************** function _Go *****************
  1655 ;; Defined at:
  1656 ;;		line 20 in file "driver.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;  SpeedRight      2   16[BANK0 ] int 
  1661 ;;  SpeedLeft       2   14[BANK0 ] int 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1671 ;;      Params:         0       0       0       0       0       0       0
  1672 ;;      Locals:         0       4       0       0       0       0       0
  1673 ;;      Temps:          0       2       0       0       0       0       0
  1674 ;;      Totals:         0       6       0       0       0       0       0
  1675 ;;Total ram usage:        6 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:   10
  1678 ;; This function calls:
  1679 ;;		_ReadDistanceCentral
  1680 ;;		_ReadDistanceLeft
  1681 ;;		_ReadDistanceRight
  1682 ;;		_ReadMode
  1683 ;;		_ReadParallel
  1684 ;;		_ReadParallelSpeedLeft
  1685 ;;		_ReadParallelSpeedRight
  1686 ;;		_SetMotorLeft
  1687 ;;		_SetMotorRight
  1688 ;;		_TurnLeft135
  1689 ;;		_TurnLeft90
  1690 ;;		_TurnRight135
  1691 ;;		_TurnRight90
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text7
  1698  0007EA                     __ptext7:
  1699                           	opt stack 0
  1700  0007EA                     _Go:
  1701                           	opt stack 20
  1702                           
  1703                           ;driver.c: 21: ReadParallel();
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;incstack = 0
  1707  0007EA  ECBC  F009         	call	_ReadParallel	;wreg free
  1708                           
  1709                           ;driver.c: 23: if(ReadMode()==0){
  1710  0007EE  EC9C  F00C         	call	_ReadMode	;wreg free
  1711  0007F2  0100               	movlb	0	; () banked
  1712  0007F4  51A6               	movf	?_ReadMode& (0+255),w,b
  1713  0007F6  0100               	movlb	0	; () banked
  1714  0007F8  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1715  0007FA  A4D8               	btfss	status,2,c
  1716  0007FC  D067               	goto	l3279
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;driver.c: 24: signed int SpeedLeft, SpeedRight;
  1720                           ;driver.c: 25: SpeedLeft=ReadParallelSpeedLeft();
  1721  0007FE  EC97  F00C         	call	_ReadParallelSpeedLeft	;wreg free
  1722  000802  C0A6  F0B4         	movff	?_ReadParallelSpeedLeft,Go@SpeedLeft
  1723  000806  C0A7  F0B5         	movff	?_ReadParallelSpeedLeft+1,Go@SpeedLeft+1
  1724                           
  1725                           ;driver.c: 26: SpeedRight=ReadParallelSpeedRight();
  1726  00080A  EC92  F00C         	call	_ReadParallelSpeedRight	;wreg free
  1727  00080E  C0A6  F0B6         	movff	?_ReadParallelSpeedRight,Go@SpeedRight
  1728  000812  C0A7  F0B7         	movff	?_ReadParallelSpeedRight+1,Go@SpeedRight+1
  1729                           
  1730                           ;driver.c: 28: if(SpeedRight>0 && SpeedLeft>0){
  1731  000816  0100               	movlb	0	; () banked
  1732  000818  BFB7               	btfsc	(Go@SpeedRight+1)& (0+255),7,b
  1733  00081A  D04B               	goto	l3277
  1734  00081C  0100               	movlb	0	; () banked
  1735  00081E  51B7               	movf	(Go@SpeedRight+1)& (0+255),w,b
  1736  000820  E104               	bnz	u2030
  1737  000822  0100               	movlb	0	; () banked
  1738  000824  05B6               	decf	Go@SpeedRight& (0+255),w,b
  1739  000826  A0D8               	btfss	status,0,c
  1740  000828  D044               	goto	l3277
  1741  00082A                     u2030:
  1742                           
  1743                           ; BSR set to: 0
  1744  00082A  0100               	movlb	0	; () banked
  1745  00082C  BFB5               	btfsc	(Go@SpeedLeft+1)& (0+255),7,b
  1746  00082E  D041               	goto	l3277
  1747  000830  0100               	movlb	0	; () banked
  1748  000832  51B5               	movf	(Go@SpeedLeft+1)& (0+255),w,b
  1749  000834  E104               	bnz	u2040
  1750  000836  0100               	movlb	0	; () banked
  1751  000838  05B4               	decf	Go@SpeedLeft& (0+255),w,b
  1752  00083A  A0D8               	btfss	status,0,c
  1753  00083C  D03A               	goto	l3277
  1754  00083E                     u2040:
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;driver.c: 29: if ((ReadDistanceCentral()<37) || (ReadDistanceRight()<30) || (ReadDistan
      +                          ceLeft()<30)){
  1758  00083E  ECAB  F00C         	call	_ReadDistanceCentral	;wreg free
  1759  000842  0100               	movlb	0	; () banked
  1760  000844  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1761  000846  E105               	bnz	u2050
  1762  000848  0E25               	movlw	37
  1763  00084A  0100               	movlb	0	; () banked
  1764  00084C  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1765  00084E  A0D8               	btfss	status,0,c
  1766  000850  D014               	goto	l3273
  1767  000852                     u2050:
  1768                           
  1769                           ; BSR set to: 0
  1770  000852  ECA1  F00C         	call	_ReadDistanceRight	;wreg free
  1771  000856  0100               	movlb	0	; () banked
  1772  000858  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1773  00085A  E105               	bnz	u2060
  1774  00085C  0E1E               	movlw	30
  1775  00085E  0100               	movlb	0	; () banked
  1776  000860  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1777  000862  A0D8               	btfss	status,0,c
  1778  000864  D00A               	goto	l3273
  1779  000866                     u2060:
  1780                           
  1781                           ; BSR set to: 0
  1782  000866  ECA6  F00C         	call	_ReadDistanceLeft	;wreg free
  1783  00086A  0100               	movlb	0	; () banked
  1784  00086C  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1785  00086E  E114               	bnz	l3275
  1786  000870  0E1E               	movlw	30
  1787  000872  0100               	movlb	0	; () banked
  1788  000874  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1789  000876  B0D8               	btfsc	status,0,c
  1790  000878  D00F               	goto	l3275
  1791  00087A                     l3273:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;driver.c: 30: SetMotorLeft(0);
  1795  00087A  0E00               	movlw	0
  1796  00087C  0100               	movlb	0	; () banked
  1797  00087E  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1798  000880  0E00               	movlw	0
  1799  000882  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1800  000884  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  1801                           
  1802                           ;driver.c: 31: SetMotorRight(0);
  1803  000888  0E00               	movlw	0
  1804  00088A  0100               	movlb	0	; () banked
  1805  00088C  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1806  00088E  0E00               	movlw	0
  1807  000890  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1808  000892  EC85  F00A         	call	_SetMotorRight	;wreg free
  1809                           
  1810                           ;driver.c: 32: }else{
  1811  000896  0012               	return	
  1812  000898                     l3275:
  1813                           
  1814                           ;driver.c: 33: SetMotorLeft (SpeedLeft);
  1815  000898  C0B4  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1816  00089C  C0B5  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1817  0008A0  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  1818                           
  1819                           ;driver.c: 34: SetMotorRight(SpeedRight);
  1820  0008A4  C0B6  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1821  0008A8  C0B7  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1822  0008AC  EC85  F00A         	call	_SetMotorRight	;wreg free
  1823                           
  1824                           ;driver.c: 35: }
  1825                           ;driver.c: 36: }else{
  1826  0008B0  0012               	return	
  1827  0008B2                     l3277:
  1828                           
  1829                           ;driver.c: 38: SetMotorLeft (SpeedLeft);
  1830  0008B2  C0B4  F0AF         	movff	Go@SpeedLeft,SetMotorLeft@speed
  1831  0008B6  C0B5  F0B0         	movff	Go@SpeedLeft+1,SetMotorLeft@speed+1
  1832  0008BA  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  1833                           
  1834                           ;driver.c: 39: SetMotorRight(SpeedRight);
  1835  0008BE  C0B6  F0AF         	movff	Go@SpeedRight,SetMotorRight@speed
  1836  0008C2  C0B7  F0B0         	movff	Go@SpeedRight+1,SetMotorRight@speed+1
  1837  0008C6  EC85  F00A         	call	_SetMotorRight	;wreg free
  1838                           
  1839                           ;driver.c: 40: }
  1840                           ;driver.c: 43: }else if (ReadMode()==1){
  1841  0008CA  0012               	return	
  1842  0008CC                     l3279:
  1843  0008CC  EC9C  F00C         	call	_ReadMode	;wreg free
  1844  0008D0  0100               	movlb	0	; () banked
  1845  0008D2  05A6               	decf	?_ReadMode& (0+255),w,b
  1846  0008D4  0100               	movlb	0	; () banked
  1847  0008D6  11A7               	iorwf	(?_ReadMode+1)& (0+255),w,b
  1848  0008D8  A4D8               	btfss	status,2,c
  1849  0008DA  0012               	return	
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;driver.c: 44: if (ReadDistanceCentral()<37){
  1853  0008DC  ECAB  F00C         	call	_ReadDistanceCentral	;wreg free
  1854  0008E0  0100               	movlb	0	; () banked
  1855  0008E2  51A7               	movf	(?_ReadDistanceCentral+1)& (0+255),w,b
  1856  0008E4  E11D               	bnz	l3289
  1857  0008E6  0E25               	movlw	37
  1858  0008E8  0100               	movlb	0	; () banked
  1859  0008EA  5DA6               	subwf	?_ReadDistanceCentral& (0+255),w,b
  1860  0008EC  B0D8               	btfsc	status,0,c
  1861  0008EE  D018               	goto	l3289
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;driver.c: 45: if(ReadDistanceRight()>ReadDistanceLeft()){
  1865  0008F0  ECA6  F00C         	call	_ReadDistanceLeft	;wreg free
  1866  0008F4  C0A6  F0B2         	movff	?_ReadDistanceLeft,??_Go
  1867  0008F8  C0A7  F0B3         	movff	?_ReadDistanceLeft+1,??_Go+1
  1868  0008FC  ECA1  F00C         	call	_ReadDistanceRight	;wreg free
  1869  000900  0100               	movlb	0	; () banked
  1870  000902  51A6               	movf	?_ReadDistanceRight& (0+255),w,b
  1871  000904  0100               	movlb	0	; () banked
  1872  000906  5DB2               	subwf	??_Go& (0+255),w,b
  1873  000908  0100               	movlb	0	; () banked
  1874  00090A  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1875  00090C  0100               	movlb	0	; () banked
  1876  00090E  59B3               	subwfb	(??_Go+1)& (0+255),w,b
  1877  000910  B0D8               	btfsc	status,0,c
  1878  000912  D003               	goto	l3287
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;driver.c: 46: TurnRight135();
  1882  000914  EC9C  F00B         	call	_TurnRight135	;wreg free
  1883                           
  1884                           ;driver.c: 47: }else{
  1885  000918  0012               	return	
  1886  00091A                     l3287:
  1887                           
  1888                           ;driver.c: 48: TurnLeft135();
  1889  00091A  ECCE  F00B         	call	_TurnLeft135	;wreg free
  1890                           
  1891                           ;driver.c: 49: }
  1892                           ;driver.c: 50: }else if (ReadDistanceRight()<30){
  1893  00091E  0012               	return	
  1894  000920                     l3289:
  1895  000920  ECA1  F00C         	call	_ReadDistanceRight	;wreg free
  1896  000924  0100               	movlb	0	; () banked
  1897  000926  51A7               	movf	(?_ReadDistanceRight+1)& (0+255),w,b
  1898  000928  E108               	bnz	l3293
  1899  00092A  0E1E               	movlw	30
  1900  00092C  0100               	movlb	0	; () banked
  1901  00092E  5DA6               	subwf	?_ReadDistanceRight& (0+255),w,b
  1902  000930  B0D8               	btfsc	status,0,c
  1903  000932  D003               	goto	l3293
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;driver.c: 51: TurnLeft90();
  1907  000934  ECB5  F00B         	call	_TurnLeft90	;wreg free
  1908                           
  1909                           ;driver.c: 52: }else if (ReadDistanceLeft()<30){
  1910  000938  0012               	return	
  1911  00093A                     l3293:
  1912  00093A  ECA6  F00C         	call	_ReadDistanceLeft	;wreg free
  1913  00093E  0100               	movlb	0	; () banked
  1914  000940  51A7               	movf	(?_ReadDistanceLeft+1)& (0+255),w,b
  1915  000942  E108               	bnz	l3297
  1916  000944  0E1E               	movlw	30
  1917  000946  0100               	movlb	0	; () banked
  1918  000948  5DA6               	subwf	?_ReadDistanceLeft& (0+255),w,b
  1919  00094A  B0D8               	btfsc	status,0,c
  1920  00094C  D003               	goto	l3297
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;driver.c: 53: TurnRight90();
  1924  00094E  EC83  F00B         	call	_TurnRight90	;wreg free
  1925                           
  1926                           ;driver.c: 54: }else{
  1927  000952  0012               	return	
  1928  000954                     l3297:
  1929                           
  1930                           ;driver.c: 55: SetMotorRight(40);
  1931  000954  0E00               	movlw	0
  1932  000956  0100               	movlb	0	; () banked
  1933  000958  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  1934  00095A  0E28               	movlw	40
  1935  00095C  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  1936  00095E  EC85  F00A         	call	_SetMotorRight	;wreg free
  1937                           
  1938                           ;driver.c: 56: SetMotorLeft(40);
  1939  000962  0E00               	movlw	0
  1940  000964  0100               	movlb	0	; () banked
  1941  000966  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  1942  000968  0E28               	movlw	40
  1943  00096A  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  1944  00096C  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  1945  000970  0012               	return	
  1946  000972                     __end_of_Go:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1l	equ	0xFE1
  1959                           indf2	equ	0xFDF
  1960                           fsr2h	equ	0xFDA
  1961                           fsr2l	equ	0xFD9
  1962                           status	equ	0xFD8
  1963                           
  1964 ;; *************** function _TurnRight90 *****************
  1965 ;; Defined at:
  1966 ;;		line 60 in file "driver.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1980 ;;      Params:         0       0       0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0
  1982 ;;      Temps:          0       1       0       0       0       0       0
  1983 ;;      Totals:         0       1       0       0       0       0       0
  1984 ;;Total ram usage:        1 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    9
  1987 ;; This function calls:
  1988 ;;		_SetMotorLeft
  1989 ;;		_SetMotorRight
  1990 ;; This function is called by:
  1991 ;;		_Go
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text8
  1996  001706                     __ptext8:
  1997                           	opt stack 0
  1998  001706                     _TurnRight90:
  1999                           	opt stack 20
  2000                           
  2001                           ;driver.c: 61: SetMotorRight(-100);
  2002                           
  2003                           ;incstack = 0
  2004  001706  0EFF               	movlw	255
  2005  001708  0100               	movlb	0	; () banked
  2006  00170A  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2007  00170C  0E9C               	movlw	156
  2008  00170E  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2009  001710  EC85  F00A         	call	_SetMotorRight	;wreg free
  2010                           
  2011                           ;driver.c: 62: SetMotorLeft(100);
  2012  001714  0E00               	movlw	0
  2013  001716  0100               	movlb	0	; () banked
  2014  001718  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2015  00171A  0E64               	movlw	100
  2016  00171C  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2017  00171E  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  2018                           
  2019                           ;driver.c: 63: _delay((unsigned long)((100)*(1000000/4000.0)));
  2020  001722  0E21               	movlw	33
  2021  001724  0100               	movlb	0	; () banked
  2022  001726  6FB1               	movwf	??_TurnRight90& (0+255),b
  2023  001728  0E76               	movlw	118
  2024  00172A                     u2307:
  2025  00172A  2EE8               	decfsz	wreg,f,c
  2026  00172C  D7FE               	goto	u2307
  2027  00172E  2FB1               	decfsz	??_TurnRight90& (0+255),f,b
  2028  001730  D7FC               	goto	u2307
  2029  001732  F000 F000          	nop2	
  2030  001736  0012               	return		;funcret
  2031  001738                     __end_of_TurnRight90:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           prodh	equ	0xFF4
  2038                           prodl	equ	0xFF3
  2039                           intcon	equ	0xFF2
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _TurnRight135 *****************
  2050 ;; Defined at:
  2051 ;;		line 72 in file "driver.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;		None
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, status,2, status,0, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2065 ;;      Params:         0       0       0       0       0       0       0
  2066 ;;      Locals:         0       0       0       0       0       0       0
  2067 ;;      Temps:          0       1       0       0       0       0       0
  2068 ;;      Totals:         0       1       0       0       0       0       0
  2069 ;;Total ram usage:        1 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    9
  2072 ;; This function calls:
  2073 ;;		_SetMotorLeft
  2074 ;;		_SetMotorRight
  2075 ;; This function is called by:
  2076 ;;		_Go
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           
  2080                           	psect	text9
  2081  001738                     __ptext9:
  2082                           	opt stack 0
  2083  001738                     _TurnRight135:
  2084                           	opt stack 20
  2085                           
  2086                           ;driver.c: 73: SetMotorRight(-100);
  2087                           
  2088                           ;incstack = 0
  2089  001738  0EFF               	movlw	255
  2090  00173A  0100               	movlb	0	; () banked
  2091  00173C  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2092  00173E  0E9C               	movlw	156
  2093  001740  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2094  001742  EC85  F00A         	call	_SetMotorRight	;wreg free
  2095                           
  2096                           ;driver.c: 74: SetMotorLeft(100);
  2097  001746  0E00               	movlw	0
  2098  001748  0100               	movlb	0	; () banked
  2099  00174A  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2100  00174C  0E64               	movlw	100
  2101  00174E  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2102  001750  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  2103                           
  2104                           ;driver.c: 75: _delay((unsigned long)((150)*(1000000/4000.0)));
  2105  001754  0E31               	movlw	49
  2106  001756  0100               	movlb	0	; () banked
  2107  001758  6FB1               	movwf	??_TurnRight135& (0+255),b
  2108  00175A  0EB2               	movlw	178
  2109  00175C                     u2317:
  2110  00175C  2EE8               	decfsz	wreg,f,c
  2111  00175E  D7FE               	goto	u2317
  2112  001760  2FB1               	decfsz	??_TurnRight135& (0+255),f,b
  2113  001762  D7FC               	goto	u2317
  2114  001764  F000 F000          	nop2	
  2115  001768  0012               	return		;funcret
  2116  00176A                     __end_of_TurnRight135:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           intcon	equ	0xFF2
  2125                           postinc0	equ	0xFEE
  2126                           wreg	equ	0xFE8
  2127                           postdec1	equ	0xFE5
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _TurnLeft90 *****************
  2135 ;; Defined at:
  2136 ;;		line 66 in file "driver.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;		None
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;		None
  2141 ;; Return value:  Size  Location     Type
  2142 ;;                  1    wreg      void 
  2143 ;; Registers used:
  2144 ;;		wreg, status,2, status,0, cstack
  2145 ;; Tracked objects:
  2146 ;;		On entry : 0/0
  2147 ;;		On exit  : 0/0
  2148 ;;		Unchanged: 0/0
  2149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2150 ;;      Params:         0       0       0       0       0       0       0
  2151 ;;      Locals:         0       0       0       0       0       0       0
  2152 ;;      Temps:          0       1       0       0       0       0       0
  2153 ;;      Totals:         0       1       0       0       0       0       0
  2154 ;;Total ram usage:        1 bytes
  2155 ;; Hardware stack levels used:    1
  2156 ;; Hardware stack levels required when called:    9
  2157 ;; This function calls:
  2158 ;;		_SetMotorLeft
  2159 ;;		_SetMotorRight
  2160 ;; This function is called by:
  2161 ;;		_Go
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text10
  2166  00176A                     __ptext10:
  2167                           	opt stack 0
  2168  00176A                     _TurnLeft90:
  2169                           	opt stack 20
  2170                           
  2171                           ;driver.c: 67: SetMotorRight(100);
  2172                           
  2173                           ;incstack = 0
  2174  00176A  0E00               	movlw	0
  2175  00176C  0100               	movlb	0	; () banked
  2176  00176E  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2177  001770  0E64               	movlw	100
  2178  001772  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2179  001774  EC85  F00A         	call	_SetMotorRight	;wreg free
  2180                           
  2181                           ;driver.c: 68: SetMotorLeft(-100);
  2182  001778  0EFF               	movlw	255
  2183  00177A  0100               	movlb	0	; () banked
  2184  00177C  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2185  00177E  0E9C               	movlw	156
  2186  001780  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2187  001782  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  2188                           
  2189                           ;driver.c: 69: _delay((unsigned long)((100)*(1000000/4000.0)));
  2190  001786  0E21               	movlw	33
  2191  001788  0100               	movlb	0	; () banked
  2192  00178A  6FB1               	movwf	??_TurnLeft90& (0+255),b
  2193  00178C  0E76               	movlw	118
  2194  00178E                     u2327:
  2195  00178E  2EE8               	decfsz	wreg,f,c
  2196  001790  D7FE               	goto	u2327
  2197  001792  2FB1               	decfsz	??_TurnLeft90& (0+255),f,b
  2198  001794  D7FC               	goto	u2327
  2199  001796  F000 F000          	nop2	
  2200  00179A  0012               	return		;funcret
  2201  00179C                     __end_of_TurnLeft90:
  2202                           	opt stack 0
  2203                           tblptru	equ	0xFF8
  2204                           tblptrh	equ	0xFF7
  2205                           tblptrl	equ	0xFF6
  2206                           tablat	equ	0xFF5
  2207                           prodh	equ	0xFF4
  2208                           prodl	equ	0xFF3
  2209                           intcon	equ	0xFF2
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           postdec1	equ	0xFE5
  2213                           fsr1l	equ	0xFE1
  2214                           indf2	equ	0xFDF
  2215                           fsr2h	equ	0xFDA
  2216                           fsr2l	equ	0xFD9
  2217                           status	equ	0xFD8
  2218                           
  2219 ;; *************** function _TurnLeft135 *****************
  2220 ;; Defined at:
  2221 ;;		line 78 in file "driver.c"
  2222 ;; Parameters:    Size  Location     Type
  2223 ;;		None
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;		None
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, status,2, status,0, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2235 ;;      Params:         0       0       0       0       0       0       0
  2236 ;;      Locals:         0       0       0       0       0       0       0
  2237 ;;      Temps:          0       1       0       0       0       0       0
  2238 ;;      Totals:         0       1       0       0       0       0       0
  2239 ;;Total ram usage:        1 bytes
  2240 ;; Hardware stack levels used:    1
  2241 ;; Hardware stack levels required when called:    9
  2242 ;; This function calls:
  2243 ;;		_SetMotorLeft
  2244 ;;		_SetMotorRight
  2245 ;; This function is called by:
  2246 ;;		_Go
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text11
  2251  00179C                     __ptext11:
  2252                           	opt stack 0
  2253  00179C                     _TurnLeft135:
  2254                           	opt stack 20
  2255                           
  2256                           ;driver.c: 79: SetMotorRight(100);
  2257                           
  2258                           ;incstack = 0
  2259  00179C  0E00               	movlw	0
  2260  00179E  0100               	movlb	0	; () banked
  2261  0017A0  6FB0               	movwf	(SetMotorRight@speed+1)& (0+255),b
  2262  0017A2  0E64               	movlw	100
  2263  0017A4  6FAF               	movwf	SetMotorRight@speed& (0+255),b
  2264  0017A6  EC85  F00A         	call	_SetMotorRight	;wreg free
  2265                           
  2266                           ;driver.c: 80: SetMotorLeft(-100);
  2267  0017AA  0EFF               	movlw	255
  2268  0017AC  0100               	movlb	0	; () banked
  2269  0017AE  6FB0               	movwf	(SetMotorLeft@speed+1)& (0+255),b
  2270  0017B0  0E9C               	movlw	156
  2271  0017B2  6FAF               	movwf	SetMotorLeft@speed& (0+255),b
  2272  0017B4  ECA8  F00A         	call	_SetMotorLeft	;wreg free
  2273                           
  2274                           ;driver.c: 81: _delay((unsigned long)((150)*(1000000/4000.0)));
  2275  0017B8  0E31               	movlw	49
  2276  0017BA  0100               	movlb	0	; () banked
  2277  0017BC  6FB1               	movwf	??_TurnLeft135& (0+255),b
  2278  0017BE  0EB2               	movlw	178
  2279  0017C0                     u2337:
  2280  0017C0  2EE8               	decfsz	wreg,f,c
  2281  0017C2  D7FE               	goto	u2337
  2282  0017C4  2FB1               	decfsz	??_TurnLeft135& (0+255),f,b
  2283  0017C6  D7FC               	goto	u2337
  2284  0017C8  F000 F000          	nop2	
  2285  0017CC  0012               	return		;funcret
  2286  0017CE                     __end_of_TurnLeft135:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           postdec1	equ	0xFE5
  2298                           fsr1l	equ	0xFE1
  2299                           indf2	equ	0xFDF
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _SetMotorRight *****************
  2305 ;; Defined at:
  2306 ;;		line 57 in file "motors.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  speed           2    9[BANK0 ] int 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2320 ;;      Params:         0       2       0       0       0       0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0
  2323 ;;      Totals:         0       2       0       0       0       0       0
  2324 ;;Total ram usage:        2 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    8
  2327 ;; This function calls:
  2328 ;;		_SetPWMMotorRight
  2329 ;;		_abs
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;;		_Go
  2333 ;;		_TurnRight90
  2334 ;;		_TurnLeft90
  2335 ;;		_TurnRight135
  2336 ;;		_TurnLeft135
  2337 ;;		_Turn180
  2338 ;;		_GoBack
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text12
  2343  00150A                     __ptext12:
  2344                           	opt stack 0
  2345  00150A                     _SetMotorRight:
  2346                           	opt stack 22
  2347                           
  2348                           ;motors.c: 59: MotorRightSpeed=speed;
  2349                           
  2350                           ;incstack = 0
  2351  00150A  C0AF  F0C1         	movff	SetMotorRight@speed,_MotorRightSpeed
  2352  00150E  C0B0  F0C2         	movff	SetMotorRight@speed+1,_MotorRightSpeed+1
  2353                           
  2354                           ;motors.c: 63: if(speed>0){
  2355  001512  0100               	movlb	0	; () banked
  2356  001514  BFB0               	btfsc	(SetMotorRight@speed+1)& (0+255),7,b
  2357  001516  D00A               	goto	l2565
  2358  001518  0100               	movlb	0	; () banked
  2359  00151A  51B0               	movf	(SetMotorRight@speed+1)& (0+255),w,b
  2360  00151C  E104               	bnz	u1380
  2361  00151E  0100               	movlb	0	; () banked
  2362  001520  05AF               	decf	SetMotorRight@speed& (0+255),w,b
  2363  001522  A0D8               	btfss	status,0,c
  2364  001524  D003               	goto	l2565
  2365  001526                     u1380:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;motors.c: 65: RC2=1;
  2369  001526  8482               	bsf	3970,2,c	;volatile
  2370                           
  2371                           ;motors.c: 66: RC3=0;
  2372  001528  9682               	bcf	3970,3,c	;volatile
  2373                           
  2374                           ;motors.c: 67: }else if (speed<0){
  2375  00152A  D005               	goto	l2569
  2376  00152C                     l2565:
  2377                           
  2378                           ; BSR set to: 0
  2379  00152C  0100               	movlb	0	; () banked
  2380  00152E  AFB0               	btfss	(SetMotorRight@speed+1)& (0+255),7,b
  2381  001530  D002               	goto	l2569
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;motors.c: 69: RC2=0;
  2385  001532  9482               	bcf	3970,2,c	;volatile
  2386                           
  2387                           ;motors.c: 70: RC3=1;
  2388  001534  8682               	bsf	3970,3,c	;volatile
  2389  001536                     l2569:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;motors.c: 71: }
  2393                           ;motors.c: 74: SetPWMMotorRight(abs(speed));
  2394  001536  C0AF  F0A6         	movff	SetMotorRight@speed,abs@a
  2395  00153A  C0B0  F0A7         	movff	SetMotorRight@speed+1,abs@a+1
  2396  00153E  ECE7  F00B         	call	_abs	;wreg free
  2397  001542  C0A6  F0AD         	movff	?_abs,SetPWMMotorRight@percentage
  2398  001546  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorRight@percentage+1
  2399  00154A  EC49  F00B         	call	_SetPWMMotorRight	;wreg free
  2400  00154E  0012               	return		;funcret
  2401  001550                     __end_of_SetMotorRight:
  2402                           	opt stack 0
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           intcon	equ	0xFF2
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           postdec1	equ	0xFE5
  2413                           fsr1l	equ	0xFE1
  2414                           indf2	equ	0xFDF
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function _SetPWMMotorRight *****************
  2420 ;; Defined at:
  2421 ;;		line 34 in file "TimerPWM.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  percentage      2    7[BANK0 ] unsigned int 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      void 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2435 ;;      Params:         0       2       0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0
  2438 ;;      Totals:         0       2       0       0       0       0       0
  2439 ;;Total ram usage:        2 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    7
  2442 ;; This function calls:
  2443 ;;		___lwdiv
  2444 ;; This function is called by:
  2445 ;;		_MotorInit
  2446 ;;		_SetMotorRight
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text13
  2451  001692                     __ptext13:
  2452                           	opt stack 0
  2453  001692                     _SetPWMMotorRight:
  2454                           	opt stack 22
  2455                           
  2456                           ;TimerPWM.c: 35: PWMRight=20-percentage/5;
  2457                           
  2458                           ;incstack = 0
  2459  001692  C0AD  F0A6         	movff	SetPWMMotorRight@percentage,___lwdiv@dividend
  2460  001696  C0AE  F0A7         	movff	SetPWMMotorRight@percentage+1,___lwdiv@dividend+1
  2461  00169A  0E00               	movlw	0
  2462  00169C  0100               	movlb	0	; () banked
  2463  00169E  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2464  0016A0  0E05               	movlw	5
  2465  0016A2  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2466  0016A4  EC68  F008         	call	___lwdiv	;wreg free
  2467  0016A8  0100               	movlb	0	; () banked
  2468  0016AA  1FA6               	comf	?___lwdiv& (0+255),f,b
  2469  0016AC  0100               	movlb	0	; () banked
  2470  0016AE  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2471  0016B0  0100               	movlb	0	; () banked
  2472  0016B2  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2473  0016B4  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2474  0016B6  0E14               	movlw	20
  2475  0016B8  0100               	movlb	0	; () banked
  2476  0016BA  25A6               	addwf	?___lwdiv& (0+255),w,b
  2477  0016BC  0100               	movlb	0	; () banked
  2478  0016BE  6FC9               	movwf	_PWMRight& (0+255),b
  2479  0016C0  0E00               	movlw	0
  2480  0016C2  0100               	movlb	0	; () banked
  2481  0016C4  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2482  0016C6  0100               	movlb	0	; () banked
  2483  0016C8  6FCA               	movwf	(_PWMRight+1)& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486  0016CA  0012               	return		;funcret
  2487  0016CC                     __end_of_SetPWMMotorRight:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon	equ	0xFF2
  2496                           postinc0	equ	0xFEE
  2497                           wreg	equ	0xFE8
  2498                           postdec1	equ	0xFE5
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _SetMotorLeft *****************
  2506 ;; Defined at:
  2507 ;;		line 38 in file "motors.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  speed           2    9[BANK0 ] int 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;		None
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2521 ;;      Params:         0       2       0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0
  2524 ;;      Totals:         0       2       0       0       0       0       0
  2525 ;;Total ram usage:        2 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    8
  2528 ;; This function calls:
  2529 ;;		_SetPWMMotorLeft
  2530 ;;		_abs
  2531 ;; This function is called by:
  2532 ;;		_main
  2533 ;;		_Go
  2534 ;;		_TurnRight90
  2535 ;;		_TurnLeft90
  2536 ;;		_TurnRight135
  2537 ;;		_TurnLeft135
  2538 ;;		_Turn180
  2539 ;;		_GoBack
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text14
  2544  001550                     __ptext14:
  2545                           	opt stack 0
  2546  001550                     _SetMotorLeft:
  2547                           	opt stack 22
  2548                           
  2549                           ;motors.c: 40: MotorLeftSpeed=speed;
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;incstack = 0
  2553  001550  C0AF  F0BF         	movff	SetMotorLeft@speed,_MotorLeftSpeed
  2554  001554  C0B0  F0C0         	movff	SetMotorLeft@speed+1,_MotorLeftSpeed+1
  2555                           
  2556                           ;motors.c: 44: if(speed>0){
  2557  001558  0100               	movlb	0	; () banked
  2558  00155A  BFB0               	btfsc	(SetMotorLeft@speed+1)& (0+255),7,b
  2559  00155C  D00A               	goto	l2553
  2560  00155E  0100               	movlb	0	; () banked
  2561  001560  51B0               	movf	(SetMotorLeft@speed+1)& (0+255),w,b
  2562  001562  E104               	bnz	u1360
  2563  001564  0100               	movlb	0	; () banked
  2564  001566  05AF               	decf	SetMotorLeft@speed& (0+255),w,b
  2565  001568  A0D8               	btfss	status,0,c
  2566  00156A  D003               	goto	l2553
  2567  00156C                     u1360:
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;motors.c: 46: RC0=1;
  2571  00156C  8082               	bsf	3970,0,c	;volatile
  2572                           
  2573                           ;motors.c: 47: RC1=0;
  2574  00156E  9282               	bcf	3970,1,c	;volatile
  2575                           
  2576                           ;motors.c: 48: }else if (speed<0){
  2577  001570  D005               	goto	l2557
  2578  001572                     l2553:
  2579                           
  2580                           ; BSR set to: 0
  2581  001572  0100               	movlb	0	; () banked
  2582  001574  AFB0               	btfss	(SetMotorLeft@speed+1)& (0+255),7,b
  2583  001576  D002               	goto	l2557
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;motors.c: 50: RC0=0;
  2587  001578  9082               	bcf	3970,0,c	;volatile
  2588                           
  2589                           ;motors.c: 51: RC1=1;
  2590  00157A  8282               	bsf	3970,1,c	;volatile
  2591  00157C                     l2557:
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;motors.c: 52: }
  2595                           ;motors.c: 55: SetPWMMotorLeft(abs(speed));
  2596  00157C  C0AF  F0A6         	movff	SetMotorLeft@speed,abs@a
  2597  001580  C0B0  F0A7         	movff	SetMotorLeft@speed+1,abs@a+1
  2598  001584  ECE7  F00B         	call	_abs	;wreg free
  2599  001588  C0A6  F0AD         	movff	?_abs,SetPWMMotorLeft@percentage
  2600  00158C  C0A7  F0AE         	movff	?_abs+1,SetPWMMotorLeft@percentage+1
  2601  001590  EC66  F00B         	call	_SetPWMMotorLeft	;wreg free
  2602  001594  0012               	return		;funcret
  2603  001596                     __end_of_SetMotorLeft:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           prodh	equ	0xFF4
  2610                           prodl	equ	0xFF3
  2611                           intcon	equ	0xFF2
  2612                           postinc0	equ	0xFEE
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1l	equ	0xFE1
  2616                           indf2	equ	0xFDF
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _abs *****************
  2622 ;; Defined at:
  2623 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\abs.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  a               2    0[BANK0 ] int 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  2    0[BANK0 ] int 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2637 ;;      Params:         0       2       0       0       0       0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0
  2639 ;;      Temps:          0       2       0       0       0       0       0
  2640 ;;      Totals:         0       4       0       0       0       0       0
  2641 ;;Total ram usage:        4 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    6
  2644 ;; This function calls:
  2645 ;;		Nothing
  2646 ;; This function is called by:
  2647 ;;		_SetMotorLeft
  2648 ;;		_SetMotorRight
  2649 ;;		_WriteSpeedInLCD
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652                           
  2653                           	psect	text15
  2654  0017CE                     __ptext15:
  2655                           	opt stack 0
  2656  0017CE                     _abs:
  2657                           	opt stack 23
  2658                           
  2659                           ;incstack = 0
  2660  0017CE  0100               	movlb	0	; () banked
  2661  0017D0  AFA7               	btfss	(abs@a+1)& (0+255),7,b
  2662  0017D2  D00E               	goto	l647
  2663                           
  2664                           ; BSR set to: 0
  2665  0017D4  C0A6  F0A8         	movff	abs@a,??_abs
  2666  0017D8  C0A7  F0A9         	movff	abs@a+1,??_abs+1
  2667  0017DC  0100               	movlb	0	; () banked
  2668  0017DE  1FA8               	comf	??_abs& (0+255),f,b
  2669  0017E0  1FA9               	comf	(??_abs+1)& (0+255),f,b
  2670  0017E2  4BA8               	infsnz	??_abs& (0+255),f,b
  2671  0017E4  2BA9               	incf	(??_abs+1)& (0+255),f,b
  2672  0017E6  C0A8  F0A6         	movff	??_abs,?_abs
  2673  0017EA  C0A9  F0A7         	movff	??_abs+1,?_abs+1
  2674  0017EE  0012               	return	
  2675  0017F0                     l647:
  2676                           
  2677                           ; BSR set to: 0
  2678  0017F0  C0A6  F0A6         	movff	abs@a,?_abs
  2679  0017F4  C0A7  F0A7         	movff	abs@a+1,?_abs+1
  2680                           
  2681                           ; BSR set to: 0
  2682  0017F8  0012               	return		;funcret
  2683  0017FA                     __end_of_abs:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           postdec1	equ	0xFE5
  2695                           fsr1l	equ	0xFE1
  2696                           indf2	equ	0xFDF
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _SetPWMMotorLeft *****************
  2702 ;; Defined at:
  2703 ;;		line 30 in file "TimerPWM.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  percentage      2    7[BANK0 ] unsigned int 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2717 ;;      Params:         0       2       0       0       0       0       0
  2718 ;;      Locals:         0       0       0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0
  2720 ;;      Totals:         0       2       0       0       0       0       0
  2721 ;;Total ram usage:        2 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    7
  2724 ;; This function calls:
  2725 ;;		___lwdiv
  2726 ;; This function is called by:
  2727 ;;		_MotorInit
  2728 ;;		_SetMotorLeft
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text16
  2733  0016CC                     __ptext16:
  2734                           	opt stack 0
  2735  0016CC                     _SetPWMMotorLeft:
  2736                           	opt stack 22
  2737                           
  2738                           ;TimerPWM.c: 31: PWMLeft=20-percentage/5;
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;incstack = 0
  2742  0016CC  C0AD  F0A6         	movff	SetPWMMotorLeft@percentage,___lwdiv@dividend
  2743  0016D0  C0AE  F0A7         	movff	SetPWMMotorLeft@percentage+1,___lwdiv@dividend+1
  2744  0016D4  0E00               	movlw	0
  2745  0016D6  0100               	movlb	0	; () banked
  2746  0016D8  6FA9               	movwf	(___lwdiv@divisor+1)& (0+255),b
  2747  0016DA  0E05               	movlw	5
  2748  0016DC  6FA8               	movwf	___lwdiv@divisor& (0+255),b
  2749  0016DE  EC68  F008         	call	___lwdiv	;wreg free
  2750  0016E2  0100               	movlb	0	; () banked
  2751  0016E4  1FA6               	comf	?___lwdiv& (0+255),f,b
  2752  0016E6  0100               	movlb	0	; () banked
  2753  0016E8  1FA7               	comf	(?___lwdiv+1)& (0+255),f,b
  2754  0016EA  0100               	movlb	0	; () banked
  2755  0016EC  4BA6               	infsnz	?___lwdiv& (0+255),f,b
  2756  0016EE  2BA7               	incf	(?___lwdiv+1)& (0+255),f,b
  2757  0016F0  0E14               	movlw	20
  2758  0016F2  0100               	movlb	0	; () banked
  2759  0016F4  25A6               	addwf	?___lwdiv& (0+255),w,b
  2760  0016F6  0100               	movlb	0	; () banked
  2761  0016F8  6FC7               	movwf	_PWMLeft& (0+255),b
  2762  0016FA  0E00               	movlw	0
  2763  0016FC  0100               	movlb	0	; () banked
  2764  0016FE  21A7               	addwfc	(?___lwdiv+1)& (0+255),w,b
  2765  001700  0100               	movlb	0	; () banked
  2766  001702  6FC8               	movwf	(_PWMLeft+1)& (0+255),b
  2767                           
  2768                           ; BSR set to: 0
  2769  001704  0012               	return		;funcret
  2770  001706                     __end_of_SetPWMMotorLeft:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           postinc0	equ	0xFEE
  2780                           wreg	equ	0xFE8
  2781                           postdec1	equ	0xFE5
  2782                           fsr1l	equ	0xFE1
  2783                           indf2	equ	0xFDF
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function ___lwdiv *****************
  2789 ;; Defined at:
  2790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  dividend        2    0[BANK0 ] unsigned int 
  2793 ;;  divisor         2    2[BANK0 ] unsigned int 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  quotient        2    4[BANK0 ] unsigned int 
  2796 ;;  counter         1    6[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  2    0[BANK0 ] unsigned int 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       4       0       0       0       0       0
  2807 ;;      Locals:         0       3       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         0       7       0       0       0       0       0
  2810 ;;Total ram usage:        7 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    6
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_SetPWMMotorLeft
  2817 ;;		_SetPWMMotorRight
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text17
  2822  0010D0                     __ptext17:
  2823                           	opt stack 0
  2824  0010D0                     ___lwdiv:
  2825                           	opt stack 22
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;incstack = 0
  2829  0010D0  0E00               	movlw	0
  2830  0010D2  0100               	movlb	0	; () banked
  2831  0010D4  6FAB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2832  0010D6  0E00               	movlw	0
  2833  0010D8  6FAA               	movwf	___lwdiv@quotient& (0+255),b
  2834                           
  2835                           ; BSR set to: 0
  2836  0010DA  0100               	movlb	0	; () banked
  2837  0010DC  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2838  0010DE  0100               	movlb	0	; () banked
  2839  0010E0  11A9               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2840  0010E2  B4D8               	btfsc	status,2,c
  2841  0010E4  D02C               	goto	l1004
  2842                           
  2843                           ; BSR set to: 0
  2844  0010E6  0E01               	movlw	1
  2845  0010E8  0100               	movlb	0	; () banked
  2846  0010EA  6FAC               	movwf	___lwdiv@counter& (0+255),b
  2847  0010EC  D006               	goto	l2371
  2848  0010EE                     l2369:
  2849                           
  2850                           ; BSR set to: 0
  2851  0010EE  0100               	movlb	0	; () banked
  2852  0010F0  90D8               	bcf	status,0,c
  2853  0010F2  37A8               	rlcf	___lwdiv@divisor& (0+255),f,b
  2854  0010F4  37A9               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2855  0010F6  0100               	movlb	0	; () banked
  2856  0010F8  2BAC               	incf	___lwdiv@counter& (0+255),f,b
  2857  0010FA                     l2371:
  2858                           
  2859                           ; BSR set to: 0
  2860  0010FA  0100               	movlb	0	; () banked
  2861  0010FC  AFA9               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2862  0010FE  D7F7               	goto	l2369
  2863  001100                     l2373:
  2864                           
  2865                           ; BSR set to: 0
  2866  001100  0100               	movlb	0	; () banked
  2867  001102  90D8               	bcf	status,0,c
  2868  001104  37AA               	rlcf	___lwdiv@quotient& (0+255),f,b
  2869  001106  37AB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2870                           
  2871                           ; BSR set to: 0
  2872  001108  0100               	movlb	0	; () banked
  2873  00110A  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2874  00110C  0100               	movlb	0	; () banked
  2875  00110E  5DA6               	subwf	___lwdiv@dividend& (0+255),w,b
  2876  001110  0100               	movlb	0	; () banked
  2877  001112  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2878  001114  0100               	movlb	0	; () banked
  2879  001116  59A7               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2880  001118  A0D8               	btfss	status,0,c
  2881  00111A  D00A               	goto	l2381
  2882                           
  2883                           ; BSR set to: 0
  2884  00111C  0100               	movlb	0	; () banked
  2885  00111E  51A8               	movf	___lwdiv@divisor& (0+255),w,b
  2886  001120  0100               	movlb	0	; () banked
  2887  001122  5FA6               	subwf	___lwdiv@dividend& (0+255),f,b
  2888  001124  0100               	movlb	0	; () banked
  2889  001126  51A9               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2890  001128  0100               	movlb	0	; () banked
  2891  00112A  5BA7               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2892                           
  2893                           ; BSR set to: 0
  2894  00112C  0100               	movlb	0	; () banked
  2895  00112E  81AA               	bsf	___lwdiv@quotient& (0+255),0,b
  2896  001130                     l2381:
  2897                           
  2898                           ; BSR set to: 0
  2899  001130  0100               	movlb	0	; () banked
  2900  001132  90D8               	bcf	status,0,c
  2901  001134  33A9               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2902  001136  33A8               	rrcf	___lwdiv@divisor& (0+255),f,b
  2903                           
  2904                           ; BSR set to: 0
  2905  001138  0100               	movlb	0	; () banked
  2906  00113A  2FAC               	decfsz	___lwdiv@counter& (0+255),f,b
  2907  00113C  D7E1               	goto	l2373
  2908  00113E                     l1004:
  2909                           
  2910                           ; BSR set to: 0
  2911  00113E  C0AA  F0A6         	movff	___lwdiv@quotient,?___lwdiv
  2912  001142  C0AB  F0A7         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2913                           
  2914                           ; BSR set to: 0
  2915  001146  0012               	return		;funcret
  2916  001148                     __end_of___lwdiv:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           prodh	equ	0xFF4
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1l	equ	0xFE1
  2929                           indf2	equ	0xFDF
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _ReadParallelSpeedRight *****************
  2935 ;; Defined at:
  2936 ;;		line 44 in file "parallel.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  2    0[BANK0 ] int 
  2943 ;; Registers used:
  2944 ;;		None
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2950 ;;      Params:         0       2       0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0
  2953 ;;      Totals:         0       2       0       0       0       0       0
  2954 ;;Total ram usage:        2 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    6
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_Go
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text18
  2965  001924                     __ptext18:
  2966                           	opt stack 0
  2967  001924                     _ReadParallelSpeedRight:
  2968                           	opt stack 23
  2969                           
  2970                           ;parallel.c: 45: return SpeedRight;
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;incstack = 0
  2974  001924  C0C5  F0A6         	movff	parallel@SpeedRight,?_ReadParallelSpeedRight
  2975  001928  C0C6  F0A7         	movff	parallel@SpeedRight+1,?_ReadParallelSpeedRight+1
  2976  00192C  0012               	return		;funcret
  2977  00192E                     __end_of_ReadParallelSpeedRight:
  2978                           	opt stack 0
  2979                           tblptru	equ	0xFF8
  2980                           tblptrh	equ	0xFF7
  2981                           tblptrl	equ	0xFF6
  2982                           tablat	equ	0xFF5
  2983                           prodh	equ	0xFF4
  2984                           prodl	equ	0xFF3
  2985                           intcon	equ	0xFF2
  2986                           postinc0	equ	0xFEE
  2987                           wreg	equ	0xFE8
  2988                           postdec1	equ	0xFE5
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _ReadParallelSpeedLeft *****************
  2996 ;; Defined at:
  2997 ;;		line 47 in file "parallel.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;		None
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;		None
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2    0[BANK0 ] int 
  3004 ;; Registers used:
  3005 ;;		None
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3011 ;;      Params:         0       2       0       0       0       0       0
  3012 ;;      Locals:         0       0       0       0       0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0
  3014 ;;      Totals:         0       2       0       0       0       0       0
  3015 ;;Total ram usage:        2 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    6
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_Go
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text19
  3026  00192E                     __ptext19:
  3027                           	opt stack 0
  3028  00192E                     _ReadParallelSpeedLeft:
  3029                           	opt stack 23
  3030                           
  3031                           ;parallel.c: 48: return SpeedLeft;
  3032                           
  3033                           ;incstack = 0
  3034  00192E  C0C3  F0A6         	movff	parallel@SpeedLeft,?_ReadParallelSpeedLeft
  3035  001932  C0C4  F0A7         	movff	parallel@SpeedLeft+1,?_ReadParallelSpeedLeft+1
  3036  001936  0012               	return		;funcret
  3037  001938                     __end_of_ReadParallelSpeedLeft:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           tblptrh	equ	0xFF7
  3041                           tblptrl	equ	0xFF6
  3042                           tablat	equ	0xFF5
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           intcon	equ	0xFF2
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           postdec1	equ	0xFE5
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           fsr2h	equ	0xFDA
  3052                           fsr2l	equ	0xFD9
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _ReadParallel *****************
  3056 ;; Defined at:
  3057 ;;		line 29 in file "parallel.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;		None
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  left            1    5[BANK0 ] unsigned char 
  3062 ;;  lecture         1    4[BANK0 ] unsigned char 
  3063 ;;  right           1    3[BANK0 ] unsigned char 
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1    wreg      void 
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, status,0, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3073 ;;      Params:         0       0       0       0       0       0       0
  3074 ;;      Locals:         0       3       0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0
  3076 ;;      Totals:         0       3       0       0       0       0       0
  3077 ;;Total ram usage:        3 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    7
  3080 ;; This function calls:
  3081 ;;		_ConvertParallelSpeed
  3082 ;; This function is called by:
  3083 ;;		_Go
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text20
  3088  001378                     __ptext20:
  3089                           	opt stack 0
  3090  001378                     _ReadParallel:
  3091                           	opt stack 22
  3092                           
  3093                           ;parallel.c: 30: unsigned char lecture=PORTB;
  3094                           
  3095                           ;incstack = 0
  3096  001378  CF81 F0AA          	movff	3969,ReadParallel@lecture	;volatile
  3097                           
  3098                           ;parallel.c: 31: unsigned char left=lecture>>4;
  3099  00137C  0100               	movlb	0	; () banked
  3100  00137E  39AA               	swapf	ReadParallel@lecture& (0+255),w,b
  3101  001380  0B0F               	andlw	15
  3102  001382  0100               	movlb	0	; () banked
  3103  001384  6FAB               	movwf	ReadParallel@left& (0+255),b
  3104                           
  3105                           ;parallel.c: 32: unsigned char right=lecture & 0x0f;
  3106  001386  0100               	movlb	0	; () banked
  3107  001388  51AA               	movf	ReadParallel@lecture& (0+255),w,b
  3108  00138A  0B0F               	andlw	15
  3109  00138C  0100               	movlb	0	; () banked
  3110  00138E  6FA9               	movwf	ReadParallel@right& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;parallel.c: 33: SpeedRight=ConvertParallelSpeed(right);
  3114  001390  0100               	movlb	0	; () banked
  3115  001392  51A9               	movf	ReadParallel@right& (0+255),w,b
  3116  001394  EC2C  F006         	call	_ConvertParallelSpeed
  3117  001398  C0A6  F0C5         	movff	?_ConvertParallelSpeed,parallel@SpeedRight
  3118  00139C  C0A7  F0C6         	movff	?_ConvertParallelSpeed+1,parallel@SpeedRight+1
  3119                           
  3120                           ;parallel.c: 34: SpeedLeft=ConvertParallelSpeed(left);
  3121  0013A0  0100               	movlb	0	; () banked
  3122  0013A2  51AB               	movf	ReadParallel@left& (0+255),w,b
  3123  0013A4  EC2C  F006         	call	_ConvertParallelSpeed
  3124  0013A8  C0A6  F0C3         	movff	?_ConvertParallelSpeed,parallel@SpeedLeft
  3125  0013AC  C0A7  F0C4         	movff	?_ConvertParallelSpeed+1,parallel@SpeedLeft+1
  3126                           
  3127                           ;parallel.c: 35: if (left==0x0c){
  3128  0013B0  0E0C               	movlw	12
  3129  0013B2  0100               	movlb	0	; () banked
  3130  0013B4  19AB               	xorwf	ReadParallel@left& (0+255),w,b
  3131  0013B6  A4D8               	btfss	status,2,c
  3132  0013B8  D006               	goto	l2951
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;parallel.c: 36: Mode=1;
  3136  0013BA  0E00               	movlw	0
  3137  0013BC  0100               	movlb	0	; () banked
  3138  0013BE  6FBE               	movwf	(_Mode+1)& (0+255),b
  3139  0013C0  0E01               	movlw	1
  3140  0013C2  6FBD               	movwf	_Mode& (0+255),b
  3141                           
  3142                           ;parallel.c: 37: }else{
  3143  0013C4  0012               	return	
  3144  0013C6                     l2951:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;parallel.c: 38: Mode=0;
  3148  0013C6  0E00               	movlw	0
  3149  0013C8  0100               	movlb	0	; () banked
  3150  0013CA  6FBE               	movwf	(_Mode+1)& (0+255),b
  3151  0013CC  0E00               	movlw	0
  3152  0013CE  6FBD               	movwf	_Mode& (0+255),b
  3153  0013D0  0012               	return	
  3154  0013D2                     __end_of_ReadParallel:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           postdec1	equ	0xFE5
  3166                           fsr1l	equ	0xFE1
  3167                           indf2	equ	0xFDF
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8
  3171                           
  3172 ;; *************** function _ConvertParallelSpeed *****************
  3173 ;; Defined at:
  3174 ;;		line 54 in file "parallel.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  velocity        1    wreg     unsigned char 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  velocity        1    2[BANK0 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  2    0[BANK0 ] int 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3188 ;;      Params:         0       2       0       0       0       0       0
  3189 ;;      Locals:         0       1       0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0
  3191 ;;      Totals:         0       3       0       0       0       0       0
  3192 ;;Total ram usage:        3 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    6
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_ReadParallel
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text21
  3203  000C58                     __ptext21:
  3204                           	opt stack 0
  3205  000C58                     _ConvertParallelSpeed:
  3206                           	opt stack 22
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;incstack = 0
  3210                           ;ConvertParallelSpeed@velocity stored from wreg
  3211  000C58  0100               	movlb	0	; () banked
  3212  000C5A  6FA8               	movwf	ConvertParallelSpeed@velocity& (0+255),b
  3213                           
  3214                           ;parallel.c: 55: switch(velocity){
  3215  000C5C  D048               	goto	l2775
  3216  000C5E                     l2701:
  3217                           
  3218                           ;parallel.c: 57: return -100;
  3219  000C5E  0EFF               	movlw	255
  3220  000C60  0100               	movlb	0	; () banked
  3221  000C62  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3222  000C64  0E9C               	movlw	156
  3223  000C66  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;parallel.c: 58: break;
  3227                           
  3228                           ; BSR set to: 0
  3229  000C68  0012               	return	
  3230  000C6A                     l2707:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;parallel.c: 60: return -80;
  3234  000C6A  0EFF               	movlw	255
  3235  000C6C  0100               	movlb	0	; () banked
  3236  000C6E  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3237  000C70  0EB0               	movlw	176
  3238  000C72  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;parallel.c: 61: break;
  3242                           
  3243                           ; BSR set to: 0
  3244  000C74  0012               	return	
  3245  000C76                     l2713:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;parallel.c: 63: return -60;
  3249  000C76  0EFF               	movlw	255
  3250  000C78  0100               	movlb	0	; () banked
  3251  000C7A  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3252  000C7C  0EC4               	movlw	196
  3253  000C7E  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;parallel.c: 64: break;
  3257                           
  3258                           ; BSR set to: 0
  3259  000C80  0012               	return	
  3260  000C82                     l2719:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;parallel.c: 66: return -40;
  3264  000C82  0EFF               	movlw	255
  3265  000C84  0100               	movlb	0	; () banked
  3266  000C86  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3267  000C88  0ED8               	movlw	216
  3268  000C8A  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;parallel.c: 67: break;
  3272                           
  3273                           ; BSR set to: 0
  3274  000C8C  0012               	return	
  3275  000C8E                     l2725:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;parallel.c: 69: return -20;
  3279  000C8E  0EFF               	movlw	255
  3280  000C90  0100               	movlb	0	; () banked
  3281  000C92  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3282  000C94  0EEC               	movlw	236
  3283  000C96  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;parallel.c: 70: break;
  3287                           
  3288                           ; BSR set to: 0
  3289  000C98  0012               	return	
  3290  000C9A                     l2731:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;parallel.c: 72: return 0;
  3294  000C9A  0E00               	movlw	0
  3295  000C9C  0100               	movlb	0	; () banked
  3296  000C9E  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3297  000CA0  0E00               	movlw	0
  3298  000CA2  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;parallel.c: 73: break;
  3302                           
  3303                           ; BSR set to: 0
  3304  000CA4  0012               	return	
  3305  000CA6                     l2737:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;parallel.c: 75: return 20;
  3309  000CA6  0E00               	movlw	0
  3310  000CA8  0100               	movlb	0	; () banked
  3311  000CAA  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3312  000CAC  0E14               	movlw	20
  3313  000CAE  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;parallel.c: 76: break;
  3317                           
  3318                           ; BSR set to: 0
  3319  000CB0  0012               	return	
  3320  000CB2                     l2743:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;parallel.c: 78: return 40;
  3324  000CB2  0E00               	movlw	0
  3325  000CB4  0100               	movlb	0	; () banked
  3326  000CB6  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3327  000CB8  0E28               	movlw	40
  3328  000CBA  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;parallel.c: 79: break;
  3332                           
  3333                           ; BSR set to: 0
  3334  000CBC  0012               	return	
  3335  000CBE                     l2749:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;parallel.c: 81: return 60;
  3339  000CBE  0E00               	movlw	0
  3340  000CC0  0100               	movlb	0	; () banked
  3341  000CC2  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3342  000CC4  0E3C               	movlw	60
  3343  000CC6  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;parallel.c: 82: break;
  3347                           
  3348                           ; BSR set to: 0
  3349  000CC8  0012               	return	
  3350  000CCA                     l2755:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;parallel.c: 84: return 80;
  3354  000CCA  0E00               	movlw	0
  3355  000CCC  0100               	movlb	0	; () banked
  3356  000CCE  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3357  000CD0  0E50               	movlw	80
  3358  000CD2  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;parallel.c: 85: break;
  3362                           
  3363                           ; BSR set to: 0
  3364  000CD4  0012               	return	
  3365  000CD6                     l2761:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;parallel.c: 87: return 100;
  3369  000CD6  0E00               	movlw	0
  3370  000CD8  0100               	movlb	0	; () banked
  3371  000CDA  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3372  000CDC  0E64               	movlw	100
  3373  000CDE  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;parallel.c: 88: break;
  3377                           
  3378                           ; BSR set to: 0
  3379  000CE0  0012               	return	
  3380  000CE2                     l2767:
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;parallel.c: 90: return 0;
  3384  000CE2  0E00               	movlw	0
  3385  000CE4  0100               	movlb	0	; () banked
  3386  000CE6  6FA7               	movwf	(?_ConvertParallelSpeed+1)& (0+255),b
  3387  000CE8  0E00               	movlw	0
  3388  000CEA  6FA6               	movwf	?_ConvertParallelSpeed& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;parallel.c: 92: }
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;parallel.c: 91: break;
  3395                           
  3396                           ; BSR set to: 0
  3397  000CEC  0012               	return	
  3398  000CEE                     l2775:
  3399  000CEE  0100               	movlb	0	; () banked
  3400  000CF0  51A8               	movf	ConvertParallelSpeed@velocity& (0+255),w,b
  3401                           
  3402                           ; Switch size 1, requested type "space"
  3403                           ; Number of cases is 11, Range of values is 1 to 11
  3404                           ; switch strategies available:
  3405                           ; Name         Instructions Cycles
  3406                           ; simple_byte           34    18 (average)
  3407                           ;	Chosen strategy is simple_byte
  3408  000CF2  0A01               	xorlw	1	; case 1
  3409  000CF4  B4D8               	btfsc	status,2,c
  3410  000CF6  D7B3               	goto	l2701
  3411  000CF8  0A03               	xorlw	3	; case 2
  3412  000CFA  B4D8               	btfsc	status,2,c
  3413  000CFC  D7B6               	goto	l2707
  3414  000CFE  0A01               	xorlw	1	; case 3
  3415  000D00  B4D8               	btfsc	status,2,c
  3416  000D02  D7B9               	goto	l2713
  3417  000D04  0A07               	xorlw	7	; case 4
  3418  000D06  B4D8               	btfsc	status,2,c
  3419  000D08  D7BC               	goto	l2719
  3420  000D0A  0A01               	xorlw	1	; case 5
  3421  000D0C  B4D8               	btfsc	status,2,c
  3422  000D0E  D7BF               	goto	l2725
  3423  000D10  0A03               	xorlw	3	; case 6
  3424  000D12  B4D8               	btfsc	status,2,c
  3425  000D14  D7C2               	goto	l2731
  3426  000D16  0A01               	xorlw	1	; case 7
  3427  000D18  B4D8               	btfsc	status,2,c
  3428  000D1A  D7C5               	goto	l2737
  3429  000D1C  0A0F               	xorlw	15	; case 8
  3430  000D1E  B4D8               	btfsc	status,2,c
  3431  000D20  D7C8               	goto	l2743
  3432  000D22  0A01               	xorlw	1	; case 9
  3433  000D24  B4D8               	btfsc	status,2,c
  3434  000D26  D7CB               	goto	l2749
  3435  000D28  0A03               	xorlw	3	; case 10
  3436  000D2A  B4D8               	btfsc	status,2,c
  3437  000D2C  D7CE               	goto	l2755
  3438  000D2E  0A01               	xorlw	1	; case 11
  3439  000D30  B4D8               	btfsc	status,2,c
  3440  000D32  D7D1               	goto	l2761
  3441  000D34  D7D6               	goto	l2767
  3442  000D36                     __end_of_ConvertParallelSpeed:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           postinc0	equ	0xFEE
  3452                           wreg	equ	0xFE8
  3453                           postdec1	equ	0xFE5
  3454                           fsr1l	equ	0xFE1
  3455                           indf2	equ	0xFDF
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _ReadMode *****************
  3461 ;; Defined at:
  3462 ;;		line 51 in file "parallel.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;		None
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  2    0[BANK0 ] unsigned int 
  3469 ;; Registers used:
  3470 ;;		None
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3476 ;;      Params:         0       2       0       0       0       0       0
  3477 ;;      Locals:         0       0       0       0       0       0       0
  3478 ;;      Temps:          0       0       0       0       0       0       0
  3479 ;;      Totals:         0       2       0       0       0       0       0
  3480 ;;Total ram usage:        2 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    6
  3483 ;; This function calls:
  3484 ;;		Nothing
  3485 ;; This function is called by:
  3486 ;;		_Go
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text22
  3491  001938                     __ptext22:
  3492                           	opt stack 0
  3493  001938                     _ReadMode:
  3494                           	opt stack 23
  3495                           
  3496                           ;parallel.c: 52: return Mode;
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;incstack = 0
  3500  001938  C0BD  F0A6         	movff	_Mode,?_ReadMode
  3501  00193C  C0BE  F0A7         	movff	_Mode+1,?_ReadMode+1
  3502  001940  0012               	return		;funcret
  3503  001942                     __end_of_ReadMode:
  3504                           	opt stack 0
  3505                           tblptru	equ	0xFF8
  3506                           tblptrh	equ	0xFF7
  3507                           tblptrl	equ	0xFF6
  3508                           tablat	equ	0xFF5
  3509                           prodh	equ	0xFF4
  3510                           prodl	equ	0xFF3
  3511                           intcon	equ	0xFF2
  3512                           postinc0	equ	0xFEE
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           fsr2h	equ	0xFDA
  3518                           fsr2l	equ	0xFD9
  3519                           status	equ	0xFD8
  3520                           
  3521 ;; *************** function _ReadDistanceRight *****************
  3522 ;; Defined at:
  3523 ;;		line 67 in file "ADC.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;		None
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  2    0[BANK0 ] unsigned int 
  3530 ;; Registers used:
  3531 ;;		None
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3537 ;;      Params:         0       2       0       0       0       0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0
  3540 ;;      Totals:         0       2       0       0       0       0       0
  3541 ;;Total ram usage:        2 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    6
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_Go
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text23
  3552  001942                     __ptext23:
  3553                           	opt stack 0
  3554  001942                     _ReadDistanceRight:
  3555                           	opt stack 23
  3556                           
  3557                           ;ADC.c: 68: return DistanceRight;
  3558                           
  3559                           ;incstack = 0
  3560  001942  C0A4  F0A6         	movff	_DistanceRight,?_ReadDistanceRight
  3561  001946  C0A5  F0A7         	movff	_DistanceRight+1,?_ReadDistanceRight+1
  3562  00194A  0012               	return		;funcret
  3563  00194C                     __end_of_ReadDistanceRight:
  3564                           	opt stack 0
  3565                           tblptru	equ	0xFF8
  3566                           tblptrh	equ	0xFF7
  3567                           tblptrl	equ	0xFF6
  3568                           tablat	equ	0xFF5
  3569                           prodh	equ	0xFF4
  3570                           prodl	equ	0xFF3
  3571                           intcon	equ	0xFF2
  3572                           postinc0	equ	0xFEE
  3573                           wreg	equ	0xFE8
  3574                           postdec1	equ	0xFE5
  3575                           fsr1l	equ	0xFE1
  3576                           indf2	equ	0xFDF
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _ReadDistanceLeft *****************
  3582 ;; Defined at:
  3583 ;;		line 58 in file "ADC.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  2    0[BANK0 ] unsigned int 
  3590 ;; Registers used:
  3591 ;;		None
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3597 ;;      Params:         0       2       0       0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0
  3600 ;;      Totals:         0       2       0       0       0       0       0
  3601 ;;Total ram usage:        2 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    6
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_Go
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text24
  3612  00194C                     __ptext24:
  3613                           	opt stack 0
  3614  00194C                     _ReadDistanceLeft:
  3615                           	opt stack 23
  3616                           
  3617                           ;ADC.c: 59: return DistanceLeft;
  3618                           
  3619                           ;incstack = 0
  3620  00194C  C0A2  F0A6         	movff	_DistanceLeft,?_ReadDistanceLeft
  3621  001950  C0A3  F0A7         	movff	_DistanceLeft+1,?_ReadDistanceLeft+1
  3622  001954  0012               	return		;funcret
  3623  001956                     __end_of_ReadDistanceLeft:
  3624                           	opt stack 0
  3625                           tblptru	equ	0xFF8
  3626                           tblptrh	equ	0xFF7
  3627                           tblptrl	equ	0xFF6
  3628                           tablat	equ	0xFF5
  3629                           prodh	equ	0xFF4
  3630                           prodl	equ	0xFF3
  3631                           intcon	equ	0xFF2
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           indf2	equ	0xFDF
  3637                           fsr2h	equ	0xFDA
  3638                           fsr2l	equ	0xFD9
  3639                           status	equ	0xFD8
  3640                           
  3641 ;; *************** function _ReadDistanceCentral *****************
  3642 ;; Defined at:
  3643 ;;		line 75 in file "ADC.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;		None
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;		None
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  2    0[BANK0 ] unsigned int 
  3650 ;; Registers used:
  3651 ;;		None
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3657 ;;      Params:         0       2       0       0       0       0       0
  3658 ;;      Locals:         0       0       0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0
  3660 ;;      Totals:         0       2       0       0       0       0       0
  3661 ;;Total ram usage:        2 bytes
  3662 ;; Hardware stack levels used:    1
  3663 ;; Hardware stack levels required when called:    6
  3664 ;; This function calls:
  3665 ;;		Nothing
  3666 ;; This function is called by:
  3667 ;;		_Go
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text25
  3672  001956                     __ptext25:
  3673                           	opt stack 0
  3674  001956                     _ReadDistanceCentral:
  3675                           	opt stack 23
  3676                           
  3677                           ;ADC.c: 76: return DistanceCentral;
  3678                           
  3679                           ;incstack = 0
  3680  001956  C0A0  F0A6         	movff	_DistanceCentral,?_ReadDistanceCentral
  3681  00195A  C0A1  F0A7         	movff	_DistanceCentral+1,?_ReadDistanceCentral+1
  3682  00195E  0012               	return		;funcret
  3683  001960                     __end_of_ReadDistanceCentral:
  3684                           	opt stack 0
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           prodh	equ	0xFF4
  3690                           prodl	equ	0xFF3
  3691                           intcon	equ	0xFF2
  3692                           postinc0	equ	0xFEE
  3693                           wreg	equ	0xFE8
  3694                           postdec1	equ	0xFE5
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8
  3700                           
  3701 ;; *************** function _ADCInitiateConversion *****************
  3702 ;; Defined at:
  3703 ;;		line 34 in file "ADC.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;		None
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		None
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3717 ;;      Params:         0       0       0       0       0       0       0
  3718 ;;      Locals:         0       0       0       0       0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0
  3720 ;;      Totals:         0       0       0       0       0       0       0
  3721 ;;Total ram usage:        0 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    6
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_main
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           	psect	text26
  3732  00197C                     __ptext26:
  3733                           	opt stack 0
  3734  00197C                     _ADCInitiateConversion:
  3735                           	opt stack 24
  3736                           
  3737                           ;ADC.c: 35: GO = 1;
  3738                           
  3739                           ;incstack = 0
  3740  00197C  82C2               	bsf	4034,1,c	;volatile
  3741  00197E  0012               	return		;funcret
  3742  001980                     __end_of_ADCInitiateConversion:
  3743                           	opt stack 0
  3744                           tblptru	equ	0xFF8
  3745                           tblptrh	equ	0xFF7
  3746                           tblptrl	equ	0xFF6
  3747                           tablat	equ	0xFF5
  3748                           prodh	equ	0xFF4
  3749                           prodl	equ	0xFF3
  3750                           intcon	equ	0xFF2
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1l	equ	0xFE1
  3755                           indf2	equ	0xFDF
  3756                           fsr2h	equ	0xFDA
  3757                           fsr2l	equ	0xFD9
  3758                           status	equ	0xFD8
  3759                           
  3760 ;; *************** function _ADCInit *****************
  3761 ;; Defined at:
  3762 ;;		line 10 in file "ADC.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3776 ;;      Params:         0       0       0       0       0       0       0
  3777 ;;      Locals:         0       0       0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0       0       0
  3779 ;;      Totals:         0       0       0       0       0       0       0
  3780 ;;Total ram usage:        0 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    6
  3783 ;; This function calls:
  3784 ;;		Nothing
  3785 ;; This function is called by:
  3786 ;;		_main
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text27
  3791  001850                     __ptext27:
  3792                           	opt stack 0
  3793  001850                     _ADCInit:
  3794                           	opt stack 24
  3795                           
  3796                           ;ADC.c: 13: TRISA0 = 1;
  3797                           
  3798                           ;incstack = 0
  3799  001850  8092               	bsf	3986,0,c	;volatile
  3800                           
  3801                           ;ADC.c: 14: TRISA1 = 1;
  3802  001852  8292               	bsf	3986,1,c	;volatile
  3803                           
  3804                           ;ADC.c: 15: TRISA2 = 1;
  3805  001854  8492               	bsf	3986,2,c	;volatile
  3806                           
  3807                           ;ADC.c: 16: TRISA3 = 1;
  3808  001856  8692               	bsf	3986,3,c	;volatile
  3809                           
  3810                           ;ADC.c: 18: ANS0 = 1;
  3811  001858  807E               	bsf	3966,0,c	;volatile
  3812                           
  3813                           ;ADC.c: 19: ANS1 = 1;
  3814  00185A  827E               	bsf	3966,1,c	;volatile
  3815                           
  3816                           ;ADC.c: 20: ANS2 = 1;
  3817  00185C  847E               	bsf	3966,2,c	;volatile
  3818                           
  3819                           ;ADC.c: 21: ANS3 = 1;
  3820  00185E  867E               	bsf	3966,3,c	;volatile
  3821                           
  3822                           ;ADC.c: 23: ADON = 1;
  3823  001860  80C2               	bsf	4034,0,c	;volatile
  3824                           
  3825                           ;ADC.c: 24: ADCON1 = 0;
  3826  001862  0E00               	movlw	0
  3827  001864  6EC1               	movwf	4033,c	;volatile
  3828                           
  3829                           ;ADC.c: 25: ADCON2 = 0x91;
  3830  001866  0E91               	movlw	145
  3831  001868  6EC0               	movwf	4032,c	;volatile
  3832                           
  3833                           ;ADC.c: 26: ADIF = 0;
  3834  00186A  9C9E               	bcf	3998,6,c	;volatile
  3835                           
  3836                           ;ADC.c: 27: ADIE = 1;
  3837  00186C  8C9D               	bsf	3997,6,c	;volatile
  3838                           
  3839                           ;ADC.c: 29: PEIE = 1;
  3840  00186E  8CF2               	bsf	intcon,6,c	;volatile
  3841                           
  3842                           ;ADC.c: 30: GIE = 1;
  3843  001870  8EF2               	bsf	intcon,7,c	;volatile
  3844  001872  0012               	return		;funcret
  3845  001874                     __end_of_ADCInit:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           postdec1	equ	0xFE5
  3857                           fsr1l	equ	0xFE1
  3858                           indf2	equ	0xFDF
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _isr *****************
  3864 ;; Defined at:
  3865 ;;		line 10 in file "interrupts.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  CharRx          1   76[COMRAM] unsigned char 
  3870 ;;  read            2   74[COMRAM] unsigned int 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3880 ;;      Params:         0       0       0       0       0       0       0
  3881 ;;      Locals:         3       0       0       0       0       0       0
  3882 ;;      Temps:         16       0       0       0       0       0       0
  3883 ;;      Totals:        19       0       0       0       0       0       0
  3884 ;;Total ram usage:       19 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    5
  3887 ;; This function calls:
  3888 ;;		_ADCGetOutput
  3889 ;;		_ReadPWMMotorLeft
  3890 ;;		_ReadPWMMotorRight
  3891 ;;		_ReadUSART
  3892 ;;		_SetBattery
  3893 ;;		_SetDistanceCentral
  3894 ;;		_SetDistanceLeft
  3895 ;;		_SetDistanceRight
  3896 ;;		_SetSpeedLeft
  3897 ;;		_SetSpeedRight
  3898 ;;		_WriteUSART
  3899 ;;		_putsUSART
  3900 ;; This function is called by:
  3901 ;;		Interrupt level 2
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	intcode
  3906  000008                     __pintcode:
  3907                           	opt stack 0
  3908  000008                     _isr:
  3909                           	opt stack 20
  3910                           
  3911                           ;incstack = 0
  3912  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3913  00000A  CFFA F03D          	movff	pclath,??_isr+2
  3914  00000E  CFFB F03E          	movff	pclatu,??_isr+3
  3915  000012  CFE9 F03F          	movff	fsr0l,??_isr+4
  3916  000016  CFEA F040          	movff	fsr0h,??_isr+5
  3917  00001A  CFE1 F041          	movff	fsr1l,??_isr+6
  3918  00001E  CFE2 F042          	movff	fsr1h,??_isr+7
  3919  000022  CFD9 F043          	movff	fsr2l,??_isr+8
  3920  000026  CFDA F044          	movff	fsr2h,??_isr+9
  3921  00002A  CFF3 F045          	movff	prodl,??_isr+10
  3922  00002E  CFF4 F046          	movff	prodh,??_isr+11
  3923  000032  CFF6 F047          	movff	tblptrl,??_isr+12
  3924  000036  CFF7 F048          	movff	tblptrh,??_isr+13
  3925  00003A  CFF8 F049          	movff	tblptru,??_isr+14
  3926  00003E  CFF5 F04A          	movff	tablat,??_isr+15
  3927                           
  3928                           ;interrupts.c: 14: if (ADIF == 1) {
  3929  000042  AC9E               	btfss	3998,6,c	;volatile
  3930  000044  D055               	goto	i2l51
  3931                           
  3932                           ;interrupts.c: 16: static unsigned int Readport=0;
  3933                           ;interrupts.c: 17: unsigned int read=ADCGetOutput();
  3934  000046  EC6A  F00C         	call	_ADCGetOutput	;wreg free
  3935  00004A  C001  F04B         	movff	?_ADCGetOutput,isr@read
  3936  00004E  C002  F04C         	movff	?_ADCGetOutput+1,isr@read+1
  3937                           
  3938                           ;interrupts.c: 19: switch (Readport){
  3939  000052  D037               	goto	i2l3323
  3940  000054                     i2l55:
  3941                           
  3942                           ;interrupts.c: 21: CHS3=0;
  3943  000054  9AC2               	bcf	4034,5,c	;volatile
  3944                           
  3945                           ;interrupts.c: 22: CHS2=0;
  3946  000056  98C2               	bcf	4034,4,c	;volatile
  3947                           
  3948                           ;interrupts.c: 23: CHS1=0;
  3949  000058  96C2               	bcf	4034,3,c	;volatile
  3950                           
  3951                           ;interrupts.c: 24: CHS0=1;
  3952  00005A  84C2               	bsf	4034,2,c	;volatile
  3953                           
  3954                           ;interrupts.c: 25: SetDistanceLeft (read);
  3955  00005C  C04B  F036         	movff	isr@read,SetDistanceLeft@lecture
  3956  000060  C04C  F037         	movff	isr@read+1,SetDistanceLeft@lecture+1
  3957  000064  ECDF  F008         	call	_SetDistanceLeft	;wreg free
  3958  000068  D015               	goto	i2l3313
  3959  00006A                     i2l57:
  3960                           
  3961                           ;interrupts.c: 29: CHS3=0;
  3962  00006A  9AC2               	bcf	4034,5,c	;volatile
  3963                           
  3964                           ;interrupts.c: 30: CHS2=0;
  3965  00006C  98C2               	bcf	4034,4,c	;volatile
  3966                           
  3967                           ;interrupts.c: 31: CHS1=1;
  3968  00006E  86C2               	bsf	4034,3,c	;volatile
  3969                           
  3970                           ;interrupts.c: 32: CHS0=0;
  3971  000070  94C2               	bcf	4034,2,c	;volatile
  3972                           
  3973                           ;interrupts.c: 33: SetDistanceCentral (read);
  3974  000072  C04B  F036         	movff	isr@read,SetDistanceCentral@lecture
  3975  000076  C04C  F037         	movff	isr@read+1,SetDistanceCentral@lecture+1
  3976  00007A  EC18  F009         	call	_SetDistanceCentral	;wreg free
  3977  00007E  D00A               	goto	i2l3313
  3978  000080                     i2l58:
  3979                           
  3980                           ;interrupts.c: 37: CHS3=0;
  3981  000080  9AC2               	bcf	4034,5,c	;volatile
  3982                           
  3983                           ;interrupts.c: 38: CHS2=0;
  3984  000082  98C2               	bcf	4034,4,c	;volatile
  3985                           
  3986                           ;interrupts.c: 39: CHS1=1;
  3987  000084  86C2               	bsf	4034,3,c	;volatile
  3988                           
  3989                           ;interrupts.c: 40: CHS0=1;
  3990  000086  84C2               	bsf	4034,2,c	;volatile
  3991                           
  3992                           ;interrupts.c: 41: SetDistanceRight (read);
  3993  000088  C04B  F036         	movff	isr@read,SetDistanceRight@lecture
  3994  00008C  C04C  F037         	movff	isr@read+1,SetDistanceRight@lecture+1
  3995  000090  ECA4  F008         	call	_SetDistanceRight	;wreg free
  3996  000094                     i2l3313:
  3997                           
  3998                           ;interrupts.c: 42: Readport++;
  3999  000094  4A58               	infsnz	isr@Readport,f,c
  4000  000096  2A59               	incf	isr@Readport+1,f,c
  4001                           
  4002                           ;interrupts.c: 43: break;
  4003  000098  D02A               	goto	i2l56
  4004  00009A                     i2l59:
  4005                           
  4006                           ;interrupts.c: 45: CHS3=0;
  4007  00009A  9AC2               	bcf	4034,5,c	;volatile
  4008                           
  4009                           ;interrupts.c: 46: CHS2=0;
  4010  00009C  98C2               	bcf	4034,4,c	;volatile
  4011                           
  4012                           ;interrupts.c: 47: CHS1=0;
  4013  00009E  96C2               	bcf	4034,3,c	;volatile
  4014                           
  4015                           ;interrupts.c: 48: CHS0=0;
  4016  0000A0  94C2               	bcf	4034,2,c	;volatile
  4017                           
  4018                           ;interrupts.c: 49: SetBattery (read);
  4019  0000A2  C04B  F036         	movff	isr@read,SetBattery@lecture
  4020  0000A6  C04C  F037         	movff	isr@read+1,SetBattery@lecture+1
  4021  0000AA  ECE3  F007         	call	_SetBattery	;wreg free
  4022  0000AE  D004               	goto	i2l3319
  4023  0000B0                     i2l60:
  4024                           
  4025                           ;interrupts.c: 53: CHS3=0;
  4026  0000B0  9AC2               	bcf	4034,5,c	;volatile
  4027                           
  4028                           ;interrupts.c: 54: CHS2=0;
  4029  0000B2  98C2               	bcf	4034,4,c	;volatile
  4030                           
  4031                           ;interrupts.c: 55: CHS1=0;
  4032  0000B4  96C2               	bcf	4034,3,c	;volatile
  4033                           
  4034                           ;interrupts.c: 56: CHS0=0;
  4035  0000B6  94C2               	bcf	4034,2,c	;volatile
  4036  0000B8                     i2l3319:
  4037                           
  4038                           ;interrupts.c: 57: Readport=0;
  4039  0000B8  0E00               	movlw	0
  4040  0000BA  6E59               	movwf	isr@Readport+1,c
  4041  0000BC  0E00               	movlw	0
  4042  0000BE  6E58               	movwf	isr@Readport,c
  4043                           
  4044                           ;interrupts.c: 59: }
  4045                           
  4046                           ;interrupts.c: 58: break;
  4047  0000C0  D016               	goto	i2l56
  4048  0000C2                     i2l3323:
  4049  0000C2  C058  F03B         	movff	isr@Readport,??_isr
  4050  0000C6  C059  F03C         	movff	isr@Readport+1,??_isr+1
  4051                           
  4052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4053                           ; Switch size 1, requested type "space"
  4054                           ; Number of cases is 1, Range of values is 0 to 0
  4055                           ; switch strategies available:
  4056                           ; Name         Instructions Cycles
  4057                           ; simple_byte            4     3 (average)
  4058                           ;	Chosen strategy is simple_byte
  4059  0000CA  503C               	movf	??_isr+1,w,c
  4060  0000CC  0A00               	xorlw	0	; case 0
  4061  0000CE  A4D8               	btfss	status,2,c
  4062  0000D0  D7EF               	goto	i2l60
  4063                           
  4064                           ; Switch size 1, requested type "space"
  4065                           ; Number of cases is 4, Range of values is 0 to 3
  4066                           ; switch strategies available:
  4067                           ; Name         Instructions Cycles
  4068                           ; simple_byte           13     7 (average)
  4069                           ;	Chosen strategy is simple_byte
  4070  0000D2  503B               	movf	??_isr,w,c
  4071  0000D4  0A00               	xorlw	0	; case 0
  4072  0000D6  B4D8               	btfsc	status,2,c
  4073  0000D8  D7BD               	goto	i2l55
  4074  0000DA  0A01               	xorlw	1	; case 1
  4075  0000DC  B4D8               	btfsc	status,2,c
  4076  0000DE  D7C5               	goto	i2l57
  4077  0000E0  0A03               	xorlw	3	; case 2
  4078  0000E2  B4D8               	btfsc	status,2,c
  4079  0000E4  D7CD               	goto	i2l58
  4080  0000E6  0A01               	xorlw	1	; case 3
  4081  0000E8  B4D8               	btfsc	status,2,c
  4082  0000EA  D7D7               	goto	i2l59
  4083  0000EC  D7E1               	goto	i2l60
  4084  0000EE                     i2l56:
  4085                           
  4086                           ;interrupts.c: 62: ADIF=0;
  4087  0000EE  9C9E               	bcf	3998,6,c	;volatile
  4088  0000F0                     i2l51:
  4089                           
  4090                           ;interrupts.c: 64: }
  4091                           ;interrupts.c: 66: if (TMR0IF==1)
  4092  0000F0  A4F2               	btfss	intcon,2,c	;volatile
  4093  0000F2  D02C               	goto	i2l3351
  4094                           
  4095                           ;interrupts.c: 67: {
  4096                           ;interrupts.c: 68: static unsigned int PWMLeft;
  4097                           ;interrupts.c: 69: static unsigned int PWMRight;
  4098                           ;interrupts.c: 70: static unsigned int iteration;
  4099                           ;interrupts.c: 72: if (iteration==20){
  4100  0000F4  0E14               	movlw	20
  4101  0000F6  185C               	xorwf	isr@iteration,w,c
  4102  0000F8  105D               	iorwf	isr@iteration+1,w,c
  4103  0000FA  A4D8               	btfss	status,2,c
  4104  0000FC  D012               	goto	i2l3335
  4105                           
  4106                           ;interrupts.c: 73: RC5=0;
  4107  0000FE  9A82               	bcf	3970,5,c	;volatile
  4108                           
  4109                           ;interrupts.c: 74: RC4=0;
  4110  000100  9882               	bcf	3970,4,c	;volatile
  4111                           
  4112                           ;interrupts.c: 75: iteration=0;
  4113  000102  0E00               	movlw	0
  4114  000104  6E5D               	movwf	isr@iteration+1,c
  4115  000106  0E00               	movlw	0
  4116  000108  6E5C               	movwf	isr@iteration,c
  4117                           
  4118                           ;interrupts.c: 76: PWMRight=ReadPWMMotorRight();
  4119  00010A  ECB0  F00C         	call	_ReadPWMMotorRight	;wreg free
  4120  00010E  C001  F056         	movff	?_ReadPWMMotorRight,isr@PWMRight
  4121  000112  C002  F057         	movff	?_ReadPWMMotorRight+1,isr@PWMRight+1
  4122                           
  4123                           ;interrupts.c: 77: PWMLeft=ReadPWMMotorLeft();
  4124  000116  ECB5  F00C         	call	_ReadPWMMotorLeft	;wreg free
  4125  00011A  C001  F054         	movff	?_ReadPWMMotorLeft,isr@PWMLeft
  4126  00011E  C002  F055         	movff	?_ReadPWMMotorLeft+1,isr@PWMLeft+1
  4127  000122                     i2l3335:
  4128                           
  4129                           ;interrupts.c: 78: }
  4130                           ;interrupts.c: 79: if (PWMRight==iteration){
  4131  000122  505C               	movf	isr@iteration,w,c
  4132  000124  1856               	xorwf	isr@PWMRight,w,c
  4133  000126  E104               	bnz	i2l3339
  4134  000128  505D               	movf	isr@iteration+1,w,c
  4135  00012A  1857               	xorwf	isr@PWMRight+1,w,c
  4136  00012C  B4D8               	btfsc	status,2,c
  4137                           
  4138                           ;interrupts.c: 80: RC5=1;
  4139  00012E  8A82               	bsf	3970,5,c	;volatile
  4140  000130                     i2l3339:
  4141                           
  4142                           ;interrupts.c: 81: }
  4143                           ;interrupts.c: 82: if (PWMLeft==iteration){
  4144  000130  505C               	movf	isr@iteration,w,c
  4145  000132  1854               	xorwf	isr@PWMLeft,w,c
  4146  000134  E104               	bnz	i2l3343
  4147  000136  505D               	movf	isr@iteration+1,w,c
  4148  000138  1855               	xorwf	isr@PWMLeft+1,w,c
  4149  00013A  B4D8               	btfsc	status,2,c
  4150                           
  4151                           ;interrupts.c: 83: RC4=1;
  4152  00013C  8882               	bsf	3970,4,c	;volatile
  4153  00013E                     i2l3343:
  4154                           
  4155                           ;interrupts.c: 84: }
  4156                           ;interrupts.c: 85: iteration++;
  4157  00013E  4A5C               	infsnz	isr@iteration,f,c
  4158  000140  2A5D               	incf	isr@iteration+1,f,c
  4159                           
  4160                           ;interrupts.c: 88: TMR0IF=0;
  4161  000142  94F2               	bcf	intcon,2,c	;volatile
  4162                           
  4163                           ;interrupts.c: 89: TMR0H=0x00;
  4164  000144  0E00               	movlw	0
  4165  000146  6ED7               	movwf	4055,c	;volatile
  4166                           
  4167                           ;interrupts.c: 90: TMR0L=0x156;
  4168  000148  0E56               	movlw	86
  4169  00014A  6ED6               	movwf	4054,c	;volatile
  4170  00014C                     i2l3351:
  4171                           
  4172                           ;interrupts.c: 92: }
  4173                           ;interrupts.c: 94: if (RCIF==1){
  4174  00014C  AA9E               	btfss	3998,5,c	;volatile
  4175  00014E  D043               	goto	i2l92
  4176                           
  4177                           ;interrupts.c: 96: static int counter=0;
  4178                           ;interrupts.c: 98: char CharRx = ReadUSART();
  4179  000150  EC5B  F00C         	call	_ReadUSART	;wreg free
  4180  000154  6E4D               	movwf	isr@CharRx,c
  4181                           
  4182                           ;interrupts.c: 100: if (counter==0){
  4183  000156  505A               	movf	isr@counter,w,c
  4184  000158  105B               	iorwf	isr@counter+1,w,c
  4185  00015A  A4D8               	btfss	status,2,c
  4186  00015C  D010               	goto	i2l3365
  4187                           
  4188                           ;interrupts.c: 101: if (CharRx=='b'){
  4189  00015E  0E62               	movlw	98
  4190  000160  184D               	xorwf	isr@CharRx,w,c
  4191  000162  A4D8               	btfss	status,2,c
  4192  000164  D004               	goto	i2l3361
  4193                           
  4194                           ;interrupts.c: 102: counter=1;
  4195  000166  0E00               	movlw	0
  4196  000168  6E5B               	movwf	isr@counter+1,c
  4197  00016A  0E01               	movlw	1
  4198  00016C  D010               	goto	L2
  4199  00016E                     i2l3361:
  4200  00016E  0E63               	movlw	99
  4201  000170  184D               	xorwf	isr@CharRx,w,c
  4202  000172  A4D8               	btfss	status,2,c
  4203  000174  D01A               	goto	i2l83
  4204                           
  4205                           ;interrupts.c: 104: counter=2;
  4206  000176  0E00               	movlw	0
  4207  000178  6E5B               	movwf	isr@counter+1,c
  4208  00017A  0E02               	movlw	2
  4209  00017C  D008               	goto	L2
  4210  00017E                     i2l3365:
  4211  00017E  045A               	decf	isr@counter,w,c
  4212  000180  105B               	iorwf	isr@counter+1,w,c
  4213  000182  A4D8               	btfss	status,2,c
  4214  000184  D006               	goto	i2l3371
  4215                           
  4216                           ;interrupts.c: 107: SetSpeedRight(CharRx);
  4217  000186  504D               	movf	isr@CharRx,w,c
  4218  000188  EC80  F00C         	call	_SetSpeedRight
  4219  00018C  D00A               	goto	i2l3377
  4220  00018E                     L2:
  4221  00018E  6E5A               	movwf	isr@counter,c
  4222                           
  4223                           ;interrupts.c: 109: }else if (counter==2){
  4224  000190  D00C               	goto	i2l83
  4225  000192                     i2l3371:
  4226  000192  0E02               	movlw	2
  4227  000194  185A               	xorwf	isr@counter,w,c
  4228  000196  105B               	iorwf	isr@counter+1,w,c
  4229  000198  A4D8               	btfss	status,2,c
  4230  00019A  D003               	goto	i2l3377
  4231                           
  4232                           ;interrupts.c: 110: SetSpeedLeft(CharRx);
  4233  00019C  504D               	movf	isr@CharRx,w,c
  4234  00019E  EC89  F00C         	call	_SetSpeedLeft
  4235  0001A2                     i2l3377:
  4236                           
  4237                           ;interrupts.c: 113: counter=0;
  4238  0001A2  0E00               	movlw	0
  4239  0001A4  6E5B               	movwf	isr@counter+1,c
  4240  0001A6  0E00               	movlw	0
  4241  0001A8  D7F2               	goto	L2
  4242  0001AA                     i2l83:
  4243  0001AA  A2AC               	btfss	4012,1,c	;volatile
  4244  0001AC  D7FE               	goto	i2l83
  4245                           
  4246                           ;interrupts.c: 117: putsUSART("\n\rEcho: ");
  4247  0001AE  0E2F               	movlw	low STR_1
  4248  0001B0  6E02               	movwf	putsUSART@data,c
  4249  0001B2  0E06               	movlw	high STR_1
  4250  0001B4  6E03               	movwf	putsUSART@data+1,c
  4251  0001B6  ECFD  F00B         	call	_putsUSART	;wreg free
  4252  0001BA                     i2l86:
  4253  0001BA  A2AC               	btfss	4012,1,c	;volatile
  4254  0001BC  D7FE               	goto	i2l86
  4255                           
  4256                           ;interrupts.c: 119: WriteUSART(CharRx);
  4257  0001BE  504D               	movf	isr@CharRx,w,c
  4258  0001C0  EC77  F00C         	call	_WriteUSART
  4259  0001C4                     i2l89:
  4260  0001C4  A2AC               	btfss	4012,1,c	;volatile
  4261  0001C6  D7FE               	goto	i2l89
  4262                           
  4263                           ;interrupts.c: 121: putsUSART("\n\r\n\rWrite: ");
  4264  0001C8  0E23               	movlw	low STR_2
  4265  0001CA  6E02               	movwf	putsUSART@data,c
  4266  0001CC  0E06               	movlw	high STR_2
  4267  0001CE  6E03               	movwf	putsUSART@data+1,c
  4268  0001D0  ECFD  F00B         	call	_putsUSART	;wreg free
  4269                           
  4270                           ;interrupts.c: 124: RCIF = 0;
  4271  0001D4  9A9E               	bcf	3998,5,c	;volatile
  4272  0001D6                     i2l92:
  4273  0001D6  C04A  FFF5         	movff	??_isr+15,tablat
  4274  0001DA  C049  FFF8         	movff	??_isr+14,tblptru
  4275  0001DE  C048  FFF7         	movff	??_isr+13,tblptrh
  4276  0001E2  C047  FFF6         	movff	??_isr+12,tblptrl
  4277  0001E6  C046  FFF4         	movff	??_isr+11,prodh
  4278  0001EA  C045  FFF3         	movff	??_isr+10,prodl
  4279  0001EE  C044  FFDA         	movff	??_isr+9,fsr2h
  4280  0001F2  C043  FFD9         	movff	??_isr+8,fsr2l
  4281  0001F6  C042  FFE2         	movff	??_isr+7,fsr1h
  4282  0001FA  C041  FFE1         	movff	??_isr+6,fsr1l
  4283  0001FE  C040  FFEA         	movff	??_isr+5,fsr0h
  4284  000202  C03F  FFE9         	movff	??_isr+4,fsr0l
  4285  000206  C03E  FFFB         	movff	??_isr+3,pclatu
  4286  00020A  C03D  FFFA         	movff	??_isr+2,pclath
  4287  00020E  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4288  000210  0011               	retfie		f
  4289  000212                     __end_of_isr:
  4290                           	opt stack 0
  4291                           pclatu	equ	0xFFB
  4292                           pclath	equ	0xFFA
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           postinc0	equ	0xFEE
  4301                           fsr0h	equ	0xFEA
  4302                           fsr0l	equ	0xFE9
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function _putsUSART *****************
  4313 ;; Defined at:
  4314 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uputs.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  data            2    1[COMRAM] PTR unsigned char 
  4317 ;;		 -> STR_2(12), STR_1(9), 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4329 ;;      Params:         2       0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0
  4332 ;;      Totals:         2       0       0       0       0       0       0
  4333 ;;Total ram usage:        2 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    1
  4336 ;; This function calls:
  4337 ;;		_WriteUSART
  4338 ;; This function is called by:
  4339 ;;		_isr
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           	psect	text29
  4344  0017FA                     __ptext29:
  4345                           	opt stack 0
  4346  0017FA                     _putsUSART:
  4347                           	opt stack 23
  4348  0017FA                     i2l569:
  4349  0017FA  A2AC               	btfss	4012,1,c	;volatile
  4350  0017FC  D7FE               	goto	i2l569
  4351  0017FE  C002  FFF6         	movff	putsUSART@data,tblptrl
  4352  001802  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  4353  001806                     	if	0	;tblptru may be non-zero
  4354  001806                     	endif
  4355  001806                     	if	0	;tblptru may be non-zero
  4356  001806                     	endif
  4357  001806  0008               	tblrd		*
  4358  001808  50F5               	movf	tablat,w,c
  4359  00180A  EC77  F00C         	call	_WriteUSART
  4360  00180E  C002  FFF6         	movff	putsUSART@data,tblptrl
  4361  001812  C003  FFF7         	movff	putsUSART@data+1,tblptrh
  4362  001816  4A02               	infsnz	putsUSART@data,f,c
  4363  001818  2A03               	incf	putsUSART@data+1,f,c
  4364  00181A                     	if	0	;tblptru may be non-zero
  4365  00181A                     	endif
  4366  00181A                     	if	0	;tblptru may be non-zero
  4367  00181A                     	endif
  4368  00181A  0008               	tblrd		*
  4369  00181C  50F5               	movf	tablat,w,c
  4370  00181E  0900               	iorlw	0
  4371  001820  B4D8               	btfsc	status,2,c
  4372  001822  0012               	return	
  4373  001824  D7EA               	goto	i2l569
  4374  001826                     __end_of_putsUSART:
  4375                           	opt stack 0
  4376                           pclatu	equ	0xFFB
  4377                           pclath	equ	0xFFA
  4378                           tblptru	equ	0xFF8
  4379                           tblptrh	equ	0xFF7
  4380                           tblptrl	equ	0xFF6
  4381                           tablat	equ	0xFF5
  4382                           prodh	equ	0xFF4
  4383                           prodl	equ	0xFF3
  4384                           intcon	equ	0xFF2
  4385                           postinc0	equ	0xFEE
  4386                           fsr0h	equ	0xFEA
  4387                           fsr0l	equ	0xFE9
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1h	equ	0xFE2
  4391                           fsr1l	equ	0xFE1
  4392                           indf2	equ	0xFDF
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397 ;; *************** function _WriteUSART *****************
  4398 ;; Defined at:
  4399 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uwrite.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  data            1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  data            1    0[COMRAM] unsigned char 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  1    wreg      void 
  4406 ;; Registers used:
  4407 ;;		wreg
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4413 ;;      Params:         0       0       0       0       0       0       0
  4414 ;;      Locals:         1       0       0       0       0       0       0
  4415 ;;      Temps:          0       0       0       0       0       0       0
  4416 ;;      Totals:         1       0       0       0       0       0       0
  4417 ;;Total ram usage:        1 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_isr
  4423 ;;		_putsUSART
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text30
  4428  0018EE                     __ptext30:
  4429                           	opt stack 0
  4430  0018EE                     _WriteUSART:
  4431                           	opt stack 23
  4432                           
  4433                           ;incstack = 0
  4434                           ;WriteUSART@data stored from wreg
  4435  0018EE  6E01               	movwf	WriteUSART@data,c
  4436  0018F0  ACAC               	btfss	4012,6,c	;volatile
  4437  0018F2  D003               	goto	i2l1673
  4438  0018F4  90AC               	bcf	4012,0,c	;volatile
  4439  0018F6  B25E               	btfsc	_USART_Status,1,c
  4440  0018F8  80AC               	bsf	4012,0,c	;volatile
  4441  0018FA                     i2l1673:
  4442  0018FA  C001  FFAD         	movff	WriteUSART@data,4013	;volatile
  4443  0018FE  0012               	return		;funcret
  4444  001900                     __end_of_WriteUSART:
  4445                           	opt stack 0
  4446                           pclatu	equ	0xFFB
  4447                           pclath	equ	0xFFA
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           postinc0	equ	0xFEE
  4456                           fsr0h	equ	0xFEA
  4457                           fsr0l	equ	0xFE9
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           fsr2h	equ	0xFDA
  4464                           fsr2l	equ	0xFD9
  4465                           status	equ	0xFD8
  4466                           
  4467 ;; *************** function _SetSpeedRight *****************
  4468 ;; Defined at:
  4469 ;;		line 27 in file "serial.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  lecture         1    wreg     unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  lecture         1    3[COMRAM] unsigned char 
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, status,2, status,0, cstack
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4483 ;;      Params:         0       0       0       0       0       0       0
  4484 ;;      Locals:         1       0       0       0       0       0       0
  4485 ;;      Temps:          0       0       0       0       0       0       0
  4486 ;;      Totals:         1       0       0       0       0       0       0
  4487 ;;Total ram usage:        1 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; Hardware stack levels required when called:    1
  4490 ;; This function calls:
  4491 ;;		_ConvertPicSpeed
  4492 ;; This function is called by:
  4493 ;;		_isr
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           	psect	text31
  4498  001900                     __ptext31:
  4499                           	opt stack 0
  4500  001900                     _SetSpeedRight:
  4501                           	opt stack 23
  4502                           
  4503                           ;incstack = 0
  4504                           ;SetSpeedRight@lecture stored from wreg
  4505  001900  6E04               	movwf	SetSpeedRight@lecture,c
  4506                           
  4507                           ;serial.c: 28: SpeedRight=ConvertPicSpeed(lecture);
  4508  001902  5004               	movf	SetSpeedRight@lecture,w,c
  4509  001904  EC9B  F006         	call	_ConvertPicSpeed
  4510  001908  C001  F052         	movff	?_ConvertPicSpeed,_SpeedRight
  4511  00190C  C002  F053         	movff	?_ConvertPicSpeed+1,_SpeedRight+1
  4512  001910  0012               	return		;funcret
  4513  001912                     __end_of_SetSpeedRight:
  4514                           	opt stack 0
  4515                           pclatu	equ	0xFFB
  4516                           pclath	equ	0xFFA
  4517                           tblptru	equ	0xFF8
  4518                           tblptrh	equ	0xFF7
  4519                           tblptrl	equ	0xFF6
  4520                           tablat	equ	0xFF5
  4521                           prodh	equ	0xFF4
  4522                           prodl	equ	0xFF3
  4523                           intcon	equ	0xFF2
  4524                           postinc0	equ	0xFEE
  4525                           fsr0h	equ	0xFEA
  4526                           fsr0l	equ	0xFE9
  4527                           wreg	equ	0xFE8
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           indf2	equ	0xFDF
  4532                           fsr2h	equ	0xFDA
  4533                           fsr2l	equ	0xFD9
  4534                           status	equ	0xFD8
  4535                           
  4536 ;; *************** function _SetSpeedLeft *****************
  4537 ;; Defined at:
  4538 ;;		line 30 in file "serial.c"
  4539 ;; Parameters:    Size  Location     Type
  4540 ;;  lecture         1    wreg     unsigned char 
  4541 ;; Auto vars:     Size  Location     Type
  4542 ;;  lecture         1    3[COMRAM] unsigned char 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  1    wreg      void 
  4545 ;; Registers used:
  4546 ;;		wreg, status,2, status,0, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 0/0
  4549 ;;		On exit  : 0/0
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4552 ;;      Params:         0       0       0       0       0       0       0
  4553 ;;      Locals:         1       0       0       0       0       0       0
  4554 ;;      Temps:          0       0       0       0       0       0       0
  4555 ;;      Totals:         1       0       0       0       0       0       0
  4556 ;;Total ram usage:        1 bytes
  4557 ;; Hardware stack levels used:    1
  4558 ;; Hardware stack levels required when called:    1
  4559 ;; This function calls:
  4560 ;;		_ConvertPicSpeed
  4561 ;; This function is called by:
  4562 ;;		_isr
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text32
  4567  001912                     __ptext32:
  4568                           	opt stack 0
  4569  001912                     _SetSpeedLeft:
  4570                           	opt stack 23
  4571                           
  4572                           ;incstack = 0
  4573                           ;SetSpeedLeft@lecture stored from wreg
  4574  001912  6E04               	movwf	SetSpeedLeft@lecture,c
  4575                           
  4576                           ;serial.c: 31: SpeedLeft=ConvertPicSpeed(lecture);
  4577  001914  5004               	movf	SetSpeedLeft@lecture,w,c
  4578  001916  EC9B  F006         	call	_ConvertPicSpeed
  4579  00191A  C001  F050         	movff	?_ConvertPicSpeed,_SpeedLeft
  4580  00191E  C002  F051         	movff	?_ConvertPicSpeed+1,_SpeedLeft+1
  4581  001922  0012               	return		;funcret
  4582  001924                     __end_of_SetSpeedLeft:
  4583                           	opt stack 0
  4584                           pclatu	equ	0xFFB
  4585                           pclath	equ	0xFFA
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           postinc0	equ	0xFEE
  4594                           fsr0h	equ	0xFEA
  4595                           fsr0l	equ	0xFE9
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1h	equ	0xFE2
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function _ConvertPicSpeed *****************
  4606 ;; Defined at:
  4607 ;;		line 41 in file "serial.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  velocity        1    wreg     unsigned char 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  velocity        1    2[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  2    0[COMRAM] int 
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4621 ;;      Params:         2       0       0       0       0       0       0
  4622 ;;      Locals:         1       0       0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0
  4624 ;;      Totals:         3       0       0       0       0       0       0
  4625 ;;Total ram usage:        3 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_SetSpeedRight
  4631 ;;		_SetSpeedLeft
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text33
  4636  000D36                     __ptext33:
  4637                           	opt stack 0
  4638  000D36                     _ConvertPicSpeed:
  4639                           	opt stack 23
  4640                           
  4641                           ;incstack = 0
  4642                           ;ConvertPicSpeed@velocity stored from wreg
  4643  000D36  6E03               	movwf	ConvertPicSpeed@velocity,c
  4644                           
  4645                           ;serial.c: 42: switch(velocity){
  4646  000D38  D03C               	goto	i2l2939
  4647  000D3A                     i2l2865:
  4648                           
  4649                           ;serial.c: 44: return -100;
  4650  000D3A  0EFF               	movlw	255
  4651  000D3C  6E02               	movwf	?_ConvertPicSpeed+1,c
  4652  000D3E  0E9C               	movlw	156
  4653  000D40  6E01               	movwf	?_ConvertPicSpeed,c
  4654                           
  4655                           ;serial.c: 45: break;
  4656  000D42  0012               	return	
  4657  000D44                     i2l2871:
  4658                           
  4659                           ;serial.c: 47: return -80;
  4660  000D44  0EFF               	movlw	255
  4661  000D46  6E02               	movwf	?_ConvertPicSpeed+1,c
  4662  000D48  0EB0               	movlw	176
  4663  000D4A  6E01               	movwf	?_ConvertPicSpeed,c
  4664                           
  4665                           ;serial.c: 48: break;
  4666  000D4C  0012               	return	
  4667  000D4E                     i2l2877:
  4668                           
  4669                           ;serial.c: 50: return -60;
  4670  000D4E  0EFF               	movlw	255
  4671  000D50  6E02               	movwf	?_ConvertPicSpeed+1,c
  4672  000D52  0EC4               	movlw	196
  4673  000D54  6E01               	movwf	?_ConvertPicSpeed,c
  4674                           
  4675                           ;serial.c: 51: break;
  4676  000D56  0012               	return	
  4677  000D58                     i2l2883:
  4678                           
  4679                           ;serial.c: 53: return -40;
  4680  000D58  0EFF               	movlw	255
  4681  000D5A  6E02               	movwf	?_ConvertPicSpeed+1,c
  4682  000D5C  0ED8               	movlw	216
  4683  000D5E  6E01               	movwf	?_ConvertPicSpeed,c
  4684                           
  4685                           ;serial.c: 54: break;
  4686  000D60  0012               	return	
  4687  000D62                     i2l2889:
  4688                           
  4689                           ;serial.c: 56: return -20;
  4690  000D62  0EFF               	movlw	255
  4691  000D64  6E02               	movwf	?_ConvertPicSpeed+1,c
  4692  000D66  0EEC               	movlw	236
  4693  000D68  6E01               	movwf	?_ConvertPicSpeed,c
  4694                           
  4695                           ;serial.c: 57: break;
  4696  000D6A  0012               	return	
  4697  000D6C                     i2l2895:
  4698                           
  4699                           ;serial.c: 59: return 0;
  4700  000D6C  0E00               	movlw	0
  4701  000D6E  6E02               	movwf	?_ConvertPicSpeed+1,c
  4702  000D70  0E00               	movlw	0
  4703  000D72  6E01               	movwf	?_ConvertPicSpeed,c
  4704                           
  4705                           ;serial.c: 60: break;
  4706  000D74  0012               	return	
  4707  000D76                     i2l2901:
  4708                           
  4709                           ;serial.c: 62: return 20;
  4710  000D76  0E00               	movlw	0
  4711  000D78  6E02               	movwf	?_ConvertPicSpeed+1,c
  4712  000D7A  0E14               	movlw	20
  4713  000D7C  6E01               	movwf	?_ConvertPicSpeed,c
  4714                           
  4715                           ;serial.c: 63: break;
  4716  000D7E  0012               	return	
  4717  000D80                     i2l2907:
  4718                           
  4719                           ;serial.c: 65: return 40;
  4720  000D80  0E00               	movlw	0
  4721  000D82  6E02               	movwf	?_ConvertPicSpeed+1,c
  4722  000D84  0E28               	movlw	40
  4723  000D86  6E01               	movwf	?_ConvertPicSpeed,c
  4724                           
  4725                           ;serial.c: 66: break;
  4726  000D88  0012               	return	
  4727  000D8A                     i2l2913:
  4728                           
  4729                           ;serial.c: 68: return 60;
  4730  000D8A  0E00               	movlw	0
  4731  000D8C  6E02               	movwf	?_ConvertPicSpeed+1,c
  4732  000D8E  0E3C               	movlw	60
  4733  000D90  6E01               	movwf	?_ConvertPicSpeed,c
  4734                           
  4735                           ;serial.c: 69: break;
  4736  000D92  0012               	return	
  4737  000D94                     i2l2919:
  4738                           
  4739                           ;serial.c: 71: return 80;
  4740  000D94  0E00               	movlw	0
  4741  000D96  6E02               	movwf	?_ConvertPicSpeed+1,c
  4742  000D98  0E50               	movlw	80
  4743  000D9A  6E01               	movwf	?_ConvertPicSpeed,c
  4744                           
  4745                           ;serial.c: 72: break;
  4746  000D9C  0012               	return	
  4747  000D9E                     i2l2925:
  4748                           
  4749                           ;serial.c: 74: return 100;
  4750  000D9E  0E00               	movlw	0
  4751  000DA0  6E02               	movwf	?_ConvertPicSpeed+1,c
  4752  000DA2  0E64               	movlw	100
  4753  000DA4  6E01               	movwf	?_ConvertPicSpeed,c
  4754                           
  4755                           ;serial.c: 75: break;
  4756  000DA6  0012               	return	
  4757  000DA8                     i2l2931:
  4758                           
  4759                           ;serial.c: 77: return 0;
  4760  000DA8  0E00               	movlw	0
  4761  000DAA  6E02               	movwf	?_ConvertPicSpeed+1,c
  4762  000DAC  0E00               	movlw	0
  4763  000DAE  6E01               	movwf	?_ConvertPicSpeed,c
  4764                           
  4765                           ;serial.c: 79: }
  4766                           
  4767                           ;serial.c: 78: break;
  4768  000DB0  0012               	return	
  4769  000DB2                     i2l2939:
  4770  000DB2  5003               	movf	ConvertPicSpeed@velocity,w,c
  4771                           
  4772                           ; Switch size 1, requested type "space"
  4773                           ; Number of cases is 11, Range of values is 48 to 97
  4774                           ; switch strategies available:
  4775                           ; Name         Instructions Cycles
  4776                           ; simple_byte           34    18 (average)
  4777                           ;	Chosen strategy is simple_byte
  4778  000DB4  0A30               	xorlw	48	; case 48
  4779  000DB6  B4D8               	btfsc	status,2,c
  4780  000DB8  D7C0               	goto	i2l2865
  4781  000DBA  0A01               	xorlw	1	; case 49
  4782  000DBC  B4D8               	btfsc	status,2,c
  4783  000DBE  D7C2               	goto	i2l2871
  4784  000DC0  0A03               	xorlw	3	; case 50
  4785  000DC2  B4D8               	btfsc	status,2,c
  4786  000DC4  D7C4               	goto	i2l2877
  4787  000DC6  0A01               	xorlw	1	; case 51
  4788  000DC8  B4D8               	btfsc	status,2,c
  4789  000DCA  D7C6               	goto	i2l2883
  4790  000DCC  0A07               	xorlw	7	; case 52
  4791  000DCE  B4D8               	btfsc	status,2,c
  4792  000DD0  D7C8               	goto	i2l2889
  4793  000DD2  0A01               	xorlw	1	; case 53
  4794  000DD4  B4D8               	btfsc	status,2,c
  4795  000DD6  D7CA               	goto	i2l2895
  4796  000DD8  0A03               	xorlw	3	; case 54
  4797  000DDA  B4D8               	btfsc	status,2,c
  4798  000DDC  D7CC               	goto	i2l2901
  4799  000DDE  0A01               	xorlw	1	; case 55
  4800  000DE0  B4D8               	btfsc	status,2,c
  4801  000DE2  D7CE               	goto	i2l2907
  4802  000DE4  0A0F               	xorlw	15	; case 56
  4803  000DE6  B4D8               	btfsc	status,2,c
  4804  000DE8  D7D0               	goto	i2l2913
  4805  000DEA  0A01               	xorlw	1	; case 57
  4806  000DEC  B4D8               	btfsc	status,2,c
  4807  000DEE  D7D2               	goto	i2l2919
  4808  000DF0  0A58               	xorlw	88	; case 97
  4809  000DF2  B4D8               	btfsc	status,2,c
  4810  000DF4  D7D4               	goto	i2l2925
  4811  000DF6  D7D8               	goto	i2l2931
  4812  000DF8                     __end_of_ConvertPicSpeed:
  4813                           	opt stack 0
  4814                           pclatu	equ	0xFFB
  4815                           pclath	equ	0xFFA
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           postinc0	equ	0xFEE
  4824                           fsr0h	equ	0xFEA
  4825                           fsr0l	equ	0xFE9
  4826                           wreg	equ	0xFE8
  4827                           postdec1	equ	0xFE5
  4828                           fsr1h	equ	0xFE2
  4829                           fsr1l	equ	0xFE1
  4830                           indf2	equ	0xFDF
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _SetDistanceRight *****************
  4836 ;; Defined at:
  4837 ;;		line 62 in file "ADC.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  lecture         2   53[COMRAM] unsigned int 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      void 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4851 ;;      Params:         2       0       0       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0
  4853 ;;      Temps:          2       0       0       0       0       0       0
  4854 ;;      Totals:         4       0       0       0       0       0       0
  4855 ;;Total ram usage:        4 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    4
  4858 ;; This function calls:
  4859 ;;		_ShowLecturesInLCD
  4860 ;;		___ftadd
  4861 ;;		___ftmul
  4862 ;;		___fttol
  4863 ;;		___lwtoft
  4864 ;; This function is called by:
  4865 ;;		_isr
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text34
  4870  001148                     __ptext34:
  4871                           	opt stack 0
  4872  001148                     _SetDistanceRight:
  4873                           	opt stack 20
  4874                           
  4875                           ;ADC.c: 63: ShowLecturesInLCD ();
  4876                           
  4877                           ;incstack = 0
  4878  001148  EC89  F009         	call	_ShowLecturesInLCD	;wreg free
  4879                           
  4880                           ;ADC.c: 64: DistanceRight=5+(1023-lecture)*0.042;
  4881  00114C  0E00               	movlw	0
  4882  00114E  6E1E               	movwf	___ftadd@f2,c
  4883  001150  0EA0               	movlw	160
  4884  001152  6E1F               	movwf	___ftadd@f2+1,c
  4885  001154  0E40               	movlw	64
  4886  001156  6E20               	movwf	___ftadd@f2+2,c
  4887  001158  0E08               	movlw	8
  4888  00115A  6E0F               	movwf	___ftmul@f2,c
  4889  00115C  0E2C               	movlw	44
  4890  00115E  6E10               	movwf	___ftmul@f2+1,c
  4891  001160  0E3D               	movlw	61
  4892  001162  6E11               	movwf	___ftmul@f2+2,c
  4893  001164  C036  F038         	movff	SetDistanceRight@lecture,??_SetDistanceRight
  4894  001168  C037  F039         	movff	SetDistanceRight@lecture+1,??_SetDistanceRight+1
  4895  00116C  1E38               	comf	??_SetDistanceRight,f,c
  4896  00116E  1E39               	comf	??_SetDistanceRight+1,f,c
  4897  001170  4A38               	infsnz	??_SetDistanceRight,f,c
  4898  001172  2A39               	incf	??_SetDistanceRight+1,f,c
  4899  001174  0EFF               	movlw	255
  4900  001176  2438               	addwf	??_SetDistanceRight,w,c
  4901  001178  6E09               	movwf	___lwtoft@c,c
  4902  00117A  0E03               	movlw	3
  4903  00117C  2039               	addwfc	??_SetDistanceRight+1,w,c
  4904  00117E  6E0A               	movwf	___lwtoft@c+1,c
  4905  001180  EC3A  F00C         	call	___lwtoft	;wreg free
  4906  001184  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  4907  001188  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  4908  00118C  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  4909  001190  ECB2  F005         	call	___ftmul	;wreg free
  4910  001194  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  4911  001198  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  4912  00119C  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  4913  0011A0  EC1F  F003         	call	___ftadd	;wreg free
  4914  0011A4  C01B  F027         	movff	?___ftadd,___fttol@f1
  4915  0011A8  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  4916  0011AC  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  4917  0011B0  EC38  F005         	call	___fttol	;wreg free
  4918  0011B4  C027  F0A4         	movff	?___fttol,_DistanceRight
  4919  0011B8  C028  F0A5         	movff	?___fttol+1,_DistanceRight+1
  4920  0011BC  0012               	return		;funcret
  4921  0011BE                     __end_of_SetDistanceRight:
  4922                           	opt stack 0
  4923                           pclatu	equ	0xFFB
  4924                           pclath	equ	0xFFA
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodh	equ	0xFF4
  4930                           prodl	equ	0xFF3
  4931                           intcon	equ	0xFF2
  4932                           postinc0	equ	0xFEE
  4933                           fsr0h	equ	0xFEA
  4934                           fsr0l	equ	0xFE9
  4935                           wreg	equ	0xFE8
  4936                           postdec1	equ	0xFE5
  4937                           fsr1h	equ	0xFE2
  4938                           fsr1l	equ	0xFE1
  4939                           indf2	equ	0xFDF
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _ShowLecturesInLCD *****************
  4945 ;; Defined at:
  4946 ;;		line 91 in file "ADC.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4960 ;;      Params:         0       0       0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    3
  4967 ;; This function calls:
  4968 ;;		_LCDGotoXY
  4969 ;;		_LCDWriteInt
  4970 ;;		_LCDWriteString
  4971 ;; This function is called by:
  4972 ;;		_SetDistanceRight
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text35
  4977  001312                     __ptext35:
  4978                           	opt stack 0
  4979  001312                     _ShowLecturesInLCD:
  4980                           	opt stack 20
  4981                           
  4982                           ;ADC.c: 94: LCDGotoXY(0,0);
  4983                           
  4984                           ;incstack = 0
  4985  001312  0E00               	movlw	0
  4986  001314  6E09               	movwf	LCDGotoXY@y,c
  4987  001316  0E00               	movlw	0
  4988  001318  ECCB  F00A         	call	_LCDGotoXY
  4989                           
  4990                           ;ADC.c: 95: LCDWriteString("Right-Front-Left");
  4991  00131C  0E12               	movlw	low STR_3
  4992  00131E  6E09               	movwf	LCDWriteString@msg,c
  4993  001320  0E06               	movlw	high STR_3
  4994  001322  6E0A               	movwf	LCDWriteString@msg+1,c
  4995  001324  EC9C  F007         	call	_LCDWriteString	;wreg free
  4996                           
  4997                           ;ADC.c: 97: LCDGotoXY(0,1);
  4998  001328  0E01               	movlw	1
  4999  00132A  6E09               	movwf	LCDGotoXY@y,c
  5000  00132C  0E00               	movlw	0
  5001  00132E  ECCB  F00A         	call	_LCDGotoXY
  5002                           
  5003                           ;ADC.c: 98: LCDWriteInt(DistanceRight, 3);
  5004  001332  C0A4  F009         	movff	_DistanceRight,LCDWriteInt@val
  5005  001336  C0A5  F00A         	movff	_DistanceRight+1,LCDWriteInt@val+1
  5006  00133A  0E03               	movlw	3
  5007  00133C  6E0B               	movwf	LCDWriteInt@field_length,c
  5008  00133E  ECB9  F004         	call	_LCDWriteInt	;wreg free
  5009                           
  5010                           ;ADC.c: 100: LCDGotoXY(6,1);
  5011  001342  0E01               	movlw	1
  5012  001344  6E09               	movwf	LCDGotoXY@y,c
  5013  001346  0E06               	movlw	6
  5014  001348  ECCB  F00A         	call	_LCDGotoXY
  5015                           
  5016                           ;ADC.c: 101: LCDWriteInt(DistanceCentral, 3);
  5017  00134C  C0A0  F009         	movff	_DistanceCentral,LCDWriteInt@val
  5018  001350  C0A1  F00A         	movff	_DistanceCentral+1,LCDWriteInt@val+1
  5019  001354  0E03               	movlw	3
  5020  001356  6E0B               	movwf	LCDWriteInt@field_length,c
  5021  001358  ECB9  F004         	call	_LCDWriteInt	;wreg free
  5022                           
  5023                           ;ADC.c: 103: LCDGotoXY(12,1);
  5024  00135C  0E01               	movlw	1
  5025  00135E  6E09               	movwf	LCDGotoXY@y,c
  5026  001360  0E0C               	movlw	12
  5027  001362  ECCB  F00A         	call	_LCDGotoXY
  5028                           
  5029                           ;ADC.c: 104: LCDWriteInt(DistanceLeft,3);
  5030  001366  C0A2  F009         	movff	_DistanceLeft,LCDWriteInt@val
  5031  00136A  C0A3  F00A         	movff	_DistanceLeft+1,LCDWriteInt@val+1
  5032  00136E  0E03               	movlw	3
  5033  001370  6E0B               	movwf	LCDWriteInt@field_length,c
  5034  001372  ECB9  F004         	call	_LCDWriteInt	;wreg free
  5035  001376  0012               	return		;funcret
  5036  001378                     __end_of_ShowLecturesInLCD:
  5037                           	opt stack 0
  5038                           pclatu	equ	0xFFB
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           postinc0	equ	0xFEE
  5048                           fsr0h	equ	0xFEA
  5049                           fsr0l	equ	0xFE9
  5050                           wreg	equ	0xFE8
  5051                           postdec1	equ	0xFE5
  5052                           fsr1h	equ	0xFE2
  5053                           fsr1l	equ	0xFE1
  5054                           indf2	equ	0xFDF
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _LCDWriteString *****************
  5060 ;; Defined at:
  5061 ;;		line 254 in file "lcd_hd44780_pic16.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  msg             2    8[COMRAM] PTR const unsigned char 
  5064 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(2), 
  5065 ;;		 -> STR_4(17), STR_3(17), 
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;  cc              1   10[COMRAM] char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5077 ;;      Params:         2       0       0       0       0       0       0
  5078 ;;      Locals:         1       0       0       0       0       0       0
  5079 ;;      Temps:          0       0       0       0       0       0       0
  5080 ;;      Totals:         3       0       0       0       0       0       0
  5081 ;;Total ram usage:        3 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    2
  5084 ;; This function calls:
  5085 ;;		i2_LCDByte
  5086 ;; This function is called by:
  5087 ;;		_ShowLecturesInLCD
  5088 ;;		_WriteSpeedInLCD
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text36
  5093  000F38                     __ptext36:
  5094                           	opt stack 0
  5095  000F38                     _LCDWriteString:
  5096                           	opt stack 20
  5097                           
  5098                           ;lcd_hd44780_pic16.c: 284: while(*msg!='\0')
  5099                           
  5100                           ;incstack = 0
  5101  000F38  D03C               	goto	i2l2611
  5102  000F3A                     i2l2591:
  5103                           
  5104                           ;lcd_hd44780_pic16.c: 285: {
  5105                           ;lcd_hd44780_pic16.c: 287: if(*msg=='%')
  5106  000F3A  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  5107  000F3E  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  5108  000F42                     	if	0	;tblptru may be non-zero
  5109  000F42                     	endif
  5110  000F42                     	if	0	;tblptru may be non-zero
  5111  000F42                     	endif
  5112  000F42  0008               	tblrd		*
  5113  000F44  50F5               	movf	tablat,w,c
  5114  000F46  0A25               	xorlw	37
  5115  000F48  A4D8               	btfss	status,2,c
  5116  000F4A  D027               	goto	i2l2607
  5117                           
  5118                           ;lcd_hd44780_pic16.c: 288: {
  5119                           ;lcd_hd44780_pic16.c: 289: msg++;
  5120  000F4C  4A09               	infsnz	LCDWriteString@msg,f,c
  5121  000F4E  2A0A               	incf	LCDWriteString@msg+1,f,c
  5122                           
  5123                           ;lcd_hd44780_pic16.c: 290: int8_t cc=*msg-'0';
  5124  000F50  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  5125  000F54  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  5126  000F58                     	if	0	;tblptru may be non-zero
  5127  000F58                     	endif
  5128  000F58                     	if	0	;tblptru may be non-zero
  5129  000F58                     	endif
  5130  000F58  0008               	tblrd		*
  5131  000F5A  50F5               	movf	tablat,w,c
  5132  000F5C  0FD0               	addlw	208
  5133  000F5E  6E0B               	movwf	LCDWriteString@cc,c
  5134                           
  5135                           ;lcd_hd44780_pic16.c: 292: if(cc>=0 && cc<=7)
  5136  000F60  BE0B               	btfsc	LCDWriteString@cc,7,c
  5137  000F62  D00B               	goto	i2l2603
  5138  000F64  500B               	movf	LCDWriteString@cc,w,c
  5139  000F66  0A80               	xorlw	128
  5140  000F68  0F78               	addlw	-136
  5141  000F6A  B0D8               	btfsc	status,0,c
  5142  000F6C  D006               	goto	i2l2603
  5143                           
  5144                           ;lcd_hd44780_pic16.c: 293: {
  5145                           ;lcd_hd44780_pic16.c: 294: (LCDByte(cc,1));
  5146  000F6E  0E01               	movlw	1
  5147  000F70  6E04               	movwf	i2LCDByte@isdata,c
  5148  000F72  500B               	movf	LCDWriteString@cc,w,c
  5149  000F74  ECEB  F00A         	call	i2_LCDByte
  5150                           
  5151                           ;lcd_hd44780_pic16.c: 295: }
  5152  000F78  D01A               	goto	i2l2609
  5153  000F7A                     i2l2603:
  5154                           
  5155                           ;lcd_hd44780_pic16.c: 296: else
  5156                           ;lcd_hd44780_pic16.c: 297: {
  5157                           ;lcd_hd44780_pic16.c: 298: (LCDByte('%',1));
  5158  000F7A  0E01               	movlw	1
  5159  000F7C  6E04               	movwf	i2LCDByte@isdata,c
  5160  000F7E  0E25               	movlw	37
  5161  000F80  ECEB  F00A         	call	i2_LCDByte
  5162                           
  5163                           ;lcd_hd44780_pic16.c: 299: (LCDByte(*msg,1));
  5164  000F84  0E01               	movlw	1
  5165  000F86  6E04               	movwf	i2LCDByte@isdata,c
  5166  000F88  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  5167  000F8C  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  5168  000F90                     	if	0	;tblptru may be non-zero
  5169  000F90                     	endif
  5170  000F90                     	if	0	;tblptru may be non-zero
  5171  000F90                     	endif
  5172  000F90  0008               	tblrd		*
  5173  000F92  50F5               	movf	tablat,w,c
  5174  000F94  ECEB  F00A         	call	i2_LCDByte
  5175                           
  5176                           ;lcd_hd44780_pic16.c: 300: }
  5177                           ;lcd_hd44780_pic16.c: 301: }
  5178  000F98  D00A               	goto	i2l2609
  5179  000F9A                     i2l2607:
  5180                           
  5181                           ;lcd_hd44780_pic16.c: 302: else
  5182                           ;lcd_hd44780_pic16.c: 303: {
  5183                           ;lcd_hd44780_pic16.c: 304: (LCDByte(*msg,1));
  5184  000F9A  0E01               	movlw	1
  5185  000F9C  6E04               	movwf	i2LCDByte@isdata,c
  5186  000F9E  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  5187  000FA2  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  5188  000FA6                     	if	0	;tblptru may be non-zero
  5189  000FA6                     	endif
  5190  000FA6                     	if	0	;tblptru may be non-zero
  5191  000FA6                     	endif
  5192  000FA6  0008               	tblrd		*
  5193  000FA8  50F5               	movf	tablat,w,c
  5194  000FAA  ECEB  F00A         	call	i2_LCDByte
  5195  000FAE                     i2l2609:
  5196                           
  5197                           ;lcd_hd44780_pic16.c: 305: }
  5198                           ;lcd_hd44780_pic16.c: 306: msg++;
  5199  000FAE  4A09               	infsnz	LCDWriteString@msg,f,c
  5200  000FB0  2A0A               	incf	LCDWriteString@msg+1,f,c
  5201  000FB2                     i2l2611:
  5202  000FB2  C009  FFF6         	movff	LCDWriteString@msg,tblptrl
  5203  000FB6  C00A  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  5204  000FBA                     	if	0	;tblptru may be non-zero
  5205  000FBA                     	endif
  5206  000FBA                     	if	0	;tblptru may be non-zero
  5207  000FBA                     	endif
  5208  000FBA  0008               	tblrd		*
  5209  000FBC  50F5               	movf	tablat,w,c
  5210  000FBE  0900               	iorlw	0
  5211  000FC0  B4D8               	btfsc	status,2,c
  5212  000FC2  0012               	return	
  5213  000FC4  D7BA               	goto	i2l2591
  5214  000FC6                     __end_of_LCDWriteString:
  5215                           	opt stack 0
  5216                           pclatu	equ	0xFFB
  5217                           pclath	equ	0xFFA
  5218                           tblptru	equ	0xFF8
  5219                           tblptrh	equ	0xFF7
  5220                           tblptrl	equ	0xFF6
  5221                           tablat	equ	0xFF5
  5222                           prodh	equ	0xFF4
  5223                           prodl	equ	0xFF3
  5224                           intcon	equ	0xFF2
  5225                           postinc0	equ	0xFEE
  5226                           fsr0h	equ	0xFEA
  5227                           fsr0l	equ	0xFE9
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1h	equ	0xFE2
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           fsr2h	equ	0xFDA
  5234                           fsr2l	equ	0xFD9
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _LCDWriteInt *****************
  5238 ;; Defined at:
  5239 ;;		line 310 in file "lcd_hd44780_pic16.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  val             2    8[COMRAM] int 
  5242 ;;  field_length    1   10[COMRAM] char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  str             5   13[COMRAM] unsigned char [5]
  5245 ;;  i               2   20[COMRAM] int 
  5246 ;;  j               2   18[COMRAM] int 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5256 ;;      Params:         3       0       0       0       0       0       0
  5257 ;;      Locals:         9       0       0       0       0       0       0
  5258 ;;      Temps:          2       0       0       0       0       0       0
  5259 ;;      Totals:        14       0       0       0       0       0       0
  5260 ;;Total ram usage:       14 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    2
  5263 ;; This function calls:
  5264 ;;		___awdiv
  5265 ;;		___awmod
  5266 ;;		i2_LCDByte
  5267 ;; This function is called by:
  5268 ;;		_ShowLecturesInLCD
  5269 ;;		_WriteSpeedInLCD
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text37
  5274  000972                     __ptext37:
  5275                           	opt stack 0
  5276  000972                     _LCDWriteInt:
  5277                           	opt stack 20
  5278                           
  5279                           ;lcd_hd44780_pic16.c: 323: char str[5]={0,0,0,0,0};
  5280                           
  5281                           ;incstack = 0
  5282  000972  EE20  F0B8         	lfsr	2,LCDWriteInt@F4236
  5283  000976  EE10  F00E         	lfsr	1,LCDWriteInt@str
  5284  00097A  0E04               	movlw	4
  5285  00097C                     i2u145_41:
  5286  00097C  CFDB FFE3          	movff	plusw2,plusw1
  5287  000980  06E8               	decf	wreg,f,c
  5288  000982  E2FC               	bc	i2u145_41
  5289                           
  5290                           ;lcd_hd44780_pic16.c: 324: int i=4,j=0;
  5291  000984  0E00               	movlw	0
  5292  000986  6E16               	movwf	LCDWriteInt@i+1,c
  5293  000988  0E04               	movlw	4
  5294  00098A  6E15               	movwf	LCDWriteInt@i,c
  5295  00098C  0E00               	movlw	0
  5296  00098E  6E14               	movwf	LCDWriteInt@j+1,c
  5297  000990  0E00               	movlw	0
  5298  000992  6E13               	movwf	LCDWriteInt@j,c
  5299                           
  5300                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  5301  000994  AE0A               	btfss	LCDWriteInt@val+1,7,c
  5302  000996  D02D               	goto	i2l2631
  5303                           
  5304                           ;lcd_hd44780_pic16.c: 328: {
  5305                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  5306  000998  0E01               	movlw	1
  5307  00099A  6E04               	movwf	i2LCDByte@isdata,c
  5308  00099C  0E2D               	movlw	45
  5309  00099E  ECEB  F00A         	call	i2_LCDByte
  5310                           
  5311                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  5312  0009A2  6C09               	negf	LCDWriteInt@val,c
  5313  0009A4  1E0A               	comf	LCDWriteInt@val+1,f,c
  5314  0009A6  B0D8               	btfsc	status,0,c
  5315  0009A8  2A0A               	incf	LCDWriteInt@val+1,f,c
  5316                           
  5317                           ;lcd_hd44780_pic16.c: 331: }
  5318                           ;lcd_hd44780_pic16.c: 333: while(val)
  5319  0009AA  D023               	goto	i2l2631
  5320  0009AC                     i2l2625:
  5321                           
  5322                           ;lcd_hd44780_pic16.c: 334: {
  5323                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  5324  0009AC  0E0E               	movlw	low LCDWriteInt@str
  5325  0009AE  2415               	addwf	LCDWriteInt@i,w,c
  5326  0009B0  6ED9               	movwf	fsr2l,c
  5327  0009B2  0E00               	movlw	high LCDWriteInt@str
  5328  0009B4  2016               	addwfc	LCDWriteInt@i+1,w,c
  5329  0009B6  6EDA               	movwf	fsr2h,c
  5330  0009B8  C009  F001         	movff	LCDWriteInt@val,___awmod@dividend
  5331  0009BC  C00A  F002         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  5332  0009C0  0E00               	movlw	0
  5333  0009C2  6E04               	movwf	___awmod@divisor+1,c
  5334  0009C4  0E0A               	movlw	10
  5335  0009C6  6E03               	movwf	___awmod@divisor,c
  5336  0009C8  EC51  F009         	call	___awmod	;wreg free
  5337  0009CC  5001               	movf	?___awmod,w,c
  5338  0009CE  6EDF               	movwf	indf2,c
  5339                           
  5340                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  5341  0009D0  C009  F001         	movff	LCDWriteInt@val,___awdiv@dividend
  5342  0009D4  C00A  F002         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  5343  0009D8  0E00               	movlw	0
  5344  0009DA  6E04               	movwf	___awdiv@divisor+1,c
  5345  0009DC  0E0A               	movlw	10
  5346  0009DE  6E03               	movwf	___awdiv@divisor,c
  5347  0009E0  EC26  F008         	call	___awdiv	;wreg free
  5348  0009E4  C001  F009         	movff	?___awdiv,LCDWriteInt@val
  5349  0009E8  C002  F00A         	movff	?___awdiv+1,LCDWriteInt@val+1
  5350                           
  5351                           ;lcd_hd44780_pic16.c: 337: i--;
  5352  0009EC  0615               	decf	LCDWriteInt@i,f,c
  5353  0009EE  A0D8               	btfss	status,0,c
  5354  0009F0  0616               	decf	LCDWriteInt@i+1,f,c
  5355  0009F2                     i2l2631:
  5356  0009F2  5009               	movf	LCDWriteInt@val,w,c
  5357  0009F4  100A               	iorwf	LCDWriteInt@val+1,w,c
  5358  0009F6  A4D8               	btfss	status,2,c
  5359  0009F8  D7D9               	goto	i2l2625
  5360                           
  5361                           ;lcd_hd44780_pic16.c: 338: }
  5362                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  5363  0009FA  280B               	incf	LCDWriteInt@field_length,w,c
  5364  0009FC  B4D8               	btfsc	status,2,c
  5365  0009FE  D003               	goto	i2l2639
  5366  000A00  D00C               	goto	i2l2641
  5367  000A02                     i2l2637:
  5368  000A02  4A13               	infsnz	LCDWriteInt@j,f,c
  5369  000A04  2A14               	incf	LCDWriteInt@j+1,f,c
  5370  000A06                     i2l2639:
  5371  000A06  0E0E               	movlw	low LCDWriteInt@str
  5372  000A08  2413               	addwf	LCDWriteInt@j,w,c
  5373  000A0A  6ED9               	movwf	fsr2l,c
  5374  000A0C  0E00               	movlw	high LCDWriteInt@str
  5375  000A0E  2014               	addwfc	LCDWriteInt@j+1,w,c
  5376  000A10  6EDA               	movwf	fsr2h,c
  5377  000A12  50DF               	movf	indf2,w,c
  5378  000A14  A4D8               	btfss	status,2,c
  5379  000A16  D010               	goto	i2l2643
  5380  000A18  D7F4               	goto	i2l2637
  5381  000A1A                     i2l2641:
  5382                           
  5383                           ;lcd_hd44780_pic16.c: 341: else
  5384                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  5385  000A1A  C00B  F00C         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  5386  000A1E  6A0D               	clrf	(??_LCDWriteInt+1)& (0+255),c
  5387  000A20  BE0C               	btfsc	??_LCDWriteInt& (0+255),7,c
  5388  000A22  060D               	decf	(??_LCDWriteInt+1)& (0+255),f,c
  5389  000A24  1E0C               	comf	??_LCDWriteInt,f,c
  5390  000A26  1E0D               	comf	??_LCDWriteInt+1,f,c
  5391  000A28  4A0C               	infsnz	??_LCDWriteInt,f,c
  5392  000A2A  2A0D               	incf	??_LCDWriteInt+1,f,c
  5393  000A2C  0E05               	movlw	5
  5394  000A2E  240C               	addwf	??_LCDWriteInt,w,c
  5395  000A30  6E13               	movwf	LCDWriteInt@j,c
  5396  000A32  0E00               	movlw	0
  5397  000A34  200D               	addwfc	??_LCDWriteInt+1,w,c
  5398  000A36  6E14               	movwf	LCDWriteInt@j+1,c
  5399  000A38                     i2l2643:
  5400                           
  5401                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  5402  000A38  C013  F015         	movff	LCDWriteInt@j,LCDWriteInt@i
  5403  000A3C  C014  F016         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  5404  000A40  BE16               	btfsc	LCDWriteInt@i+1,7,c
  5405  000A42  D006               	goto	i2l2647
  5406  000A44  5016               	movf	LCDWriteInt@i+1,w,c
  5407  000A46  E113               	bnz	i2l321
  5408  000A48  0E05               	movlw	5
  5409  000A4A  5C15               	subwf	LCDWriteInt@i,w,c
  5410  000A4C  B0D8               	btfsc	status,0,c
  5411  000A4E  0012               	return	
  5412  000A50                     i2l2647:
  5413                           
  5414                           ;lcd_hd44780_pic16.c: 346: {
  5415                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  5416  000A50  0E01               	movlw	1
  5417  000A52  6E04               	movwf	i2LCDByte@isdata,c
  5418  000A54  0E0E               	movlw	low LCDWriteInt@str
  5419  000A56  2415               	addwf	LCDWriteInt@i,w,c
  5420  000A58  6ED9               	movwf	fsr2l,c
  5421  000A5A  0E00               	movlw	high LCDWriteInt@str
  5422  000A5C  2016               	addwfc	LCDWriteInt@i+1,w,c
  5423  000A5E  6EDA               	movwf	fsr2h,c
  5424  000A60  50DF               	movf	indf2,w,c
  5425  000A62  0F30               	addlw	48
  5426  000A64  ECEB  F00A         	call	i2_LCDByte
  5427  000A68  4A15               	infsnz	LCDWriteInt@i,f,c
  5428  000A6A  2A16               	incf	LCDWriteInt@i+1,f,c
  5429  000A6C  D7E9               	goto	L3
  5430  000A6E                     i2l321:
  5431  000A6E  0012               	return		;funcret
  5432  000A70                     __end_of_LCDWriteInt:
  5433                           	opt stack 0
  5434                           pclatu	equ	0xFFB
  5435                           pclath	equ	0xFFA
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           postinc0	equ	0xFEE
  5444                           fsr0h	equ	0xFEA
  5445                           fsr0l	equ	0xFE9
  5446                           wreg	equ	0xFE8
  5447                           postdec1	equ	0xFE5
  5448                           plusw1	equ	0xFE3
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           plusw2	equ	0xFDB
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function ___awmod *****************
  5458 ;; Defined at:
  5459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  dividend        2    0[COMRAM] int 
  5462 ;;  divisor         2    2[COMRAM] int 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  sign            1    5[COMRAM] unsigned char 
  5465 ;;  counter         1    4[COMRAM] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  2    0[COMRAM] int 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5475 ;;      Params:         4       0       0       0       0       0       0
  5476 ;;      Locals:         2       0       0       0       0       0       0
  5477 ;;      Temps:          0       0       0       0       0       0       0
  5478 ;;      Totals:         6       0       0       0       0       0       0
  5479 ;;Total ram usage:        6 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; This function calls:
  5482 ;;		Nothing
  5483 ;; This function is called by:
  5484 ;;		_LCDWriteInt
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text38
  5489  0012A2                     __ptext38:
  5490                           	opt stack 0
  5491  0012A2                     ___awmod:
  5492                           	opt stack 21
  5493                           
  5494                           ;incstack = 0
  5495  0012A2  0E00               	movlw	0
  5496  0012A4  6E06               	movwf	___awmod@sign,c
  5497  0012A6  AE02               	btfss	___awmod@dividend+1,7,c
  5498  0012A8  D006               	goto	i2l2491
  5499  0012AA  6C01               	negf	___awmod@dividend,c
  5500  0012AC  1E02               	comf	___awmod@dividend+1,f,c
  5501  0012AE  B0D8               	btfsc	status,0,c
  5502  0012B0  2A02               	incf	___awmod@dividend+1,f,c
  5503  0012B2  0E01               	movlw	1
  5504  0012B4  6E06               	movwf	___awmod@sign,c
  5505  0012B6                     i2l2491:
  5506  0012B6  AE04               	btfss	___awmod@divisor+1,7,c
  5507  0012B8  D004               	goto	i2l2495
  5508  0012BA  6C03               	negf	___awmod@divisor,c
  5509  0012BC  1E04               	comf	___awmod@divisor+1,f,c
  5510  0012BE  B0D8               	btfsc	status,0,c
  5511  0012C0  2A04               	incf	___awmod@divisor+1,f,c
  5512  0012C2                     i2l2495:
  5513  0012C2  5003               	movf	___awmod@divisor,w,c
  5514  0012C4  1004               	iorwf	___awmod@divisor+1,w,c
  5515  0012C6  B4D8               	btfsc	status,2,c
  5516  0012C8  D018               	goto	i2l2511
  5517  0012CA  0E01               	movlw	1
  5518  0012CC  6E05               	movwf	___awmod@counter,c
  5519  0012CE  D004               	goto	i2l2501
  5520  0012D0                     i2l2499:
  5521  0012D0  90D8               	bcf	status,0,c
  5522  0012D2  3603               	rlcf	___awmod@divisor,f,c
  5523  0012D4  3604               	rlcf	___awmod@divisor+1,f,c
  5524  0012D6  2A05               	incf	___awmod@counter,f,c
  5525  0012D8                     i2l2501:
  5526  0012D8  AE04               	btfss	___awmod@divisor+1,7,c
  5527  0012DA  D7FA               	goto	i2l2499
  5528  0012DC                     i2l2503:
  5529  0012DC  5003               	movf	___awmod@divisor,w,c
  5530  0012DE  5C01               	subwf	___awmod@dividend,w,c
  5531  0012E0  5004               	movf	___awmod@divisor+1,w,c
  5532  0012E2  5802               	subwfb	___awmod@dividend+1,w,c
  5533  0012E4  A0D8               	btfss	status,0,c
  5534  0012E6  D004               	goto	i2l2507
  5535  0012E8  5003               	movf	___awmod@divisor,w,c
  5536  0012EA  5E01               	subwf	___awmod@dividend,f,c
  5537  0012EC  5004               	movf	___awmod@divisor+1,w,c
  5538  0012EE  5A02               	subwfb	___awmod@dividend+1,f,c
  5539  0012F0                     i2l2507:
  5540  0012F0  90D8               	bcf	status,0,c
  5541  0012F2  3204               	rrcf	___awmod@divisor+1,f,c
  5542  0012F4  3203               	rrcf	___awmod@divisor,f,c
  5543  0012F6  2E05               	decfsz	___awmod@counter,f,c
  5544  0012F8  D7F1               	goto	i2l2503
  5545  0012FA                     i2l2511:
  5546  0012FA  5006               	movf	___awmod@sign,w,c
  5547  0012FC  B4D8               	btfsc	status,2,c
  5548  0012FE  D004               	goto	i2l2515
  5549  001300  6C01               	negf	___awmod@dividend,c
  5550  001302  1E02               	comf	___awmod@dividend+1,f,c
  5551  001304  B0D8               	btfsc	status,0,c
  5552  001306  2A02               	incf	___awmod@dividend+1,f,c
  5553  001308                     i2l2515:
  5554  001308  C001  F001         	movff	___awmod@dividend,?___awmod
  5555  00130C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5556  001310  0012               	return	
  5557  001312                     __end_of___awmod:
  5558                           	opt stack 0
  5559                           pclatu	equ	0xFFB
  5560                           pclath	equ	0xFFA
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           postinc0	equ	0xFEE
  5569                           fsr0h	equ	0xFEA
  5570                           fsr0l	equ	0xFE9
  5571                           wreg	equ	0xFE8
  5572                           postdec1	equ	0xFE5
  5573                           plusw1	equ	0xFE3
  5574                           fsr1h	equ	0xFE2
  5575                           fsr1l	equ	0xFE1
  5576                           indf2	equ	0xFDF
  5577                           plusw2	equ	0xFDB
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function ___awdiv *****************
  5583 ;; Defined at:
  5584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  dividend        2    0[COMRAM] int 
  5587 ;;  divisor         2    2[COMRAM] int 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  quotient        2    6[COMRAM] int 
  5590 ;;  sign            1    5[COMRAM] unsigned char 
  5591 ;;  counter         1    4[COMRAM] unsigned char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  2    0[COMRAM] int 
  5594 ;; Registers used:
  5595 ;;		wreg, status,2, status,0
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5601 ;;      Params:         4       0       0       0       0       0       0
  5602 ;;      Locals:         4       0       0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0
  5604 ;;      Totals:         8       0       0       0       0       0       0
  5605 ;;Total ram usage:        8 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_LCDWriteInt
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text39
  5615  00104C                     __ptext39:
  5616                           	opt stack 0
  5617  00104C                     ___awdiv:
  5618                           	opt stack 21
  5619                           
  5620                           ;incstack = 0
  5621  00104C  0E00               	movlw	0
  5622  00104E  6E06               	movwf	___awdiv@sign,c
  5623  001050  AE04               	btfss	___awdiv@divisor+1,7,c
  5624  001052  D006               	goto	i2l2447
  5625  001054  6C03               	negf	___awdiv@divisor,c
  5626  001056  1E04               	comf	___awdiv@divisor+1,f,c
  5627  001058  B0D8               	btfsc	status,0,c
  5628  00105A  2A04               	incf	___awdiv@divisor+1,f,c
  5629  00105C  0E01               	movlw	1
  5630  00105E  6E06               	movwf	___awdiv@sign,c
  5631  001060                     i2l2447:
  5632  001060  AE02               	btfss	___awdiv@dividend+1,7,c
  5633  001062  D006               	goto	i2l2453
  5634  001064  6C01               	negf	___awdiv@dividend,c
  5635  001066  1E02               	comf	___awdiv@dividend+1,f,c
  5636  001068  B0D8               	btfsc	status,0,c
  5637  00106A  2A02               	incf	___awdiv@dividend+1,f,c
  5638  00106C  0E01               	movlw	1
  5639  00106E  1A06               	xorwf	___awdiv@sign,f,c
  5640  001070                     i2l2453:
  5641  001070  0E00               	movlw	0
  5642  001072  6E08               	movwf	___awdiv@quotient+1,c
  5643  001074  0E00               	movlw	0
  5644  001076  6E07               	movwf	___awdiv@quotient,c
  5645  001078  5003               	movf	___awdiv@divisor,w,c
  5646  00107A  1004               	iorwf	___awdiv@divisor+1,w,c
  5647  00107C  B4D8               	btfsc	status,2,c
  5648  00107E  D01C               	goto	i2l2475
  5649  001080  0E01               	movlw	1
  5650  001082  6E05               	movwf	___awdiv@counter,c
  5651  001084  D004               	goto	i2l2461
  5652  001086                     i2l2459:
  5653  001086  90D8               	bcf	status,0,c
  5654  001088  3603               	rlcf	___awdiv@divisor,f,c
  5655  00108A  3604               	rlcf	___awdiv@divisor+1,f,c
  5656  00108C  2A05               	incf	___awdiv@counter,f,c
  5657  00108E                     i2l2461:
  5658  00108E  AE04               	btfss	___awdiv@divisor+1,7,c
  5659  001090  D7FA               	goto	i2l2459
  5660  001092                     i2l2463:
  5661  001092  90D8               	bcf	status,0,c
  5662  001094  3607               	rlcf	___awdiv@quotient,f,c
  5663  001096  3608               	rlcf	___awdiv@quotient+1,f,c
  5664  001098  5003               	movf	___awdiv@divisor,w,c
  5665  00109A  5C01               	subwf	___awdiv@dividend,w,c
  5666  00109C  5004               	movf	___awdiv@divisor+1,w,c
  5667  00109E  5802               	subwfb	___awdiv@dividend+1,w,c
  5668  0010A0  A0D8               	btfss	status,0,c
  5669  0010A2  D005               	goto	i2l2471
  5670  0010A4  5003               	movf	___awdiv@divisor,w,c
  5671  0010A6  5E01               	subwf	___awdiv@dividend,f,c
  5672  0010A8  5004               	movf	___awdiv@divisor+1,w,c
  5673  0010AA  5A02               	subwfb	___awdiv@dividend+1,f,c
  5674  0010AC  8007               	bsf	___awdiv@quotient,0,c
  5675  0010AE                     i2l2471:
  5676  0010AE  90D8               	bcf	status,0,c
  5677  0010B0  3204               	rrcf	___awdiv@divisor+1,f,c
  5678  0010B2  3203               	rrcf	___awdiv@divisor,f,c
  5679  0010B4  2E05               	decfsz	___awdiv@counter,f,c
  5680  0010B6  D7ED               	goto	i2l2463
  5681  0010B8                     i2l2475:
  5682  0010B8  5006               	movf	___awdiv@sign,w,c
  5683  0010BA  B4D8               	btfsc	status,2,c
  5684  0010BC  D004               	goto	i2l2479
  5685  0010BE  6C07               	negf	___awdiv@quotient,c
  5686  0010C0  1E08               	comf	___awdiv@quotient+1,f,c
  5687  0010C2  B0D8               	btfsc	status,0,c
  5688  0010C4  2A08               	incf	___awdiv@quotient+1,f,c
  5689  0010C6                     i2l2479:
  5690  0010C6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5691  0010CA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5692  0010CE  0012               	return	
  5693  0010D0                     __end_of___awdiv:
  5694                           	opt stack 0
  5695                           pclatu	equ	0xFFB
  5696                           pclath	equ	0xFFA
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           intcon	equ	0xFF2
  5704                           postinc0	equ	0xFEE
  5705                           fsr0h	equ	0xFEA
  5706                           fsr0l	equ	0xFE9
  5707                           wreg	equ	0xFE8
  5708                           postdec1	equ	0xFE5
  5709                           plusw1	equ	0xFE3
  5710                           fsr1h	equ	0xFE2
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           plusw2	equ	0xFDB
  5714                           fsr2h	equ	0xFDA
  5715                           fsr2l	equ	0xFD9
  5716                           status	equ	0xFD8
  5717                           
  5718 ;; *************** function _LCDGotoXY *****************
  5719 ;; Defined at:
  5720 ;;		line 355 in file "lcd_hd44780_pic16.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  x               1    wreg     unsigned char 
  5723 ;;  y               1    8[COMRAM] unsigned char 
  5724 ;; Auto vars:     Size  Location     Type
  5725 ;;  x               1    9[COMRAM] unsigned char 
  5726 ;; Return value:  Size  Location     Type
  5727 ;;                  1    wreg      void 
  5728 ;; Registers used:
  5729 ;;		wreg, status,2, status,0, cstack
  5730 ;; Tracked objects:
  5731 ;;		On entry : 0/0
  5732 ;;		On exit  : 0/0
  5733 ;;		Unchanged: 0/0
  5734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5735 ;;      Params:         1       0       0       0       0       0       0
  5736 ;;      Locals:         1       0       0       0       0       0       0
  5737 ;;      Temps:          0       0       0       0       0       0       0
  5738 ;;      Totals:         2       0       0       0       0       0       0
  5739 ;;Total ram usage:        2 bytes
  5740 ;; Hardware stack levels used:    1
  5741 ;; Hardware stack levels required when called:    2
  5742 ;; This function calls:
  5743 ;;		i2_LCDByte
  5744 ;; This function is called by:
  5745 ;;		_ShowLecturesInLCD
  5746 ;;		_WriteSpeedInLCD
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text40
  5751  001596                     __ptext40:
  5752                           	opt stack 0
  5753  001596                     _LCDGotoXY:
  5754                           	opt stack 20
  5755                           
  5756                           ;incstack = 0
  5757                           ;LCDGotoXY@x stored from wreg
  5758  001596  6E0A               	movwf	LCDGotoXY@x,c
  5759                           
  5760                           ;lcd_hd44780_pic16.c: 357: if(x>=20) return;
  5761  001598  0E13               	movlw	19
  5762  00159A  640A               	cpfsgt	LCDGotoXY@x,c
  5763  00159C  D008               	goto	i2l2583
  5764  00159E  0012               	return	
  5765  0015A0                     i2l2575:
  5766                           
  5767                           ;lcd_hd44780_pic16.c: 366: x|=0b01000000;
  5768  0015A0  8C0A               	bsf	LCDGotoXY@x,6,c
  5769                           
  5770                           ;lcd_hd44780_pic16.c: 367: break;
  5771  0015A2  D012               	goto	i2l2585
  5772  0015A4                     i2l2577:
  5773                           
  5774                           ;lcd_hd44780_pic16.c: 369: x+=0x14;
  5775  0015A4  0E14               	movlw	20
  5776  0015A6  D001               	goto	L4
  5777  0015A8                     i2l2579:
  5778                           
  5779                           ;lcd_hd44780_pic16.c: 372: x+=0x54;
  5780  0015A8  0E54               	movlw	84
  5781  0015AA                     L4:
  5782  0015AA  260A               	addwf	LCDGotoXY@x,f,c
  5783                           
  5784                           ;lcd_hd44780_pic16.c: 374: }
  5785                           
  5786                           ;lcd_hd44780_pic16.c: 373: break;
  5787  0015AC  D00D               	goto	i2l2585
  5788  0015AE                     i2l2583:
  5789  0015AE  5009               	movf	LCDGotoXY@y,w,c
  5790                           
  5791                           ; Switch size 1, requested type "space"
  5792                           ; Number of cases is 4, Range of values is 0 to 3
  5793                           ; switch strategies available:
  5794                           ; Name         Instructions Cycles
  5795                           ; simple_byte           13     7 (average)
  5796                           ;	Chosen strategy is simple_byte
  5797  0015B0  0A00               	xorlw	0	; case 0
  5798  0015B2  B4D8               	btfsc	status,2,c
  5799  0015B4  D009               	goto	i2l2585
  5800  0015B6  0A01               	xorlw	1	; case 1
  5801  0015B8  B4D8               	btfsc	status,2,c
  5802  0015BA  D7F2               	goto	i2l2575
  5803  0015BC  0A03               	xorlw	3	; case 2
  5804  0015BE  B4D8               	btfsc	status,2,c
  5805  0015C0  D7F1               	goto	i2l2577
  5806  0015C2  0A01               	xorlw	1	; case 3
  5807  0015C4  B4D8               	btfsc	status,2,c
  5808  0015C6  D7F0               	goto	i2l2579
  5809  0015C8                     i2l2585:
  5810                           
  5811                           ;lcd_hd44780_pic16.c: 396: x|=0b10000000;
  5812  0015C8  8E0A               	bsf	LCDGotoXY@x,7,c
  5813                           
  5814                           ;lcd_hd44780_pic16.c: 397: (LCDByte(x,0));
  5815  0015CA  0E00               	movlw	0
  5816  0015CC  6E04               	movwf	i2LCDByte@isdata,c
  5817  0015CE  500A               	movf	LCDGotoXY@x,w,c
  5818  0015D0  ECEB  F00A         	call	i2_LCDByte
  5819  0015D4  0012               	return		;funcret
  5820  0015D6                     __end_of_LCDGotoXY:
  5821                           	opt stack 0
  5822                           pclatu	equ	0xFFB
  5823                           pclath	equ	0xFFA
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           fsr0h	equ	0xFEA
  5833                           fsr0l	equ	0xFE9
  5834                           wreg	equ	0xFE8
  5835                           postdec1	equ	0xFE5
  5836                           plusw1	equ	0xFE3
  5837                           fsr1h	equ	0xFE2
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           plusw2	equ	0xFDB
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function i2_LCDByte *****************
  5846 ;; Defined at:
  5847 ;;		line 83 in file "lcd_hd44780_pic16.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  c               1    wreg     unsigned char 
  5850 ;;  isdata          1    3[COMRAM] unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  c               1    6[COMRAM] unsigned char 
  5853 ;;  LCDByte         1    7[COMRAM] unsigned char 
  5854 ;;  LCDByte         1    5[COMRAM] unsigned char 
  5855 ;;  LCDByte         1    4[COMRAM] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      void 
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5865 ;;      Params:         1       0       0       0       0       0       0
  5866 ;;      Locals:         4       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0
  5868 ;;      Totals:         5       0       0       0       0       0       0
  5869 ;;Total ram usage:        5 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    1
  5872 ;; This function calls:
  5873 ;;		i2_LCDBusyLoop
  5874 ;; This function is called by:
  5875 ;;		_LCDWriteString
  5876 ;;		_LCDWriteInt
  5877 ;;		_LCDGotoXY
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text41
  5882  0015D6                     __ptext41:
  5883                           	opt stack 0
  5884  0015D6                     i2_LCDByte:
  5885                           	opt stack 20
  5886                           
  5887                           ;incstack = 0
  5888                           ;i2LCDByte@c stored from wreg
  5889  0015D6  6E07               	movwf	i2LCDByte@c,c
  5890                           
  5891                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  5892                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  5893                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  5894  0015D8  3807               	swapf	i2LCDByte@c,w,c
  5895  0015DA  0B0F               	andlw	15
  5896  0015DC  6E05               	movwf	i2LCDByte@hn,c
  5897                           
  5898                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  5899  0015DE  5007               	movf	i2LCDByte@c,w,c
  5900  0015E0  0B0F               	andlw	15
  5901  0015E2  6E06               	movwf	i2LCDByte@ln,c
  5902                           
  5903                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  5904  0015E4  5004               	movf	i2LCDByte@isdata,w,c
  5905  0015E6  A4D8               	btfss	status,2,c
  5906  0015E8  D002               	goto	i2l283
  5907                           
  5908                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  5909  0015EA  9883               	bcf	3971,4,c	;volatile
  5910  0015EC  D001               	goto	i2l284
  5911  0015EE                     i2l283:
  5912                           
  5913                           ;lcd_hd44780_pic16.c: 100: else
  5914                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  5915  0015EE  8883               	bsf	3971,4,c	;volatile
  5916  0015F0                     i2l284:
  5917                           
  5918                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  5919                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  5920  0015F0  8C83               	bsf	3971,6,c	;volatile
  5921                           
  5922                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  5923  0015F2  5083               	movf	3971,w,c	;volatile
  5924  0015F4  0BF0               	andlw	240
  5925  0015F6  1005               	iorwf	i2LCDByte@hn,w,c
  5926  0015F8  6E08               	movwf	i2LCDByte@temp,c
  5927                           
  5928                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  5929  0015FA  C008  FF83         	movff	i2LCDByte@temp,3971	;volatile
  5930                           
  5931                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  5932                           
  5933                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5934  0015FE  9C83               	bcf	3971,6,c	;volatile
  5935                           
  5936                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  5937                           
  5938                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5939  001600  8C83               	bsf	3971,6,c	;volatile
  5940                           
  5941                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  5942  001602  5083               	movf	3971,w,c	;volatile
  5943  001604  0BF0               	andlw	240
  5944  001606  1006               	iorwf	i2LCDByte@ln,w,c
  5945  001608  6E08               	movwf	i2LCDByte@temp,c
  5946                           
  5947                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  5948  00160A  C008  FF83         	movff	i2LCDByte@temp,3971	;volatile
  5949                           
  5950                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  5951                           
  5952                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5953  00160E  9C83               	bcf	3971,6,c	;volatile
  5954                           
  5955                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  5956                           
  5957                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  5958  001610  EC0B  F00B         	call	i2_LCDBusyLoop	;wreg free
  5959  001614  0012               	return		;funcret
  5960  001616                     __end_ofi2_LCDByte:
  5961                           	opt stack 0
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           postinc0	equ	0xFEE
  5972                           fsr0h	equ	0xFEA
  5973                           fsr0l	equ	0xFE9
  5974                           wreg	equ	0xFE8
  5975                           postdec1	equ	0xFE5
  5976                           plusw1	equ	0xFE3
  5977                           fsr1h	equ	0xFE2
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function i2_LCDBusyLoop *****************
  5986 ;; Defined at:
  5987 ;;		line 138 in file "lcd_hd44780_pic16.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;		None
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  LCDBusyLoop     1    2[COMRAM] unsigned char 
  5992 ;;  LCDBusyLoop     1    1[COMRAM] unsigned char 
  5993 ;;  LCDBusyLoop     1    0[COMRAM] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6003 ;;      Params:         0       0       0       0       0       0       0
  6004 ;;      Locals:         3       0       0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0
  6006 ;;      Totals:         3       0       0       0       0       0       0
  6007 ;;Total ram usage:        3 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; This function calls:
  6010 ;;		Nothing
  6011 ;; This function is called by:
  6012 ;;		i2_LCDByte
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text42
  6017  001616                     __ptext42:
  6018                           	opt stack 0
  6019  001616                     i2_LCDBusyLoop:
  6020                           	opt stack 20
  6021                           
  6022                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  6023                           
  6024                           ;incstack = 0
  6025  001616  0E00               	movlw	0
  6026  001618  6E03               	movwf	i2LCDBusyLoop@status,c
  6027                           
  6028                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  6029  00161A  0E0F               	movlw	15
  6030  00161C  1295               	iorwf	3989,f,c	;volatile
  6031                           
  6032                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  6033  00161E  8A83               	bsf	3971,5,c	;volatile
  6034                           
  6035                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  6036  001620  9883               	bcf	3971,4,c	;volatile
  6037  001622                     i2l2395:
  6038                           
  6039                           ;lcd_hd44780_pic16.c: 157: {
  6040                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  6041  001622  8C83               	bsf	3971,6,c	;volatile
  6042                           
  6043                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  6044                           
  6045                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  6046  001624  CF83 F003          	movff	3971,i2LCDBusyLoop@status	;volatile
  6047                           
  6048                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  6049  001628  3803               	swapf	i2LCDBusyLoop@status,w,c
  6050  00162A  0BF0               	andlw	240
  6051  00162C  6E03               	movwf	i2LCDBusyLoop@status,c
  6052                           
  6053                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  6054                           
  6055                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  6056  00162E  9C83               	bcf	3971,6,c	;volatile
  6057                           
  6058                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  6059                           
  6060                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  6061  001630  8C83               	bsf	3971,6,c	;volatile
  6062                           
  6063                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  6064                           
  6065                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  6066  001632  CF83 F002          	movff	3971,i2LCDBusyLoop@temp	;volatile
  6067                           
  6068                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  6069  001636  0E0F               	movlw	15
  6070  001638  1602               	andwf	i2LCDBusyLoop@temp,f,c
  6071                           
  6072                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  6073  00163A  5003               	movf	i2LCDBusyLoop@status,w,c
  6074  00163C  1002               	iorwf	i2LCDBusyLoop@temp,w,c
  6075  00163E  6E03               	movwf	i2LCDBusyLoop@status,c
  6076                           
  6077                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  6078  001640  5003               	movf	i2LCDBusyLoop@status,w,c
  6079  001642  0B80               	andlw	128
  6080  001644  6E01               	movwf	i2LCDBusyLoop@busy,c
  6081                           
  6082                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  6083                           
  6084                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  6085  001646  9C83               	bcf	3971,6,c	;volatile
  6086                           
  6087                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  6088                           
  6089                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  6090  001648  5001               	movf	i2LCDBusyLoop@busy,w,c
  6091  00164A  A4D8               	btfss	status,2,c
  6092  00164C  D7EA               	goto	i2l2395
  6093                           
  6094                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  6095  00164E  9A83               	bcf	3971,5,c	;volatile
  6096                           
  6097                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  6098  001650  0EF0               	movlw	240
  6099  001652  1695               	andwf	3989,f,c	;volatile
  6100  001654  0012               	return		;funcret
  6101  001656                     __end_ofi2_LCDBusyLoop:
  6102                           	opt stack 0
  6103                           pclatu	equ	0xFFB
  6104                           pclath	equ	0xFFA
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           postinc0	equ	0xFEE
  6113                           fsr0h	equ	0xFEA
  6114                           fsr0l	equ	0xFE9
  6115                           wreg	equ	0xFE8
  6116                           postdec1	equ	0xFE5
  6117                           plusw1	equ	0xFE3
  6118                           fsr1h	equ	0xFE2
  6119                           fsr1l	equ	0xFE1
  6120                           indf2	equ	0xFDF
  6121                           plusw2	equ	0xFDB
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _SetDistanceLeft *****************
  6127 ;; Defined at:
  6128 ;;		line 54 in file "ADC.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;  lecture         2   53[COMRAM] unsigned int 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6142 ;;      Params:         2       0       0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0
  6144 ;;      Temps:          2       0       0       0       0       0       0
  6145 ;;      Totals:         4       0       0       0       0       0       0
  6146 ;;Total ram usage:        4 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    2
  6149 ;; This function calls:
  6150 ;;		___ftadd
  6151 ;;		___ftmul
  6152 ;;		___fttol
  6153 ;;		___lwtoft
  6154 ;; This function is called by:
  6155 ;;		_isr
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text43
  6160  0011BE                     __ptext43:
  6161                           	opt stack 0
  6162  0011BE                     _SetDistanceLeft:
  6163                           	opt stack 22
  6164                           
  6165                           ;ADC.c: 55: DistanceLeft=5+(1023-lecture)*0.042;
  6166                           
  6167                           ;incstack = 0
  6168  0011BE  0E00               	movlw	0
  6169  0011C0  6E1E               	movwf	___ftadd@f2,c
  6170  0011C2  0EA0               	movlw	160
  6171  0011C4  6E1F               	movwf	___ftadd@f2+1,c
  6172  0011C6  0E40               	movlw	64
  6173  0011C8  6E20               	movwf	___ftadd@f2+2,c
  6174  0011CA  0E08               	movlw	8
  6175  0011CC  6E0F               	movwf	___ftmul@f2,c
  6176  0011CE  0E2C               	movlw	44
  6177  0011D0  6E10               	movwf	___ftmul@f2+1,c
  6178  0011D2  0E3D               	movlw	61
  6179  0011D4  6E11               	movwf	___ftmul@f2+2,c
  6180  0011D6  C036  F038         	movff	SetDistanceLeft@lecture,??_SetDistanceLeft
  6181  0011DA  C037  F039         	movff	SetDistanceLeft@lecture+1,??_SetDistanceLeft+1
  6182  0011DE  1E38               	comf	??_SetDistanceLeft,f,c
  6183  0011E0  1E39               	comf	??_SetDistanceLeft+1,f,c
  6184  0011E2  4A38               	infsnz	??_SetDistanceLeft,f,c
  6185  0011E4  2A39               	incf	??_SetDistanceLeft+1,f,c
  6186  0011E6  0EFF               	movlw	255
  6187  0011E8  2438               	addwf	??_SetDistanceLeft,w,c
  6188  0011EA  6E09               	movwf	___lwtoft@c,c
  6189  0011EC  0E03               	movlw	3
  6190  0011EE  2039               	addwfc	??_SetDistanceLeft+1,w,c
  6191  0011F0  6E0A               	movwf	___lwtoft@c+1,c
  6192  0011F2  EC3A  F00C         	call	___lwtoft	;wreg free
  6193  0011F6  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  6194  0011FA  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  6195  0011FE  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  6196  001202  ECB2  F005         	call	___ftmul	;wreg free
  6197  001206  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  6198  00120A  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  6199  00120E  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  6200  001212  EC1F  F003         	call	___ftadd	;wreg free
  6201  001216  C01B  F027         	movff	?___ftadd,___fttol@f1
  6202  00121A  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  6203  00121E  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  6204  001222  EC38  F005         	call	___fttol	;wreg free
  6205  001226  C027  F0A2         	movff	?___fttol,_DistanceLeft
  6206  00122A  C028  F0A3         	movff	?___fttol+1,_DistanceLeft+1
  6207  00122E  0012               	return		;funcret
  6208  001230                     __end_of_SetDistanceLeft:
  6209                           	opt stack 0
  6210                           pclatu	equ	0xFFB
  6211                           pclath	equ	0xFFA
  6212                           tblptru	equ	0xFF8
  6213                           tblptrh	equ	0xFF7
  6214                           tblptrl	equ	0xFF6
  6215                           tablat	equ	0xFF5
  6216                           prodh	equ	0xFF4
  6217                           prodl	equ	0xFF3
  6218                           intcon	equ	0xFF2
  6219                           postinc0	equ	0xFEE
  6220                           fsr0h	equ	0xFEA
  6221                           fsr0l	equ	0xFE9
  6222                           wreg	equ	0xFE8
  6223                           postdec1	equ	0xFE5
  6224                           plusw1	equ	0xFE3
  6225                           fsr1h	equ	0xFE2
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _SetDistanceCentral *****************
  6234 ;; Defined at:
  6235 ;;		line 71 in file "ADC.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  lecture         2   53[COMRAM] unsigned int 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, status,2, status,0, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6249 ;;      Params:         2       0       0       0       0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0
  6251 ;;      Temps:          2       0       0       0       0       0       0
  6252 ;;      Totals:         4       0       0       0       0       0       0
  6253 ;;Total ram usage:        4 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    2
  6256 ;; This function calls:
  6257 ;;		___ftadd
  6258 ;;		___ftmul
  6259 ;;		___fttol
  6260 ;;		___lwtoft
  6261 ;; This function is called by:
  6262 ;;		_isr
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           	psect	text44
  6267  001230                     __ptext44:
  6268                           	opt stack 0
  6269  001230                     _SetDistanceCentral:
  6270                           	opt stack 22
  6271                           
  6272                           ;ADC.c: 72: DistanceCentral=5+(1023-lecture)*0.042;
  6273                           
  6274                           ;incstack = 0
  6275  001230  0E00               	movlw	0
  6276  001232  6E1E               	movwf	___ftadd@f2,c
  6277  001234  0EA0               	movlw	160
  6278  001236  6E1F               	movwf	___ftadd@f2+1,c
  6279  001238  0E40               	movlw	64
  6280  00123A  6E20               	movwf	___ftadd@f2+2,c
  6281  00123C  0E08               	movlw	8
  6282  00123E  6E0F               	movwf	___ftmul@f2,c
  6283  001240  0E2C               	movlw	44
  6284  001242  6E10               	movwf	___ftmul@f2+1,c
  6285  001244  0E3D               	movlw	61
  6286  001246  6E11               	movwf	___ftmul@f2+2,c
  6287  001248  C036  F038         	movff	SetDistanceCentral@lecture,??_SetDistanceCentral
  6288  00124C  C037  F039         	movff	SetDistanceCentral@lecture+1,??_SetDistanceCentral+1
  6289  001250  1E38               	comf	??_SetDistanceCentral,f,c
  6290  001252  1E39               	comf	??_SetDistanceCentral+1,f,c
  6291  001254  4A38               	infsnz	??_SetDistanceCentral,f,c
  6292  001256  2A39               	incf	??_SetDistanceCentral+1,f,c
  6293  001258  0EFF               	movlw	255
  6294  00125A  2438               	addwf	??_SetDistanceCentral,w,c
  6295  00125C  6E09               	movwf	___lwtoft@c,c
  6296  00125E  0E03               	movlw	3
  6297  001260  2039               	addwfc	??_SetDistanceCentral+1,w,c
  6298  001262  6E0A               	movwf	___lwtoft@c+1,c
  6299  001264  EC3A  F00C         	call	___lwtoft	;wreg free
  6300  001268  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  6301  00126C  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  6302  001270  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  6303  001274  ECB2  F005         	call	___ftmul	;wreg free
  6304  001278  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  6305  00127C  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  6306  001280  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  6307  001284  EC1F  F003         	call	___ftadd	;wreg free
  6308  001288  C01B  F027         	movff	?___ftadd,___fttol@f1
  6309  00128C  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  6310  001290  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  6311  001294  EC38  F005         	call	___fttol	;wreg free
  6312  001298  C027  F0A0         	movff	?___fttol,_DistanceCentral
  6313  00129C  C028  F0A1         	movff	?___fttol+1,_DistanceCentral+1
  6314  0012A0  0012               	return		;funcret
  6315  0012A2                     __end_of_SetDistanceCentral:
  6316                           	opt stack 0
  6317                           pclatu	equ	0xFFB
  6318                           pclath	equ	0xFFA
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           intcon	equ	0xFF2
  6326                           postinc0	equ	0xFEE
  6327                           fsr0h	equ	0xFEA
  6328                           fsr0l	equ	0xFE9
  6329                           wreg	equ	0xFE8
  6330                           postdec1	equ	0xFE5
  6331                           plusw1	equ	0xFE3
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           plusw2	equ	0xFDB
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _SetBattery *****************
  6341 ;; Defined at:
  6342 ;;		line 80 in file "ADC.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  lecture         2   53[COMRAM] unsigned int 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2, status,0, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6356 ;;      Params:         2       0       0       0       0       0       0
  6357 ;;      Locals:         3       0       0       0       0       0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0
  6359 ;;      Totals:         5       0       0       0       0       0       0
  6360 ;;Total ram usage:        5 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    2
  6363 ;; This function calls:
  6364 ;;		___ftadd
  6365 ;;		___ftmul
  6366 ;;		___fttol
  6367 ;;		___lwtoft
  6368 ;; This function is called by:
  6369 ;;		_isr
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text45
  6374  000FC6                     __ptext45:
  6375                           	opt stack 0
  6376  000FC6                     _SetBattery:
  6377                           	opt stack 22
  6378                           
  6379                           ;ADC.c: 83: Battery=((lecture*3.548)-11)*100;
  6380                           
  6381                           ;incstack = 0
  6382  000FC6  0E00               	movlw	0
  6383  000FC8  6E1E               	movwf	___ftadd@f2,c
  6384  000FCA  0E30               	movlw	48
  6385  000FCC  6E1F               	movwf	___ftadd@f2+1,c
  6386  000FCE  0EC1               	movlw	193
  6387  000FD0  6E20               	movwf	___ftadd@f2+2,c
  6388  000FD2  0E12               	movlw	18
  6389  000FD4  6E0F               	movwf	___ftmul@f2,c
  6390  000FD6  0E63               	movlw	99
  6391  000FD8  6E10               	movwf	___ftmul@f2+1,c
  6392  000FDA  0E40               	movlw	64
  6393  000FDC  6E11               	movwf	___ftmul@f2+2,c
  6394  000FDE  C036  F009         	movff	SetBattery@lecture,___lwtoft@c
  6395  000FE2  C037  F00A         	movff	SetBattery@lecture+1,___lwtoft@c+1
  6396  000FE6  EC3A  F00C         	call	___lwtoft	;wreg free
  6397  000FEA  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  6398  000FEE  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  6399  000FF2  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  6400  000FF6  ECB2  F005         	call	___ftmul	;wreg free
  6401  000FFA  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  6402  000FFE  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  6403  001002  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  6404  001006  EC1F  F003         	call	___ftadd	;wreg free
  6405  00100A  C01B  F038         	movff	?___ftadd,_SetBattery$1541
  6406  00100E  C01C  F039         	movff	?___ftadd+1,_SetBattery$1541+1
  6407  001012  C01D  F03A         	movff	?___ftadd+2,_SetBattery$1541+2
  6408                           
  6409                           ;ADC.c: 83: Battery=((lecture*3.548)-11)*100;
  6410  001016  0E00               	movlw	0
  6411  001018  6E0F               	movwf	___ftmul@f2,c
  6412  00101A  0EC8               	movlw	200
  6413  00101C  6E10               	movwf	___ftmul@f2+1,c
  6414  00101E  0E42               	movlw	66
  6415  001020  6E11               	movwf	___ftmul@f2+2,c
  6416  001022  C038  F00C         	movff	_SetBattery$1541,___ftmul@f1
  6417  001026  C039  F00D         	movff	_SetBattery$1541+1,___ftmul@f1+1
  6418  00102A  C03A  F00E         	movff	_SetBattery$1541+2,___ftmul@f1+2
  6419  00102E  ECB2  F005         	call	___ftmul	;wreg free
  6420  001032  C00C  F027         	movff	?___ftmul,___fttol@f1
  6421  001036  C00D  F028         	movff	?___ftmul+1,___fttol@f1+1
  6422  00103A  C00E  F029         	movff	?___ftmul+2,___fttol@f1+2
  6423  00103E  EC38  F005         	call	___fttol	;wreg free
  6424  001042  C027  F04E         	movff	?___fttol,_Battery
  6425  001046  C028  F04F         	movff	?___fttol+1,_Battery+1
  6426  00104A  0012               	return		;funcret
  6427  00104C                     __end_of_SetBattery:
  6428                           	opt stack 0
  6429                           pclatu	equ	0xFFB
  6430                           pclath	equ	0xFFA
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           intcon	equ	0xFF2
  6438                           postinc0	equ	0xFEE
  6439                           fsr0h	equ	0xFEA
  6440                           fsr0l	equ	0xFE9
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           plusw1	equ	0xFE3
  6444                           fsr1h	equ	0xFE2
  6445                           fsr1l	equ	0xFE1
  6446                           indf2	equ	0xFDF
  6447                           plusw2	equ	0xFDB
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function ___lwtoft *****************
  6453 ;; Defined at:
  6454 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  c               2    8[COMRAM] unsigned int 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;		None
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  3    8[COMRAM] float 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0, cstack
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6468 ;;      Params:         3       0       0       0       0       0       0
  6469 ;;      Locals:         0       0       0       0       0       0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0
  6471 ;;      Totals:         3       0       0       0       0       0       0
  6472 ;;Total ram usage:        3 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    1
  6475 ;; This function calls:
  6476 ;;		___ftpack
  6477 ;; This function is called by:
  6478 ;;		_SetDistanceLeft
  6479 ;;		_SetDistanceRight
  6480 ;;		_SetDistanceCentral
  6481 ;;		_SetBattery
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text46
  6486  001874                     __ptext46:
  6487                           	opt stack 0
  6488  001874                     ___lwtoft:
  6489                           	opt stack 22
  6490                           
  6491                           ;incstack = 0
  6492  001874  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  6493  001878  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  6494  00187C  6A03               	clrf	___ftpack@arg+2,c
  6495  00187E  0E8E               	movlw	142
  6496  001880  6E04               	movwf	___ftpack@exp,c
  6497  001882  0E00               	movlw	0
  6498  001884  6E05               	movwf	___ftpack@sign,c
  6499  001886  ECFC  F006         	call	___ftpack	;wreg free
  6500  00188A  C001  F009         	movff	?___ftpack,?___lwtoft
  6501  00188E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  6502  001892  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  6503  001896  0012               	return	
  6504  001898                     __end_of___lwtoft:
  6505                           	opt stack 0
  6506                           pclatu	equ	0xFFB
  6507                           pclath	equ	0xFFA
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           postinc0	equ	0xFEE
  6516                           fsr0h	equ	0xFEA
  6517                           fsr0l	equ	0xFE9
  6518                           wreg	equ	0xFE8
  6519                           postdec1	equ	0xFE5
  6520                           plusw1	equ	0xFE3
  6521                           fsr1h	equ	0xFE2
  6522                           fsr1l	equ	0xFE1
  6523                           indf2	equ	0xFDF
  6524                           plusw2	equ	0xFDB
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function ___fttol *****************
  6530 ;; Defined at:
  6531 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  f1              3   38[COMRAM] float 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  lval            4   48[COMRAM] unsigned long 
  6536 ;;  exp1            1   52[COMRAM] unsigned char 
  6537 ;;  sign1           1   47[COMRAM] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  4   38[COMRAM] long 
  6540 ;; Registers used:
  6541 ;;		wreg, status,2, status,0
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6547 ;;      Params:         4       0       0       0       0       0       0
  6548 ;;      Locals:         6       0       0       0       0       0       0
  6549 ;;      Temps:          5       0       0       0       0       0       0
  6550 ;;      Totals:        15       0       0       0       0       0       0
  6551 ;;Total ram usage:       15 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_SetDistanceLeft
  6557 ;;		_SetDistanceRight
  6558 ;;		_SetDistanceCentral
  6559 ;;		_SetBattery
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           	psect	text47
  6564  000A70                     __ptext47:
  6565                           	opt stack 0
  6566  000A70                     ___fttol:
  6567                           	opt stack 23
  6568                           
  6569                           ;incstack = 0
  6570  000A70  C029  F02B         	movff	___fttol@f1+2,??___fttol
  6571  000A74  6A2C               	clrf	(??___fttol+1)& (0+255),c
  6572  000A76  6A2D               	clrf	(??___fttol+2)& (0+255),c
  6573  000A78  3428               	rlcf	___fttol@f1+1,w,c
  6574  000A7A  362B               	rlcf	??___fttol& (0+255),f,c
  6575  000A7C  E301               	bnc	u190_41
  6576  000A7E  802C               	bsf	(??___fttol+1)& (0+255),0,c
  6577  000A80                     u190_41:
  6578  000A80  502B               	movf	??___fttol,w,c
  6579  000A82  6E35               	movwf	___fttol@exp1,c
  6580  000A84  5035               	movf	___fttol@exp1,w,c
  6581  000A86  A4D8               	btfss	status,2,c
  6582  000A88  D009               	goto	i2l3099
  6583  000A8A  0E00               	movlw	0
  6584  000A8C  6E27               	movwf	?___fttol,c
  6585  000A8E  0E00               	movlw	0
  6586  000A90  6E28               	movwf	?___fttol+1,c
  6587  000A92  0E00               	movlw	0
  6588  000A94  6E29               	movwf	?___fttol+2,c
  6589  000A96  0E00               	movlw	0
  6590  000A98  6E2A               	movwf	?___fttol+3,c
  6591  000A9A  0012               	return	
  6592  000A9C                     i2l3099:
  6593  000A9C  0E17               	movlw	23
  6594  000A9E  6E2B               	movwf	??___fttol& (0+255),c
  6595  000AA0  C027  F02C         	movff	___fttol@f1,??___fttol+1
  6596  000AA4  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  6597  000AA8  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  6598  000AAC  282B               	incf	??___fttol,w,c
  6599  000AAE  6E2F               	movwf	(??___fttol+4)& (0+255),c
  6600  000AB0  D004               	goto	i2u192_40
  6601  000AB2                     i2u192_45:
  6602  000AB2  90D8               	bcf	status,0,c
  6603  000AB4  322E               	rrcf	??___fttol+3,f,c
  6604  000AB6  322D               	rrcf	??___fttol+2,f,c
  6605  000AB8  322C               	rrcf	??___fttol+1,f,c
  6606  000ABA                     i2u192_40:
  6607  000ABA  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  6608  000ABC  D7FA               	goto	i2u192_45
  6609  000ABE  502C               	movf	??___fttol+1,w,c
  6610  000AC0  6E30               	movwf	___fttol@sign1,c
  6611  000AC2  8E28               	bsf	___fttol@f1+1,7,c
  6612  000AC4  0EFF               	movlw	255
  6613  000AC6  1627               	andwf	___fttol@f1,f,c
  6614  000AC8  0EFF               	movlw	255
  6615  000ACA  1628               	andwf	___fttol@f1+1,f,c
  6616  000ACC  0E00               	movlw	0
  6617  000ACE  1629               	andwf	___fttol@f1+2,f,c
  6618  000AD0  5027               	movf	___fttol@f1,w,c
  6619  000AD2  6E31               	movwf	___fttol@lval,c
  6620  000AD4  5028               	movf	___fttol@f1+1,w,c
  6621  000AD6  6E32               	movwf	___fttol@lval+1,c
  6622  000AD8  5029               	movf	___fttol@f1+2,w,c
  6623  000ADA  6E33               	movwf	___fttol@lval+2,c
  6624  000ADC  6A34               	clrf	___fttol@lval+3,c
  6625  000ADE  0E8E               	movlw	142
  6626  000AE0  5E35               	subwf	___fttol@exp1,f,c
  6627  000AE2  AE35               	btfss	___fttol@exp1,7,c
  6628  000AE4  D016               	goto	i2l3121
  6629  000AE6  5035               	movf	___fttol@exp1,w,c
  6630  000AE8  0A80               	xorlw	128
  6631  000AEA  0F8F               	addlw	143
  6632  000AEC  B0D8               	btfsc	status,0,c
  6633  000AEE  D009               	goto	i2l3117
  6634  000AF0  0E00               	movlw	0
  6635  000AF2  6E27               	movwf	?___fttol,c
  6636  000AF4  0E00               	movlw	0
  6637  000AF6  6E28               	movwf	?___fttol+1,c
  6638  000AF8  0E00               	movlw	0
  6639  000AFA  6E29               	movwf	?___fttol+2,c
  6640  000AFC  0E00               	movlw	0
  6641  000AFE  6E2A               	movwf	?___fttol+3,c
  6642  000B00  0012               	return	
  6643  000B02                     i2l3117:
  6644  000B02  90D8               	bcf	status,0,c
  6645  000B04  3234               	rrcf	___fttol@lval+3,f,c
  6646  000B06  3233               	rrcf	___fttol@lval+2,f,c
  6647  000B08  3232               	rrcf	___fttol@lval+1,f,c
  6648  000B0A  3231               	rrcf	___fttol@lval,f,c
  6649  000B0C  3E35               	incfsz	___fttol@exp1,f,c
  6650  000B0E  D7F9               	goto	i2l3117
  6651  000B10  D015               	goto	i2l3131
  6652  000B12                     i2l3121:
  6653  000B12  0E17               	movlw	23
  6654  000B14  6435               	cpfsgt	___fttol@exp1,c
  6655  000B16  D00F               	goto	i2l3129
  6656  000B18  0E00               	movlw	0
  6657  000B1A  6E27               	movwf	?___fttol,c
  6658  000B1C  0E00               	movlw	0
  6659  000B1E  6E28               	movwf	?___fttol+1,c
  6660  000B20  0E00               	movlw	0
  6661  000B22  6E29               	movwf	?___fttol+2,c
  6662  000B24  0E00               	movlw	0
  6663  000B26  6E2A               	movwf	?___fttol+3,c
  6664  000B28  0012               	return	
  6665  000B2A                     i2l3127:
  6666  000B2A  90D8               	bcf	status,0,c
  6667  000B2C  3631               	rlcf	___fttol@lval,f,c
  6668  000B2E  3632               	rlcf	___fttol@lval+1,f,c
  6669  000B30  3633               	rlcf	___fttol@lval+2,f,c
  6670  000B32  3634               	rlcf	___fttol@lval+3,f,c
  6671  000B34  0635               	decf	___fttol@exp1,f,c
  6672  000B36                     i2l3129:
  6673  000B36  5035               	movf	___fttol@exp1,w,c
  6674  000B38  A4D8               	btfss	status,2,c
  6675  000B3A  D7F7               	goto	i2l3127
  6676  000B3C                     i2l3131:
  6677  000B3C  5030               	movf	___fttol@sign1,w,c
  6678  000B3E  B4D8               	btfsc	status,2,c
  6679  000B40  D008               	goto	i2l3135
  6680  000B42  1E34               	comf	___fttol@lval+3,f,c
  6681  000B44  1E33               	comf	___fttol@lval+2,f,c
  6682  000B46  1E32               	comf	___fttol@lval+1,f,c
  6683  000B48  6C31               	negf	___fttol@lval,c
  6684  000B4A  0E00               	movlw	0
  6685  000B4C  2232               	addwfc	___fttol@lval+1,f,c
  6686  000B4E  2233               	addwfc	___fttol@lval+2,f,c
  6687  000B50  2234               	addwfc	___fttol@lval+3,f,c
  6688  000B52                     i2l3135:
  6689  000B52  C031  F027         	movff	___fttol@lval,?___fttol
  6690  000B56  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  6691  000B5A  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  6692  000B5E  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  6693  000B62  0012               	return	
  6694  000B64                     __end_of___fttol:
  6695                           	opt stack 0
  6696                           pclatu	equ	0xFFB
  6697                           pclath	equ	0xFFA
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           postinc0	equ	0xFEE
  6706                           fsr0h	equ	0xFEA
  6707                           fsr0l	equ	0xFE9
  6708                           wreg	equ	0xFE8
  6709                           postdec1	equ	0xFE5
  6710                           plusw1	equ	0xFE3
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           plusw2	equ	0xFDB
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function ___ftmul *****************
  6720 ;; Defined at:
  6721 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;  f1              3   11[COMRAM] float 
  6724 ;;  f2              3   14[COMRAM] float 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  6727 ;;  sign            1   25[COMRAM] unsigned char 
  6728 ;;  cntr            1   24[COMRAM] unsigned char 
  6729 ;;  exp             1   20[COMRAM] unsigned char 
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  3   11[COMRAM] float 
  6732 ;; Registers used:
  6733 ;;		wreg, status,2, status,0, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6739 ;;      Params:         6       0       0       0       0       0       0
  6740 ;;      Locals:         6       0       0       0       0       0       0
  6741 ;;      Temps:          3       0       0       0       0       0       0
  6742 ;;      Totals:        15       0       0       0       0       0       0
  6743 ;;Total ram usage:       15 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    1
  6746 ;; This function calls:
  6747 ;;		___ftpack
  6748 ;; This function is called by:
  6749 ;;		_SetDistanceLeft
  6750 ;;		_SetDistanceRight
  6751 ;;		_SetDistanceCentral
  6752 ;;		_SetBattery
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text48
  6757  000B64                     __ptext48:
  6758                           	opt stack 0
  6759  000B64                     ___ftmul:
  6760                           	opt stack 22
  6761                           
  6762                           ;incstack = 0
  6763  000B64  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  6764  000B68  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6765  000B6A  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6766  000B6C  340D               	rlcf	___ftmul@f1+1,w,c
  6767  000B6E  3612               	rlcf	??___ftmul& (0+255),f,c
  6768  000B70  E301               	bnc	u184_41
  6769  000B72  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6770  000B74                     u184_41:
  6771  000B74  5012               	movf	??___ftmul,w,c
  6772  000B76  6E15               	movwf	___ftmul@exp,c
  6773  000B78  5015               	movf	___ftmul@exp,w,c
  6774  000B7A  A4D8               	btfss	status,2,c
  6775  000B7C  D007               	goto	i2l3051
  6776  000B7E  0E00               	movlw	0
  6777  000B80  6E0C               	movwf	?___ftmul,c
  6778  000B82  0E00               	movlw	0
  6779  000B84  6E0D               	movwf	?___ftmul+1,c
  6780  000B86  0E00               	movlw	0
  6781  000B88  6E0E               	movwf	?___ftmul+2,c
  6782  000B8A  0012               	return	
  6783  000B8C                     i2l3051:
  6784  000B8C  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  6785  000B90  6A13               	clrf	(??___ftmul+1)& (0+255),c
  6786  000B92  6A14               	clrf	(??___ftmul+2)& (0+255),c
  6787  000B94  3410               	rlcf	___ftmul@f2+1,w,c
  6788  000B96  3612               	rlcf	??___ftmul& (0+255),f,c
  6789  000B98  E301               	bnc	u186_41
  6790  000B9A  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  6791  000B9C                     u186_41:
  6792  000B9C  5012               	movf	??___ftmul,w,c
  6793  000B9E  6E1A               	movwf	___ftmul@sign,c
  6794  000BA0  501A               	movf	___ftmul@sign,w,c
  6795  000BA2  A4D8               	btfss	status,2,c
  6796  000BA4  D007               	goto	i2l3057
  6797  000BA6  0E00               	movlw	0
  6798  000BA8  6E0C               	movwf	?___ftmul,c
  6799  000BAA  0E00               	movlw	0
  6800  000BAC  6E0D               	movwf	?___ftmul+1,c
  6801  000BAE  0E00               	movlw	0
  6802  000BB0  6E0E               	movwf	?___ftmul+2,c
  6803  000BB2  0012               	return	
  6804  000BB4                     i2l3057:
  6805  000BB4  501A               	movf	___ftmul@sign,w,c
  6806  000BB6  0F7B               	addlw	123
  6807  000BB8  2615               	addwf	___ftmul@exp,f,c
  6808  000BBA  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  6809  000BBE  5011               	movf	___ftmul@f2+2,w,c
  6810  000BC0  1A1A               	xorwf	___ftmul@sign,f,c
  6811  000BC2  0E80               	movlw	128
  6812  000BC4  161A               	andwf	___ftmul@sign,f,c
  6813  000BC6  8E0D               	bsf	___ftmul@f1+1,7,c
  6814  000BC8  8E10               	bsf	___ftmul@f2+1,7,c
  6815  000BCA  0EFF               	movlw	255
  6816  000BCC  160F               	andwf	___ftmul@f2,f,c
  6817  000BCE  0EFF               	movlw	255
  6818  000BD0  1610               	andwf	___ftmul@f2+1,f,c
  6819  000BD2  0E00               	movlw	0
  6820  000BD4  1611               	andwf	___ftmul@f2+2,f,c
  6821  000BD6  0E00               	movlw	0
  6822  000BD8  6E16               	movwf	___ftmul@f3_as_product,c
  6823  000BDA  0E00               	movlw	0
  6824  000BDC  6E17               	movwf	___ftmul@f3_as_product+1,c
  6825  000BDE  0E00               	movlw	0
  6826  000BE0  6E18               	movwf	___ftmul@f3_as_product+2,c
  6827  000BE2  0E07               	movlw	7
  6828  000BE4  6E19               	movwf	___ftmul@cntr,c
  6829  000BE6                     i2l3071:
  6830  000BE6  A00C               	btfss	___ftmul@f1,0,c
  6831  000BE8  D006               	goto	i2l3075
  6832  000BEA  500F               	movf	___ftmul@f2,w,c
  6833  000BEC  2616               	addwf	___ftmul@f3_as_product,f,c
  6834  000BEE  5010               	movf	___ftmul@f2+1,w,c
  6835  000BF0  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6836  000BF2  5011               	movf	___ftmul@f2+2,w,c
  6837  000BF4  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6838  000BF6                     i2l3075:
  6839  000BF6  90D8               	bcf	status,0,c
  6840  000BF8  320E               	rrcf	___ftmul@f1+2,f,c
  6841  000BFA  320D               	rrcf	___ftmul@f1+1,f,c
  6842  000BFC  320C               	rrcf	___ftmul@f1,f,c
  6843  000BFE  90D8               	bcf	status,0,c
  6844  000C00  360F               	rlcf	___ftmul@f2,f,c
  6845  000C02  3610               	rlcf	___ftmul@f2+1,f,c
  6846  000C04  3611               	rlcf	___ftmul@f2+2,f,c
  6847  000C06  2E19               	decfsz	___ftmul@cntr,f,c
  6848  000C08  D7EE               	goto	i2l3071
  6849  000C0A  0E09               	movlw	9
  6850  000C0C  6E19               	movwf	___ftmul@cntr,c
  6851  000C0E                     i2l3081:
  6852  000C0E  A00C               	btfss	___ftmul@f1,0,c
  6853  000C10  D006               	goto	i2l3085
  6854  000C12  500F               	movf	___ftmul@f2,w,c
  6855  000C14  2616               	addwf	___ftmul@f3_as_product,f,c
  6856  000C16  5010               	movf	___ftmul@f2+1,w,c
  6857  000C18  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  6858  000C1A  5011               	movf	___ftmul@f2+2,w,c
  6859  000C1C  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  6860  000C1E                     i2l3085:
  6861  000C1E  90D8               	bcf	status,0,c
  6862  000C20  320E               	rrcf	___ftmul@f1+2,f,c
  6863  000C22  320D               	rrcf	___ftmul@f1+1,f,c
  6864  000C24  320C               	rrcf	___ftmul@f1,f,c
  6865  000C26  90D8               	bcf	status,0,c
  6866  000C28  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  6867  000C2A  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  6868  000C2C  3216               	rrcf	___ftmul@f3_as_product,f,c
  6869  000C2E  2E19               	decfsz	___ftmul@cntr,f,c
  6870  000C30  D7EE               	goto	i2l3081
  6871  000C32  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  6872  000C36  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6873  000C3A  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6874  000C3E  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  6875  000C42  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  6876  000C46  ECFC  F006         	call	___ftpack	;wreg free
  6877  000C4A  C001  F00C         	movff	?___ftpack,?___ftmul
  6878  000C4E  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  6879  000C52  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  6880  000C56  0012               	return	
  6881  000C58                     __end_of___ftmul:
  6882                           	opt stack 0
  6883                           pclatu	equ	0xFFB
  6884                           pclath	equ	0xFFA
  6885                           tblptru	equ	0xFF8
  6886                           tblptrh	equ	0xFF7
  6887                           tblptrl	equ	0xFF6
  6888                           tablat	equ	0xFF5
  6889                           prodh	equ	0xFF4
  6890                           prodl	equ	0xFF3
  6891                           intcon	equ	0xFF2
  6892                           postinc0	equ	0xFEE
  6893                           fsr0h	equ	0xFEA
  6894                           fsr0l	equ	0xFE9
  6895                           wreg	equ	0xFE8
  6896                           postdec1	equ	0xFE5
  6897                           plusw1	equ	0xFE3
  6898                           fsr1h	equ	0xFE2
  6899                           fsr1l	equ	0xFE1
  6900                           indf2	equ	0xFDF
  6901                           plusw2	equ	0xFDB
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function ___ftadd *****************
  6907 ;; Defined at:
  6908 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  f1              3   26[COMRAM] float 
  6911 ;;  f2              3   29[COMRAM] float 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  exp1            1   37[COMRAM] unsigned char 
  6914 ;;  exp2            1   36[COMRAM] unsigned char 
  6915 ;;  sign            1   35[COMRAM] unsigned char 
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  3   26[COMRAM] float 
  6918 ;; Registers used:
  6919 ;;		wreg, status,2, status,0, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6925 ;;      Params:         6       0       0       0       0       0       0
  6926 ;;      Locals:         3       0       0       0       0       0       0
  6927 ;;      Temps:          3       0       0       0       0       0       0
  6928 ;;      Totals:        12       0       0       0       0       0       0
  6929 ;;Total ram usage:       12 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    1
  6932 ;; This function calls:
  6933 ;;		___ftpack
  6934 ;; This function is called by:
  6935 ;;		_SetDistanceLeft
  6936 ;;		_SetDistanceRight
  6937 ;;		_SetDistanceCentral
  6938 ;;		_SetBattery
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text49
  6943  00063E                     __ptext49:
  6944                           	opt stack 0
  6945  00063E                     ___ftadd:
  6946                           	opt stack 22
  6947                           
  6948                           ;incstack = 0
  6949  00063E  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  6950  000642  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6951  000644  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6952  000646  341C               	rlcf	___ftadd@f1+1,w,c
  6953  000648  3621               	rlcf	??___ftadd& (0+255),f,c
  6954  00064A  E301               	bnc	u163_41
  6955  00064C  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6956  00064E                     u163_41:
  6957  00064E  5021               	movf	??___ftadd,w,c
  6958  000650  6E26               	movwf	___ftadd@exp1,c
  6959  000652  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  6960  000656  6A22               	clrf	(??___ftadd+1)& (0+255),c
  6961  000658  6A23               	clrf	(??___ftadd+2)& (0+255),c
  6962  00065A  341F               	rlcf	___ftadd@f2+1,w,c
  6963  00065C  3621               	rlcf	??___ftadd& (0+255),f,c
  6964  00065E  E301               	bnc	u164_41
  6965  000660  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  6966  000662                     u164_41:
  6967  000662  5021               	movf	??___ftadd,w,c
  6968  000664  6E25               	movwf	___ftadd@exp2,c
  6969  000666  5026               	movf	___ftadd@exp1,w,c
  6970  000668  B4D8               	btfsc	status,2,c
  6971  00066A  D00B               	goto	i2l849
  6972  00066C  5025               	movf	___ftadd@exp2,w,c
  6973  00066E  5C26               	subwf	___ftadd@exp1,w,c
  6974  000670  B0D8               	btfsc	status,0,c
  6975  000672  D00E               	goto	i2l2983
  6976  000674  5026               	movf	___ftadd@exp1,w,c
  6977  000676  0800               	sublw	0
  6978  000678  2425               	addwf	___ftadd@exp2,w,c
  6979  00067A  6E21               	movwf	??___ftadd& (0+255),c
  6980  00067C  0E18               	movlw	24
  6981  00067E  6421               	cpfsgt	??___ftadd,c
  6982  000680  D007               	goto	i2l2983
  6983  000682                     i2l849:
  6984  000682  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  6985  000686  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  6986  00068A  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  6987  00068E  0012               	return	
  6988  000690                     i2l2983:
  6989  000690  5025               	movf	___ftadd@exp2,w,c
  6990  000692  B4D8               	btfsc	status,2,c
  6991  000694  D00B               	goto	i2l853
  6992  000696  5026               	movf	___ftadd@exp1,w,c
  6993  000698  5C25               	subwf	___ftadd@exp2,w,c
  6994  00069A  B0D8               	btfsc	status,0,c
  6995  00069C  D00E               	goto	i2l2989
  6996  00069E  5025               	movf	___ftadd@exp2,w,c
  6997  0006A0  0800               	sublw	0
  6998  0006A2  2426               	addwf	___ftadd@exp1,w,c
  6999  0006A4  6E21               	movwf	??___ftadd& (0+255),c
  7000  0006A6  0E18               	movlw	24
  7001  0006A8  6421               	cpfsgt	??___ftadd,c
  7002  0006AA  D007               	goto	i2l2989
  7003  0006AC                     i2l853:
  7004  0006AC  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  7005  0006B0  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  7006  0006B4  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  7007  0006B8  0012               	return	
  7008  0006BA                     i2l2989:
  7009  0006BA  0E06               	movlw	6
  7010  0006BC  6E24               	movwf	___ftadd@sign,c
  7011  0006BE  BE1D               	btfsc	___ftadd@f1+2,7,c
  7012  0006C0  8E24               	bsf	___ftadd@sign,7,c
  7013  0006C2  BE20               	btfsc	___ftadd@f2+2,7,c
  7014  0006C4  8C24               	bsf	___ftadd@sign,6,c
  7015  0006C6  8E1C               	bsf	___ftadd@f1+1,7,c
  7016  0006C8  0EFF               	movlw	255
  7017  0006CA  161B               	andwf	___ftadd@f1,f,c
  7018  0006CC  0EFF               	movlw	255
  7019  0006CE  161C               	andwf	___ftadd@f1+1,f,c
  7020  0006D0  0E00               	movlw	0
  7021  0006D2  161D               	andwf	___ftadd@f1+2,f,c
  7022  0006D4  8E1F               	bsf	___ftadd@f2+1,7,c
  7023  0006D6  0EFF               	movlw	255
  7024  0006D8  161E               	andwf	___ftadd@f2,f,c
  7025  0006DA  0EFF               	movlw	255
  7026  0006DC  161F               	andwf	___ftadd@f2+1,f,c
  7027  0006DE  0E00               	movlw	0
  7028  0006E0  1620               	andwf	___ftadd@f2+2,f,c
  7029  0006E2  5025               	movf	___ftadd@exp2,w,c
  7030  0006E4  5C26               	subwf	___ftadd@exp1,w,c
  7031  0006E6  B0D8               	btfsc	status,0,c
  7032  0006E8  D01B               	goto	i2l3015
  7033  0006EA                     i2l3005:
  7034  0006EA  90D8               	bcf	status,0,c
  7035  0006EC  361E               	rlcf	___ftadd@f2,f,c
  7036  0006EE  361F               	rlcf	___ftadd@f2+1,f,c
  7037  0006F0  3620               	rlcf	___ftadd@f2+2,f,c
  7038  0006F2  0625               	decf	___ftadd@exp2,f,c
  7039  0006F4  5026               	movf	___ftadd@exp1,w,c
  7040  0006F6  1825               	xorwf	___ftadd@exp2,w,c
  7041  0006F8  B4D8               	btfsc	status,2,c
  7042  0006FA  D00D               	goto	i2l3013
  7043  0006FC  0624               	decf	___ftadd@sign,f,c
  7044  0006FE  C024  F021         	movff	___ftadd@sign,??___ftadd
  7045  000702  0E07               	movlw	7
  7046  000704  1621               	andwf	??___ftadd,f,c
  7047  000706  B4D8               	btfsc	status,2,c
  7048  000708  D006               	goto	i2l3013
  7049  00070A  D7EF               	goto	i2l3005
  7050  00070C                     i2l3011:
  7051  00070C  90D8               	bcf	status,0,c
  7052  00070E  321D               	rrcf	___ftadd@f1+2,f,c
  7053  000710  321C               	rrcf	___ftadd@f1+1,f,c
  7054  000712  321B               	rrcf	___ftadd@f1,f,c
  7055  000714  2A26               	incf	___ftadd@exp1,f,c
  7056  000716                     i2l3013:
  7057  000716  5025               	movf	___ftadd@exp2,w,c
  7058  000718  1826               	xorwf	___ftadd@exp1,w,c
  7059  00071A  B4D8               	btfsc	status,2,c
  7060  00071C  D01F               	goto	i2l864
  7061  00071E  D7F6               	goto	i2l3011
  7062  000720                     i2l3015:
  7063  000720  5026               	movf	___ftadd@exp1,w,c
  7064  000722  5C25               	subwf	___ftadd@exp2,w,c
  7065  000724  B0D8               	btfsc	status,0,c
  7066  000726  D01A               	goto	i2l864
  7067  000728                     i2l3017:
  7068  000728  90D8               	bcf	status,0,c
  7069  00072A  361B               	rlcf	___ftadd@f1,f,c
  7070  00072C  361C               	rlcf	___ftadd@f1+1,f,c
  7071  00072E  361D               	rlcf	___ftadd@f1+2,f,c
  7072  000730  0626               	decf	___ftadd@exp1,f,c
  7073  000732  5026               	movf	___ftadd@exp1,w,c
  7074  000734  1825               	xorwf	___ftadd@exp2,w,c
  7075  000736  B4D8               	btfsc	status,2,c
  7076  000738  D00D               	goto	i2l3025
  7077  00073A  0624               	decf	___ftadd@sign,f,c
  7078  00073C  C024  F021         	movff	___ftadd@sign,??___ftadd
  7079  000740  0E07               	movlw	7
  7080  000742  1621               	andwf	??___ftadd,f,c
  7081  000744  B4D8               	btfsc	status,2,c
  7082  000746  D006               	goto	i2l3025
  7083  000748  D7EF               	goto	i2l3017
  7084  00074A                     i2l3023:
  7085  00074A  90D8               	bcf	status,0,c
  7086  00074C  3220               	rrcf	___ftadd@f2+2,f,c
  7087  00074E  321F               	rrcf	___ftadd@f2+1,f,c
  7088  000750  321E               	rrcf	___ftadd@f2,f,c
  7089  000752  2A25               	incf	___ftadd@exp2,f,c
  7090  000754                     i2l3025:
  7091  000754  5025               	movf	___ftadd@exp2,w,c
  7092  000756  1826               	xorwf	___ftadd@exp1,w,c
  7093  000758  A4D8               	btfss	status,2,c
  7094  00075A  D7F7               	goto	i2l3023
  7095  00075C                     i2l864:
  7096  00075C  AE24               	btfss	___ftadd@sign,7,c
  7097  00075E  D00C               	goto	i2l873
  7098  000760  0EFF               	movlw	255
  7099  000762  1A1B               	xorwf	___ftadd@f1,f,c
  7100  000764  0EFF               	movlw	255
  7101  000766  1A1C               	xorwf	___ftadd@f1+1,f,c
  7102  000768  0EFF               	movlw	255
  7103  00076A  1A1D               	xorwf	___ftadd@f1+2,f,c
  7104  00076C  0E01               	movlw	1
  7105  00076E  261B               	addwf	___ftadd@f1,f,c
  7106  000770  0E00               	movlw	0
  7107  000772  221C               	addwfc	___ftadd@f1+1,f,c
  7108  000774  0E00               	movlw	0
  7109  000776  221D               	addwfc	___ftadd@f1+2,f,c
  7110  000778                     i2l873:
  7111  000778  AC24               	btfss	___ftadd@sign,6,c
  7112  00077A  D00C               	goto	i2l3031
  7113  00077C  0EFF               	movlw	255
  7114  00077E  1A1E               	xorwf	___ftadd@f2,f,c
  7115  000780  0EFF               	movlw	255
  7116  000782  1A1F               	xorwf	___ftadd@f2+1,f,c
  7117  000784  0EFF               	movlw	255
  7118  000786  1A20               	xorwf	___ftadd@f2+2,f,c
  7119  000788  0E01               	movlw	1
  7120  00078A  261E               	addwf	___ftadd@f2,f,c
  7121  00078C  0E00               	movlw	0
  7122  00078E  221F               	addwfc	___ftadd@f2+1,f,c
  7123  000790  0E00               	movlw	0
  7124  000792  2220               	addwfc	___ftadd@f2+2,f,c
  7125  000794                     i2l3031:
  7126  000794  0E00               	movlw	0
  7127  000796  6E24               	movwf	___ftadd@sign,c
  7128  000798  501B               	movf	___ftadd@f1,w,c
  7129  00079A  261E               	addwf	___ftadd@f2,f,c
  7130  00079C  501C               	movf	___ftadd@f1+1,w,c
  7131  00079E  221F               	addwfc	___ftadd@f2+1,f,c
  7132  0007A0  501D               	movf	___ftadd@f1+2,w,c
  7133  0007A2  2220               	addwfc	___ftadd@f2+2,f,c
  7134  0007A4  AE20               	btfss	___ftadd@f2+2,7,c
  7135  0007A6  D00E               	goto	i2l3041
  7136  0007A8  0EFF               	movlw	255
  7137  0007AA  1A1E               	xorwf	___ftadd@f2,f,c
  7138  0007AC  0EFF               	movlw	255
  7139  0007AE  1A1F               	xorwf	___ftadd@f2+1,f,c
  7140  0007B0  0EFF               	movlw	255
  7141  0007B2  1A20               	xorwf	___ftadd@f2+2,f,c
  7142  0007B4  0E01               	movlw	1
  7143  0007B6  261E               	addwf	___ftadd@f2,f,c
  7144  0007B8  0E00               	movlw	0
  7145  0007BA  221F               	addwfc	___ftadd@f2+1,f,c
  7146  0007BC  0E00               	movlw	0
  7147  0007BE  2220               	addwfc	___ftadd@f2+2,f,c
  7148  0007C0  0E01               	movlw	1
  7149  0007C2  6E24               	movwf	___ftadd@sign,c
  7150  0007C4                     i2l3041:
  7151  0007C4  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  7152  0007C8  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7153  0007CC  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7154  0007D0  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  7155  0007D4  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  7156  0007D8  ECFC  F006         	call	___ftpack	;wreg free
  7157  0007DC  C001  F01B         	movff	?___ftpack,?___ftadd
  7158  0007E0  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  7159  0007E4  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  7160  0007E8  0012               	return	
  7161  0007EA                     __end_of___ftadd:
  7162                           	opt stack 0
  7163                           pclatu	equ	0xFFB
  7164                           pclath	equ	0xFFA
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           postinc0	equ	0xFEE
  7173                           fsr0h	equ	0xFEA
  7174                           fsr0l	equ	0xFE9
  7175                           wreg	equ	0xFE8
  7176                           postdec1	equ	0xFE5
  7177                           plusw1	equ	0xFE3
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           plusw2	equ	0xFDB
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function ___ftpack *****************
  7187 ;; Defined at:
  7188 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  arg             3    0[COMRAM] unsigned um
  7191 ;;  exp             1    3[COMRAM] unsigned char 
  7192 ;;  sign            1    4[COMRAM] unsigned char 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;		None
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  3    0[COMRAM] float 
  7197 ;; Registers used:
  7198 ;;		wreg, status,2, status,0
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7204 ;;      Params:         5       0       0       0       0       0       0
  7205 ;;      Locals:         0       0       0       0       0       0       0
  7206 ;;      Temps:          3       0       0       0       0       0       0
  7207 ;;      Totals:         8       0       0       0       0       0       0
  7208 ;;Total ram usage:        8 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		___ftadd
  7214 ;;		___ftmul
  7215 ;;		___lwtoft
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text50
  7220  000DF8                     __ptext50:
  7221                           	opt stack 0
  7222  000DF8                     ___ftpack:
  7223                           	opt stack 22
  7224                           
  7225                           ;incstack = 0
  7226  000DF8  5004               	movf	___ftpack@exp,w,c
  7227  000DFA  B4D8               	btfsc	status,2,c
  7228  000DFC  D005               	goto	i2l2781
  7229  000DFE  5001               	movf	___ftpack@arg,w,c
  7230  000E00  1002               	iorwf	___ftpack@arg+1,w,c
  7231  000E02  1003               	iorwf	___ftpack@arg+2,w,c
  7232  000E04  A4D8               	btfss	status,2,c
  7233  000E06  D00C               	goto	i2l2787
  7234  000E08                     i2l2781:
  7235  000E08  0E00               	movlw	0
  7236  000E0A  6E01               	movwf	?___ftpack,c
  7237  000E0C  0E00               	movlw	0
  7238  000E0E  6E02               	movwf	?___ftpack+1,c
  7239  000E10  0E00               	movlw	0
  7240  000E12  6E03               	movwf	?___ftpack+2,c
  7241  000E14  0012               	return	
  7242  000E16                     i2l2785:
  7243  000E16  2A04               	incf	___ftpack@exp,f,c
  7244  000E18  90D8               	bcf	status,0,c
  7245  000E1A  3203               	rrcf	___ftpack@arg+2,f,c
  7246  000E1C  3202               	rrcf	___ftpack@arg+1,f,c
  7247  000E1E  3201               	rrcf	___ftpack@arg,f,c
  7248  000E20                     i2l2787:
  7249  000E20  0E00               	movlw	0
  7250  000E22  1401               	andwf	___ftpack@arg,w,c
  7251  000E24  6E06               	movwf	??___ftpack& (0+255),c
  7252  000E26  0E00               	movlw	0
  7253  000E28  1402               	andwf	___ftpack@arg+1,w,c
  7254  000E2A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7255  000E2C  0EFE               	movlw	254
  7256  000E2E  1403               	andwf	___ftpack@arg+2,w,c
  7257  000E30  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7258  000E32  5006               	movf	??___ftpack,w,c
  7259  000E34  1007               	iorwf	??___ftpack+1,w,c
  7260  000E36  1008               	iorwf	??___ftpack+2,w,c
  7261  000E38  B4D8               	btfsc	status,2,c
  7262  000E3A  D00C               	goto	i2l2793
  7263  000E3C  D7EC               	goto	i2l2785
  7264  000E3E                     i2l2789:
  7265  000E3E  2A04               	incf	___ftpack@exp,f,c
  7266  000E40  0E01               	movlw	1
  7267  000E42  2601               	addwf	___ftpack@arg,f,c
  7268  000E44  0E00               	movlw	0
  7269  000E46  2202               	addwfc	___ftpack@arg+1,f,c
  7270  000E48  0E00               	movlw	0
  7271  000E4A  2203               	addwfc	___ftpack@arg+2,f,c
  7272  000E4C  90D8               	bcf	status,0,c
  7273  000E4E  3203               	rrcf	___ftpack@arg+2,f,c
  7274  000E50  3202               	rrcf	___ftpack@arg+1,f,c
  7275  000E52  3201               	rrcf	___ftpack@arg,f,c
  7276  000E54                     i2l2793:
  7277  000E54  0E00               	movlw	0
  7278  000E56  1401               	andwf	___ftpack@arg,w,c
  7279  000E58  6E06               	movwf	??___ftpack& (0+255),c
  7280  000E5A  0E00               	movlw	0
  7281  000E5C  1402               	andwf	___ftpack@arg+1,w,c
  7282  000E5E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7283  000E60  0EFF               	movlw	255
  7284  000E62  1403               	andwf	___ftpack@arg+2,w,c
  7285  000E64  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7286  000E66  5006               	movf	??___ftpack,w,c
  7287  000E68  1007               	iorwf	??___ftpack+1,w,c
  7288  000E6A  1008               	iorwf	??___ftpack+2,w,c
  7289  000E6C  B4D8               	btfsc	status,2,c
  7290  000E6E  D006               	goto	i2l2797
  7291  000E70  D7E6               	goto	i2l2789
  7292  000E72                     i2l2795:
  7293  000E72  0604               	decf	___ftpack@exp,f,c
  7294  000E74  90D8               	bcf	status,0,c
  7295  000E76  3601               	rlcf	___ftpack@arg,f,c
  7296  000E78  3602               	rlcf	___ftpack@arg+1,f,c
  7297  000E7A  3603               	rlcf	___ftpack@arg+2,f,c
  7298  000E7C                     i2l2797:
  7299  000E7C  BE02               	btfsc	___ftpack@arg+1,7,c
  7300  000E7E  D003               	goto	i2l826
  7301  000E80  0E02               	movlw	2
  7302  000E82  6004               	cpfslt	___ftpack@exp,c
  7303  000E84  D7F6               	goto	i2l2795
  7304  000E86                     i2l826:
  7305  000E86  A004               	btfss	___ftpack@exp,0,c
  7306  000E88  9E02               	bcf	___ftpack@arg+1,7,c
  7307  000E8A  90D8               	bcf	status,0,c
  7308  000E8C  3204               	rrcf	___ftpack@exp,f,c
  7309  000E8E  5004               	movf	___ftpack@exp,w,c
  7310  000E90  1203               	iorwf	___ftpack@arg+2,f,c
  7311  000E92  5005               	movf	___ftpack@sign,w,c
  7312  000E94  A4D8               	btfss	status,2,c
  7313  000E96  8E03               	bsf	___ftpack@arg+2,7,c
  7314  000E98  C001  F001         	movff	___ftpack@arg,?___ftpack
  7315  000E9C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7316  000EA0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7317  000EA4  0012               	return	
  7318  000EA6                     __end_of___ftpack:
  7319                           	opt stack 0
  7320                           pclatu	equ	0xFFB
  7321                           pclath	equ	0xFFA
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           postinc0	equ	0xFEE
  7330                           fsr0h	equ	0xFEA
  7331                           fsr0l	equ	0xFE9
  7332                           wreg	equ	0xFE8
  7333                           postdec1	equ	0xFE5
  7334                           plusw1	equ	0xFE3
  7335                           fsr1h	equ	0xFE2
  7336                           fsr1l	equ	0xFE1
  7337                           indf2	equ	0xFDF
  7338                           plusw2	equ	0xFDB
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function _ReadUSART *****************
  7344 ;; Defined at:
  7345 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\pic18\plib\USART\uread.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;		None
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  data            1    0[COMRAM] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      unsigned char 
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7359 ;;      Params:         0       0       0       0       0       0       0
  7360 ;;      Locals:         1       0       0       0       0       0       0
  7361 ;;      Temps:          0       0       0       0       0       0       0
  7362 ;;      Totals:         1       0       0       0       0       0       0
  7363 ;;Total ram usage:        1 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		_isr
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text51
  7373  0018B6                     __ptext51:
  7374                           	opt stack 0
  7375  0018B6                     _ReadUSART:
  7376                           	opt stack 24
  7377                           
  7378                           ;incstack = 0
  7379  0018B6  0EF2               	movlw	242
  7380  0018B8  165E               	andwf	_USART_Status,f,c
  7381  0018BA  ACAB               	btfss	4011,6,c	;volatile
  7382  0018BC  D003               	goto	i2l582
  7383  0018BE  905E               	bcf	_USART_Status,0,c
  7384  0018C0  B0AB               	btfsc	4011,0,c	;volatile
  7385  0018C2  805E               	bsf	_USART_Status,0,c
  7386  0018C4                     i2l582:
  7387  0018C4  B4AB               	btfsc	4011,2,c	;volatile
  7388  0018C6  845E               	bsf	_USART_Status,2,c
  7389  0018C8  B2AB               	btfsc	4011,1,c	;volatile
  7390  0018CA  865E               	bsf	_USART_Status,3,c
  7391  0018CC  CFAE F001          	movff	4014,ReadUSART@data	;volatile
  7392  0018D0  5001               	movf	ReadUSART@data,w,c
  7393  0018D2  0012               	return	
  7394  0018D4                     __end_of_ReadUSART:
  7395                           	opt stack 0
  7396                           pclatu	equ	0xFFB
  7397                           pclath	equ	0xFFA
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           postinc0	equ	0xFEE
  7406                           fsr0h	equ	0xFEA
  7407                           fsr0l	equ	0xFE9
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           plusw1	equ	0xFE3
  7411                           fsr1h	equ	0xFE2
  7412                           fsr1l	equ	0xFE1
  7413                           indf2	equ	0xFDF
  7414                           plusw2	equ	0xFDB
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _ReadPWMMotorRight *****************
  7420 ;; Defined at:
  7421 ;;		line 38 in file "TimerPWM.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;		None
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;		None
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  2    0[COMRAM] unsigned int 
  7428 ;; Registers used:
  7429 ;;		None
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7435 ;;      Params:         2       0       0       0       0       0       0
  7436 ;;      Locals:         0       0       0       0       0       0       0
  7437 ;;      Temps:          0       0       0       0       0       0       0
  7438 ;;      Totals:         2       0       0       0       0       0       0
  7439 ;;Total ram usage:        2 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_isr
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text52
  7449  001960                     __ptext52:
  7450                           	opt stack 0
  7451  001960                     _ReadPWMMotorRight:
  7452                           	opt stack 24
  7453                           
  7454                           ;TimerPWM.c: 39: return PWMRight;
  7455                           
  7456                           ;incstack = 0
  7457  001960  C0C9  F001         	movff	_PWMRight,?_ReadPWMMotorRight
  7458  001964  C0CA  F002         	movff	_PWMRight+1,?_ReadPWMMotorRight+1
  7459  001968  0012               	return		;funcret
  7460  00196A                     __end_of_ReadPWMMotorRight:
  7461                           	opt stack 0
  7462                           pclatu	equ	0xFFB
  7463                           pclath	equ	0xFFA
  7464                           tblptru	equ	0xFF8
  7465                           tblptrh	equ	0xFF7
  7466                           tblptrl	equ	0xFF6
  7467                           tablat	equ	0xFF5
  7468                           prodh	equ	0xFF4
  7469                           prodl	equ	0xFF3
  7470                           intcon	equ	0xFF2
  7471                           postinc0	equ	0xFEE
  7472                           fsr0h	equ	0xFEA
  7473                           fsr0l	equ	0xFE9
  7474                           wreg	equ	0xFE8
  7475                           postdec1	equ	0xFE5
  7476                           plusw1	equ	0xFE3
  7477                           fsr1h	equ	0xFE2
  7478                           fsr1l	equ	0xFE1
  7479                           indf2	equ	0xFDF
  7480                           plusw2	equ	0xFDB
  7481                           fsr2h	equ	0xFDA
  7482                           fsr2l	equ	0xFD9
  7483                           status	equ	0xFD8
  7484                           
  7485 ;; *************** function _ReadPWMMotorLeft *****************
  7486 ;; Defined at:
  7487 ;;		line 42 in file "TimerPWM.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;		None
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;		None
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  2    0[COMRAM] unsigned int 
  7494 ;; Registers used:
  7495 ;;		None
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7501 ;;      Params:         2       0       0       0       0       0       0
  7502 ;;      Locals:         0       0       0       0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0
  7504 ;;      Totals:         2       0       0       0       0       0       0
  7505 ;;Total ram usage:        2 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; This function calls:
  7508 ;;		Nothing
  7509 ;; This function is called by:
  7510 ;;		_isr
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           	psect	text53
  7515  00196A                     __ptext53:
  7516                           	opt stack 0
  7517  00196A                     _ReadPWMMotorLeft:
  7518                           	opt stack 24
  7519                           
  7520                           ;TimerPWM.c: 43: return PWMLeft;
  7521                           
  7522                           ;incstack = 0
  7523  00196A  C0C7  F001         	movff	_PWMLeft,?_ReadPWMMotorLeft
  7524  00196E  C0C8  F002         	movff	_PWMLeft+1,?_ReadPWMMotorLeft+1
  7525  001972  0012               	return		;funcret
  7526  001974                     __end_of_ReadPWMMotorLeft:
  7527                           	opt stack 0
  7528                           pclatu	equ	0xFFB
  7529                           pclath	equ	0xFFA
  7530                           tblptru	equ	0xFF8
  7531                           tblptrh	equ	0xFF7
  7532                           tblptrl	equ	0xFF6
  7533                           tablat	equ	0xFF5
  7534                           prodh	equ	0xFF4
  7535                           prodl	equ	0xFF3
  7536                           intcon	equ	0xFF2
  7537                           postinc0	equ	0xFEE
  7538                           fsr0h	equ	0xFEA
  7539                           fsr0l	equ	0xFE9
  7540                           wreg	equ	0xFE8
  7541                           postdec1	equ	0xFE5
  7542                           plusw1	equ	0xFE3
  7543                           fsr1h	equ	0xFE2
  7544                           fsr1l	equ	0xFE1
  7545                           indf2	equ	0xFDF
  7546                           plusw2	equ	0xFDB
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function _ADCGetOutput *****************
  7552 ;; Defined at:
  7553 ;;		line 38 in file "ADC.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;  temp            2    4[COMRAM] int 
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  2    0[COMRAM] unsigned int 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7567 ;;      Params:         2       0       0       0       0       0       0
  7568 ;;      Locals:         2       0       0       0       0       0       0
  7569 ;;      Temps:          2       0       0       0       0       0       0
  7570 ;;      Totals:         6       0       0       0       0       0       0
  7571 ;;Total ram usage:        6 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; This function calls:
  7574 ;;		Nothing
  7575 ;; This function is called by:
  7576 ;;		_isr
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text54
  7581  0018D4                     __ptext54:
  7582                           	opt stack 0
  7583  0018D4                     _ADCGetOutput:
  7584                           	opt stack 24
  7585                           
  7586                           ;ADC.c: 39: int temp;
  7587                           ;ADC.c: 40: temp = ADRESL;
  7588                           
  7589                           ;incstack = 0
  7590  0018D4  CFC3 F005          	movff	4035,ADCGetOutput@temp	;volatile
  7591  0018D8  6A06               	clrf	ADCGetOutput@temp+1,c
  7592                           
  7593                           ;ADC.c: 41: return temp + (ADRESH << 8);
  7594  0018DA  50C4               	movf	4036,w,c	;volatile
  7595  0018DC  6E04               	movwf	(??_ADCGetOutput+1)& (0+255),c
  7596  0018DE  6A03               	clrf	??_ADCGetOutput& (0+255),c
  7597  0018E0  5005               	movf	ADCGetOutput@temp,w,c
  7598  0018E2  2403               	addwf	??_ADCGetOutput,w,c
  7599  0018E4  6E01               	movwf	?_ADCGetOutput,c
  7600  0018E6  5006               	movf	ADCGetOutput@temp+1,w,c
  7601  0018E8  2004               	addwfc	??_ADCGetOutput+1,w,c
  7602  0018EA  6E02               	movwf	?_ADCGetOutput+1,c
  7603  0018EC  0012               	return	
  7604  0018EE                     __end_of_ADCGetOutput:
  7605                           	opt stack 0
  7606                           pclatu	equ	0xFFB
  7607                           pclath	equ	0xFFA
  7608                           tblptru	equ	0xFF8
  7609                           tblptrh	equ	0xFF7
  7610                           tblptrl	equ	0xFF6
  7611                           tablat	equ	0xFF5
  7612                           prodh	equ	0xFF4
  7613                           prodl	equ	0xFF3
  7614                           intcon	equ	0xFF2
  7615                           postinc0	equ	0xFEE
  7616                           fsr0h	equ	0xFEA
  7617                           fsr0l	equ	0xFE9
  7618                           wreg	equ	0xFE8
  7619                           postdec1	equ	0xFE5
  7620                           plusw1	equ	0xFE3
  7621                           fsr1h	equ	0xFE2
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           plusw2	equ	0xFDB
  7625                           fsr2h	equ	0xFDA
  7626                           fsr2l	equ	0xFD9
  7627                           status	equ	0xFD8
  7628                           pclatu	equ	0xFFB
  7629                           pclath	equ	0xFFA
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           intcon	equ	0xFF2
  7637                           postinc0	equ	0xFEE
  7638                           fsr0h	equ	0xFEA
  7639                           fsr0l	equ	0xFE9
  7640                           wreg	equ	0xFE8
  7641                           postdec1	equ	0xFE5
  7642                           plusw1	equ	0xFE3
  7643                           fsr1h	equ	0xFE2
  7644                           fsr1l	equ	0xFE1
  7645                           indf2	equ	0xFDF
  7646                           plusw2	equ	0xFDB
  7647                           fsr2h	equ	0xFDA
  7648                           fsr2l	equ	0xFD9
  7649                           status	equ	0xFD8
  7650                           
  7651                           	psect	rparam
  7652  0000                     pclatu	equ	0xFFB
  7653                           pclath	equ	0xFFA
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon	equ	0xFF2
  7661                           postinc0	equ	0xFEE
  7662                           fsr0h	equ	0xFEA
  7663                           fsr0l	equ	0xFE9
  7664                           wreg	equ	0xFE8
  7665                           postdec1	equ	0xFE5
  7666                           plusw1	equ	0xFE3
  7667                           fsr1h	equ	0xFE2
  7668                           fsr1l	equ	0xFE1
  7669                           indf2	equ	0xFDF
  7670                           plusw2	equ	0xFDB
  7671                           fsr2h	equ	0xFDA
  7672                           fsr2l	equ	0xFD9
  7673                           status	equ	0xFD8
  7674                           
  7675                           	psect	temp
  7676  00005F                     btemp:
  7677                           	opt stack 0
  7678  00005F                     	ds	1
  7679  0000                     int$flags	set	btemp
  7680                           pclatu	equ	0xFFB
  7681                           pclath	equ	0xFFA
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           postinc0	equ	0xFEE
  7690                           fsr0h	equ	0xFEA
  7691                           fsr0l	equ	0xFE9
  7692                           wreg	equ	0xFE8
  7693                           postdec1	equ	0xFE5
  7694                           plusw1	equ	0xFE3
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           plusw2	equ	0xFDB
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8


Data Sizes:
    Strings     59
    Constant    0
    Data        70
    BSS         32
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     77      94
    BANK0           160     18     107
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    putsUSART@data	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[9]), 

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[2]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_SetBattery
    _putsUSART->_WriteUSART
    _SetSpeedRight->_ConvertPicSpeed
    _SetSpeedLeft->_ConvertPicSpeed
    _SetDistanceRight->___fttol
    _ShowLecturesInLCD->_LCDWriteInt
    _LCDWriteString->i2_LCDByte
    _LCDWriteInt->___awdiv
    _LCDWriteInt->i2_LCDByte
    _LCDGotoXY->i2_LCDByte
    i2_LCDByte->i2_LCDBusyLoop
    _SetDistanceLeft->___fttol
    _SetDistanceCentral->___fttol
    _SetBattery->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lwtoft
    ___ftadd->___ftmul

Critical Paths under _main in BANK0

    _main->_Go
    _MotorInit->_SetPWMMotorLeft
    _MotorInit->_SetPWMMotorRight
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop
    _Go->_TurnLeft135
    _Go->_TurnLeft90
    _Go->_TurnRight135
    _Go->_TurnRight90
    _TurnRight90->_SetMotorLeft
    _TurnRight90->_SetMotorRight
    _TurnRight135->_SetMotorLeft
    _TurnRight135->_SetMotorRight
    _TurnLeft90->_SetMotorLeft
    _TurnLeft90->_SetMotorRight
    _TurnLeft135->_SetMotorLeft
    _TurnLeft135->_SetMotorRight
    _SetMotorRight->_SetPWMMotorRight
    _SetPWMMotorRight->___lwdiv
    _SetMotorLeft->_SetPWMMotorLeft
    _SetPWMMotorLeft->___lwdiv
    _ReadParallel->_ConvertParallelSpeed

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22593
                            _ADCInit
              _ADCInitiateConversion
                                 _Go
                            _LCDInit
                          _MotorInit
                       _SetMotorLeft
                      _SetMotorRight
                       _TimerPWMInit
                       _parallelInit
 ---------------------------------------------------------------------------------
 (1) _parallelInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TimerPWMInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorInit                                            0     0      0    1136
                    _SetPWMMotorLeft
                   _SetPWMMotorRight
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1004
                                              8 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              5     4      1     797
                                              3 BANK0      5     4      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Go                                                   6     6      0   17089
                                             12 BANK0      6     6      0
                _ReadDistanceCentral
                   _ReadDistanceLeft
                  _ReadDistanceRight
                           _ReadMode
                       _ReadParallel
              _ReadParallelSpeedLeft
             _ReadParallelSpeedRight
                       _SetMotorLeft
                      _SetMotorRight
                        _TurnLeft135
                         _TurnLeft90
                       _TurnRight135
                        _TurnRight90
 ---------------------------------------------------------------------------------
 (2) _TurnRight90                                          1     1      0    3364
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnRight135                                         1     1      0    3364
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft90                                           1     1      0    3364
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (2) _TurnLeft135                                          1     1      0    3364
                                             11 BANK0      1     1      0
                       _SetMotorLeft
                      _SetMotorRight
 ---------------------------------------------------------------------------------
 (1) _SetMotorRight                                        2     0      2    1682
                                              9 BANK0      2     0      2
                   _SetPWMMotorRight
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorRight                                     2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorLeft                                         2     0      2    1682
                                              9 BANK0      2     0      2
                    _SetPWMMotorLeft
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     322
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorLeft                                      2     0      2     568
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedRight                               2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallelSpeedLeft                                2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadParallel                                         3     3      0     135
                                              3 BANK0      3     3      0
               _ConvertParallelSpeed
 ---------------------------------------------------------------------------------
 (3) _ConvertParallelSpeed                                 3     1      2      22
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ReadMode                                             2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceRight                                    2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceLeft                                     2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReadDistanceCentral                                  2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADCInitiateConversion                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                 19    19      0   43345
                                             58 COMRAM    19    19      0
                       _ADCGetOutput
                   _ReadPWMMotorLeft
                  _ReadPWMMotorRight
                          _ReadUSART
                         _SetBattery
                 _SetDistanceCentral
                    _SetDistanceLeft
                   _SetDistanceRight
                       _SetSpeedLeft
                      _SetSpeedRight
                         _WriteUSART
                          _putsUSART
 ---------------------------------------------------------------------------------
 (7) _putsUSART                                            2     0      2     187
                                              1 COMRAM     2     0      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (8) _WriteUSART                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _SetSpeedRight                                        1     1      0      44
                                              3 COMRAM     1     1      0
                    _ConvertPicSpeed
 ---------------------------------------------------------------------------------
 (7) _SetSpeedLeft                                         1     1      0      44
                                              3 COMRAM     1     1      0
                    _ConvertPicSpeed
 ---------------------------------------------------------------------------------
 (8) _ConvertPicSpeed                                      3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _SetDistanceRight                                     4     2      2   14027
                                             53 COMRAM     4     2      2
                  _ShowLecturesInLCD
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) _ShowLecturesInLCD                                    0     0      0    4438
                          _LCDGotoXY
                        _LCDWriteInt
                     _LCDWriteString
 ---------------------------------------------------------------------------------
 (9) _LCDWriteString                                       3     1      2    1020
                                              8 COMRAM     3     1      2
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (9) _LCDWriteInt                                         14    11      3    2315
                                              8 COMRAM    14    11      3
                            ___awdiv
                            ___awmod
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4     424
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awdiv                                             8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) _LCDGotoXY                                            2     1      1    1103
                                              8 COMRAM     2     1      1
                          i2_LCDByte
 ---------------------------------------------------------------------------------
 (10) i2_LCDByte                                           5     4      1     457
                                              3 COMRAM     5     4      1
                      i2_LCDBusyLoop
 ---------------------------------------------------------------------------------
 (11) i2_LCDBusyLoop                                       3     3      0     117
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _SetDistanceLeft                                      4     2      2    9589
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetDistanceCentral                                   4     2      2    9589
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (7) _SetBattery                                           5     3      2    9612
                                             53 COMRAM     5     3      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3    2309
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     508
                                             38 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    3099
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3587
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _ReadUSART                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorRight                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ReadPWMMotorLeft                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADCGetOutput                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCInitiateConversion
   _Go
     _ReadDistanceCentral
     _ReadDistanceLeft
     _ReadDistanceRight
     _ReadMode
     _ReadParallel
       _ConvertParallelSpeed
     _ReadParallelSpeedLeft
     _ReadParallelSpeedRight
     _SetMotorLeft
       _SetPWMMotorLeft
         ___lwdiv
         _abs (ARG)
       _abs
     _SetMotorRight
       _SetPWMMotorRight
         ___lwdiv
         _abs (ARG)
       _abs
     _TurnLeft135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnLeft90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight135
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
     _TurnRight90
       _SetMotorLeft
         _SetPWMMotorLeft
           ___lwdiv
           _abs (ARG)
         _abs
       _SetMotorRight
         _SetPWMMotorRight
           ___lwdiv
           _abs (ARG)
         _abs
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _MotorInit
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
   _SetMotorLeft
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _abs
   _SetMotorRight
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
     _abs
   _TimerPWMInit
   _parallelInit

 _isr (ROOT)
   _ADCGetOutput
   _ReadPWMMotorLeft
   _ReadPWMMotorRight
   _ReadUSART
   _SetBattery
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceCentral
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceLeft
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceRight
     _ShowLecturesInLCD
       _LCDGotoXY
         i2_LCDByte
           i2_LCDBusyLoop
       _LCDWriteInt
         ___awdiv
         ___awmod
         i2_LCDByte
           i2_LCDBusyLoop
       _LCDWriteString
         i2_LCDByte
           i2_LCDBusyLoop
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetSpeedLeft
     _ConvertPicSpeed
   _SetSpeedRight
     _ConvertPicSpeed
   _WriteUSART
   _putsUSART
     _WriteUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     12      6B       5       66.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4D      5E       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C9      15        0.0%
DATA                 0      0      C9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Wed Apr 20 00:31:22 2016

           __size_of_TurnLeft135 0032        __size_of_SetPWMMotorRight 003A  
                   ?_LCDBusyLoop 0001                               _GO 007E11  
                             _Go 07EA                     ___awdiv@sign 0006  
           __size_of_TurnRight90 0032                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                     ___ftadd@exp1 0026  
                   ___ftadd@exp2 0025                              ?_Go 0001  
                   ___ftadd@sign 0024                              l283 13F8  
                            l284 13FA                              l647 17F0  
                            _GIE 007F97                     __CFG_CPB$OFF 000000  
                            _RC0 007C10                              _RC1 007C11  
                            _RC2 007C12                              _RC3 007C13  
                            _RC4 007C14                              _RC5 007C15  
                            _RD4 007C1C                              _RD5 007C1D  
                            _RD6 007C1E                     __CFG_CPD$OFF 000000  
                            _PSA 007EAB                SetMotorLeft@speed 00AF  
                            _abs 17CE                              _isr 0008  
          __size_of_TurnRight135 0032                  __end_of_ADCInit 1874  
                   __CFG_BORV$18 000000                     ___awmod@sign 0006  
      __size_of_ReadPWMMotorLeft 000A                              prod 000FF3  
                            wreg 000FE8                             ??_Go 00B2  
        LCDWriteInt@field_length 000B                  __end_of_LCDByte 1428  
                __end_of_LCDInit 0F38                     __CFG_LVP$OFF 000000  
                   ?_LCDWriteInt 0009                      LCDByte@temp 00AD  
          __size_of_ADCGetOutput 001A                             l1004 113E  
                           ?_abs 00A6                             l2371 10FA  
                           l3243 0F0A                             l2701 0C5E  
                           l2381 1130                             l2373 1100  
                           l3405 1688                             l3247 0F14  
                           l2713 0C76                             l2369 10EE  
                           l2553 1572                             l3273 087A  
                           l2731 0C9A                             l2707 0C6A  
                           l3275 0898                             l2725 0C8E  
                           l2557 157C                             l2565 152C  
                           l3293 093A                             l3277 08B2  
                           l2743 0CB2                             l2719 0C82  
                           l3287 091A                             l3279 08CC  
                           l2663 1436                             l2761 0CD6  
                           l2737 0CA6                             l2569 1536  
                           l3297 0954                             l3289 0920  
                           l2755 0CCA                             l2749 0CBE  
                           l2767 0CE2                             l2775 0CEE  
                           l2951 13C6                             _ADIE 007CEE  
                           _ADIF 007CF6                             ?_isr 0001  
                           _ADON 007E10                             _CHS0 007E12  
                           _CHS1 007E13                             _CHS2 007E14  
                           _CHS3 007E15                             _ANS0 007BF0  
                           STR_1 062F                             _ANS1 007BF1  
                           STR_2 0623                             _ANS2 007BF2  
                           STR_3 0612                             _ANS3 007BF3  
                           STR_4 0601                             STR_5 063A  
                           STR_6 0638                             _T0CS 007EAD  
 __size_of_ADCInitiateConversion 0004                             u2030 082A  
                           u2040 083E                             u2050 0852  
       __size_of_SetDistanceLeft 0072                             u2060 0866  
                           u1360 156C                             u2307 172A  
                           u1380 1526                             u2317 175C  
                           u2327 178E                             u2337 17C0  
                           u2297 0EB2                             _PEIE 007F96  
                           _RCIF 007CF5                             i2l51 00F0  
                           i2l60 00B0                             i2l55 0054  
                           i2l56 00EE                             i2l57 006A  
                           i2l58 0080                             i2l83 01AA  
                           i2l59 009A                             i2l92 01D6  
                           i2l86 01BA                             i2l89 01C4  
  __end_of_ADCInitiateConversion 1980                             _Mode 00BD  
                           abs@a 00A6                             _main 1656  
                   ___ftpack@arg 0001               __size_of_LCDGotoXY 0040  
                   ___ftpack@exp 0004                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr0l 000FE9  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           btemp 005F                             pclat 000FFA  
                           prodh 000FF4                             prodl 000FF3  
                           start 0212                    __CFG_IESO$OFF 000000  
   __end_of_ConvertParallelSpeed 0D36                    __CFG_MCLRE$ON 000000  
               ADCGetOutput@temp 0005                     ___ftmul@cntr 0019  
                   ___param_bank 000010                     ___ftmul@sign 001A  
              ?_ReadDistanceLeft 00A6     ConvertParallelSpeed@velocity 00A8  
                   ___fttol@exp1 0035                            ??_abs 00A8  
                   _TurnRight135 1738                     ___fttol@lval 0031  
                          ??_isr 003B               __size_ofi2_LCDByte 0040  
             ??_ReadDistanceLeft 00A8                    ?_ReadParallel 0001  
                          ?_main 0001                  __end_of___awdiv 10D0  
                __end_of___ftadd 07EA                  __end_of___awmod 1312  
                   LCDInit@style 00AF                      isr@PWMRight 0056  
                __end_of___ftmul 0C58                  ___awdiv@divisor 0003  
                __end_of___fttol 0B64                            _T0PS0 007EA8  
                          _T0PS1 007EA9                            _T0PS2 007EAA  
                __end_of___lwdiv 1148                            i2l321 0A6E  
                          i2l283 15EE                            i2l284 15F0  
                          i2l582 18C4                            i2l569 17FA  
                          i2l826 0E86                            i2l853 06AC  
                   _ADCGetOutput 18D4                            i2l864 075C  
                          i2l873 0778                            i2l849 0682  
                ___awdiv@counter 0005                            _RCREG 000FAE  
                          _TMR0H 000FD7                            _TMR0L 000FD6  
                          _PORTB 000F81                            _PORTD 000F83  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TXREG 000FAD  
                  __CFG_PWRT$OFF 000000                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                _SetPWMMotorLeft 16CC                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                    ___ftpack@sign 0005  
           SetSpeedRight@lecture 0004                            tablat 000FF5  
       __end_of_SetDistanceRight 11BE                            plusw1 000FE3  
                          plusw2 000FDB                            status 000FD8  
                 __CFG_HFOFST$ON 000000                      isr@Readport 0058  
                 __CFG_PBADEN$ON 000000                   WriteUSART@data 0001  
                __initialization 14C4                _ReadDistanceRight 1942  
                   __end_of_main 1692                   ??_ReadParallel 00A9  
               __end_of_ReadMode 1942               ?_ReadDistanceRight 00A6  
                      ??_ADCInit 00A6          SetDistanceRight@lecture 0036  
                         ??_main 00B8                    ___fttol@sign1 0030  
              __end_of_LCDGotoXY 15D6                    __activetblptr 000002  
                  LCDByte@isdata 00A9                        ??_LCDByte 00AA  
                      ??_LCDInit 00AE              ??_ReadDistanceRight 00A8  
                     _SetBattery 0FC6                           _ADCON1 000FC1  
                         _ADCON2 000FC0                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _T08BIT 007EAE  
               ___awdiv@dividend 0001                 __end_of___ftpack 0EA6  
                         _ANSELH 000F7F                __end_ofi2_LCDByte 1616  
                         i2l3011 070C                           i2l3013 0716  
                         i2l3005 06EA                           i2l3031 0794  
                         i2l3023 074A                           i2l3015 0720  
                         i2l3041 07C4                           i2l3025 0754  
                         i2l3017 0728                           i2l3121 0B12  
                         i2l3051 0B8C                           i2l3131 0B3C  
                         i2l3117 0B02                           i2l2501 12D8  
                         i2l3071 0BE6                           i2l3135 0B52  
                         i2l3127 0B2A                           i2l2503 12DC  
                         i2l2511 12FA                           i2l3081 0C0E  
                         i2l3057 0BB4                           i2l3129 0B36  
                         i2l3313 0094                           i2l3075 0BF6  
                         i2l2515 1308                           i2l2507 12F0  
                         i2l2603 0F7A                           i2l2611 0FB2  
                         i2l3323 00C2                           i2l3085 0C1E  
                         i2l2461 108E                           i2l2453 1070  
                 __CFG_WDTEN$OFF 000000                           i2l2471 10AE  
                         i2l2463 1092                           i2l2447 1060  
                         i2l2631 09F2                           i2l2607 0F9A  
                         i2l3343 013E                           i2l3335 0122  
                         i2l3351 014C                           i2l3319 00B8  
                         i2l2641 0A1A                           i2l2625 09AC  
                         i2l2609 0FAE                           i2l1673 18FA  
                         i2l3361 016E                           i2l3099 0A9C  
                         i2l2395 1622                           i2l2459 1086  
                         i2l2475 10B8                           i2l2491 12B6  
                         i2l2643 0A38                           i2l3371 0192  
                         i2l3339 0130                           i2l2637 0A02  
                         i2l2901 0D76                           i2l3365 017E  
                         i2l2575 15A0                           i2l2583 15AE  
                         i2l2479 10C6                           i2l2495 12C2  
                         i2l2647 0A50                           i2l2639 0A06  
                         i2l2591 0F3A                           i2l2577 15A4  
                         i2l2585 15C8                           i2l2913 0D8A  
                         i2l3377 01A2                           i2l2579 15A8  
                         i2l2499 12D0                           i2l2931 0DA8  
                         i2l2907 0D80                           i2l2781 0E08  
                         i2l2925 0D9E                           i2l2919 0D94  
                         i2l2871 0D44                           i2l2793 0E54  
                         i2l2785 0E16                           i2l2865 0D3A  
                         i2l2795 0E72                           i2l2787 0E20  
                         i2l2883 0D58                           i2l2939 0DB2  
                         i2l2797 0E7C                           i2l2789 0E3E  
                         i2l2877 0D4E                           i2l2983 0690  
                         i2l2895 0D6C                           i2l2889 0D62  
                         i2l2989 06BA          ??_ReadParallelSpeedLeft 00A8  
                         u163_41 064E                           u164_41 0662  
                         u190_41 0A80                           u184_41 0B74  
               __end_of___lwtoft 1898                           u186_41 0B9C  
             __size_of_ReadUSART 001E                           _TMR0IE 007F95  
                         _TMR0IF 007F92                           _TMR0ON 007EAF  
                         _TRISA0 007C90                           _TRISA1 007C91  
                         _TRISA2 007C92                           _TRISA3 007C93  
             SetMotorRight@speed 00AF                ??_SetDistanceLeft 0038  
      __end_of_ReadDistanceRight 194C                   __CFG_XINST$OFF 000000  
                 _LCDWriteString 0F38                  _DistanceCentral 00A0  
                 _MotorLeftSpeed 00BF                 _SetPWMMotorRight 1692  
                      ??___awdiv 0005                        ??___ftadd 0021  
                 __CFG_STVREN$ON 000000                        ??___awmod 0005  
                     _SpeedRight 0052                        ??___ftmul 0012  
                      ??___fttol 002B                        ??___lwdiv 00AA  
           __size_of_LCDBusyLoop 0056                           clear_0 14CA  
                         clear_1 14D6                 ___awdiv@quotient 0007  
                ___awmod@divisor 0003          __end_of_SetPWMMotorLeft 1706  
                ___awmod@counter 0005       __end_of_SetDistanceCentral 12A2  
             __size_of_MotorInit 002A                    ?_parallelInit 0001  
          ___ftmul@f3_as_product 0016                 _ReadPWMMotorLeft 196A  
                   LCDWriteInt@i 0015                     LCDWriteInt@j 0013  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
       __size_of_ConvertPicSpeed 00C2             _ConvertParallelSpeed 0C58  
                _SetBattery$1541 0038           __size_ofi2_LCDBusyLoop 0040  
                   Go@SpeedRight 00B6             __size_of_LCDWriteInt 00FE  
                     __accesstop 0060          __end_of__initialization 14FC  
                     ___ftadd@f1 001B                       ___ftadd@f2 001E  
         __end_of_LCDWriteString 0FC6                    ___rparam_used 000001  
                      LCDByte@hn 00AA                        LCDByte@ln 00AB  
                  ?_SetMotorLeft 00AF                    ?_SetSpeedLeft 0001  
                     _TurnLeft90 176A                       ___ftmul@f1 000C  
                     ___ftmul@f2 000F                       ___fttol@f1 0027  
                     _WriteUSART 18EE                   __pcstackCOMRAM 0001  
                   __pidataBANK0 147E                       __end_of_Go 0972  
              __end_of_ReadUSART 18D4                   ??_parallelInit 00A6  
                     ___lwtoft@c 0009                      ?_SetBattery 0036  
          ?_ConvertParallelSpeed 00A6     __size_of_ReadDistanceCentral 000A  
                  ReadUSART@data 0001                parallel@SpeedLeft 00C3  
                     __pbssBANK0 00B8             __end_of_ReadParallel 13D2  
                      ?_ReadMode 00A6                __end_of_MotorInit 1850  
                 ??_SetMotorLeft 00B1                  ?_LCDWriteString 0009  
                  ??_TurnLeft135 00B1                   ??_SetSpeedLeft 0004  
     __size_of_ReadDistanceRight 000A                    ??_TurnRight90 00B1  
                  i2_LCDBusyLoop 1616                    putsUSART@data 0002  
                        _ADCInit 1850                        ?___ftpack 0001  
                  ?_TimerPWMInit 0001                 ?_SetPWMMotorLeft 00AD  
                      ?___lwtoft 0009                          _LCDByte 13D2  
                        _LCDInit 0EA6           __size_of_SetMotorRight 0046  
       ??_ReadParallelSpeedRight 00A8        __size_of_ReadDistanceLeft 000A  
         __size_of_SetSpeedRight 0012               __size_of_putsUSART 002C  
                        _PWMLeft 00C7                i2LCDBusyLoop@busy 0001  
              i2LCDBusyLoop@temp 0002                          _Battery 004E  
                     ??_ReadMode 00A8                ??_ConvertPicSpeed 0003  
              ?_SetDistanceRight 0036                     isr@iteration 005C  
          _ADCInitiateConversion 197C               ??_SetDistanceRight 0038  
                        __Hparam 0000                      ?_TurnLeft90 0001  
                        __Lparam 0000                     _DistanceLeft 00A2  
                    ?_WriteUSART 0001              __size_of_SetBattery 0086  
                        ___cgram 0060                   ?i2_LCDBusyLoop 0001  
                        ___awdiv 104C                          ___ftadd 063E  
                        ___awmod 12A2                          ___ftmul 0B64  
                        ___fttol 0A70              __end_of_TurnLeft135 17CE  
                        ___lwdiv 10D0                     __psmallconst 0600  
              ReadParallel@right 00A9                   ??_TimerPWMInit 00A6  
                        __pcinit 14C4                       ??___ftpack 0006  
                        __ramtop 0600                          __ptext0 1656  
                        __ptext1 1974                          __ptext2 1898  
                        __ptext3 1826                          __ptext4 0EA6  
                        __ptext5 13D2                          __ptext6 1428  
                        __ptext7 07EA                          __ptext8 1706  
                        __ptext9 1738              __end_of_TurnRight90 1738  
                     ??___lwtoft 000C                     __size_of_abs 002C  
                   __size_of_isr 020A           ??_ConvertParallelSpeed 00A8  
               ___awmod@dividend 0001                SetBattery@lecture 0036  
                      _LCDGotoXY 1596         __end_of_SetPWMMotorRight 16CC  
                _SetDistanceLeft 11BE                _ShowLecturesInLCD 1312  
           end_of_initialization 14FC                          isr@read 004B  
             ?_ShowLecturesInLCD 0001                    __Lmediumconst 0000  
 __size_of_ReadParallelSpeedLeft 000A             __end_of_parallelInit 197C  
  __end_of_ReadParallelSpeedLeft 1938                _ReadPWMMotorRight 1960  
                      i2_LCDByte 15D6                    _SetMotorRight 150A  
       __end_of_ReadPWMMotorLeft 1974                  _MotorRightSpeed 00C1  
             ?_ReadPWMMotorRight 0001              ??_ShowLecturesInLCD 0017  
                  _SetSpeedRight 1900                        _RCSTAbits 000FAB  
                        postdec1 000FE5                          postinc0 000FEE  
              __end_of_putsUSART 1826       SetPWMMotorRight@percentage 00AD  
            ??_ReadPWMMotorRight 0003                LCDWriteString@msg 0009  
           __end_of_SetMotorLeft 1596             __end_of_SetSpeedLeft 1924  
          __size_of_ReadParallel 005A                        _TRISDbits 000F95  
__size_of_ReadParallelSpeedRight 000A        __end_of_ShowLecturesInLCD 1378  
                     ?_LCDGotoXY 0009              __size_of_TurnLeft90 0032  
            __size_of_WriteUSART 0012               _SetDistanceCentral 1230  
            i2LCDBusyLoop@status 0003           ?_ADCInitiateConversion 0001  
      __end_of_ReadPWMMotorRight 196A                       LCDInit@__i 00B0  
                      _TXSTAbits 000FAC                       LCDGotoXY@x 000A  
                     LCDGotoXY@y 0009                   ?_SetMotorRight 00AF  
                     ?i2_LCDByte 0004              ?_SetDistanceCentral 0036  
                    _TurnLeft135 179C                   ?_SetSpeedRight 0001  
                ??i2_LCDBusyLoop 0001                      ___ftmul@exp 0015  
            _ReadDistanceCentral 1956                    ??_LCDBusyLoop 00A6  
                    _TurnRight90 1706                       isr@PWMLeft 0054  
                   _ReadParallel 1378          __end_of_SetDistanceLeft 1230  
           ??_SetDistanceCentral 0038              start_initialization 14C4  
                   ??_SetBattery 0038                        _ReadUSART 18B6  
           ?_ReadDistanceCentral 00A6                 _ReadDistanceLeft 194C  
                    __end_of_abs 17FA                      __end_of_isr 0212  
                  ??_LCDWriteInt 000C                  i2LCDByte@isdata 0004  
               ??_LCDWriteString 000B             __end_of_TimerPWMInit 18B6  
                     isr@counter 005A                __size_of_ReadMode 000A  
         _ReadParallelSpeedRight 1924                        _MotorInit 1826  
                      _SpeedLeft 0050               __end_of_SetBattery 104C  
                  ?_TurnRight135 0001                      __pdataBANK0 0060  
               __CFG_LPT1OSC$OFF 000000                         ?_ADCInit 0001  
        ConvertPicSpeed@velocity 0003              __end_of_LCDBusyLoop 147E  
             parallel@SpeedRight 00C5                    ?_ADCGetOutput 0001  
                    Go@SpeedLeft 00B4                         ?_LCDByte 00A9  
                       ?_LCDInit 0001                __size_of___ftpack 00AE  
                    __pbssCOMRAM 004E                  _ConvertPicSpeed 0D36  
                       LCDByte@c 00AC            ??_ReadDistanceCentral 00A8  
                     ?_ReadUSART 0001                __size_of___lwtoft 0024  
                  __pcstackBANK0 00A6                      ??_LCDGotoXY 000A  
     __size_of_ShowLecturesInLCD 0066        SetDistanceCentral@lecture 0036  
          __size_of_parallelInit 0008              ReadParallel@lecture 00AA  
                  i2LCDByte@temp 0008       __size_of_ReadPWMMotorRight 000A  
               LCDWriteInt@F4236 00B8                  ??_SetMotorRight 00B1  
            __end_of_LCDWriteInt 0A70                  ??_SetSpeedRight 0004  
                      __pnvBANK0 00C7                      ??i2_LCDByte 0005  
                    i2LCDByte@hn 0005                      i2LCDByte@ln 0006  
                   ??_TurnLeft90 00B1                 ___lwdiv@dividend 00A6  
              __CFG_CCP2MX$PORTC 000000                       ?_MotorInit 0001  
                   ??_WriteUSART 0001                        __pintcode 0008  
                 ??_TurnRight135 00B1                         ?___awdiv 0001  
                       ?___ftadd 001B                         ?___awmod 0001  
                       ?___ftmul 000C                         ?___fttol 0027  
                       ?___lwdiv 00A6            __size_of_SetMotorLeft 0046  
      __size_of_SetDistanceRight 0076            __size_of_SetSpeedLeft 0012  
                 ??_ADCGetOutput 0003                     _parallelInit 1974  
                    __smallconst 0600                 ?_SetDistanceLeft 0036  
                LCDBusyLoop@busy 00A6                  LCDBusyLoop@temp 00A7  
               ___lwdiv@quotient 00AA               __end_of_TurnLeft90 179C  
               ReadParallel@left 00AB         __size_of_SetPWMMotorLeft 003A  
              ?_SetPWMMotorRight 00AD               __end_of_WriteUSART 1900  
                    __size_of_Go 0188               ??_SetPWMMotorRight 00AF  
                   _SetMotorLeft 1550                         i2u145_41 097C  
                       i2u192_40 0ABA                         i2u192_45 0AB2  
              ?_ReadPWMMotorLeft 0001                     _SetSpeedLeft 1912  
               __CFG_WDTPS$32768 000000                      _LCDBusyLoop 1428  
             ??_ReadPWMMotorLeft 0003                 LCDWriteString@cc 000B  
        __end_of_ConvertPicSpeed 0DF8                 __size_of_ADCInit 0024  
                      _putsUSART 17FA                         _PWMRight 00C9  
            SetSpeedLeft@lecture 0004                      ??_ReadUSART 0001  
               __size_of_LCDByte 0056                 __size_of_LCDInit 0092  
  __size_of_ConvertParallelSpeed 00DE            __size_of_TimerPWMInit 001E  
        ??_ADCInitiateConversion 00A6                      _LCDWriteInt 0972  
                      isr@CharRx 004D                        copy_data0 14F0  
         SetDistanceLeft@lecture 0036                         _ReadMode 1938  
                   ?_TurnLeft135 0001                         __Hrparam 0000  
          _ReadParallelSpeedLeft 192E                      ??_MotorInit 00AF  
                       __Lrparam 0000         __end_of_ReadDistanceLeft 1956  
             __CFG_BOREN$SBORDIS 000000                    _DistanceRight 00A4  
                   ?_TurnRight90 0001                 __size_of___awdiv 0084  
               __size_of___ftadd 01AC                 __size_of___awmod 0070  
               __size_of___ftmul 00F4                 __size_of___fttol 00F4  
              LCDBusyLoop@status 00A8                 __size_of___lwdiv 0078  
                       ___ftpack 0DF8                       ?_putsUSART 0002  
                   _TimerPWMInit 1898                         ___lwtoft 1874  
                     i2LCDByte@c 0007                  ___lwdiv@divisor 00A8  
                ___lwdiv@counter 00AC                         __ptext10 176A  
                       __ptext11 179C                         __ptext20 1378  
                       __ptext12 150A                         __ptext21 0C58  
                       __ptext13 1692                         __ptext30 18EE  
                       __ptext22 1938                         __ptext14 1550  
                       __ptext31 1900                         __ptext23 1942  
                       __ptext15 17CE                         __ptext40 1596  
                       __ptext32 1912                         __ptext24 194C  
                       __ptext16 16CC                         __ptext41 15D6  
                       __ptext33 0D36                         __ptext25 1956  
                       __ptext17 10D0                         __ptext50 0DF8  
                       __ptext42 1616                         __ptext34 1148  
                       __ptext26 197C                         __ptext18 1924  
                       __ptext51 18B6                         __ptext43 11BE  
                       __ptext35 1312                         __ptext27 1850  
                       __ptext19 192E                         __ptext52 1960  
                       __ptext44 1230                         __ptext36 0F38  
                       __ptext53 196A                         __ptext45 0FC6  
                       __ptext37 0972                         __ptext29 17FA  
                       __ptext54 18D4                         __ptext46 1874  
                       __ptext38 12A2                         __ptext47 0A70  
                       __ptext39 104C                         __ptext48 0B64  
                       __ptext49 063E             __end_of_TurnRight135 176A  
        ?_ReadParallelSpeedRight 00A6                    __size_of_main 003C  
           __end_of_ADCGetOutput 18EE                ??_SetPWMMotorLeft 00AF  
          __end_ofi2_LCDBusyLoop 1656                         int$flags 005F  
               ?_ConvertPicSpeed 0001                 _SetDistanceRight 1148  
    __size_of_SetDistanceCentral 0072        SetPWMMotorLeft@percentage 00AD  
                       intlevel2 0000   __end_of_ReadParallelSpeedRight 192E  
                 LCDWriteInt@val 0009                   LCDWriteInt@str 000E  
         ?_ReadParallelSpeedLeft 00A6      __end_of_ReadDistanceCentral 1960  
                    ??_putsUSART 0004                __CFG_FOSC$INTIO67 000000  
          __end_of_SetMotorRight 1550                     _USART_Status 005E  
          __end_of_SetSpeedRight 1912          __size_of_LCDWriteString 008E  
