

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Feb 09 18:44:42 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	idataBANK0
    49  00123C                     __pidataBANK0:
    50                           	opt stack 0
    51                           
    52                           ;initializer for ___cgram
    53  00123C  0C                 	db	12
    54  00123D  12                 	db	18
    55  00123E  12                 	db	18
    56  00123F  0C                 	db	12
    57  001240  00                 	db	0
    58  001241  00                 	db	0
    59  001242  00                 	db	0
    60  001243  00                 	db	0
    61  001244  00                 	db	0
    62  001245  04                 	db	4
    63  001246  0E                 	db	14
    64  001247  1F                 	db	31
    65  001248  0E                 	db	14
    66  001249  04                 	db	4
    67  00124A  00                 	db	0
    68  00124B  00                 	db	0
    69  00124C  04                 	db	4
    70  00124D  04                 	db	4
    71  00124E  04                 	db	4
    72  00124F  04                 	db	4
    73  001250  1F                 	db	31
    74  001251  0E                 	db	14
    75  001252  04                 	db	4
    76  001253  00                 	db	0
    77  001254  0A                 	db	10
    78  001255  15                 	db	21
    79  001256  11                 	db	17
    80  001257  0A                 	db	10
    81  001258  04                 	db	4
    82  001259  00                 	db	0
    83  00125A  00                 	db	0
    84  00125B  00                 	db	0
    85  00125C  0A                 	db	10
    86  00125D  1F                 	db	31
    87  00125E  1F                 	db	31
    88  00125F  0E                 	db	14
    89  001260  04                 	db	4
    90  001261  00                 	db	0
    91  001262  00                 	db	0
    92  001263  00                 	db	0
    93  001264  00                 	db	0
    94  001265  00                 	db	0
    95  001266  00                 	db	0
    96  001267  00                 	db	0
    97  001268  00                 	db	0
    98  001269  00                 	db	0
    99  00126A  00                 	db	0
   100  00126B  00                 	db	0
   101  00126C  00                 	db	0
   102  00126D  00                 	db	0
   103  00126E  00                 	db	0
   104  00126F  00                 	db	0
   105  001270  00                 	db	0
   106  001271  00                 	db	0
   107  001272  00                 	db	0
   108  001273  00                 	db	0
   109  001274  00                 	db	0
   110  001275  00                 	db	0
   111  001276  00                 	db	0
   112  001277  00                 	db	0
   113  001278  00                 	db	0
   114  001279  00                 	db	0
   115  00127A  00                 	db	0
   116  00127B  00                 	db	0
   117  0000                     _ADCON1	set	4033
   118  0000                     _ADCON2	set	4032
   119  0000                     _ADRESH	set	4036
   120  0000                     _ADRESL	set	4035
   121  0000                     _PORTD	set	3971
   122  0000                     _TMR0H	set	4055
   123  0000                     _TMR0L	set	4054
   124  0000                     _TRISC	set	3988
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISDbits	set	3989
   127  0000                     _ADIE	set	31982
   128  0000                     _ADIF	set	31990
   129  0000                     _ADON	set	32272
   130  0000                     _ANS0	set	31728
   131  0000                     _ANS1	set	31729
   132  0000                     _ANS2	set	31730
   133  0000                     _ANS3	set	31731
   134  0000                     _CHS0	set	32274
   135  0000                     _CHS1	set	32275
   136  0000                     _CHS2	set	32276
   137  0000                     _CHS3	set	32277
   138  0000                     _GIE	set	32663
   139  0000                     _GO	set	32273
   140  0000                     _PEIE	set	32662
   141  0000                     _PSA	set	32427
   142  0000                     _RC0	set	31760
   143  0000                     _RC1	set	31761
   144  0000                     _RC2	set	31762
   145  0000                     _RC3	set	31763
   146  0000                     _RC4	set	31764
   147  0000                     _RC5	set	31765
   148  0000                     _RD4	set	31772
   149  0000                     _RD5	set	31773
   150  0000                     _RD6	set	31774
   151  0000                     _T08BIT	set	32430
   152  0000                     _T0CS	set	32429
   153  0000                     _T0PS0	set	32424
   154  0000                     _T0PS1	set	32425
   155  0000                     _T0PS2	set	32426
   156  0000                     _TMR0IE	set	32661
   157  0000                     _TMR0IF	set	32658
   158  0000                     _TMR0ON	set	32431
   159  0000                     _TRISA0	set	31888
   160  0000                     _TRISA1	set	31889
   161  0000                     _TRISA2	set	31890
   162  0000                     _TRISA3	set	31891
   163                           
   164                           	psect	smallconst
   165  000600                     __psmallconst:
   166                           	opt stack 0
   167  000600  00                 	db	0
   168  000601                     STR_1:
   169  000601  48                 	db	72	;'H'
   170  000602  65                 	db	101	;'e'
   171  000603  6C                 	db	108	;'l'
   172  000604  6C                 	db	108	;'l'
   173  000605  6F                 	db	111	;'o'
   174  000606  20                 	db	32
   175  000607  57                 	db	87	;'W'
   176  000608  6F                 	db	111	;'o'
   177  000609  72                 	db	114	;'r'
   178  00060A  6C                 	db	108	;'l'
   179  00060B  64                 	db	100	;'d'
   180  00060C  20                 	db	32
   181  00060D  21                 	db	33
   182  00060E  00                 	db	0
   183                           
   184                           ; #config settings
   185  00060F  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001130                     __pcinit:
   189                           	opt stack 0
   190  001130                     start_initialization:
   191                           	opt stack 0
   192  001130                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK0 (7 bytes)
   196  001130  EE00  F0B8         	lfsr	0,__pbssBANK0
   197  001134  0E07               	movlw	7
   198  001136                     clear_0:
   199  001136  6AEE               	clrf	postinc0,c
   200  001138  06E8               	decf	wreg,f,c
   201  00113A  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to COMRAM (18 bytes)
   204  00113C  EE00  F04C         	lfsr	0,__pbssCOMRAM
   205  001140  0E12               	movlw	18
   206  001142                     clear_1:
   207  001142  6AEE               	clrf	postinc0,c
   208  001144  06E8               	decf	wreg,f,c
   209  001146  E1FD               	bnz	clear_1
   210                           
   211                           ; Initialize objects allocated to BANK0 (64 bytes)
   212                           ; load TBLPTR registers with __pidataBANK0
   213  001148  0E3C               	movlw	low __pidataBANK0
   214  00114A  6EF6               	movwf	tblptrl,c
   215  00114C  0E12               	movlw	high __pidataBANK0
   216  00114E  6EF7               	movwf	tblptrh,c
   217  001150  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   218  001152  6EF8               	movwf	tblptru,c
   219  001154  EE00  F060         	lfsr	0,__pdataBANK0
   220  001158  EE10 F040          	lfsr	1,64
   221  00115C                     copy_data0:
   222  00115C  0009               	tblrd		*+
   223  00115E  CFF5 FFEE          	movff	tablat,postinc0
   224  001162  50E5               	movf	postdec1,w,c
   225  001164  50E1               	movf	fsr1l,w,c
   226  001166  E1FA               	bnz	copy_data0
   227  001168                     end_of_initialization:
   228                           	opt stack 0
   229  001168                     __end_of__initialization:
   230                           	opt stack 0
   231  001168  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   232  00116A  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   233  00116C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   234  00116E  6EF8               	movwf	tblptru,c
   235  001170  0100               	movlb	0
   236  001172  EFC7  F006         	goto	_main	;jump to C main() function
   237                           tblptru	equ	0xFF8
   238                           tblptrh	equ	0xFF7
   239                           tblptrl	equ	0xFF6
   240                           tablat	equ	0xFF5
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           postdec1	equ	0xFE5
   244                           fsr1l	equ	0xFE1
   245                           
   246                           	psect	bssCOMRAM
   247  00004C                     __pbssCOMRAM:
   248                           	opt stack 0
   249  00004C                     _DistanceCentral:
   250                           	opt stack 0
   251  00004C                     	ds	2
   252  00004E                     _DistanceLeft:
   253                           	opt stack 0
   254  00004E                     	ds	2
   255  000050                     _DistanceRight:
   256                           	opt stack 0
   257  000050                     	ds	2
   258  000052                     _PWMLeft:
   259                           	opt stack 0
   260  000052                     	ds	2
   261  000054                     _PWMRight:
   262                           	opt stack 0
   263  000054                     	ds	2
   264  000056                     isr@PWMLeft:
   265                           	opt stack 0
   266  000056                     	ds	2
   267  000058                     isr@PWMRight:
   268                           	opt stack 0
   269  000058                     	ds	2
   270  00005A                     isr@Readport:
   271                           	opt stack 0
   272  00005A                     	ds	2
   273  00005C                     isr@iteration:
   274                           	opt stack 0
   275  00005C                     	ds	2
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           postdec1	equ	0xFE5
   283                           fsr1l	equ	0xFE1
   284                           
   285                           	psect	bssBANK0
   286  0000B8                     __pbssBANK0:
   287                           	opt stack 0
   288  0000B8                     LCDWriteInt@F3445:
   289                           	opt stack 0
   290  0000B8                     	ds	5
   291  0000BD                     _Battery:
   292                           	opt stack 0
   293  0000BD                     	ds	2
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           postdec1	equ	0xFE5
   301                           fsr1l	equ	0xFE1
   302                           
   303                           	psect	dataBANK0
   304  000060                     __pdataBANK0:
   305                           	opt stack 0
   306  000060                     ___cgram:
   307                           	opt stack 0
   308  000060                     	ds	64
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	cstackBANK0
   319  0000A0                     __pcstackBANK0:
   320                           	opt stack 0
   321  0000A0                     ?_ReadBattery:
   322                           	opt stack 0
   323  0000A0                     ?_abs:
   324                           	opt stack 0
   325  0000A0                     ?___awdiv:
   326                           	opt stack 0
   327  0000A0                     ?___awmod:
   328                           	opt stack 0
   329  0000A0                     ?___lwdiv:
   330                           	opt stack 0
   331  0000A0                     LCDBusyLoop@busy:
   332                           	opt stack 0
   333  0000A0                     abs@a:
   334                           	opt stack 0
   335  0000A0                     ___awdiv@dividend:
   336                           	opt stack 0
   337  0000A0                     ___awmod@dividend:
   338                           	opt stack 0
   339  0000A0                     ___lwdiv@dividend:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x0
   343  0000A0                     	ds	1
   344  0000A1                     LCDBusyLoop@temp:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x1
   348  0000A1                     	ds	1
   349  0000A2                     ??_abs:
   350  0000A2                     LCDBusyLoop@status:
   351                           	opt stack 0
   352  0000A2                     ___awdiv@divisor:
   353                           	opt stack 0
   354  0000A2                     ___awmod@divisor:
   355                           	opt stack 0
   356  0000A2                     ___lwdiv@divisor:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2
   360  0000A2                     	ds	1
   361  0000A3                     LCDByte@isdata:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x3
   365  0000A3                     	ds	1
   366  0000A4                     LCDByte@hn:
   367                           	opt stack 0
   368  0000A4                     ___awdiv@counter:
   369                           	opt stack 0
   370  0000A4                     ___awmod@counter:
   371                           	opt stack 0
   372  0000A4                     ___lwdiv@quotient:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x4
   376  0000A4                     	ds	1
   377  0000A5                     LCDByte@ln:
   378                           	opt stack 0
   379  0000A5                     ___awdiv@sign:
   380                           	opt stack 0
   381  0000A5                     ___awmod@sign:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x5
   385  0000A5                     	ds	1
   386  0000A6                     LCDByte@c:
   387                           	opt stack 0
   388  0000A6                     ___lwdiv@counter:
   389                           	opt stack 0
   390  0000A6                     ___awdiv@quotient:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x6
   394  0000A6                     	ds	1
   395  0000A7                     LCDByte@temp:
   396                           	opt stack 0
   397  0000A7                     SetPWMMotorLeft@percentage:
   398                           	opt stack 0
   399  0000A7                     SetPWMMotorRight@percentage:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x7
   403  0000A7                     	ds	1
   404  0000A8                     ??_LCDInit:
   405  0000A8                     LCDWriteString@msg:
   406                           	opt stack 0
   407  0000A8                     LCDWriteInt@val:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x8
   411  0000A8                     	ds	1
   412  0000A9                     LCDInit@style:
   413                           	opt stack 0
   414  0000A9                     SetMotorLeft@speed:
   415                           	opt stack 0
   416  0000A9                     SetMotorRight@speed:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x9
   420  0000A9                     	ds	1
   421  0000AA                     LCDInit@__i:
   422                           	opt stack 0
   423  0000AA                     LCDWriteString@cc:
   424                           	opt stack 0
   425  0000AA                     LCDWriteInt@field_length:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0xA
   429  0000AA                     	ds	1
   430  0000AB                     ??_LCDWriteInt:
   431                           
   432                           ; 1 bytes @ 0xB
   433  0000AB                     	ds	2
   434  0000AD                     LCDWriteInt@str:
   435                           	opt stack 0
   436                           
   437                           ; 5 bytes @ 0xD
   438  0000AD                     	ds	5
   439  0000B2                     LCDWriteInt@j:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x12
   443  0000B2                     	ds	2
   444  0000B4                     LCDWriteInt@i:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x14
   448  0000B4                     	ds	2
   449  0000B6                     main@i:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x16
   453  0000B6                     	ds	2
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1l	equ	0xFE1
   462                           
   463                           	psect	cstackCOMRAM
   464  000001                     __pcstackCOMRAM:
   465                           	opt stack 0
   466  000001                     ?_ADCGetOutput:
   467                           	opt stack 0
   468  000001                     ?_ReadPWMMotorRight:
   469                           	opt stack 0
   470  000001                     ?_ReadPWMMotorLeft:
   471                           	opt stack 0
   472  000001                     ?___ftpack:
   473                           	opt stack 0
   474  000001                     ___ftpack@arg:
   475                           	opt stack 0
   476                           
   477                           ; 3 bytes @ 0x0
   478  000001                     	ds	2
   479  000003                     ??_ADCGetOutput:
   480  000003                     
   481                           ; 1 bytes @ 0x2
   482  000003                     	ds	1
   483  000004                     ___ftpack@exp:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x3
   487  000004                     	ds	1
   488  000005                     ___ftpack@sign:
   489                           	opt stack 0
   490  000005                     ADCGetOutput@temp:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x4
   494  000005                     	ds	1
   495  000006                     ??___ftpack:
   496                           
   497                           ; 1 bytes @ 0x5
   498  000006                     	ds	3
   499  000009                     ?___lwtoft:
   500                           	opt stack 0
   501  000009                     ___lwtoft@c:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x8
   505  000009                     	ds	3
   506  00000C                     ?___ftmul:
   507                           	opt stack 0
   508  00000C                     ___ftmul@f1:
   509                           	opt stack 0
   510                           
   511                           ; 3 bytes @ 0xB
   512  00000C                     	ds	3
   513  00000F                     ___ftmul@f2:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0xE
   517  00000F                     	ds	3
   518  000012                     ??___ftmul:
   519                           
   520                           ; 1 bytes @ 0x11
   521  000012                     	ds	3
   522  000015                     ___ftmul@exp:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x14
   526  000015                     	ds	1
   527  000016                     ___ftmul@f3_as_product:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x15
   531  000016                     	ds	3
   532  000019                     ___ftmul@cntr:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x18
   536  000019                     	ds	1
   537  00001A                     ___ftmul@sign:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x19
   541  00001A                     	ds	1
   542  00001B                     ?___ftadd:
   543                           	opt stack 0
   544  00001B                     ___ftadd@f1:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x1A
   548  00001B                     	ds	3
   549  00001E                     ___ftadd@f2:
   550                           	opt stack 0
   551                           
   552                           ; 3 bytes @ 0x1D
   553  00001E                     	ds	3
   554  000021                     ??___ftadd:
   555                           
   556                           ; 1 bytes @ 0x20
   557  000021                     	ds	3
   558  000024                     ___ftadd@sign:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x23
   562  000024                     	ds	1
   563  000025                     ___ftadd@exp2:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x24
   567  000025                     	ds	1
   568  000026                     ___ftadd@exp1:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x25
   572  000026                     	ds	1
   573  000027                     ?___fttol:
   574                           	opt stack 0
   575  000027                     ___fttol@f1:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x26
   579  000027                     	ds	4
   580  00002B                     ??___fttol:
   581                           
   582                           ; 1 bytes @ 0x2A
   583  00002B                     	ds	5
   584  000030                     ___fttol@sign1:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x2F
   588  000030                     	ds	1
   589  000031                     ___fttol@lval:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x30
   593  000031                     	ds	4
   594  000035                     ___fttol@exp1:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x34
   598  000035                     	ds	1
   599  000036                     SetDistanceLeft@lecture:
   600                           	opt stack 0
   601  000036                     SetDistanceRight@lecture:
   602                           	opt stack 0
   603  000036                     SetDistanceCentral@lecture:
   604                           	opt stack 0
   605  000036                     SetBattery@lecture:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x35
   609  000036                     	ds	2
   610  000038                     ??_SetDistanceLeft:
   611  000038                     ??_SetDistanceCentral:
   612  000038                     ??_SetDistanceRight:
   613  000038                     
   614                           ; 1 bytes @ 0x37
   615  000038                     	ds	2
   616  00003A                     ??_isr:
   617                           
   618                           ; 1 bytes @ 0x39
   619  00003A                     	ds	16
   620  00004A                     isr@read:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x49
   624  00004A                     	ds	2
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1l	equ	0xFE1
   633                           
   634 ;;
   635 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   636 ;;
   637 ;; *************** function _main *****************
   638 ;; Defined at:
   639 ;;		line 7 in file "main.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;		None
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  i               2   22[BANK0 ] int 
   644 ;; Return value:  Size  Location     Type
   645 ;;                  1    wreg      void 
   646 ;; Registers used:
   647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   653 ;;      Params:         0       0       0       0       0       0       0
   654 ;;      Locals:         0       2       0       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0       0       0
   656 ;;      Totals:         0       2       0       0       0       0       0
   657 ;;Total ram usage:        2 bytes
   658 ;; Hardware stack levels required when called:    7
   659 ;; This function calls:
   660 ;;		_ADCInit
   661 ;;		_LCDByte
   662 ;;		_LCDInit
   663 ;;		_LCDWriteInt
   664 ;;		_LCDWriteString
   665 ;;		_MotorInit
   666 ;;		_ReadBattery
   667 ;;		_SetMotorLeft
   668 ;;		_SetMotorRight
   669 ;;		_TimerPWMInit
   670 ;; This function is called by:
   671 ;;		Startup code after reset
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           	psect	text0
   676  000D8E                     __ptext0:
   677                           	opt stack 0
   678  000D8E                     _main:
   679                           	opt stack 24
   680                           
   681                           ;main.c: 9: ADCInit();
   682                           
   683                           ;incstack = 0
   684  000D8E  EC8A  F009         	call	_ADCInit	;wreg free
   685                           
   686                           ;main.c: 14: MotorInit();
   687  000D92  ECD9  F009         	call	_MotorInit	;wreg free
   688                           
   689                           ;main.c: 15: TimerPWMInit();
   690  000D96  ECAE  F009         	call	_TimerPWMInit	;wreg free
   691                           
   692                           ;main.c: 16: SetMotorLeft(40);
   693  000D9A  0E00               	movlw	0
   694  000D9C  0100               	movlb	0	; () banked
   695  000D9E  6FAA               	movwf	(SetMotorLeft@speed+1)& (0+255),b
   696  000DA0  0E28               	movlw	40
   697  000DA2  6FA9               	movwf	SetMotorLeft@speed& (0+255),b
   698  000DA4  ECDC  F008         	call	_SetMotorLeft	;wreg free
   699                           
   700                           ;main.c: 17: SetMotorRight(-95);
   701  000DA8  0EFF               	movlw	255
   702  000DAA  0100               	movlb	0	; () banked
   703  000DAC  6FAA               	movwf	(SetMotorRight@speed+1)& (0+255),b
   704  000DAE  0EA1               	movlw	161
   705  000DB0  6FA9               	movwf	SetMotorRight@speed& (0+255),b
   706  000DB2  ECBB  F008         	call	_SetMotorRight	;wreg free
   707                           
   708                           ;main.c: 19: LCDInit(0B00000000);
   709  000DB6  0E00               	movlw	0
   710  000DB8  EC12  F007         	call	_LCDInit
   711                           
   712                           ;main.c: 20: (LCDByte(0b00000001,0));
   713  000DBC  0E00               	movlw	0
   714  000DBE  0100               	movlb	0	; () banked
   715  000DC0  6FA3               	movwf	LCDByte@isdata& (0+255),b
   716  000DC2  0E01               	movlw	1
   717  000DC4  EC42  F008         	call	_LCDByte
   718                           
   719                           ;main.c: 21: LCDWriteString("Hello World !");
   720  000DC8  0E01               	movlw	low STR_1
   721  000DCA  0100               	movlb	0	; () banked
   722  000DCC  6FA8               	movwf	LCDWriteString@msg& (0+255),b
   723  000DCE  0E06               	movlw	high STR_1
   724  000DD0  0100               	movlb	0	; () banked
   725  000DD2  6FA9               	movwf	(LCDWriteString@msg+1)& (0+255),b
   726  000DD4  EC25  F006         	call	_LCDWriteString	;wreg free
   727  000DD8                     l2263:
   728                           
   729                           ;main.c: 30: (LCDByte(0b00000001,0));
   730  000DD8  0E00               	movlw	0
   731  000DDA  0100               	movlb	0	; () banked
   732  000DDC  6FA3               	movwf	LCDByte@isdata& (0+255),b
   733  000DDE  0E01               	movlw	1
   734  000DE0  EC42  F008         	call	_LCDByte
   735                           
   736                           ;main.c: 31: LCDWriteInt(ReadBattery(),5);
   737  000DE4  ECCA  F009         	call	_ReadBattery	;wreg free
   738  000DE8  C0A0  F0A8         	movff	?_ReadBattery,LCDWriteInt@val
   739  000DEC  C0A1  F0A9         	movff	?_ReadBattery+1,LCDWriteInt@val+1
   740  000DF0  0E05               	movlw	5
   741  000DF2  0100               	movlb	0	; () banked
   742  000DF4  6FAA               	movwf	LCDWriteInt@field_length& (0+255),b
   743  000DF6  ECDE  F003         	call	_LCDWriteInt	;wreg free
   744                           
   745                           ;main.c: 32: GO=1;
   746  000DFA  82C2               	bsf	4034,1,c	;volatile
   747                           
   748                           ;main.c: 36: for(int i=1;i<1000; i++){
   749  000DFC  0E00               	movlw	0
   750  000DFE  0100               	movlb	0	; () banked
   751  000E00  6FB7               	movwf	(main@i+1)& (0+255),b
   752  000E02  0E01               	movlw	1
   753  000E04  6FB6               	movwf	main@i& (0+255),b
   754  000E06                     l2271:
   755                           
   756                           ; BSR set to: 0
   757  000E06  0100               	movlb	0	; () banked
   758  000E08  BFB7               	btfsc	(main@i+1)& (0+255),7,b
   759  000E0A  D008               	goto	l2275
   760  000E0C  0EE8               	movlw	232
   761  000E0E  0100               	movlb	0	; () banked
   762  000E10  5DB6               	subwf	main@i& (0+255),w,b
   763  000E12  0E03               	movlw	3
   764  000E14  0100               	movlb	0	; () banked
   765  000E16  59B7               	subwfb	(main@i+1)& (0+255),w,b
   766  000E18  B0D8               	btfsc	status,0,c
   767  000E1A  D7DE               	goto	l2263
   768  000E1C                     l2275:
   769                           
   770                           ; BSR set to: 0
   771  000E1C  0100               	movlb	0	; () banked
   772  000E1E  4BB6               	infsnz	main@i& (0+255),f,b
   773  000E20  2BB7               	incf	(main@i+1)& (0+255),f,b
   774  000E22  D7F1               	goto	l2271
   775  000E24                     __end_of_main:
   776                           	opt stack 0
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _TimerPWMInit *****************
   788 ;; Defined at:
   789 ;;		line 14 in file "TimerPWM.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   803 ;;      Params:         0       0       0       0       0       0       0
   804 ;;      Locals:         0       0       0       0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0
   806 ;;      Totals:         0       0       0       0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; Hardware stack levels required when called:    4
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text1
   818  00135C                     __ptext1:
   819                           	opt stack 0
   820  00135C                     _TimerPWMInit:
   821                           	opt stack 26
   822                           
   823                           ;TimerPWM.c: 15: GIE=1;
   824                           
   825                           ; BSR set to: 0
   826                           ;incstack = 0
   827  00135C  8EF2               	bsf	intcon,7,c	;volatile
   828                           
   829                           ;TimerPWM.c: 16: TMR0IE=1;
   830  00135E  8AF2               	bsf	intcon,5,c	;volatile
   831                           
   832                           ;TimerPWM.c: 17: T08BIT=1;
   833  001360  8CD5               	bsf	4053,6,c	;volatile
   834                           
   835                           ;TimerPWM.c: 18: T0CS=0;
   836  001362  9AD5               	bcf	4053,5,c	;volatile
   837                           
   838                           ;TimerPWM.c: 19: PSA=1;
   839  001364  86D5               	bsf	4053,3,c	;volatile
   840                           
   841                           ;TimerPWM.c: 20: T0PS2=0;
   842  001366  94D5               	bcf	4053,2,c	;volatile
   843                           
   844                           ;TimerPWM.c: 21: T0PS1=0;
   845  001368  92D5               	bcf	4053,1,c	;volatile
   846                           
   847                           ;TimerPWM.c: 22: T0PS0=1;
   848  00136A  80D5               	bsf	4053,0,c	;volatile
   849                           
   850                           ;TimerPWM.c: 24: TMR0IF=0;
   851  00136C  94F2               	bcf	intcon,2,c	;volatile
   852                           
   853                           ;TimerPWM.c: 25: TMR0H=0x00;
   854  00136E  0E00               	movlw	0
   855  001370  6ED7               	movwf	4055,c	;volatile
   856                           
   857                           ;TimerPWM.c: 26: TMR0L=156;
   858  001372  0E9C               	movlw	156
   859  001374  6ED6               	movwf	4054,c	;volatile
   860                           
   861                           ;TimerPWM.c: 27: TMR0ON=1;
   862  001376  8ED5               	bsf	4053,7,c	;volatile
   863  001378  0012               	return		;funcret
   864  00137A                     __end_of_TimerPWMInit:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           intcon	equ	0xFF2
   871                           postinc0	equ	0xFEE
   872                           wreg	equ	0xFE8
   873                           postdec1	equ	0xFE5
   874                           fsr1l	equ	0xFE1
   875                           status	equ	0xFD8
   876                           
   877 ;; *************** function _SetMotorRight *****************
   878 ;; Defined at:
   879 ;;		line 47 in file "motors.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  speed           2    9[BANK0 ] int 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   893 ;;      Params:         0       2       0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0
   895 ;;      Temps:          0       0       0       0       0       0       0
   896 ;;      Totals:         0       2       0       0       0       0       0
   897 ;;Total ram usage:        2 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    6
   900 ;; This function calls:
   901 ;;		_SetPWMMotorRight
   902 ;;		_abs
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text2
   909  001176                     __ptext2:
   910                           	opt stack 0
   911  001176                     _SetMotorRight:
   912                           	opt stack 24
   913                           
   914                           ;motors.c: 50: if(speed>0){
   915                           
   916                           ;incstack = 0
   917  001176  0100               	movlb	0	; () banked
   918  001178  BFAA               	btfsc	(SetMotorRight@speed+1)& (0+255),7,b
   919  00117A  D009               	goto	l2073
   920  00117C  0100               	movlb	0	; () banked
   921  00117E  51AA               	movf	(SetMotorRight@speed+1)& (0+255),w,b
   922  001180  E104               	bnz	u1500
   923  001182  0100               	movlb	0	; () banked
   924  001184  05A9               	decf	SetMotorRight@speed& (0+255),w,b
   925  001186  A0D8               	btfss	status,0,c
   926  001188  D002               	goto	l2073
   927  00118A                     u1500:
   928                           
   929                           ; BSR set to: 0
   930                           ;motors.c: 52: RC2=1;
   931  00118A  8482               	bsf	3970,2,c	;volatile
   932  00118C  D007               	goto	L1
   933  00118E                     l2073:
   934                           
   935                           ; BSR set to: 0
   936  00118E  0100               	movlb	0	; () banked
   937  001190  AFAA               	btfss	(SetMotorRight@speed+1)& (0+255),7,b
   938  001192  D003               	goto	l201
   939                           
   940                           ; BSR set to: 0
   941                           ;motors.c: 56: RC2=0;
   942  001194  9482               	bcf	3970,2,c	;volatile
   943                           
   944                           ;motors.c: 57: RC3=1;
   945  001196  8682               	bsf	3970,3,c	;volatile
   946                           
   947                           ;motors.c: 58: }else{
   948  001198  D002               	goto	l2077
   949  00119A                     l201:
   950                           
   951                           ; BSR set to: 0
   952                           ;motors.c: 60: RC2=0;
   953  00119A  9482               	bcf	3970,2,c	;volatile
   954  00119C                     L1:
   955                           
   956                           ;motors.c: 61: RC3=0;
   957  00119C  9682               	bcf	3970,3,c	;volatile
   958  00119E                     l2077:
   959                           
   960                           ; BSR set to: 0
   961                           ;motors.c: 62: }
   962                           ;motors.c: 65: SetPWMMotorRight(abs(speed));
   963  00119E  C0A9  F0A0         	movff	SetMotorRight@speed,abs@a
   964  0011A2  C0AA  F0A1         	movff	SetMotorRight@speed+1,abs@a+1
   965  0011A6  EC74  F009         	call	_abs	;wreg free
   966  0011AA  C0A0  F0A7         	movff	?_abs,SetPWMMotorRight@percentage
   967  0011AE  C0A1  F0A8         	movff	?_abs+1,SetPWMMotorRight@percentage+1
   968  0011B2  EC3E  F009         	call	_SetPWMMotorRight	;wreg free
   969  0011B6  0012               	return		;funcret
   970  0011B8                     __end_of_SetMotorRight:
   971                           	opt stack 0
   972                           tblptru	equ	0xFF8
   973                           tblptrh	equ	0xFF7
   974                           tblptrl	equ	0xFF6
   975                           tablat	equ	0xFF5
   976                           intcon	equ	0xFF2
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           status	equ	0xFD8
   982                           
   983 ;; *************** function _SetPWMMotorRight *****************
   984 ;; Defined at:
   985 ;;		line 34 in file "TimerPWM.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  percentage      2    7[BANK0 ] unsigned int 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, status,2, status,0, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   999 ;;      Params:         0       2       0       0       0       0       0
  1000 ;;      Locals:         0       0       0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0
  1002 ;;      Totals:         0       2       0       0       0       0       0
  1003 ;;Total ram usage:        2 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; Hardware stack levels required when called:    5
  1006 ;; This function calls:
  1007 ;;		___lwdiv
  1008 ;; This function is called by:
  1009 ;;		_SetMotorRight
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text3
  1014  00127C                     __ptext3:
  1015                           	opt stack 0
  1016  00127C                     _SetPWMMotorRight:
  1017                           	opt stack 24
  1018                           
  1019                           ;TimerPWM.c: 35: PWMRight=20-percentage/5;
  1020                           
  1021                           ;incstack = 0
  1022  00127C  C0A7  F0A0         	movff	SetPWMMotorRight@percentage,___lwdiv@dividend
  1023  001280  C0A8  F0A1         	movff	SetPWMMotorRight@percentage+1,___lwdiv@dividend+1
  1024  001284  0E00               	movlw	0
  1025  001286  0100               	movlb	0	; () banked
  1026  001288  6FA3               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1027  00128A  0E05               	movlw	5
  1028  00128C  6FA2               	movwf	___lwdiv@divisor& (0+255),b
  1029  00128E  EC5B  F007         	call	___lwdiv	;wreg free
  1030  001292  0100               	movlb	0	; () banked
  1031  001294  1FA0               	comf	?___lwdiv& (0+255),f,b
  1032  001296  0100               	movlb	0	; () banked
  1033  001298  1FA1               	comf	(?___lwdiv+1)& (0+255),f,b
  1034  00129A  0100               	movlb	0	; () banked
  1035  00129C  4BA0               	infsnz	?___lwdiv& (0+255),f,b
  1036  00129E  2BA1               	incf	(?___lwdiv+1)& (0+255),f,b
  1037  0012A0  0E14               	movlw	20
  1038  0012A2  0100               	movlb	0	; () banked
  1039  0012A4  25A0               	addwf	?___lwdiv& (0+255),w,b
  1040  0012A6  6E54               	movwf	_PWMRight,c
  1041  0012A8  0E00               	movlw	0
  1042  0012AA  0100               	movlb	0	; () banked
  1043  0012AC  21A1               	addwfc	(?___lwdiv+1)& (0+255),w,b
  1044  0012AE  6E55               	movwf	_PWMRight+1,c
  1045                           
  1046                           ; BSR set to: 0
  1047  0012B0  0012               	return		;funcret
  1048  0012B2                     __end_of_SetPWMMotorRight:
  1049                           	opt stack 0
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           intcon	equ	0xFF2
  1055                           postinc0	equ	0xFEE
  1056                           wreg	equ	0xFE8
  1057                           postdec1	equ	0xFE5
  1058                           fsr1l	equ	0xFE1
  1059                           status	equ	0xFD8
  1060                           
  1061 ;; *************** function _SetMotorLeft *****************
  1062 ;; Defined at:
  1063 ;;		line 27 in file "motors.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  speed           2    9[BANK0 ] int 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, status,2, status,0, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1077 ;;      Params:         0       2       0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0
  1080 ;;      Totals:         0       2       0       0       0       0       0
  1081 ;;Total ram usage:        2 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:    6
  1084 ;; This function calls:
  1085 ;;		_SetPWMMotorLeft
  1086 ;;		_abs
  1087 ;; This function is called by:
  1088 ;;		_main
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text4
  1093  0011B8                     __ptext4:
  1094                           	opt stack 0
  1095  0011B8                     _SetMotorLeft:
  1096                           	opt stack 24
  1097                           
  1098                           ;motors.c: 30: if(speed>0){
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;incstack = 0
  1102  0011B8  0100               	movlb	0	; () banked
  1103  0011BA  BFAA               	btfsc	(SetMotorLeft@speed+1)& (0+255),7,b
  1104  0011BC  D009               	goto	l2063
  1105  0011BE  0100               	movlb	0	; () banked
  1106  0011C0  51AA               	movf	(SetMotorLeft@speed+1)& (0+255),w,b
  1107  0011C2  E104               	bnz	u1480
  1108  0011C4  0100               	movlb	0	; () banked
  1109  0011C6  05A9               	decf	SetMotorLeft@speed& (0+255),w,b
  1110  0011C8  A0D8               	btfss	status,0,c
  1111  0011CA  D002               	goto	l2063
  1112  0011CC                     u1480:
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;motors.c: 32: RC0=1;
  1116  0011CC  8082               	bsf	3970,0,c	;volatile
  1117  0011CE  D007               	goto	L2
  1118  0011D0                     l2063:
  1119                           
  1120                           ; BSR set to: 0
  1121  0011D0  0100               	movlb	0	; () banked
  1122  0011D2  AFAA               	btfss	(SetMotorLeft@speed+1)& (0+255),7,b
  1123  0011D4  D003               	goto	l194
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;motors.c: 36: RC0=0;
  1127  0011D6  9082               	bcf	3970,0,c	;volatile
  1128                           
  1129                           ;motors.c: 37: RC1=1;
  1130  0011D8  8282               	bsf	3970,1,c	;volatile
  1131                           
  1132                           ;motors.c: 38: }else{
  1133  0011DA  D002               	goto	l2067
  1134  0011DC                     l194:
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;motors.c: 40: RC0=0;
  1138  0011DC  9082               	bcf	3970,0,c	;volatile
  1139  0011DE                     L2:
  1140                           
  1141                           ;motors.c: 41: RC1=0;
  1142  0011DE  9282               	bcf	3970,1,c	;volatile
  1143  0011E0                     l2067:
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;motors.c: 42: }
  1147                           ;motors.c: 45: SetPWMMotorLeft(abs(speed));
  1148  0011E0  C0A9  F0A0         	movff	SetMotorLeft@speed,abs@a
  1149  0011E4  C0AA  F0A1         	movff	SetMotorLeft@speed+1,abs@a+1
  1150  0011E8  EC74  F009         	call	_abs	;wreg free
  1151  0011EC  C0A0  F0A7         	movff	?_abs,SetPWMMotorLeft@percentage
  1152  0011F0  C0A1  F0A8         	movff	?_abs+1,SetPWMMotorLeft@percentage+1
  1153  0011F4  EC59  F009         	call	_SetPWMMotorLeft	;wreg free
  1154  0011F8  0012               	return		;funcret
  1155  0011FA                     __end_of_SetMotorLeft:
  1156                           	opt stack 0
  1157                           tblptru	equ	0xFF8
  1158                           tblptrh	equ	0xFF7
  1159                           tblptrl	equ	0xFF6
  1160                           tablat	equ	0xFF5
  1161                           intcon	equ	0xFF2
  1162                           postinc0	equ	0xFEE
  1163                           wreg	equ	0xFE8
  1164                           postdec1	equ	0xFE5
  1165                           fsr1l	equ	0xFE1
  1166                           status	equ	0xFD8
  1167                           
  1168 ;; *************** function _abs *****************
  1169 ;; Defined at:
  1170 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\abs.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  a               2    0[BANK0 ] int 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  2    0[BANK0 ] int 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1184 ;;      Params:         0       2       0       0       0       0       0
  1185 ;;      Locals:         0       0       0       0       0       0       0
  1186 ;;      Temps:          0       2       0       0       0       0       0
  1187 ;;      Totals:         0       4       0       0       0       0       0
  1188 ;;Total ram usage:        4 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    4
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_SetMotorLeft
  1195 ;;		_SetMotorRight
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text5
  1200  0012E8                     __ptext5:
  1201                           	opt stack 0
  1202  0012E8                     _abs:
  1203                           	opt stack 25
  1204                           
  1205                           ;incstack = 0
  1206  0012E8  0100               	movlb	0	; () banked
  1207  0012EA  AFA1               	btfss	(abs@a+1)& (0+255),7,b
  1208  0012EC  D00E               	goto	l365
  1209                           
  1210                           ; BSR set to: 0
  1211  0012EE  C0A0  F0A2         	movff	abs@a,??_abs
  1212  0012F2  C0A1  F0A3         	movff	abs@a+1,??_abs+1
  1213  0012F6  0100               	movlb	0	; () banked
  1214  0012F8  1FA2               	comf	??_abs& (0+255),f,b
  1215  0012FA  1FA3               	comf	(??_abs+1)& (0+255),f,b
  1216  0012FC  4BA2               	infsnz	??_abs& (0+255),f,b
  1217  0012FE  2BA3               	incf	(??_abs+1)& (0+255),f,b
  1218  001300  C0A2  F0A0         	movff	??_abs,?_abs
  1219  001304  C0A3  F0A1         	movff	??_abs+1,?_abs+1
  1220  001308  0012               	return	
  1221  00130A                     l365:
  1222                           
  1223                           ; BSR set to: 0
  1224  00130A  C0A0  F0A0         	movff	abs@a,?_abs
  1225  00130E  C0A1  F0A1         	movff	abs@a+1,?_abs+1
  1226                           
  1227                           ; BSR set to: 0
  1228  001312  0012               	return		;funcret
  1229  001314                     __end_of_abs:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           intcon	equ	0xFF2
  1236                           postinc0	equ	0xFEE
  1237                           wreg	equ	0xFE8
  1238                           postdec1	equ	0xFE5
  1239                           fsr1l	equ	0xFE1
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _SetPWMMotorLeft *****************
  1243 ;; Defined at:
  1244 ;;		line 30 in file "TimerPWM.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  percentage      2    7[BANK0 ] unsigned int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1258 ;;      Params:         0       2       0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0
  1261 ;;      Totals:         0       2       0       0       0       0       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    5
  1265 ;; This function calls:
  1266 ;;		___lwdiv
  1267 ;; This function is called by:
  1268 ;;		_SetMotorLeft
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text6
  1273  0012B2                     __ptext6:
  1274                           	opt stack 0
  1275  0012B2                     _SetPWMMotorLeft:
  1276                           	opt stack 24
  1277                           
  1278                           ;TimerPWM.c: 31: PWMLeft=20-percentage/5;
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;incstack = 0
  1282  0012B2  C0A7  F0A0         	movff	SetPWMMotorLeft@percentage,___lwdiv@dividend
  1283  0012B6  C0A8  F0A1         	movff	SetPWMMotorLeft@percentage+1,___lwdiv@dividend+1
  1284  0012BA  0E00               	movlw	0
  1285  0012BC  0100               	movlb	0	; () banked
  1286  0012BE  6FA3               	movwf	(___lwdiv@divisor+1)& (0+255),b
  1287  0012C0  0E05               	movlw	5
  1288  0012C2  6FA2               	movwf	___lwdiv@divisor& (0+255),b
  1289  0012C4  EC5B  F007         	call	___lwdiv	;wreg free
  1290  0012C8  0100               	movlb	0	; () banked
  1291  0012CA  1FA0               	comf	?___lwdiv& (0+255),f,b
  1292  0012CC  0100               	movlb	0	; () banked
  1293  0012CE  1FA1               	comf	(?___lwdiv+1)& (0+255),f,b
  1294  0012D0  0100               	movlb	0	; () banked
  1295  0012D2  4BA0               	infsnz	?___lwdiv& (0+255),f,b
  1296  0012D4  2BA1               	incf	(?___lwdiv+1)& (0+255),f,b
  1297  0012D6  0E14               	movlw	20
  1298  0012D8  0100               	movlb	0	; () banked
  1299  0012DA  25A0               	addwf	?___lwdiv& (0+255),w,b
  1300  0012DC  6E52               	movwf	_PWMLeft,c
  1301  0012DE  0E00               	movlw	0
  1302  0012E0  0100               	movlb	0	; () banked
  1303  0012E2  21A1               	addwfc	(?___lwdiv+1)& (0+255),w,b
  1304  0012E4  6E53               	movwf	_PWMLeft+1,c
  1305                           
  1306                           ; BSR set to: 0
  1307  0012E6  0012               	return		;funcret
  1308  0012E8                     __end_of_SetPWMMotorLeft:
  1309                           	opt stack 0
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           intcon	equ	0xFF2
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1l	equ	0xFE1
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function ___lwdiv *****************
  1322 ;; Defined at:
  1323 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwdiv.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  dividend        2    0[BANK0 ] unsigned int 
  1326 ;;  divisor         2    2[BANK0 ] unsigned int 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  quotient        2    4[BANK0 ] unsigned int 
  1329 ;;  counter         1    6[BANK0 ] unsigned char 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    0[BANK0 ] unsigned int 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1339 ;;      Params:         0       4       0       0       0       0       0
  1340 ;;      Locals:         0       3       0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0
  1342 ;;      Totals:         0       7       0       0       0       0       0
  1343 ;;Total ram usage:        7 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; Hardware stack levels required when called:    4
  1346 ;; This function calls:
  1347 ;;		Nothing
  1348 ;; This function is called by:
  1349 ;;		_SetPWMMotorLeft
  1350 ;;		_SetPWMMotorRight
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text7
  1355  000EB6                     __ptext7:
  1356                           	opt stack 0
  1357  000EB6                     ___lwdiv:
  1358                           	opt stack 24
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;incstack = 0
  1362  000EB6  0E00               	movlw	0
  1363  000EB8  0100               	movlb	0	; () banked
  1364  000EBA  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1365  000EBC  0E00               	movlw	0
  1366  000EBE  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  1367                           
  1368                           ; BSR set to: 0
  1369  000EC0  0100               	movlb	0	; () banked
  1370  000EC2  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  1371  000EC4  0100               	movlb	0	; () banked
  1372  000EC6  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1373  000EC8  B4D8               	btfsc	status,2,c
  1374  000ECA  D02C               	goto	l722
  1375                           
  1376                           ; BSR set to: 0
  1377  000ECC  0E01               	movlw	1
  1378  000ECE  0100               	movlb	0	; () banked
  1379  000ED0  6FA6               	movwf	___lwdiv@counter& (0+255),b
  1380  000ED2  D006               	goto	l1723
  1381  000ED4                     l1721:
  1382                           
  1383                           ; BSR set to: 0
  1384  000ED4  0100               	movlb	0	; () banked
  1385  000ED6  90D8               	bcf	status,0,c
  1386  000ED8  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  1387  000EDA  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1388  000EDC  0100               	movlb	0	; () banked
  1389  000EDE  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  1390  000EE0                     l1723:
  1391                           
  1392                           ; BSR set to: 0
  1393  000EE0  0100               	movlb	0	; () banked
  1394  000EE2  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1395  000EE4  D7F7               	goto	l1721
  1396  000EE6                     l1725:
  1397                           
  1398                           ; BSR set to: 0
  1399  000EE6  0100               	movlb	0	; () banked
  1400  000EE8  90D8               	bcf	status,0,c
  1401  000EEA  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  1402  000EEC  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1403                           
  1404                           ; BSR set to: 0
  1405  000EEE  0100               	movlb	0	; () banked
  1406  000EF0  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  1407  000EF2  0100               	movlb	0	; () banked
  1408  000EF4  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  1409  000EF6  0100               	movlb	0	; () banked
  1410  000EF8  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1411  000EFA  0100               	movlb	0	; () banked
  1412  000EFC  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1413  000EFE  A0D8               	btfss	status,0,c
  1414  000F00  D00A               	goto	l1733
  1415                           
  1416                           ; BSR set to: 0
  1417  000F02  0100               	movlb	0	; () banked
  1418  000F04  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  1419  000F06  0100               	movlb	0	; () banked
  1420  000F08  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  1421  000F0A  0100               	movlb	0	; () banked
  1422  000F0C  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1423  000F0E  0100               	movlb	0	; () banked
  1424  000F10  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1425                           
  1426                           ; BSR set to: 0
  1427  000F12  0100               	movlb	0	; () banked
  1428  000F14  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  1429  000F16                     l1733:
  1430                           
  1431                           ; BSR set to: 0
  1432  000F16  0100               	movlb	0	; () banked
  1433  000F18  90D8               	bcf	status,0,c
  1434  000F1A  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1435  000F1C  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  1436                           
  1437                           ; BSR set to: 0
  1438  000F1E  0100               	movlb	0	; () banked
  1439  000F20  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  1440  000F22  D7E1               	goto	l1725
  1441  000F24                     l722:
  1442                           
  1443                           ; BSR set to: 0
  1444  000F24  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  1445  000F28  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1446                           
  1447                           ; BSR set to: 0
  1448  000F2C  0012               	return		;funcret
  1449  000F2E                     __end_of___lwdiv:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           intcon	equ	0xFF2
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _ReadBattery *****************
  1463 ;; Defined at:
  1464 ;;		line 80 in file "ADC.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  2    0[BANK0 ] unsigned int 
  1471 ;; Registers used:
  1472 ;;		None
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1478 ;;      Params:         0       2       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0
  1481 ;;      Totals:         0       2       0       0       0       0       0
  1482 ;;Total ram usage:        2 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    4
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text8
  1493  001394                     __ptext8:
  1494                           	opt stack 0
  1495  001394                     _ReadBattery:
  1496                           	opt stack 26
  1497                           
  1498                           ;ADC.c: 81: return Battery;
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;incstack = 0
  1502  001394  C0BD  F0A0         	movff	_Battery,?_ReadBattery
  1503  001398  C0BE  F0A1         	movff	_Battery+1,?_ReadBattery+1
  1504  00139C  0012               	return		;funcret
  1505  00139E                     __end_of_ReadBattery:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           intcon	equ	0xFF2
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1l	equ	0xFE1
  1516                           status	equ	0xFD8
  1517                           
  1518 ;; *************** function _MotorInit *****************
  1519 ;; Defined at:
  1520 ;;		line 23 in file "motors.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;		None
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;		None
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, status,2
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1534 ;;      Params:         0       0       0       0       0       0       0
  1535 ;;      Locals:         0       0       0       0       0       0       0
  1536 ;;      Temps:          0       0       0       0       0       0       0
  1537 ;;      Totals:         0       0       0       0       0       0       0
  1538 ;;Total ram usage:        0 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; Hardware stack levels required when called:    4
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text9
  1549  0013B2                     __ptext9:
  1550                           	opt stack 0
  1551  0013B2                     _MotorInit:
  1552                           	opt stack 26
  1553                           
  1554                           ;motors.c: 24: TRISC = 0b11000000;
  1555                           
  1556                           ;incstack = 0
  1557  0013B2  0EC0               	movlw	192
  1558  0013B4  6E94               	movwf	3988,c	;volatile
  1559  0013B6  0012               	return		;funcret
  1560  0013B8                     __end_of_MotorInit:
  1561                           	opt stack 0
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           intcon	equ	0xFF2
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           status	equ	0xFD8
  1572                           
  1573 ;; *************** function _LCDWriteString *****************
  1574 ;; Defined at:
  1575 ;;		line 254 in file "lcd_hd44780_pic16.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  msg             2    8[BANK0 ] PTR const unsigned char 
  1578 ;;		 -> STR_1(14), 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  cc              1   10[BANK0 ] char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1590 ;;      Params:         0       2       0       0       0       0       0
  1591 ;;      Locals:         0       1       0       0       0       0       0
  1592 ;;      Temps:          0       0       0       0       0       0       0
  1593 ;;      Totals:         0       3       0       0       0       0       0
  1594 ;;Total ram usage:        3 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    6
  1597 ;; This function calls:
  1598 ;;		_LCDByte
  1599 ;; This function is called by:
  1600 ;;		_main
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text10
  1605  000C4A                     __ptext10:
  1606                           	opt stack 0
  1607  000C4A                     _LCDWriteString:
  1608                           	opt stack 24
  1609                           
  1610                           ;lcd_hd44780_pic16.c: 284: while(*msg!='\0')
  1611                           
  1612                           ;incstack = 0
  1613  000C4A  D046               	goto	l2151
  1614  000C4C                     l2131:
  1615                           
  1616                           ;lcd_hd44780_pic16.c: 285: {
  1617                           ;lcd_hd44780_pic16.c: 287: if(*msg=='%')
  1618  000C4C  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  1619  000C50  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  1620  000C54                     	if	0	;tblptru may be non-zero
  1621  000C54                     	endif
  1622  000C54                     	if	0	;tblptru may be non-zero
  1623  000C54                     	endif
  1624  000C54  0008               	tblrd		*
  1625  000C56  50F5               	movf	tablat,w,c
  1626  000C58  0A25               	xorlw	37
  1627  000C5A  A4D8               	btfss	status,2,c
  1628  000C5C  D02F               	goto	l2147
  1629                           
  1630                           ;lcd_hd44780_pic16.c: 288: {
  1631                           ;lcd_hd44780_pic16.c: 289: msg++;
  1632  000C5E  0100               	movlb	0	; () banked
  1633  000C60  4BA8               	infsnz	LCDWriteString@msg& (0+255),f,b
  1634  000C62  2BA9               	incf	(LCDWriteString@msg+1)& (0+255),f,b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;lcd_hd44780_pic16.c: 290: int8_t cc=*msg-'0';
  1638  000C64  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  1639  000C68  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  1640  000C6C                     	if	0	;tblptru may be non-zero
  1641  000C6C                     	endif
  1642  000C6C                     	if	0	;tblptru may be non-zero
  1643  000C6C                     	endif
  1644  000C6C  0008               	tblrd		*
  1645  000C6E  50F5               	movf	tablat,w,c
  1646  000C70  0FD0               	addlw	208
  1647  000C72  0100               	movlb	0	; () banked
  1648  000C74  6FAA               	movwf	LCDWriteString@cc& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;lcd_hd44780_pic16.c: 292: if(cc>=0 && cc<=7)
  1652  000C76  0100               	movlb	0	; () banked
  1653  000C78  BFAA               	btfsc	LCDWriteString@cc& (0+255),7,b
  1654  000C7A  D00E               	goto	l2143
  1655                           
  1656                           ; BSR set to: 0
  1657  000C7C  0100               	movlb	0	; () banked
  1658  000C7E  51AA               	movf	LCDWriteString@cc& (0+255),w,b
  1659  000C80  0A80               	xorlw	128
  1660  000C82  0F78               	addlw	-136
  1661  000C84  B0D8               	btfsc	status,0,c
  1662  000C86  D008               	goto	l2143
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;lcd_hd44780_pic16.c: 293: {
  1666                           ;lcd_hd44780_pic16.c: 294: (LCDByte(cc,1));
  1667  000C88  0E01               	movlw	1
  1668  000C8A  0100               	movlb	0	; () banked
  1669  000C8C  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1670  000C8E  0100               	movlb	0	; () banked
  1671  000C90  51AA               	movf	LCDWriteString@cc& (0+255),w,b
  1672  000C92  EC42  F008         	call	_LCDByte
  1673                           
  1674                           ;lcd_hd44780_pic16.c: 295: }
  1675  000C96  D01D               	goto	l2149
  1676  000C98                     l2143:
  1677                           
  1678                           ;lcd_hd44780_pic16.c: 296: else
  1679                           ;lcd_hd44780_pic16.c: 297: {
  1680                           ;lcd_hd44780_pic16.c: 298: (LCDByte('%',1));
  1681  000C98  0E01               	movlw	1
  1682  000C9A  0100               	movlb	0	; () banked
  1683  000C9C  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1684  000C9E  0E25               	movlw	37
  1685  000CA0  EC42  F008         	call	_LCDByte
  1686                           
  1687                           ;lcd_hd44780_pic16.c: 299: (LCDByte(*msg,1));
  1688  000CA4  0E01               	movlw	1
  1689  000CA6  0100               	movlb	0	; () banked
  1690  000CA8  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1691  000CAA  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  1692  000CAE  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  1693  000CB2                     	if	0	;tblptru may be non-zero
  1694  000CB2                     	endif
  1695  000CB2                     	if	0	;tblptru may be non-zero
  1696  000CB2                     	endif
  1697  000CB2  0008               	tblrd		*
  1698  000CB4  50F5               	movf	tablat,w,c
  1699  000CB6  EC42  F008         	call	_LCDByte
  1700                           
  1701                           ;lcd_hd44780_pic16.c: 300: }
  1702                           ;lcd_hd44780_pic16.c: 301: }
  1703  000CBA  D00B               	goto	l2149
  1704  000CBC                     l2147:
  1705                           
  1706                           ;lcd_hd44780_pic16.c: 302: else
  1707                           ;lcd_hd44780_pic16.c: 303: {
  1708                           ;lcd_hd44780_pic16.c: 304: (LCDByte(*msg,1));
  1709  000CBC  0E01               	movlw	1
  1710  000CBE  0100               	movlb	0	; () banked
  1711  000CC0  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1712  000CC2  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  1713  000CC6  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  1714  000CCA                     	if	0	;tblptru may be non-zero
  1715  000CCA                     	endif
  1716  000CCA                     	if	0	;tblptru may be non-zero
  1717  000CCA                     	endif
  1718  000CCA  0008               	tblrd		*
  1719  000CCC  50F5               	movf	tablat,w,c
  1720  000CCE  EC42  F008         	call	_LCDByte
  1721  000CD2                     l2149:
  1722                           
  1723                           ;lcd_hd44780_pic16.c: 305: }
  1724                           ;lcd_hd44780_pic16.c: 306: msg++;
  1725  000CD2  0100               	movlb	0	; () banked
  1726  000CD4  4BA8               	infsnz	LCDWriteString@msg& (0+255),f,b
  1727  000CD6  2BA9               	incf	(LCDWriteString@msg+1)& (0+255),f,b
  1728  000CD8                     l2151:
  1729  000CD8  C0A8  FFF6         	movff	LCDWriteString@msg,tblptrl
  1730  000CDC  C0A9  FFF7         	movff	LCDWriteString@msg+1,tblptrh
  1731  000CE0                     	if	0	;tblptru may be non-zero
  1732  000CE0                     	endif
  1733  000CE0                     	if	0	;tblptru may be non-zero
  1734  000CE0                     	endif
  1735  000CE0  0008               	tblrd		*
  1736  000CE2  50F5               	movf	tablat,w,c
  1737  000CE4  0900               	iorlw	0
  1738  000CE6  B4D8               	btfsc	status,2,c
  1739  000CE8  0012               	return	
  1740  000CEA  D7B0               	goto	l2131
  1741  000CEC                     __end_of_LCDWriteString:
  1742                           	opt stack 0
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           intcon	equ	0xFF2
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           postdec1	equ	0xFE5
  1751                           fsr1l	equ	0xFE1
  1752                           status	equ	0xFD8
  1753                           
  1754 ;; *************** function _LCDWriteInt *****************
  1755 ;; Defined at:
  1756 ;;		line 310 in file "lcd_hd44780_pic16.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;  val             2    8[BANK0 ] int 
  1759 ;;  field_length    1   10[BANK0 ] char 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  str             5   13[BANK0 ] unsigned char [5]
  1762 ;;  i               2   20[BANK0 ] int 
  1763 ;;  j               2   18[BANK0 ] int 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1773 ;;      Params:         0       3       0       0       0       0       0
  1774 ;;      Locals:         0       9       0       0       0       0       0
  1775 ;;      Temps:          0       2       0       0       0       0       0
  1776 ;;      Totals:         0      14       0       0       0       0       0
  1777 ;;Total ram usage:       14 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    6
  1780 ;; This function calls:
  1781 ;;		_LCDByte
  1782 ;;		___awdiv
  1783 ;;		___awmod
  1784 ;; This function is called by:
  1785 ;;		_main
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text11
  1790  0007BC                     __ptext11:
  1791                           	opt stack 0
  1792  0007BC                     _LCDWriteInt:
  1793                           	opt stack 24
  1794                           
  1795                           ;lcd_hd44780_pic16.c: 323: char str[5]={0,0,0,0,0};
  1796                           
  1797                           ;incstack = 0
  1798  0007BC  EE20  F0B8         	lfsr	2,LCDWriteInt@F3445
  1799  0007C0  EE10  F0AD         	lfsr	1,LCDWriteInt@str
  1800  0007C4  0E04               	movlw	4
  1801  0007C6                     u1581:
  1802  0007C6  CFDB FFE3          	movff	plusw2,plusw1
  1803  0007CA  06E8               	decf	wreg,f,c
  1804  0007CC  E2FC               	bc	u1581
  1805                           
  1806                           ;lcd_hd44780_pic16.c: 324: int i=4,j=0;
  1807  0007CE  0E00               	movlw	0
  1808  0007D0  0100               	movlb	0	; () banked
  1809  0007D2  6FB5               	movwf	(LCDWriteInt@i+1)& (0+255),b
  1810  0007D4  0E04               	movlw	4
  1811  0007D6  6FB4               	movwf	LCDWriteInt@i& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814  0007D8  0E00               	movlw	0
  1815  0007DA  0100               	movlb	0	; () banked
  1816  0007DC  6FB3               	movwf	(LCDWriteInt@j+1)& (0+255),b
  1817  0007DE  0E00               	movlw	0
  1818  0007E0  6FB2               	movwf	LCDWriteInt@j& (0+255),b
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;lcd_hd44780_pic16.c: 327: if(val<0)
  1822  0007E2  0100               	movlb	0	; () banked
  1823  0007E4  AFA9               	btfss	(LCDWriteInt@val+1)& (0+255),7,b
  1824  0007E6  D035               	goto	l2173
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;lcd_hd44780_pic16.c: 328: {
  1828                           ;lcd_hd44780_pic16.c: 329: (LCDByte('-',1));
  1829  0007E8  0E01               	movlw	1
  1830  0007EA  0100               	movlb	0	; () banked
  1831  0007EC  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1832  0007EE  0E2D               	movlw	45
  1833  0007F0  EC42  F008         	call	_LCDByte
  1834                           
  1835                           ;lcd_hd44780_pic16.c: 330: val=val*-1;
  1836  0007F4  0100               	movlb	0	; () banked
  1837  0007F6  6DA8               	negf	LCDWriteInt@val& (0+255),b
  1838  0007F8  1FA9               	comf	(LCDWriteInt@val+1)& (0+255),f,b
  1839  0007FA  B0D8               	btfsc	status,0,c
  1840  0007FC  2BA9               	incf	(LCDWriteInt@val+1)& (0+255),f,b
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;lcd_hd44780_pic16.c: 331: }
  1844                           ;lcd_hd44780_pic16.c: 333: while(val)
  1845  0007FE  D029               	goto	l2173
  1846  000800                     l2167:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;lcd_hd44780_pic16.c: 334: {
  1850                           ;lcd_hd44780_pic16.c: 335: str[i]=val%10;
  1851  000800  0EAD               	movlw	low LCDWriteInt@str
  1852  000802  0100               	movlb	0	; () banked
  1853  000804  25B4               	addwf	LCDWriteInt@i& (0+255),w,b
  1854  000806  6ED9               	movwf	fsr2l,c
  1855  000808  0E00               	movlw	high LCDWriteInt@str
  1856  00080A  0100               	movlb	0	; () banked
  1857  00080C  21B5               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  1858  00080E  6EDA               	movwf	fsr2h,c
  1859  000810  C0A8  F0A0         	movff	LCDWriteInt@val,___awmod@dividend
  1860  000814  C0A9  F0A1         	movff	LCDWriteInt@val+1,___awmod@dividend+1
  1861  000818  0E00               	movlw	0
  1862  00081A  0100               	movlb	0	; () banked
  1863  00081C  6FA3               	movwf	(___awmod@divisor+1)& (0+255),b
  1864  00081E  0E0A               	movlw	10
  1865  000820  6FA2               	movwf	___awmod@divisor& (0+255),b
  1866  000822  EC76  F006         	call	___awmod	;wreg free
  1867  000826  0100               	movlb	0	; () banked
  1868  000828  51A0               	movf	?___awmod& (0+255),w,b
  1869  00082A  6EDF               	movwf	indf2,c
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;lcd_hd44780_pic16.c: 336: val=val/10;
  1873  00082C  C0A8  F0A0         	movff	LCDWriteInt@val,___awdiv@dividend
  1874  000830  C0A9  F0A1         	movff	LCDWriteInt@val+1,___awdiv@dividend+1
  1875  000834  0E00               	movlw	0
  1876  000836  0100               	movlb	0	; () banked
  1877  000838  6FA3               	movwf	(___awdiv@divisor+1)& (0+255),b
  1878  00083A  0E0A               	movlw	10
  1879  00083C  6FA2               	movwf	___awdiv@divisor& (0+255),b
  1880  00083E  EC6F  F005         	call	___awdiv	;wreg free
  1881  000842  C0A0  F0A8         	movff	?___awdiv,LCDWriteInt@val
  1882  000846  C0A1  F0A9         	movff	?___awdiv+1,LCDWriteInt@val+1
  1883                           
  1884                           ;lcd_hd44780_pic16.c: 337: i--;
  1885  00084A  0100               	movlb	0	; () banked
  1886  00084C  07B4               	decf	LCDWriteInt@i& (0+255),f,b
  1887  00084E  A0D8               	btfss	status,0,c
  1888  000850  07B5               	decf	(LCDWriteInt@i+1)& (0+255),f,b
  1889  000852                     l2173:
  1890                           
  1891                           ; BSR set to: 0
  1892  000852  0100               	movlb	0	; () banked
  1893  000854  51A8               	movf	LCDWriteInt@val& (0+255),w,b
  1894  000856  0100               	movlb	0	; () banked
  1895  000858  11A9               	iorwf	(LCDWriteInt@val+1)& (0+255),w,b
  1896  00085A  A4D8               	btfss	status,2,c
  1897  00085C  D7D1               	goto	l2167
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;lcd_hd44780_pic16.c: 338: }
  1901                           ;lcd_hd44780_pic16.c: 339: if(field_length==-1)
  1902                           
  1903                           ; BSR set to: 0
  1904  00085E  0100               	movlb	0	; () banked
  1905  000860  29AA               	incf	LCDWriteInt@field_length& (0+255),w,b
  1906  000862  B4D8               	btfsc	status,2,c
  1907  000864  D004               	goto	l2181
  1908  000866  D00F               	goto	l2183
  1909  000868                     l2179:
  1910                           
  1911                           ; BSR set to: 0
  1912  000868  0100               	movlb	0	; () banked
  1913  00086A  4BB2               	infsnz	LCDWriteInt@j& (0+255),f,b
  1914  00086C  2BB3               	incf	(LCDWriteInt@j+1)& (0+255),f,b
  1915  00086E                     l2181:
  1916                           
  1917                           ; BSR set to: 0
  1918  00086E  0EAD               	movlw	low LCDWriteInt@str
  1919  000870  0100               	movlb	0	; () banked
  1920  000872  25B2               	addwf	LCDWriteInt@j& (0+255),w,b
  1921  000874  6ED9               	movwf	fsr2l,c
  1922  000876  0E00               	movlw	high LCDWriteInt@str
  1923  000878  0100               	movlb	0	; () banked
  1924  00087A  21B3               	addwfc	(LCDWriteInt@j+1)& (0+255),w,b
  1925  00087C  6EDA               	movwf	fsr2h,c
  1926  00087E  50DF               	movf	indf2,w,c
  1927  000880  A4D8               	btfss	status,2,c
  1928  000882  D016               	goto	l2185
  1929  000884  D7F1               	goto	l2179
  1930  000886                     l2183:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;lcd_hd44780_pic16.c: 341: else
  1934                           ;lcd_hd44780_pic16.c: 342: j=5-field_length;
  1935  000886  C0AA  F0AB         	movff	LCDWriteInt@field_length,??_LCDWriteInt
  1936  00088A  0100               	movlb	0	; () banked
  1937  00088C  6BAC               	clrf	(??_LCDWriteInt+1)& (0+255),b
  1938  00088E  BFAB               	btfsc	??_LCDWriteInt& (0+255),7,b
  1939  000890  07AC               	decf	(??_LCDWriteInt+1)& (0+255),f,b
  1940  000892  0100               	movlb	0	; () banked
  1941  000894  1FAB               	comf	??_LCDWriteInt& (0+255),f,b
  1942  000896  1FAC               	comf	(??_LCDWriteInt+1)& (0+255),f,b
  1943  000898  4BAB               	infsnz	??_LCDWriteInt& (0+255),f,b
  1944  00089A  2BAC               	incf	(??_LCDWriteInt+1)& (0+255),f,b
  1945  00089C  0E05               	movlw	5
  1946  00089E  0100               	movlb	0	; () banked
  1947  0008A0  25AB               	addwf	??_LCDWriteInt& (0+255),w,b
  1948  0008A2  0100               	movlb	0	; () banked
  1949  0008A4  6FB2               	movwf	LCDWriteInt@j& (0+255),b
  1950  0008A6  0E00               	movlw	0
  1951  0008A8  0100               	movlb	0	; () banked
  1952  0008AA  21AC               	addwfc	(??_LCDWriteInt+1)& (0+255),w,b
  1953  0008AC  0100               	movlb	0	; () banked
  1954  0008AE  6FB3               	movwf	(LCDWriteInt@j+1)& (0+255),b
  1955  0008B0                     l2185:
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;lcd_hd44780_pic16.c: 345: for(i=j;i<5;i++)
  1959  0008B0  C0B2  F0B4         	movff	LCDWriteInt@j,LCDWriteInt@i
  1960  0008B4  C0B3  F0B5         	movff	LCDWriteInt@j+1,LCDWriteInt@i+1
  1961  0008B8  0100               	movlb	0	; () banked
  1962  0008BA  BFB5               	btfsc	(LCDWriteInt@i+1)& (0+255),7,b
  1963  0008BC  D008               	goto	l2189
  1964  0008BE  0100               	movlb	0	; () banked
  1965  0008C0  51B5               	movf	(LCDWriteInt@i+1)& (0+255),w,b
  1966  0008C2  E118               	bnz	l262
  1967  0008C4  0E05               	movlw	5
  1968  0008C6  0100               	movlb	0	; () banked
  1969  0008C8  5DB4               	subwf	LCDWriteInt@i& (0+255),w,b
  1970  0008CA  B0D8               	btfsc	status,0,c
  1971  0008CC  0012               	return	
  1972  0008CE                     l2189:
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;lcd_hd44780_pic16.c: 346: {
  1976                           ;lcd_hd44780_pic16.c: 347: (LCDByte(48+str[i],1));
  1977  0008CE  0E01               	movlw	1
  1978  0008D0  0100               	movlb	0	; () banked
  1979  0008D2  6FA3               	movwf	LCDByte@isdata& (0+255),b
  1980  0008D4  0EAD               	movlw	low LCDWriteInt@str
  1981  0008D6  0100               	movlb	0	; () banked
  1982  0008D8  25B4               	addwf	LCDWriteInt@i& (0+255),w,b
  1983  0008DA  6ED9               	movwf	fsr2l,c
  1984  0008DC  0E00               	movlw	high LCDWriteInt@str
  1985  0008DE  0100               	movlb	0	; () banked
  1986  0008E0  21B5               	addwfc	(LCDWriteInt@i+1)& (0+255),w,b
  1987  0008E2  6EDA               	movwf	fsr2h,c
  1988  0008E4  50DF               	movf	indf2,w,c
  1989  0008E6  0F30               	addlw	48
  1990  0008E8  EC42  F008         	call	_LCDByte
  1991  0008EC  0100               	movlb	0	; () banked
  1992  0008EE  4BB4               	infsnz	LCDWriteInt@i& (0+255),f,b
  1993  0008F0  2BB5               	incf	(LCDWriteInt@i+1)& (0+255),f,b
  1994  0008F2  D7E2               	goto	L3
  1995  0008F4                     l262:
  1996                           
  1997                           ; BSR set to: 0
  1998  0008F4  0012               	return		;funcret
  1999  0008F6                     __end_of_LCDWriteInt:
  2000                           	opt stack 0
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           intcon	equ	0xFF2
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           postdec1	equ	0xFE5
  2009                           plusw1	equ	0xFE3
  2010                           fsr1l	equ	0xFE1
  2011                           indf2	equ	0xFDF
  2012                           plusw2	equ	0xFDB
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function ___awmod *****************
  2018 ;; Defined at:
  2019 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awmod.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  dividend        2    0[BANK0 ] int 
  2022 ;;  divisor         2    2[BANK0 ] int 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  sign            1    5[BANK0 ] unsigned char 
  2025 ;;  counter         1    4[BANK0 ] unsigned char 
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  2    0[BANK0 ] int 
  2028 ;; Registers used:
  2029 ;;		wreg, status,2, status,0
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2035 ;;      Params:         0       4       0       0       0       0       0
  2036 ;;      Locals:         0       2       0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0       0       0
  2038 ;;      Totals:         0       6       0       0       0       0       0
  2039 ;;Total ram usage:        6 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    4
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_LCDWriteInt
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           	psect	text12
  2050  000CEC                     __ptext12:
  2051                           	opt stack 0
  2052  000CEC                     ___awmod:
  2053                           	opt stack 25
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;incstack = 0
  2057  000CEC  0E00               	movlw	0
  2058  000CEE  0100               	movlb	0	; () banked
  2059  000CF0  6FA5               	movwf	___awmod@sign& (0+255),b
  2060                           
  2061                           ; BSR set to: 0
  2062  000CF2  0100               	movlb	0	; () banked
  2063  000CF4  AFA1               	btfss	(___awmod@dividend+1)& (0+255),7,b
  2064  000CF6  D008               	goto	l1943
  2065                           
  2066                           ; BSR set to: 0
  2067  000CF8  0100               	movlb	0	; () banked
  2068  000CFA  6DA0               	negf	___awmod@dividend& (0+255),b
  2069  000CFC  1FA1               	comf	(___awmod@dividend+1)& (0+255),f,b
  2070  000CFE  B0D8               	btfsc	status,0,c
  2071  000D00  2BA1               	incf	(___awmod@dividend+1)& (0+255),f,b
  2072                           
  2073                           ; BSR set to: 0
  2074  000D02  0E01               	movlw	1
  2075  000D04  0100               	movlb	0	; () banked
  2076  000D06  6FA5               	movwf	___awmod@sign& (0+255),b
  2077  000D08                     l1943:
  2078                           
  2079                           ; BSR set to: 0
  2080  000D08  0100               	movlb	0	; () banked
  2081  000D0A  AFA3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2082  000D0C  D005               	goto	l1947
  2083                           
  2084                           ; BSR set to: 0
  2085  000D0E  0100               	movlb	0	; () banked
  2086  000D10  6DA2               	negf	___awmod@divisor& (0+255),b
  2087  000D12  1FA3               	comf	(___awmod@divisor+1)& (0+255),f,b
  2088  000D14  B0D8               	btfsc	status,0,c
  2089  000D16  2BA3               	incf	(___awmod@divisor+1)& (0+255),f,b
  2090  000D18                     l1947:
  2091                           
  2092                           ; BSR set to: 0
  2093  000D18  0100               	movlb	0	; () banked
  2094  000D1A  51A2               	movf	___awmod@divisor& (0+255),w,b
  2095  000D1C  0100               	movlb	0	; () banked
  2096  000D1E  11A3               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2097  000D20  B4D8               	btfsc	status,2,c
  2098  000D22  D026               	goto	l1963
  2099                           
  2100                           ; BSR set to: 0
  2101  000D24  0E01               	movlw	1
  2102  000D26  0100               	movlb	0	; () banked
  2103  000D28  6FA4               	movwf	___awmod@counter& (0+255),b
  2104  000D2A  D006               	goto	l1953
  2105  000D2C                     l1951:
  2106                           
  2107                           ; BSR set to: 0
  2108  000D2C  0100               	movlb	0	; () banked
  2109  000D2E  90D8               	bcf	status,0,c
  2110  000D30  37A2               	rlcf	___awmod@divisor& (0+255),f,b
  2111  000D32  37A3               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2112  000D34  0100               	movlb	0	; () banked
  2113  000D36  2BA4               	incf	___awmod@counter& (0+255),f,b
  2114  000D38                     l1953:
  2115                           
  2116                           ; BSR set to: 0
  2117  000D38  0100               	movlb	0	; () banked
  2118  000D3A  AFA3               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2119  000D3C  D7F7               	goto	l1951
  2120  000D3E                     l1955:
  2121                           
  2122                           ; BSR set to: 0
  2123  000D3E  0100               	movlb	0	; () banked
  2124  000D40  51A2               	movf	___awmod@divisor& (0+255),w,b
  2125  000D42  0100               	movlb	0	; () banked
  2126  000D44  5DA0               	subwf	___awmod@dividend& (0+255),w,b
  2127  000D46  0100               	movlb	0	; () banked
  2128  000D48  51A3               	movf	(___awmod@divisor+1)& (0+255),w,b
  2129  000D4A  0100               	movlb	0	; () banked
  2130  000D4C  59A1               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2131  000D4E  A0D8               	btfss	status,0,c
  2132  000D50  D008               	goto	l1959
  2133                           
  2134                           ; BSR set to: 0
  2135  000D52  0100               	movlb	0	; () banked
  2136  000D54  51A2               	movf	___awmod@divisor& (0+255),w,b
  2137  000D56  0100               	movlb	0	; () banked
  2138  000D58  5FA0               	subwf	___awmod@dividend& (0+255),f,b
  2139  000D5A  0100               	movlb	0	; () banked
  2140  000D5C  51A3               	movf	(___awmod@divisor+1)& (0+255),w,b
  2141  000D5E  0100               	movlb	0	; () banked
  2142  000D60  5BA1               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2143  000D62                     l1959:
  2144                           
  2145                           ; BSR set to: 0
  2146  000D62  0100               	movlb	0	; () banked
  2147  000D64  90D8               	bcf	status,0,c
  2148  000D66  33A3               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2149  000D68  33A2               	rrcf	___awmod@divisor& (0+255),f,b
  2150                           
  2151                           ; BSR set to: 0
  2152  000D6A  0100               	movlb	0	; () banked
  2153  000D6C  2FA4               	decfsz	___awmod@counter& (0+255),f,b
  2154  000D6E  D7E7               	goto	l1955
  2155  000D70                     l1963:
  2156                           
  2157                           ; BSR set to: 0
  2158  000D70  0100               	movlb	0	; () banked
  2159  000D72  51A5               	movf	___awmod@sign& (0+255),w,b
  2160  000D74  0100               	movlb	0	; () banked
  2161  000D76  B4D8               	btfsc	status,2,c
  2162  000D78  D005               	goto	l1967
  2163                           
  2164                           ; BSR set to: 0
  2165  000D7A  0100               	movlb	0	; () banked
  2166  000D7C  6DA0               	negf	___awmod@dividend& (0+255),b
  2167  000D7E  1FA1               	comf	(___awmod@dividend+1)& (0+255),f,b
  2168  000D80  B0D8               	btfsc	status,0,c
  2169  000D82  2BA1               	incf	(___awmod@dividend+1)& (0+255),f,b
  2170  000D84                     l1967:
  2171                           
  2172                           ; BSR set to: 0
  2173  000D84  C0A0  F0A0         	movff	___awmod@dividend,?___awmod
  2174  000D88  C0A1  F0A1         	movff	___awmod@dividend+1,?___awmod+1
  2175  000D8C  0012               	return	
  2176  000D8E                     __end_of___awmod:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           postdec1	equ	0xFE5
  2186                           plusw1	equ	0xFE3
  2187                           fsr1l	equ	0xFE1
  2188                           indf2	equ	0xFDF
  2189                           plusw2	equ	0xFDB
  2190                           fsr2h	equ	0xFDA
  2191                           fsr2l	equ	0xFD9
  2192                           status	equ	0xFD8
  2193                           
  2194 ;; *************** function ___awdiv *****************
  2195 ;; Defined at:
  2196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\awdiv.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  dividend        2    0[BANK0 ] int 
  2199 ;;  divisor         2    2[BANK0 ] int 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;  quotient        2    6[BANK0 ] int 
  2202 ;;  sign            1    5[BANK0 ] unsigned char 
  2203 ;;  counter         1    4[BANK0 ] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2    0[BANK0 ] int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2213 ;;      Params:         0       4       0       0       0       0       0
  2214 ;;      Locals:         0       4       0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0
  2216 ;;      Totals:         0       8       0       0       0       0       0
  2217 ;;Total ram usage:        8 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    4
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_LCDWriteInt
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text13
  2228  000ADE                     __ptext13:
  2229                           	opt stack 0
  2230  000ADE                     ___awdiv:
  2231                           	opt stack 25
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;incstack = 0
  2235  000ADE  0E00               	movlw	0
  2236  000AE0  0100               	movlb	0	; () banked
  2237  000AE2  6FA5               	movwf	___awdiv@sign& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240  000AE4  0100               	movlb	0	; () banked
  2241  000AE6  AFA3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2242  000AE8  D008               	goto	l1899
  2243                           
  2244                           ; BSR set to: 0
  2245  000AEA  0100               	movlb	0	; () banked
  2246  000AEC  6DA2               	negf	___awdiv@divisor& (0+255),b
  2247  000AEE  1FA3               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2248  000AF0  B0D8               	btfsc	status,0,c
  2249  000AF2  2BA3               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2250                           
  2251                           ; BSR set to: 0
  2252  000AF4  0E01               	movlw	1
  2253  000AF6  0100               	movlb	0	; () banked
  2254  000AF8  6FA5               	movwf	___awdiv@sign& (0+255),b
  2255  000AFA                     l1899:
  2256                           
  2257                           ; BSR set to: 0
  2258  000AFA  0100               	movlb	0	; () banked
  2259  000AFC  AFA1               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2260  000AFE  D008               	goto	l1905
  2261                           
  2262                           ; BSR set to: 0
  2263  000B00  0100               	movlb	0	; () banked
  2264  000B02  6DA0               	negf	___awdiv@dividend& (0+255),b
  2265  000B04  1FA1               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2266  000B06  B0D8               	btfsc	status,0,c
  2267  000B08  2BA1               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2268                           
  2269                           ; BSR set to: 0
  2270  000B0A  0E01               	movlw	1
  2271  000B0C  0100               	movlb	0	; () banked
  2272  000B0E  1BA5               	xorwf	___awdiv@sign& (0+255),f,b
  2273  000B10                     l1905:
  2274                           
  2275                           ; BSR set to: 0
  2276  000B10  0E00               	movlw	0
  2277  000B12  0100               	movlb	0	; () banked
  2278  000B14  6FA7               	movwf	(___awdiv@quotient+1)& (0+255),b
  2279  000B16  0E00               	movlw	0
  2280  000B18  6FA6               	movwf	___awdiv@quotient& (0+255),b
  2281                           
  2282                           ; BSR set to: 0
  2283  000B1A  0100               	movlb	0	; () banked
  2284  000B1C  51A2               	movf	___awdiv@divisor& (0+255),w,b
  2285  000B1E  0100               	movlb	0	; () banked
  2286  000B20  11A3               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2287  000B22  B4D8               	btfsc	status,2,c
  2288  000B24  D02C               	goto	l1927
  2289                           
  2290                           ; BSR set to: 0
  2291  000B26  0E01               	movlw	1
  2292  000B28  0100               	movlb	0	; () banked
  2293  000B2A  6FA4               	movwf	___awdiv@counter& (0+255),b
  2294  000B2C  D006               	goto	l1913
  2295  000B2E                     l1911:
  2296                           
  2297                           ; BSR set to: 0
  2298  000B2E  0100               	movlb	0	; () banked
  2299  000B30  90D8               	bcf	status,0,c
  2300  000B32  37A2               	rlcf	___awdiv@divisor& (0+255),f,b
  2301  000B34  37A3               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2302  000B36  0100               	movlb	0	; () banked
  2303  000B38  2BA4               	incf	___awdiv@counter& (0+255),f,b
  2304  000B3A                     l1913:
  2305                           
  2306                           ; BSR set to: 0
  2307  000B3A  0100               	movlb	0	; () banked
  2308  000B3C  AFA3               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2309  000B3E  D7F7               	goto	l1911
  2310  000B40                     l1915:
  2311                           
  2312                           ; BSR set to: 0
  2313  000B40  0100               	movlb	0	; () banked
  2314  000B42  90D8               	bcf	status,0,c
  2315  000B44  37A6               	rlcf	___awdiv@quotient& (0+255),f,b
  2316  000B46  37A7               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2317                           
  2318                           ; BSR set to: 0
  2319  000B48  0100               	movlb	0	; () banked
  2320  000B4A  51A2               	movf	___awdiv@divisor& (0+255),w,b
  2321  000B4C  0100               	movlb	0	; () banked
  2322  000B4E  5DA0               	subwf	___awdiv@dividend& (0+255),w,b
  2323  000B50  0100               	movlb	0	; () banked
  2324  000B52  51A3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2325  000B54  0100               	movlb	0	; () banked
  2326  000B56  59A1               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2327  000B58  A0D8               	btfss	status,0,c
  2328  000B5A  D00A               	goto	l1923
  2329                           
  2330                           ; BSR set to: 0
  2331  000B5C  0100               	movlb	0	; () banked
  2332  000B5E  51A2               	movf	___awdiv@divisor& (0+255),w,b
  2333  000B60  0100               	movlb	0	; () banked
  2334  000B62  5FA0               	subwf	___awdiv@dividend& (0+255),f,b
  2335  000B64  0100               	movlb	0	; () banked
  2336  000B66  51A3               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2337  000B68  0100               	movlb	0	; () banked
  2338  000B6A  5BA1               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2339                           
  2340                           ; BSR set to: 0
  2341  000B6C  0100               	movlb	0	; () banked
  2342  000B6E  81A6               	bsf	___awdiv@quotient& (0+255),0,b
  2343  000B70                     l1923:
  2344                           
  2345                           ; BSR set to: 0
  2346  000B70  0100               	movlb	0	; () banked
  2347  000B72  90D8               	bcf	status,0,c
  2348  000B74  33A3               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2349  000B76  33A2               	rrcf	___awdiv@divisor& (0+255),f,b
  2350                           
  2351                           ; BSR set to: 0
  2352  000B78  0100               	movlb	0	; () banked
  2353  000B7A  2FA4               	decfsz	___awdiv@counter& (0+255),f,b
  2354  000B7C  D7E1               	goto	l1915
  2355  000B7E                     l1927:
  2356                           
  2357                           ; BSR set to: 0
  2358  000B7E  0100               	movlb	0	; () banked
  2359  000B80  51A5               	movf	___awdiv@sign& (0+255),w,b
  2360  000B82  0100               	movlb	0	; () banked
  2361  000B84  B4D8               	btfsc	status,2,c
  2362  000B86  D005               	goto	l1931
  2363                           
  2364                           ; BSR set to: 0
  2365  000B88  0100               	movlb	0	; () banked
  2366  000B8A  6DA6               	negf	___awdiv@quotient& (0+255),b
  2367  000B8C  1FA7               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2368  000B8E  B0D8               	btfsc	status,0,c
  2369  000B90  2BA7               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2370  000B92                     l1931:
  2371                           
  2372                           ; BSR set to: 0
  2373  000B92  C0A6  F0A0         	movff	___awdiv@quotient,?___awdiv
  2374  000B96  C0A7  F0A1         	movff	___awdiv@quotient+1,?___awdiv+1
  2375  000B9A  0012               	return	
  2376  000B9C                     __end_of___awdiv:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           intcon	equ	0xFF2
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           plusw1	equ	0xFE3
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           plusw2	equ	0xFDB
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function _LCDInit *****************
  2395 ;; Defined at:
  2396 ;;		line 196 in file "lcd_hd44780_pic16.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  style           1    wreg     unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  style           1    9[BANK0 ] unsigned char 
  2401 ;;  __i             1   10[BANK0 ] unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      void 
  2404 ;; Registers used:
  2405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2411 ;;      Params:         0       0       0       0       0       0       0
  2412 ;;      Locals:         0       2       0       0       0       0       0
  2413 ;;      Temps:          0       1       0       0       0       0       0
  2414 ;;      Totals:         0       3       0       0       0       0       0
  2415 ;;Total ram usage:        3 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    6
  2418 ;; This function calls:
  2419 ;;		_LCDBusyLoop
  2420 ;;		_LCDByte
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text14
  2427  000E24                     __ptext14:
  2428                           	opt stack 0
  2429  000E24                     _LCDInit:
  2430                           	opt stack 24
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;incstack = 0
  2434                           ;LCDInit@style stored from wreg
  2435  000E24  0100               	movlb	0	; () banked
  2436  000E26  6FA9               	movwf	LCDInit@style& (0+255),b
  2437                           
  2438                           ;lcd_hd44780_pic16.c: 212: _delay((unsigned long)((30)*(1000000/4000.0)));
  2439  000E28  0E0A               	movlw	10
  2440  000E2A  0100               	movlb	0	; () banked
  2441  000E2C  6FA8               	movwf	??_LCDInit& (0+255),b
  2442  000E2E  0EBC               	movlw	188
  2443  000E30                     u1737:
  2444  000E30  2EE8               	decfsz	wreg,f,c
  2445  000E32  D7FE               	goto	u1737
  2446  000E34  2FA8               	decfsz	??_LCDInit& (0+255),f,b
  2447  000E36  D7FC               	goto	u1737
  2448  000E38  F000 F000          	nop2	
  2449                           
  2450                           ;lcd_hd44780_pic16.c: 215: TRISD&=(~(0x0F<<0));
  2451  000E3C  0EF0               	movlw	240
  2452  000E3E  1695               	andwf	3989,f,c	;volatile
  2453                           
  2454                           ;lcd_hd44780_pic16.c: 217: TRISDbits.TRISD6=0;
  2455  000E40  9C95               	bcf	3989,6,c	;volatile
  2456                           
  2457                           ;lcd_hd44780_pic16.c: 218: TRISDbits.TRISD4=0;
  2458  000E42  9895               	bcf	3989,4,c	;volatile
  2459                           
  2460                           ;lcd_hd44780_pic16.c: 219: TRISDbits.TRISD5=0;
  2461  000E44  9A95               	bcf	3989,5,c	;volatile
  2462                           
  2463                           ;lcd_hd44780_pic16.c: 221: PORTD&=(~(0x0F<<0));
  2464  000E46  0EF0               	movlw	240
  2465  000E48  1683               	andwf	3971,f,c	;volatile
  2466                           
  2467                           ;lcd_hd44780_pic16.c: 223: (RD6=0);
  2468  000E4A  9C83               	bcf	3971,6,c	;volatile
  2469                           
  2470                           ;lcd_hd44780_pic16.c: 224: (RD5=0);
  2471  000E4C  9A83               	bcf	3971,5,c	;volatile
  2472                           
  2473                           ;lcd_hd44780_pic16.c: 225: (RD4=0);
  2474  000E4E  9883               	bcf	3971,4,c	;volatile
  2475                           
  2476                           ;lcd_hd44780_pic16.c: 230: (RD6=1);
  2477                           
  2478                           ;lcd_hd44780_pic16.c: 228: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2479  000E50  8C83               	bsf	3971,6,c	;volatile
  2480                           
  2481                           ;lcd_hd44780_pic16.c: 231: PORTD|=((0b00000010)<<0);
  2482  000E52  8283               	bsf	3971,1,c	;volatile
  2483                           
  2484                           ;lcd_hd44780_pic16.c: 233: (RD6=0);
  2485                           
  2486                           ;lcd_hd44780_pic16.c: 232: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2487  000E54  9C83               	bcf	3971,6,c	;volatile
  2488                           
  2489                           ;lcd_hd44780_pic16.c: 237: LCDBusyLoop();
  2490                           
  2491                           ;lcd_hd44780_pic16.c: 234: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2492  000E56  EC6D  F008         	call	_LCDBusyLoop	;wreg free
  2493                           
  2494                           ;lcd_hd44780_pic16.c: 242: (LCDByte(0b00101000,0));
  2495  000E5A  0E00               	movlw	0
  2496  000E5C  0100               	movlb	0	; () banked
  2497  000E5E  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2498  000E60  0E28               	movlw	40
  2499  000E62  EC42  F008         	call	_LCDByte
  2500                           
  2501                           ;lcd_hd44780_pic16.c: 243: (LCDByte(0b00001100|style,0));
  2502  000E66  0E00               	movlw	0
  2503  000E68  0100               	movlb	0	; () banked
  2504  000E6A  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2505  000E6C  0100               	movlb	0	; () banked
  2506  000E6E  51A9               	movf	LCDInit@style& (0+255),w,b
  2507  000E70  090C               	iorlw	12
  2508  000E72  EC42  F008         	call	_LCDByte
  2509                           
  2510                           ;lcd_hd44780_pic16.c: 246: (LCDByte(0b01000000,0));
  2511  000E76  0E00               	movlw	0
  2512  000E78  0100               	movlb	0	; () banked
  2513  000E7A  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2514  000E7C  0E40               	movlw	64
  2515  000E7E  EC42  F008         	call	_LCDByte
  2516                           
  2517                           ;lcd_hd44780_pic16.c: 248: uint8_t __i;
  2518                           ;lcd_hd44780_pic16.c: 249: for(__i=0;__i<sizeof(__cgram);__i++)
  2519  000E82  0E00               	movlw	0
  2520  000E84  0100               	movlb	0	; () banked
  2521  000E86  6FAA               	movwf	LCDInit@__i& (0+255),b
  2522  000E88                     l2119:
  2523                           
  2524                           ; BSR set to: 0
  2525  000E88  0E3F               	movlw	63
  2526  000E8A  0100               	movlb	0	; () banked
  2527  000E8C  65AA               	cpfsgt	LCDInit@__i& (0+255),b
  2528  000E8E  D001               	goto	l2123
  2529  000E90  0012               	return	
  2530  000E92                     l2123:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;lcd_hd44780_pic16.c: 250: (LCDByte(__cgram[__i],1));
  2534  000E92  0E01               	movlw	1
  2535  000E94  0100               	movlb	0	; () banked
  2536  000E96  6FA3               	movwf	LCDByte@isdata& (0+255),b
  2537  000E98  0100               	movlb	0	; () banked
  2538  000E9A  51AA               	movf	LCDInit@__i& (0+255),w,b
  2539  000E9C  0D01               	mullw	1
  2540  000E9E  0E60               	movlw	low ___cgram
  2541  000EA0  24F3               	addwf	prodl,w,c
  2542  000EA2  6ED9               	movwf	fsr2l,c
  2543  000EA4  0E00               	movlw	high ___cgram
  2544  000EA6  20F4               	addwfc	prodh,w,c
  2545  000EA8  6EDA               	movwf	fsr2h,c
  2546  000EAA  50DF               	movf	indf2,w,c
  2547  000EAC  EC42  F008         	call	_LCDByte
  2548  000EB0  0100               	movlb	0	; () banked
  2549  000EB2  2BAA               	incf	LCDInit@__i& (0+255),f,b
  2550  000EB4  D7E9               	goto	l2119
  2551  000EB6                     __end_of_LCDInit:
  2552                           	opt stack 0
  2553                           tblptru	equ	0xFF8
  2554                           tblptrh	equ	0xFF7
  2555                           tblptrl	equ	0xFF6
  2556                           tablat	equ	0xFF5
  2557                           prodh	equ	0xFF4
  2558                           prodl	equ	0xFF3
  2559                           intcon	equ	0xFF2
  2560                           postinc0	equ	0xFEE
  2561                           wreg	equ	0xFE8
  2562                           postdec1	equ	0xFE5
  2563                           plusw1	equ	0xFE3
  2564                           fsr1l	equ	0xFE1
  2565                           indf2	equ	0xFDF
  2566                           plusw2	equ	0xFDB
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _LCDByte *****************
  2572 ;; Defined at:
  2573 ;;		line 83 in file "lcd_hd44780_pic16.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  c               1    wreg     unsigned char 
  2576 ;;  isdata          1    3[BANK0 ] unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  c               1    6[BANK0 ] unsigned char 
  2579 ;;  temp            1    7[BANK0 ] unsigned char 
  2580 ;;  ln              1    5[BANK0 ] unsigned char 
  2581 ;;  hn              1    4[BANK0 ] unsigned char 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      void 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, status,0, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2591 ;;      Params:         0       1       0       0       0       0       0
  2592 ;;      Locals:         0       4       0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0
  2594 ;;      Totals:         0       5       0       0       0       0       0
  2595 ;;Total ram usage:        5 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    5
  2598 ;; This function calls:
  2599 ;;		_LCDBusyLoop
  2600 ;; This function is called by:
  2601 ;;		_main
  2602 ;;		_LCDInit
  2603 ;;		_LCDWriteString
  2604 ;;		_LCDWriteInt
  2605 ;;		_LCDGotoXY
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text15
  2610  001084                     __ptext15:
  2611                           	opt stack 0
  2612  001084                     _LCDByte:
  2613                           	opt stack 24
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;incstack = 0
  2617                           ;LCDByte@c stored from wreg
  2618  001084  0100               	movlb	0	; () banked
  2619  001086  6FA6               	movwf	LCDByte@c& (0+255),b
  2620                           
  2621                           ;lcd_hd44780_pic16.c: 92: uint8_t hn,ln;
  2622                           ;lcd_hd44780_pic16.c: 93: uint8_t temp;
  2623                           ;lcd_hd44780_pic16.c: 95: hn=c>>4;
  2624  001088  0100               	movlb	0	; () banked
  2625  00108A  39A6               	swapf	LCDByte@c& (0+255),w,b
  2626  00108C  0B0F               	andlw	15
  2627  00108E  0100               	movlb	0	; () banked
  2628  001090  6FA4               	movwf	LCDByte@hn& (0+255),b
  2629                           
  2630                           ;lcd_hd44780_pic16.c: 96: ln=(c & 0x0F);
  2631  001092  0100               	movlb	0	; () banked
  2632  001094  51A6               	movf	LCDByte@c& (0+255),w,b
  2633  001096  0B0F               	andlw	15
  2634  001098  0100               	movlb	0	; () banked
  2635  00109A  6FA5               	movwf	LCDByte@ln& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;lcd_hd44780_pic16.c: 98: if(isdata==0)
  2639  00109C  0100               	movlb	0	; () banked
  2640  00109E  51A3               	movf	LCDByte@isdata& (0+255),w,b
  2641  0010A0  0100               	movlb	0	; () banked
  2642  0010A2  A4D8               	btfss	status,2,c
  2643  0010A4  D002               	goto	l224
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;lcd_hd44780_pic16.c: 99: (RD4=0);
  2647  0010A6  9883               	bcf	3971,4,c	;volatile
  2648  0010A8  D001               	goto	l225
  2649  0010AA                     l224:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;lcd_hd44780_pic16.c: 100: else
  2653                           ;lcd_hd44780_pic16.c: 101: (RD4=1);
  2654  0010AA  8883               	bsf	3971,4,c	;volatile
  2655  0010AC                     l225:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;lcd_hd44780_pic16.c: 103: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2659                           ;lcd_hd44780_pic16.c: 105: (RD6=1);
  2660  0010AC  8C83               	bsf	3971,6,c	;volatile
  2661                           
  2662                           ;lcd_hd44780_pic16.c: 109: temp=(PORTD & (~(0X0F<<0)))|((hn<<0));
  2663  0010AE  5083               	movf	3971,w,c	;volatile
  2664  0010B0  0BF0               	andlw	240
  2665  0010B2  0100               	movlb	0	; () banked
  2666  0010B4  11A4               	iorwf	LCDByte@hn& (0+255),w,b
  2667  0010B6  0100               	movlb	0	; () banked
  2668  0010B8  6FA7               	movwf	LCDByte@temp& (0+255),b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;lcd_hd44780_pic16.c: 110: PORTD=temp;
  2672  0010BA  C0A7  FF83         	movff	LCDByte@temp,3971	;volatile
  2673                           
  2674                           ;lcd_hd44780_pic16.c: 116: (RD6=0);
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;lcd_hd44780_pic16.c: 112: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2678  0010BE  9C83               	bcf	3971,6,c	;volatile
  2679                           
  2680                           ;lcd_hd44780_pic16.c: 121: (RD6=1);
  2681                           
  2682                           ;lcd_hd44780_pic16.c: 118: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2683  0010C0  8C83               	bsf	3971,6,c	;volatile
  2684                           
  2685                           ;lcd_hd44780_pic16.c: 123: temp=(PORTD & (~(0X0F<<0)))|((ln<<0));
  2686  0010C2  5083               	movf	3971,w,c	;volatile
  2687  0010C4  0BF0               	andlw	240
  2688  0010C6  0100               	movlb	0	; () banked
  2689  0010C8  11A5               	iorwf	LCDByte@ln& (0+255),w,b
  2690  0010CA  0100               	movlb	0	; () banked
  2691  0010CC  6FA7               	movwf	LCDByte@temp& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;lcd_hd44780_pic16.c: 125: PORTD=temp;
  2695  0010CE  C0A7  FF83         	movff	LCDByte@temp,3971	;volatile
  2696                           
  2697                           ;lcd_hd44780_pic16.c: 131: (RD6=0);
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;lcd_hd44780_pic16.c: 127: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2701  0010D2  9C83               	bcf	3971,6,c	;volatile
  2702                           
  2703                           ;lcd_hd44780_pic16.c: 135: LCDBusyLoop();
  2704                           
  2705                           ;lcd_hd44780_pic16.c: 133: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2706  0010D4  EC6D  F008         	call	_LCDBusyLoop	;wreg free
  2707  0010D8  0012               	return		;funcret
  2708  0010DA                     __end_of_LCDByte:
  2709                           	opt stack 0
  2710                           tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           prodh	equ	0xFF4
  2715                           prodl	equ	0xFF3
  2716                           intcon	equ	0xFF2
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postdec1	equ	0xFE5
  2720                           plusw1	equ	0xFE3
  2721                           fsr1l	equ	0xFE1
  2722                           indf2	equ	0xFDF
  2723                           plusw2	equ	0xFDB
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _LCDBusyLoop *****************
  2729 ;; Defined at:
  2730 ;;		line 138 in file "lcd_hd44780_pic16.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  status          1    2[BANK0 ] unsigned char 
  2735 ;;  temp            1    1[BANK0 ] unsigned char 
  2736 ;;  busy            1    0[BANK0 ] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2746 ;;      Params:         0       0       0       0       0       0       0
  2747 ;;      Locals:         0       3       0       0       0       0       0
  2748 ;;      Temps:          0       0       0       0       0       0       0
  2749 ;;      Totals:         0       3       0       0       0       0       0
  2750 ;;Total ram usage:        3 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    4
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_LCDByte
  2757 ;;		_LCDInit
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text16
  2762  0010DA                     __ptext16:
  2763                           	opt stack 0
  2764  0010DA                     _LCDBusyLoop:
  2765                           	opt stack 24
  2766                           
  2767                           ;lcd_hd44780_pic16.c: 142: uint8_t busy,status=0x00,temp;
  2768                           
  2769                           ;incstack = 0
  2770  0010DA  0E00               	movlw	0
  2771  0010DC  0100               	movlb	0	; () banked
  2772  0010DE  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;lcd_hd44780_pic16.c: 145: TRISD|=(0x0f<<0);
  2776  0010E0  0E0F               	movlw	15
  2777  0010E2  1295               	iorwf	3989,f,c	;volatile
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;lcd_hd44780_pic16.c: 148: (RD5=1);
  2781  0010E4  8A83               	bsf	3971,5,c	;volatile
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;lcd_hd44780_pic16.c: 149: (RD4=0);
  2785  0010E6  9883               	bcf	3971,4,c	;volatile
  2786  0010E8                     l1643:
  2787                           
  2788                           ;lcd_hd44780_pic16.c: 157: {
  2789                           ;lcd_hd44780_pic16.c: 159: (RD6=1);
  2790  0010E8  8C83               	bsf	3971,6,c	;volatile
  2791                           
  2792                           ;lcd_hd44780_pic16.c: 164: status=(PORTD>>0);
  2793                           
  2794                           ;lcd_hd44780_pic16.c: 162: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2795  0010EA  CF83 F0A2          	movff	3971,LCDBusyLoop@status	;volatile
  2796                           
  2797                           ;lcd_hd44780_pic16.c: 165: status=status<<4;
  2798  0010EE  0100               	movlb	0	; () banked
  2799  0010F0  39A2               	swapf	LCDBusyLoop@status& (0+255),w,b
  2800  0010F2  0BF0               	andlw	240
  2801  0010F4  0100               	movlb	0	; () banked
  2802  0010F6  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  2803                           
  2804                           ;lcd_hd44780_pic16.c: 170: (RD6=0);
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;lcd_hd44780_pic16.c: 167: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2808  0010F8  9C83               	bcf	3971,6,c	;volatile
  2809                           
  2810                           ;lcd_hd44780_pic16.c: 173: (RD6=1);
  2811                           
  2812                           ;lcd_hd44780_pic16.c: 171: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2813  0010FA  8C83               	bsf	3971,6,c	;volatile
  2814                           
  2815                           ;lcd_hd44780_pic16.c: 176: temp=(PORTD>>0);
  2816                           
  2817                           ;lcd_hd44780_pic16.c: 174: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2818  0010FC  CF83 F0A1          	movff	3971,LCDBusyLoop@temp	;volatile
  2819                           
  2820                           ;lcd_hd44780_pic16.c: 177: temp&=0x0F;
  2821  001100  0E0F               	movlw	15
  2822  001102  0100               	movlb	0	; () banked
  2823  001104  17A1               	andwf	LCDBusyLoop@temp& (0+255),f,b
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;lcd_hd44780_pic16.c: 179: status=status|temp;
  2827  001106  0100               	movlb	0	; () banked
  2828  001108  51A2               	movf	LCDBusyLoop@status& (0+255),w,b
  2829  00110A  0100               	movlb	0	; () banked
  2830  00110C  11A1               	iorwf	LCDBusyLoop@temp& (0+255),w,b
  2831  00110E  0100               	movlb	0	; () banked
  2832  001110  6FA2               	movwf	LCDBusyLoop@status& (0+255),b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;lcd_hd44780_pic16.c: 181: busy=status & 0b10000000;
  2836  001112  0100               	movlb	0	; () banked
  2837  001114  51A2               	movf	LCDBusyLoop@status& (0+255),w,b
  2838  001116  0B80               	andlw	128
  2839  001118  0100               	movlb	0	; () banked
  2840  00111A  6FA0               	movwf	LCDBusyLoop@busy& (0+255),b
  2841                           
  2842                           ;lcd_hd44780_pic16.c: 185: (RD6=0);
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;lcd_hd44780_pic16.c: 183: _delay((unsigned long)((0.5)*(1000000/4000000.0)));
  2846  00111C  9C83               	bcf	3971,6,c	;volatile
  2847                           
  2848                           ;lcd_hd44780_pic16.c: 187: }while(busy);
  2849                           
  2850                           ;lcd_hd44780_pic16.c: 186: _delay((unsigned long)((1)*(1000000/4000000.0)));
  2851  00111E  0100               	movlb	0	; () banked
  2852  001120  51A0               	movf	LCDBusyLoop@busy& (0+255),w,b
  2853  001122  0100               	movlb	0	; () banked
  2854  001124  A4D8               	btfss	status,2,c
  2855  001126  D7E0               	goto	l1643
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;lcd_hd44780_pic16.c: 189: (RD5=0);
  2859  001128  9A83               	bcf	3971,5,c	;volatile
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;lcd_hd44780_pic16.c: 192: TRISD&=(~(0x0F<<0));
  2863  00112A  0EF0               	movlw	240
  2864  00112C  1695               	andwf	3989,f,c	;volatile
  2865                           
  2866                           ; BSR set to: 0
  2867  00112E  0012               	return		;funcret
  2868  001130                     __end_of_LCDBusyLoop:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           prodh	equ	0xFF4
  2875                           prodl	equ	0xFF3
  2876                           intcon	equ	0xFF2
  2877                           postinc0	equ	0xFEE
  2878                           wreg	equ	0xFE8
  2879                           postdec1	equ	0xFE5
  2880                           plusw1	equ	0xFE3
  2881                           fsr1l	equ	0xFE1
  2882                           indf2	equ	0xFDF
  2883                           plusw2	equ	0xFDB
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function _ADCInit *****************
  2889 ;; Defined at:
  2890 ;;		line 8 in file "ADC.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2904 ;;      Params:         0       0       0       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0
  2907 ;;      Totals:         0       0       0       0       0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    4
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text17
  2919  001314                     __ptext17:
  2920                           	opt stack 0
  2921  001314                     _ADCInit:
  2922                           	opt stack 26
  2923                           
  2924                           ;ADC.c: 11: TRISA0 = 1;
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;incstack = 0
  2928  001314  8092               	bsf	3986,0,c	;volatile
  2929                           
  2930                           ;ADC.c: 12: TRISA1 = 1;
  2931  001316  8292               	bsf	3986,1,c	;volatile
  2932                           
  2933                           ;ADC.c: 13: TRISA2 = 1;
  2934  001318  8492               	bsf	3986,2,c	;volatile
  2935                           
  2936                           ;ADC.c: 14: TRISA3 = 1;
  2937  00131A  8692               	bsf	3986,3,c	;volatile
  2938                           
  2939                           ;ADC.c: 16: ANS0 = 1;
  2940  00131C  807E               	bsf	3966,0,c	;volatile
  2941                           
  2942                           ;ADC.c: 17: ANS1 = 1;
  2943  00131E  827E               	bsf	3966,1,c	;volatile
  2944                           
  2945                           ;ADC.c: 18: ANS2 = 1;
  2946  001320  847E               	bsf	3966,2,c	;volatile
  2947                           
  2948                           ;ADC.c: 19: ANS3 = 1;
  2949  001322  867E               	bsf	3966,3,c	;volatile
  2950                           
  2951                           ;ADC.c: 21: ADON = 1;
  2952  001324  80C2               	bsf	4034,0,c	;volatile
  2953                           
  2954                           ;ADC.c: 22: ADCON1 = 0;
  2955  001326  0E00               	movlw	0
  2956  001328  6EC1               	movwf	4033,c	;volatile
  2957                           
  2958                           ;ADC.c: 23: ADCON2 = 0x91;
  2959  00132A  0E91               	movlw	145
  2960  00132C  6EC0               	movwf	4032,c	;volatile
  2961                           
  2962                           ;ADC.c: 24: ADIF = 0;
  2963  00132E  9C9E               	bcf	3998,6,c	;volatile
  2964                           
  2965                           ;ADC.c: 25: ADIE = 1;
  2966  001330  8C9D               	bsf	3997,6,c	;volatile
  2967                           
  2968                           ;ADC.c: 27: PEIE = 1;
  2969  001332  8CF2               	bsf	intcon,6,c	;volatile
  2970                           
  2971                           ;ADC.c: 28: GIE = 1;
  2972  001334  8EF2               	bsf	intcon,7,c	;volatile
  2973  001336  0012               	return		;funcret
  2974  001338                     __end_of_ADCInit:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           intcon	equ	0xFF2
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           plusw1	equ	0xFE3
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           plusw2	equ	0xFDB
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function _isr *****************
  2995 ;; Defined at:
  2996 ;;		line 8 in file "interrupts.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;		None
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  read            2   73[COMRAM] unsigned int 
  3001 ;;  dutyCycle       4    0        long 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3011 ;;      Params:         0       0       0       0       0       0       0
  3012 ;;      Locals:         2       0       0       0       0       0       0
  3013 ;;      Temps:         16       0       0       0       0       0       0
  3014 ;;      Totals:        18       0       0       0       0       0       0
  3015 ;;Total ram usage:       18 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    3
  3018 ;; This function calls:
  3019 ;;		_ADCGetOutput
  3020 ;;		_ReadPWMMotorLeft
  3021 ;;		_ReadPWMMotorRight
  3022 ;;		_SetBattery
  3023 ;;		_SetDistanceCentral
  3024 ;;		_SetDistanceLeft
  3025 ;;		_SetDistanceRight
  3026 ;; This function is called by:
  3027 ;;		Interrupt level 2
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	intcode
  3032  000008                     __pintcode:
  3033                           	opt stack 0
  3034  000008                     _isr:
  3035                           	opt stack 24
  3036                           
  3037                           ;incstack = 0
  3038  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3039  00000A  CFFA F03C          	movff	pclath,??_isr+2
  3040  00000E  CFFB F03D          	movff	pclatu,??_isr+3
  3041  000012  CFE9 F03E          	movff	fsr0l,??_isr+4
  3042  000016  CFEA F03F          	movff	fsr0h,??_isr+5
  3043  00001A  CFE1 F040          	movff	fsr1l,??_isr+6
  3044  00001E  CFE2 F041          	movff	fsr1h,??_isr+7
  3045  000022  CFD9 F042          	movff	fsr2l,??_isr+8
  3046  000026  CFDA F043          	movff	fsr2h,??_isr+9
  3047  00002A  CFF3 F044          	movff	prodl,??_isr+10
  3048  00002E  CFF4 F045          	movff	prodh,??_isr+11
  3049  000032  CFF6 F046          	movff	tblptrl,??_isr+12
  3050  000036  CFF7 F047          	movff	tblptrh,??_isr+13
  3051  00003A  CFF8 F048          	movff	tblptru,??_isr+14
  3052  00003E  CFF5 F049          	movff	tablat,??_isr+15
  3053                           
  3054                           ;interrupts.c: 10: long dutyCycle;
  3055                           ;interrupts.c: 13: if (ADIF == 1) {
  3056  000042  AC9E               	btfss	3998,6,c	;volatile
  3057  000044  D055               	goto	i2l37
  3058                           
  3059                           ;interrupts.c: 25: static unsigned int Readport=0;
  3060                           ;interrupts.c: 26: unsigned int read=ADCGetOutput();
  3061  000046  ECBD  F009         	call	_ADCGetOutput	;wreg free
  3062  00004A  C001  F04A         	movff	?_ADCGetOutput,isr@read
  3063  00004E  C002  F04B         	movff	?_ADCGetOutput+1,isr@read+1
  3064                           
  3065                           ;interrupts.c: 28: switch (Readport){
  3066  000052  D037               	goto	i2l2219
  3067  000054                     i2l41:
  3068                           
  3069                           ;interrupts.c: 30: CHS3=0;
  3070  000054  9AC2               	bcf	4034,5,c	;volatile
  3071                           
  3072                           ;interrupts.c: 31: CHS2=0;
  3073  000056  98C2               	bcf	4034,4,c	;volatile
  3074                           
  3075                           ;interrupts.c: 32: CHS1=0;
  3076  000058  96C2               	bcf	4034,3,c	;volatile
  3077                           
  3078                           ;interrupts.c: 33: CHS0=1;
  3079  00005A  84C2               	bsf	4034,2,c	;volatile
  3080                           
  3081                           ;interrupts.c: 34: SetDistanceLeft (read);
  3082  00005C  C04A  F036         	movff	isr@read,SetDistanceLeft@lecture
  3083  000060  C04B  F037         	movff	isr@read+1,SetDistanceLeft@lecture+1
  3084  000064  ECD0  F007         	call	_SetDistanceLeft	;wreg free
  3085  000068  D015               	goto	i2l2209
  3086  00006A                     i2l43:
  3087                           
  3088                           ;interrupts.c: 38: CHS3=0;
  3089  00006A  9AC2               	bcf	4034,5,c	;volatile
  3090                           
  3091                           ;interrupts.c: 39: CHS2=0;
  3092  00006C  98C2               	bcf	4034,4,c	;volatile
  3093                           
  3094                           ;interrupts.c: 40: CHS1=1;
  3095  00006E  86C2               	bsf	4034,3,c	;volatile
  3096                           
  3097                           ;interrupts.c: 41: CHS0=0;
  3098  000070  94C2               	bcf	4034,2,c	;volatile
  3099                           
  3100                           ;interrupts.c: 42: SetDistanceCentral (read);
  3101  000072  C04A  F036         	movff	isr@read,SetDistanceCentral@lecture
  3102  000076  C04B  F037         	movff	isr@read+1,SetDistanceCentral@lecture+1
  3103  00007A  EC09  F008         	call	_SetDistanceCentral	;wreg free
  3104  00007E  D00A               	goto	i2l2209
  3105  000080                     i2l44:
  3106                           
  3107                           ;interrupts.c: 46: CHS3=0;
  3108  000080  9AC2               	bcf	4034,5,c	;volatile
  3109                           
  3110                           ;interrupts.c: 47: CHS2=0;
  3111  000082  98C2               	bcf	4034,4,c	;volatile
  3112                           
  3113                           ;interrupts.c: 48: CHS1=1;
  3114  000084  86C2               	bsf	4034,3,c	;volatile
  3115                           
  3116                           ;interrupts.c: 49: CHS0=1;
  3117  000086  84C2               	bsf	4034,2,c	;volatile
  3118                           
  3119                           ;interrupts.c: 50: SetDistanceRight (read);
  3120  000088  C04A  F036         	movff	isr@read,SetDistanceRight@lecture
  3121  00008C  C04B  F037         	movff	isr@read+1,SetDistanceRight@lecture+1
  3122  000090  EC97  F007         	call	_SetDistanceRight	;wreg free
  3123  000094                     i2l2209:
  3124                           
  3125                           ;interrupts.c: 51: Readport++;
  3126  000094  4A5A               	infsnz	isr@Readport,f,c
  3127  000096  2A5B               	incf	isr@Readport+1,f,c
  3128                           
  3129                           ;interrupts.c: 52: break;
  3130  000098  D02A               	goto	i2l42
  3131  00009A                     i2l45:
  3132                           
  3133                           ;interrupts.c: 54: CHS3=0;
  3134  00009A  9AC2               	bcf	4034,5,c	;volatile
  3135                           
  3136                           ;interrupts.c: 55: CHS2=0;
  3137  00009C  98C2               	bcf	4034,4,c	;volatile
  3138                           
  3139                           ;interrupts.c: 56: CHS1=0;
  3140  00009E  96C2               	bcf	4034,3,c	;volatile
  3141                           
  3142                           ;interrupts.c: 57: CHS0=0;
  3143  0000A0  94C2               	bcf	4034,2,c	;volatile
  3144                           
  3145                           ;interrupts.c: 58: SetBattery (read);
  3146  0000A2  C04A  F036         	movff	isr@read,SetBattery@lecture
  3147  0000A6  C04B  F037         	movff	isr@read+1,SetBattery@lecture+1
  3148  0000AA  ECFD  F008         	call	_SetBattery	;wreg free
  3149  0000AE  D004               	goto	i2l2215
  3150  0000B0                     i2l46:
  3151                           
  3152                           ;interrupts.c: 62: CHS3=0;
  3153  0000B0  9AC2               	bcf	4034,5,c	;volatile
  3154                           
  3155                           ;interrupts.c: 63: CHS2=0;
  3156  0000B2  98C2               	bcf	4034,4,c	;volatile
  3157                           
  3158                           ;interrupts.c: 64: CHS1=0;
  3159  0000B4  96C2               	bcf	4034,3,c	;volatile
  3160                           
  3161                           ;interrupts.c: 65: CHS0=0;
  3162  0000B6  94C2               	bcf	4034,2,c	;volatile
  3163  0000B8                     i2l2215:
  3164                           
  3165                           ;interrupts.c: 66: Readport=0;
  3166  0000B8  0E00               	movlw	0
  3167  0000BA  6E5B               	movwf	isr@Readport+1,c
  3168  0000BC  0E00               	movlw	0
  3169  0000BE  6E5A               	movwf	isr@Readport,c
  3170                           
  3171                           ;interrupts.c: 68: }
  3172                           
  3173                           ;interrupts.c: 67: break;
  3174  0000C0  D016               	goto	i2l42
  3175  0000C2                     i2l2219:
  3176  0000C2  C05A  F03A         	movff	isr@Readport,??_isr
  3177  0000C6  C05B  F03B         	movff	isr@Readport+1,??_isr+1
  3178                           
  3179                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3180                           ; Switch size 1, requested type "space"
  3181                           ; Number of cases is 1, Range of values is 0 to 0
  3182                           ; switch strategies available:
  3183                           ; Name         Instructions Cycles
  3184                           ; simple_byte            4     3 (average)
  3185                           ;	Chosen strategy is simple_byte
  3186  0000CA  503B               	movf	??_isr+1,w,c
  3187  0000CC  0A00               	xorlw	0	; case 0
  3188  0000CE  A4D8               	btfss	status,2,c
  3189  0000D0  D7EF               	goto	i2l46
  3190                           
  3191                           ; Switch size 1, requested type "space"
  3192                           ; Number of cases is 4, Range of values is 0 to 3
  3193                           ; switch strategies available:
  3194                           ; Name         Instructions Cycles
  3195                           ; simple_byte           13     7 (average)
  3196                           ;	Chosen strategy is simple_byte
  3197  0000D2  503A               	movf	??_isr,w,c
  3198  0000D4  0A00               	xorlw	0	; case 0
  3199  0000D6  B4D8               	btfsc	status,2,c
  3200  0000D8  D7BD               	goto	i2l41
  3201  0000DA  0A01               	xorlw	1	; case 1
  3202  0000DC  B4D8               	btfsc	status,2,c
  3203  0000DE  D7C5               	goto	i2l43
  3204  0000E0  0A03               	xorlw	3	; case 2
  3205  0000E2  B4D8               	btfsc	status,2,c
  3206  0000E4  D7CD               	goto	i2l44
  3207  0000E6  0A01               	xorlw	1	; case 3
  3208  0000E8  B4D8               	btfsc	status,2,c
  3209  0000EA  D7D7               	goto	i2l45
  3210  0000EC  D7E1               	goto	i2l46
  3211  0000EE                     i2l42:
  3212                           
  3213                           ;interrupts.c: 71: ADIF=0;
  3214  0000EE  9C9E               	bcf	3998,6,c	;volatile
  3215  0000F0                     i2l37:
  3216                           
  3217                           ;interrupts.c: 73: }
  3218                           ;interrupts.c: 75: if (TMR0IF==1)
  3219  0000F0  A4F2               	btfss	intcon,2,c	;volatile
  3220  0000F2  D02C               	goto	i2l57
  3221                           
  3222                           ;interrupts.c: 76: {
  3223                           ;interrupts.c: 77: static unsigned int PWMLeft;
  3224                           ;interrupts.c: 78: static unsigned int PWMRight;
  3225                           ;interrupts.c: 79: static unsigned int iteration;
  3226                           ;interrupts.c: 81: if (iteration==20){
  3227  0000F4  0E14               	movlw	20
  3228  0000F6  185C               	xorwf	isr@iteration,w,c
  3229  0000F8  105D               	iorwf	isr@iteration+1,w,c
  3230  0000FA  A4D8               	btfss	status,2,c
  3231  0000FC  D012               	goto	i2l2231
  3232                           
  3233                           ;interrupts.c: 82: RC4=0;
  3234  0000FE  9882               	bcf	3970,4,c	;volatile
  3235                           
  3236                           ;interrupts.c: 83: RC5=0;
  3237  000100  9A82               	bcf	3970,5,c	;volatile
  3238                           
  3239                           ;interrupts.c: 84: iteration=0;
  3240  000102  0E00               	movlw	0
  3241  000104  6E5D               	movwf	isr@iteration+1,c
  3242  000106  0E00               	movlw	0
  3243  000108  6E5C               	movwf	isr@iteration,c
  3244                           
  3245                           ;interrupts.c: 85: PWMRight=ReadPWMMotorRight();
  3246  00010A  ECCF  F009         	call	_ReadPWMMotorRight	;wreg free
  3247  00010E  C001  F058         	movff	?_ReadPWMMotorRight,isr@PWMRight
  3248  000112  C002  F059         	movff	?_ReadPWMMotorRight+1,isr@PWMRight+1
  3249                           
  3250                           ;interrupts.c: 86: PWMLeft=ReadPWMMotorLeft();
  3251  000116  ECD4  F009         	call	_ReadPWMMotorLeft	;wreg free
  3252  00011A  C001  F056         	movff	?_ReadPWMMotorLeft,isr@PWMLeft
  3253  00011E  C002  F057         	movff	?_ReadPWMMotorLeft+1,isr@PWMLeft+1
  3254  000122                     i2l2231:
  3255                           
  3256                           ;interrupts.c: 87: }
  3257                           ;interrupts.c: 88: if (PWMRight==iteration){
  3258  000122  505C               	movf	isr@iteration,w,c
  3259  000124  1858               	xorwf	isr@PWMRight,w,c
  3260  000126  E104               	bnz	i2l2235
  3261  000128  505D               	movf	isr@iteration+1,w,c
  3262  00012A  1859               	xorwf	isr@PWMRight+1,w,c
  3263  00012C  B4D8               	btfsc	status,2,c
  3264                           
  3265                           ;interrupts.c: 89: RC4=1;
  3266  00012E  8882               	bsf	3970,4,c	;volatile
  3267  000130                     i2l2235:
  3268                           
  3269                           ;interrupts.c: 90: }
  3270                           ;interrupts.c: 91: if (PWMLeft==iteration){
  3271  000130  505C               	movf	isr@iteration,w,c
  3272  000132  1856               	xorwf	isr@PWMLeft,w,c
  3273  000134  E104               	bnz	i2l2239
  3274  000136  505D               	movf	isr@iteration+1,w,c
  3275  000138  1857               	xorwf	isr@PWMLeft+1,w,c
  3276  00013A  B4D8               	btfsc	status,2,c
  3277                           
  3278                           ;interrupts.c: 92: RC5=1;
  3279  00013C  8A82               	bsf	3970,5,c	;volatile
  3280  00013E                     i2l2239:
  3281                           
  3282                           ;interrupts.c: 93: }
  3283                           ;interrupts.c: 94: iteration++;
  3284  00013E  4A5C               	infsnz	isr@iteration,f,c
  3285  000140  2A5D               	incf	isr@iteration+1,f,c
  3286                           
  3287                           ;interrupts.c: 97: TMR0IF=0;
  3288  000142  94F2               	bcf	intcon,2,c	;volatile
  3289                           
  3290                           ;interrupts.c: 98: TMR0H=0x00;
  3291  000144  0E00               	movlw	0
  3292  000146  6ED7               	movwf	4055,c	;volatile
  3293                           
  3294                           ;interrupts.c: 99: TMR0L=0x156;
  3295  000148  0E56               	movlw	86
  3296  00014A  6ED6               	movwf	4054,c	;volatile
  3297  00014C                     i2l57:
  3298  00014C  C049  FFF5         	movff	??_isr+15,tablat
  3299  000150  C048  FFF8         	movff	??_isr+14,tblptru
  3300  000154  C047  FFF7         	movff	??_isr+13,tblptrh
  3301  000158  C046  FFF6         	movff	??_isr+12,tblptrl
  3302  00015C  C045  FFF4         	movff	??_isr+11,prodh
  3303  000160  C044  FFF3         	movff	??_isr+10,prodl
  3304  000164  C043  FFDA         	movff	??_isr+9,fsr2h
  3305  000168  C042  FFD9         	movff	??_isr+8,fsr2l
  3306  00016C  C041  FFE2         	movff	??_isr+7,fsr1h
  3307  000170  C040  FFE1         	movff	??_isr+6,fsr1l
  3308  000174  C03F  FFEA         	movff	??_isr+5,fsr0h
  3309  000178  C03E  FFE9         	movff	??_isr+4,fsr0l
  3310  00017C  C03D  FFFB         	movff	??_isr+3,pclatu
  3311  000180  C03C  FFFA         	movff	??_isr+2,pclath
  3312  000184  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3313  000186  0011               	retfie		f
  3314  000188                     __end_of_isr:
  3315                           	opt stack 0
  3316                           pclatu	equ	0xFFB
  3317                           pclath	equ	0xFFA
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           intcon	equ	0xFF2
  3325                           postinc0	equ	0xFEE
  3326                           fsr0h	equ	0xFEA
  3327                           fsr0l	equ	0xFE9
  3328                           wreg	equ	0xFE8
  3329                           postdec1	equ	0xFE5
  3330                           plusw1	equ	0xFE3
  3331                           fsr1h	equ	0xFE2
  3332                           fsr1l	equ	0xFE1
  3333                           indf2	equ	0xFDF
  3334                           plusw2	equ	0xFDB
  3335                           fsr2h	equ	0xFDA
  3336                           fsr2l	equ	0xFD9
  3337                           status	equ	0xFD8
  3338                           
  3339 ;; *************** function _SetDistanceRight *****************
  3340 ;; Defined at:
  3341 ;;		line 60 in file "ADC.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  lecture         2   53[COMRAM] unsigned int 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, status,2, status,0, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3355 ;;      Params:         2       0       0       0       0       0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0
  3357 ;;      Temps:          2       0       0       0       0       0       0
  3358 ;;      Totals:         4       0       0       0       0       0       0
  3359 ;;Total ram usage:        4 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    2
  3362 ;; This function calls:
  3363 ;;		___ftadd
  3364 ;;		___ftmul
  3365 ;;		___fttol
  3366 ;;		___lwtoft
  3367 ;; This function is called by:
  3368 ;;		_isr
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text19
  3373  000F2E                     __ptext19:
  3374                           	opt stack 0
  3375  000F2E                     _SetDistanceRight:
  3376                           	opt stack 24
  3377                           
  3378                           ;ADC.c: 61: DistanceRight=5+(1023-lecture)*0.035;
  3379                           
  3380                           ;incstack = 0
  3381  000F2E  0E00               	movlw	0
  3382  000F30  6E1E               	movwf	___ftadd@f2,c
  3383  000F32  0EA0               	movlw	160
  3384  000F34  6E1F               	movwf	___ftadd@f2+1,c
  3385  000F36  0E40               	movlw	64
  3386  000F38  6E20               	movwf	___ftadd@f2+2,c
  3387  000F3A  0E5C               	movlw	92
  3388  000F3C  6E0F               	movwf	___ftmul@f2,c
  3389  000F3E  0E0F               	movlw	15
  3390  000F40  6E10               	movwf	___ftmul@f2+1,c
  3391  000F42  0E3D               	movlw	61
  3392  000F44  6E11               	movwf	___ftmul@f2+2,c
  3393  000F46  C036  F038         	movff	SetDistanceRight@lecture,??_SetDistanceRight
  3394  000F4A  C037  F039         	movff	SetDistanceRight@lecture+1,??_SetDistanceRight+1
  3395  000F4E  1E38               	comf	??_SetDistanceRight,f,c
  3396  000F50  1E39               	comf	??_SetDistanceRight+1,f,c
  3397  000F52  4A38               	infsnz	??_SetDistanceRight,f,c
  3398  000F54  2A39               	incf	??_SetDistanceRight+1,f,c
  3399  000F56  0EFF               	movlw	255
  3400  000F58  2438               	addwf	??_SetDistanceRight,w,c
  3401  000F5A  6E09               	movwf	___lwtoft@c,c
  3402  000F5C  0E03               	movlw	3
  3403  000F5E  2039               	addwfc	??_SetDistanceRight+1,w,c
  3404  000F60  6E0A               	movwf	___lwtoft@c+1,c
  3405  000F62  EC9C  F009         	call	___lwtoft	;wreg free
  3406  000F66  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  3407  000F6A  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  3408  000F6E  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  3409  000F72  ECF5  F004         	call	___ftmul	;wreg free
  3410  000F76  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  3411  000F7A  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  3412  000F7E  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  3413  000F82  EC08  F003         	call	___ftadd	;wreg free
  3414  000F86  C01B  F027         	movff	?___ftadd,___fttol@f1
  3415  000F8A  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  3416  000F8E  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  3417  000F92  EC7B  F004         	call	___fttol	;wreg free
  3418  000F96  C027  F050         	movff	?___fttol,_DistanceRight
  3419  000F9A  C028  F051         	movff	?___fttol+1,_DistanceRight+1
  3420  000F9E  0012               	return		;funcret
  3421  000FA0                     __end_of_SetDistanceRight:
  3422                           	opt stack 0
  3423                           pclatu	equ	0xFFB
  3424                           pclath	equ	0xFFA
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           postinc0	equ	0xFEE
  3433                           fsr0h	equ	0xFEA
  3434                           fsr0l	equ	0xFE9
  3435                           wreg	equ	0xFE8
  3436                           postdec1	equ	0xFE5
  3437                           plusw1	equ	0xFE3
  3438                           fsr1h	equ	0xFE2
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           plusw2	equ	0xFDB
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _SetDistanceLeft *****************
  3447 ;; Defined at:
  3448 ;;		line 52 in file "ADC.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  lecture         2   53[COMRAM] unsigned int 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg, status,2, status,0, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3462 ;;      Params:         2       0       0       0       0       0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0
  3464 ;;      Temps:          2       0       0       0       0       0       0
  3465 ;;      Totals:         4       0       0       0       0       0       0
  3466 ;;Total ram usage:        4 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    2
  3469 ;; This function calls:
  3470 ;;		___ftadd
  3471 ;;		___ftmul
  3472 ;;		___fttol
  3473 ;;		___lwtoft
  3474 ;; This function is called by:
  3475 ;;		_isr
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text20
  3480  000FA0                     __ptext20:
  3481                           	opt stack 0
  3482  000FA0                     _SetDistanceLeft:
  3483                           	opt stack 24
  3484                           
  3485                           ;ADC.c: 53: DistanceLeft=5+(1023-lecture)*0.035;
  3486                           
  3487                           ;incstack = 0
  3488  000FA0  0E00               	movlw	0
  3489  000FA2  6E1E               	movwf	___ftadd@f2,c
  3490  000FA4  0EA0               	movlw	160
  3491  000FA6  6E1F               	movwf	___ftadd@f2+1,c
  3492  000FA8  0E40               	movlw	64
  3493  000FAA  6E20               	movwf	___ftadd@f2+2,c
  3494  000FAC  0E5C               	movlw	92
  3495  000FAE  6E0F               	movwf	___ftmul@f2,c
  3496  000FB0  0E0F               	movlw	15
  3497  000FB2  6E10               	movwf	___ftmul@f2+1,c
  3498  000FB4  0E3D               	movlw	61
  3499  000FB6  6E11               	movwf	___ftmul@f2+2,c
  3500  000FB8  C036  F038         	movff	SetDistanceLeft@lecture,??_SetDistanceLeft
  3501  000FBC  C037  F039         	movff	SetDistanceLeft@lecture+1,??_SetDistanceLeft+1
  3502  000FC0  1E38               	comf	??_SetDistanceLeft,f,c
  3503  000FC2  1E39               	comf	??_SetDistanceLeft+1,f,c
  3504  000FC4  4A38               	infsnz	??_SetDistanceLeft,f,c
  3505  000FC6  2A39               	incf	??_SetDistanceLeft+1,f,c
  3506  000FC8  0EFF               	movlw	255
  3507  000FCA  2438               	addwf	??_SetDistanceLeft,w,c
  3508  000FCC  6E09               	movwf	___lwtoft@c,c
  3509  000FCE  0E03               	movlw	3
  3510  000FD0  2039               	addwfc	??_SetDistanceLeft+1,w,c
  3511  000FD2  6E0A               	movwf	___lwtoft@c+1,c
  3512  000FD4  EC9C  F009         	call	___lwtoft	;wreg free
  3513  000FD8  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  3514  000FDC  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  3515  000FE0  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  3516  000FE4  ECF5  F004         	call	___ftmul	;wreg free
  3517  000FE8  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  3518  000FEC  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  3519  000FF0  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  3520  000FF4  EC08  F003         	call	___ftadd	;wreg free
  3521  000FF8  C01B  F027         	movff	?___ftadd,___fttol@f1
  3522  000FFC  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  3523  001000  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  3524  001004  EC7B  F004         	call	___fttol	;wreg free
  3525  001008  C027  F04E         	movff	?___fttol,_DistanceLeft
  3526  00100C  C028  F04F         	movff	?___fttol+1,_DistanceLeft+1
  3527  001010  0012               	return		;funcret
  3528  001012                     __end_of_SetDistanceLeft:
  3529                           	opt stack 0
  3530                           pclatu	equ	0xFFB
  3531                           pclath	equ	0xFFA
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           intcon	equ	0xFF2
  3539                           postinc0	equ	0xFEE
  3540                           fsr0h	equ	0xFEA
  3541                           fsr0l	equ	0xFE9
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           plusw1	equ	0xFE3
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           plusw2	equ	0xFDB
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _SetDistanceCentral *****************
  3554 ;; Defined at:
  3555 ;;		line 68 in file "ADC.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  lecture         2   53[COMRAM] unsigned int 
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3569 ;;      Params:         2       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0
  3571 ;;      Temps:          2       0       0       0       0       0       0
  3572 ;;      Totals:         4       0       0       0       0       0       0
  3573 ;;Total ram usage:        4 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    2
  3576 ;; This function calls:
  3577 ;;		___ftadd
  3578 ;;		___ftmul
  3579 ;;		___fttol
  3580 ;;		___lwtoft
  3581 ;; This function is called by:
  3582 ;;		_isr
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text21
  3587  001012                     __ptext21:
  3588                           	opt stack 0
  3589  001012                     _SetDistanceCentral:
  3590                           	opt stack 24
  3591                           
  3592                           ;ADC.c: 69: DistanceCentral=5+(1023-lecture)*0.035;
  3593                           
  3594                           ;incstack = 0
  3595  001012  0E00               	movlw	0
  3596  001014  6E1E               	movwf	___ftadd@f2,c
  3597  001016  0EA0               	movlw	160
  3598  001018  6E1F               	movwf	___ftadd@f2+1,c
  3599  00101A  0E40               	movlw	64
  3600  00101C  6E20               	movwf	___ftadd@f2+2,c
  3601  00101E  0E5C               	movlw	92
  3602  001020  6E0F               	movwf	___ftmul@f2,c
  3603  001022  0E0F               	movlw	15
  3604  001024  6E10               	movwf	___ftmul@f2+1,c
  3605  001026  0E3D               	movlw	61
  3606  001028  6E11               	movwf	___ftmul@f2+2,c
  3607  00102A  C036  F038         	movff	SetDistanceCentral@lecture,??_SetDistanceCentral
  3608  00102E  C037  F039         	movff	SetDistanceCentral@lecture+1,??_SetDistanceCentral+1
  3609  001032  1E38               	comf	??_SetDistanceCentral,f,c
  3610  001034  1E39               	comf	??_SetDistanceCentral+1,f,c
  3611  001036  4A38               	infsnz	??_SetDistanceCentral,f,c
  3612  001038  2A39               	incf	??_SetDistanceCentral+1,f,c
  3613  00103A  0EFF               	movlw	255
  3614  00103C  2438               	addwf	??_SetDistanceCentral,w,c
  3615  00103E  6E09               	movwf	___lwtoft@c,c
  3616  001040  0E03               	movlw	3
  3617  001042  2039               	addwfc	??_SetDistanceCentral+1,w,c
  3618  001044  6E0A               	movwf	___lwtoft@c+1,c
  3619  001046  EC9C  F009         	call	___lwtoft	;wreg free
  3620  00104A  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  3621  00104E  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  3622  001052  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  3623  001056  ECF5  F004         	call	___ftmul	;wreg free
  3624  00105A  C00C  F01B         	movff	?___ftmul,___ftadd@f1
  3625  00105E  C00D  F01C         	movff	?___ftmul+1,___ftadd@f1+1
  3626  001062  C00E  F01D         	movff	?___ftmul+2,___ftadd@f1+2
  3627  001066  EC08  F003         	call	___ftadd	;wreg free
  3628  00106A  C01B  F027         	movff	?___ftadd,___fttol@f1
  3629  00106E  C01C  F028         	movff	?___ftadd+1,___fttol@f1+1
  3630  001072  C01D  F029         	movff	?___ftadd+2,___fttol@f1+2
  3631  001076  EC7B  F004         	call	___fttol	;wreg free
  3632  00107A  C027  F04C         	movff	?___fttol,_DistanceCentral
  3633  00107E  C028  F04D         	movff	?___fttol+1,_DistanceCentral+1
  3634  001082  0012               	return		;funcret
  3635  001084                     __end_of_SetDistanceCentral:
  3636                           	opt stack 0
  3637                           pclatu	equ	0xFFB
  3638                           pclath	equ	0xFFA
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           postinc0	equ	0xFEE
  3647                           fsr0h	equ	0xFEA
  3648                           fsr0l	equ	0xFE9
  3649                           wreg	equ	0xFE8
  3650                           postdec1	equ	0xFE5
  3651                           plusw1	equ	0xFE3
  3652                           fsr1h	equ	0xFE2
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           plusw2	equ	0xFDB
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function ___ftadd *****************
  3661 ;; Defined at:
  3662 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftadd.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  f1              3   26[COMRAM] float 
  3665 ;;  f2              3   29[COMRAM] float 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  exp1            1   37[COMRAM] unsigned char 
  3668 ;;  exp2            1   36[COMRAM] unsigned char 
  3669 ;;  sign            1   35[COMRAM] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  3   26[COMRAM] float 
  3672 ;; Registers used:
  3673 ;;		wreg, status,2, status,0, cstack
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3679 ;;      Params:         6       0       0       0       0       0       0
  3680 ;;      Locals:         3       0       0       0       0       0       0
  3681 ;;      Temps:          3       0       0       0       0       0       0
  3682 ;;      Totals:        12       0       0       0       0       0       0
  3683 ;;Total ram usage:       12 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    1
  3686 ;; This function calls:
  3687 ;;		___ftpack
  3688 ;; This function is called by:
  3689 ;;		_SetDistanceLeft
  3690 ;;		_SetDistanceRight
  3691 ;;		_SetDistanceCentral
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text22
  3696  000610                     __ptext22:
  3697                           	opt stack 0
  3698  000610                     ___ftadd:
  3699                           	opt stack 24
  3700                           
  3701                           ;incstack = 0
  3702  000610  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  3703  000614  6A22               	clrf	(??___ftadd+1)& (0+255),c
  3704  000616  6A23               	clrf	(??___ftadd+2)& (0+255),c
  3705  000618  341C               	rlcf	___ftadd@f1+1,w,c
  3706  00061A  3621               	rlcf	??___ftadd& (0+255),f,c
  3707  00061C  E301               	bnc	u101_41
  3708  00061E  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  3709  000620                     u101_41:
  3710  000620  5021               	movf	??___ftadd,w,c
  3711  000622  6E26               	movwf	___ftadd@exp1,c
  3712  000624  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  3713  000628  6A22               	clrf	(??___ftadd+1)& (0+255),c
  3714  00062A  6A23               	clrf	(??___ftadd+2)& (0+255),c
  3715  00062C  341F               	rlcf	___ftadd@f2+1,w,c
  3716  00062E  3621               	rlcf	??___ftadd& (0+255),f,c
  3717  000630  E301               	bnc	u102_41
  3718  000632  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  3719  000634                     u102_41:
  3720  000634  5021               	movf	??___ftadd,w,c
  3721  000636  6E25               	movwf	___ftadd@exp2,c
  3722  000638  5026               	movf	___ftadd@exp1,w,c
  3723  00063A  B4D8               	btfsc	status,2,c
  3724  00063C  D00B               	goto	i2l567
  3725  00063E  5025               	movf	___ftadd@exp2,w,c
  3726  000640  5C26               	subwf	___ftadd@exp1,w,c
  3727  000642  B0D8               	btfsc	status,0,c
  3728  000644  D00E               	goto	i2l1781
  3729  000646  5026               	movf	___ftadd@exp1,w,c
  3730  000648  0800               	sublw	0
  3731  00064A  2425               	addwf	___ftadd@exp2,w,c
  3732  00064C  6E21               	movwf	??___ftadd& (0+255),c
  3733  00064E  0E18               	movlw	24
  3734  000650  6421               	cpfsgt	??___ftadd,c
  3735  000652  D007               	goto	i2l1781
  3736  000654                     i2l567:
  3737  000654  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  3738  000658  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  3739  00065C  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  3740  000660  0012               	return	
  3741  000662                     i2l1781:
  3742  000662  5025               	movf	___ftadd@exp2,w,c
  3743  000664  B4D8               	btfsc	status,2,c
  3744  000666  D00B               	goto	i2l571
  3745  000668  5026               	movf	___ftadd@exp1,w,c
  3746  00066A  5C25               	subwf	___ftadd@exp2,w,c
  3747  00066C  B0D8               	btfsc	status,0,c
  3748  00066E  D00E               	goto	i2l1787
  3749  000670  5025               	movf	___ftadd@exp2,w,c
  3750  000672  0800               	sublw	0
  3751  000674  2426               	addwf	___ftadd@exp1,w,c
  3752  000676  6E21               	movwf	??___ftadd& (0+255),c
  3753  000678  0E18               	movlw	24
  3754  00067A  6421               	cpfsgt	??___ftadd,c
  3755  00067C  D007               	goto	i2l1787
  3756  00067E                     i2l571:
  3757  00067E  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  3758  000682  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  3759  000686  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  3760  00068A  0012               	return	
  3761  00068C                     i2l1787:
  3762  00068C  0E06               	movlw	6
  3763  00068E  6E24               	movwf	___ftadd@sign,c
  3764  000690  BE1D               	btfsc	___ftadd@f1+2,7,c
  3765  000692  8E24               	bsf	___ftadd@sign,7,c
  3766  000694  BE20               	btfsc	___ftadd@f2+2,7,c
  3767  000696  8C24               	bsf	___ftadd@sign,6,c
  3768  000698  8E1C               	bsf	___ftadd@f1+1,7,c
  3769  00069A  0EFF               	movlw	255
  3770  00069C  161B               	andwf	___ftadd@f1,f,c
  3771  00069E  0EFF               	movlw	255
  3772  0006A0  161C               	andwf	___ftadd@f1+1,f,c
  3773  0006A2  0E00               	movlw	0
  3774  0006A4  161D               	andwf	___ftadd@f1+2,f,c
  3775  0006A6  8E1F               	bsf	___ftadd@f2+1,7,c
  3776  0006A8  0EFF               	movlw	255
  3777  0006AA  161E               	andwf	___ftadd@f2,f,c
  3778  0006AC  0EFF               	movlw	255
  3779  0006AE  161F               	andwf	___ftadd@f2+1,f,c
  3780  0006B0  0E00               	movlw	0
  3781  0006B2  1620               	andwf	___ftadd@f2+2,f,c
  3782  0006B4  5025               	movf	___ftadd@exp2,w,c
  3783  0006B6  5C26               	subwf	___ftadd@exp1,w,c
  3784  0006B8  B0D8               	btfsc	status,0,c
  3785  0006BA  D01B               	goto	i2l1813
  3786  0006BC                     i2l1803:
  3787  0006BC  90D8               	bcf	status,0,c
  3788  0006BE  361E               	rlcf	___ftadd@f2,f,c
  3789  0006C0  361F               	rlcf	___ftadd@f2+1,f,c
  3790  0006C2  3620               	rlcf	___ftadd@f2+2,f,c
  3791  0006C4  0625               	decf	___ftadd@exp2,f,c
  3792  0006C6  5026               	movf	___ftadd@exp1,w,c
  3793  0006C8  1825               	xorwf	___ftadd@exp2,w,c
  3794  0006CA  B4D8               	btfsc	status,2,c
  3795  0006CC  D00D               	goto	i2l1811
  3796  0006CE  0624               	decf	___ftadd@sign,f,c
  3797  0006D0  C024  F021         	movff	___ftadd@sign,??___ftadd
  3798  0006D4  0E07               	movlw	7
  3799  0006D6  1621               	andwf	??___ftadd,f,c
  3800  0006D8  B4D8               	btfsc	status,2,c
  3801  0006DA  D006               	goto	i2l1811
  3802  0006DC  D7EF               	goto	i2l1803
  3803  0006DE                     i2l1809:
  3804  0006DE  90D8               	bcf	status,0,c
  3805  0006E0  321D               	rrcf	___ftadd@f1+2,f,c
  3806  0006E2  321C               	rrcf	___ftadd@f1+1,f,c
  3807  0006E4  321B               	rrcf	___ftadd@f1,f,c
  3808  0006E6  2A26               	incf	___ftadd@exp1,f,c
  3809  0006E8                     i2l1811:
  3810  0006E8  5025               	movf	___ftadd@exp2,w,c
  3811  0006EA  1826               	xorwf	___ftadd@exp1,w,c
  3812  0006EC  B4D8               	btfsc	status,2,c
  3813  0006EE  D01F               	goto	i2l582
  3814  0006F0  D7F6               	goto	i2l1809
  3815  0006F2                     i2l1813:
  3816  0006F2  5026               	movf	___ftadd@exp1,w,c
  3817  0006F4  5C25               	subwf	___ftadd@exp2,w,c
  3818  0006F6  B0D8               	btfsc	status,0,c
  3819  0006F8  D01A               	goto	i2l582
  3820  0006FA                     i2l1815:
  3821  0006FA  90D8               	bcf	status,0,c
  3822  0006FC  361B               	rlcf	___ftadd@f1,f,c
  3823  0006FE  361C               	rlcf	___ftadd@f1+1,f,c
  3824  000700  361D               	rlcf	___ftadd@f1+2,f,c
  3825  000702  0626               	decf	___ftadd@exp1,f,c
  3826  000704  5026               	movf	___ftadd@exp1,w,c
  3827  000706  1825               	xorwf	___ftadd@exp2,w,c
  3828  000708  B4D8               	btfsc	status,2,c
  3829  00070A  D00D               	goto	i2l1823
  3830  00070C  0624               	decf	___ftadd@sign,f,c
  3831  00070E  C024  F021         	movff	___ftadd@sign,??___ftadd
  3832  000712  0E07               	movlw	7
  3833  000714  1621               	andwf	??___ftadd,f,c
  3834  000716  B4D8               	btfsc	status,2,c
  3835  000718  D006               	goto	i2l1823
  3836  00071A  D7EF               	goto	i2l1815
  3837  00071C                     i2l1821:
  3838  00071C  90D8               	bcf	status,0,c
  3839  00071E  3220               	rrcf	___ftadd@f2+2,f,c
  3840  000720  321F               	rrcf	___ftadd@f2+1,f,c
  3841  000722  321E               	rrcf	___ftadd@f2,f,c
  3842  000724  2A25               	incf	___ftadd@exp2,f,c
  3843  000726                     i2l1823:
  3844  000726  5025               	movf	___ftadd@exp2,w,c
  3845  000728  1826               	xorwf	___ftadd@exp1,w,c
  3846  00072A  A4D8               	btfss	status,2,c
  3847  00072C  D7F7               	goto	i2l1821
  3848  00072E                     i2l582:
  3849  00072E  AE24               	btfss	___ftadd@sign,7,c
  3850  000730  D00C               	goto	i2l591
  3851  000732  0EFF               	movlw	255
  3852  000734  1A1B               	xorwf	___ftadd@f1,f,c
  3853  000736  0EFF               	movlw	255
  3854  000738  1A1C               	xorwf	___ftadd@f1+1,f,c
  3855  00073A  0EFF               	movlw	255
  3856  00073C  1A1D               	xorwf	___ftadd@f1+2,f,c
  3857  00073E  0E01               	movlw	1
  3858  000740  261B               	addwf	___ftadd@f1,f,c
  3859  000742  0E00               	movlw	0
  3860  000744  221C               	addwfc	___ftadd@f1+1,f,c
  3861  000746  0E00               	movlw	0
  3862  000748  221D               	addwfc	___ftadd@f1+2,f,c
  3863  00074A                     i2l591:
  3864  00074A  AC24               	btfss	___ftadd@sign,6,c
  3865  00074C  D00C               	goto	i2l1829
  3866  00074E  0EFF               	movlw	255
  3867  000750  1A1E               	xorwf	___ftadd@f2,f,c
  3868  000752  0EFF               	movlw	255
  3869  000754  1A1F               	xorwf	___ftadd@f2+1,f,c
  3870  000756  0EFF               	movlw	255
  3871  000758  1A20               	xorwf	___ftadd@f2+2,f,c
  3872  00075A  0E01               	movlw	1
  3873  00075C  261E               	addwf	___ftadd@f2,f,c
  3874  00075E  0E00               	movlw	0
  3875  000760  221F               	addwfc	___ftadd@f2+1,f,c
  3876  000762  0E00               	movlw	0
  3877  000764  2220               	addwfc	___ftadd@f2+2,f,c
  3878  000766                     i2l1829:
  3879  000766  0E00               	movlw	0
  3880  000768  6E24               	movwf	___ftadd@sign,c
  3881  00076A  501B               	movf	___ftadd@f1,w,c
  3882  00076C  261E               	addwf	___ftadd@f2,f,c
  3883  00076E  501C               	movf	___ftadd@f1+1,w,c
  3884  000770  221F               	addwfc	___ftadd@f2+1,f,c
  3885  000772  501D               	movf	___ftadd@f1+2,w,c
  3886  000774  2220               	addwfc	___ftadd@f2+2,f,c
  3887  000776  AE20               	btfss	___ftadd@f2+2,7,c
  3888  000778  D00E               	goto	i2l1839
  3889  00077A  0EFF               	movlw	255
  3890  00077C  1A1E               	xorwf	___ftadd@f2,f,c
  3891  00077E  0EFF               	movlw	255
  3892  000780  1A1F               	xorwf	___ftadd@f2+1,f,c
  3893  000782  0EFF               	movlw	255
  3894  000784  1A20               	xorwf	___ftadd@f2+2,f,c
  3895  000786  0E01               	movlw	1
  3896  000788  261E               	addwf	___ftadd@f2,f,c
  3897  00078A  0E00               	movlw	0
  3898  00078C  221F               	addwfc	___ftadd@f2+1,f,c
  3899  00078E  0E00               	movlw	0
  3900  000790  2220               	addwfc	___ftadd@f2+2,f,c
  3901  000792  0E01               	movlw	1
  3902  000794  6E24               	movwf	___ftadd@sign,c
  3903  000796                     i2l1839:
  3904  000796  C01E  F001         	movff	___ftadd@f2,___ftpack@arg
  3905  00079A  C01F  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3906  00079E  C020  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3907  0007A2  C026  F004         	movff	___ftadd@exp1,___ftpack@exp
  3908  0007A6  C024  F005         	movff	___ftadd@sign,___ftpack@sign
  3909  0007AA  ECCE  F005         	call	___ftpack	;wreg free
  3910  0007AE  C001  F01B         	movff	?___ftpack,?___ftadd
  3911  0007B2  C002  F01C         	movff	?___ftpack+1,?___ftadd+1
  3912  0007B6  C003  F01D         	movff	?___ftpack+2,?___ftadd+2
  3913  0007BA  0012               	return	
  3914  0007BC                     __end_of___ftadd:
  3915                           	opt stack 0
  3916                           pclatu	equ	0xFFB
  3917                           pclath	equ	0xFFA
  3918                           tblptru	equ	0xFF8
  3919                           tblptrh	equ	0xFF7
  3920                           tblptrl	equ	0xFF6
  3921                           tablat	equ	0xFF5
  3922                           prodh	equ	0xFF4
  3923                           prodl	equ	0xFF3
  3924                           intcon	equ	0xFF2
  3925                           postinc0	equ	0xFEE
  3926                           fsr0h	equ	0xFEA
  3927                           fsr0l	equ	0xFE9
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           plusw1	equ	0xFE3
  3931                           fsr1h	equ	0xFE2
  3932                           fsr1l	equ	0xFE1
  3933                           indf2	equ	0xFDF
  3934                           plusw2	equ	0xFDB
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _SetBattery *****************
  3940 ;; Defined at:
  3941 ;;		line 76 in file "ADC.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  lecture         2   53[COMRAM] unsigned int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         2       0       0       0       0       0       0
  3956 ;;      Locals:         0       0       0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0
  3958 ;;      Totals:         2       0       0       0       0       0       0
  3959 ;;Total ram usage:        2 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    2
  3962 ;; This function calls:
  3963 ;;		___ftmul
  3964 ;;		___fttol
  3965 ;;		___lwtoft
  3966 ;; This function is called by:
  3967 ;;		_isr
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text23
  3972  0011FA                     __ptext23:
  3973                           	opt stack 0
  3974  0011FA                     _SetBattery:
  3975                           	opt stack 24
  3976                           
  3977                           ;ADC.c: 77: Battery=lecture*3.548;
  3978                           
  3979                           ;incstack = 0
  3980  0011FA  0E12               	movlw	18
  3981  0011FC  6E0F               	movwf	___ftmul@f2,c
  3982  0011FE  0E63               	movlw	99
  3983  001200  6E10               	movwf	___ftmul@f2+1,c
  3984  001202  0E40               	movlw	64
  3985  001204  6E11               	movwf	___ftmul@f2+2,c
  3986  001206  C036  F009         	movff	SetBattery@lecture,___lwtoft@c
  3987  00120A  C037  F00A         	movff	SetBattery@lecture+1,___lwtoft@c+1
  3988  00120E  EC9C  F009         	call	___lwtoft	;wreg free
  3989  001212  C009  F00C         	movff	?___lwtoft,___ftmul@f1
  3990  001216  C00A  F00D         	movff	?___lwtoft+1,___ftmul@f1+1
  3991  00121A  C00B  F00E         	movff	?___lwtoft+2,___ftmul@f1+2
  3992  00121E  ECF5  F004         	call	___ftmul	;wreg free
  3993  001222  C00C  F027         	movff	?___ftmul,___fttol@f1
  3994  001226  C00D  F028         	movff	?___ftmul+1,___fttol@f1+1
  3995  00122A  C00E  F029         	movff	?___ftmul+2,___fttol@f1+2
  3996  00122E  EC7B  F004         	call	___fttol	;wreg free
  3997  001232  C027  F0BD         	movff	?___fttol,_Battery
  3998  001236  C028  F0BE         	movff	?___fttol+1,_Battery+1
  3999  00123A  0012               	return		;funcret
  4000  00123C                     __end_of_SetBattery:
  4001                           	opt stack 0
  4002                           pclatu	equ	0xFFB
  4003                           pclath	equ	0xFFA
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           postinc0	equ	0xFEE
  4012                           fsr0h	equ	0xFEA
  4013                           fsr0l	equ	0xFE9
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           plusw1	equ	0xFE3
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           plusw2	equ	0xFDB
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function ___lwtoft *****************
  4026 ;; Defined at:
  4027 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\lwtoft.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  c               2    8[COMRAM] unsigned int 
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  3    8[COMRAM] float 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, cstack
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4041 ;;      Params:         3       0       0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0
  4043 ;;      Temps:          0       0       0       0       0       0       0
  4044 ;;      Totals:         3       0       0       0       0       0       0
  4045 ;;Total ram usage:        3 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    1
  4048 ;; This function calls:
  4049 ;;		___ftpack
  4050 ;; This function is called by:
  4051 ;;		_SetDistanceLeft
  4052 ;;		_SetDistanceRight
  4053 ;;		_SetDistanceCentral
  4054 ;;		_SetBattery
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text24
  4059  001338                     __ptext24:
  4060                           	opt stack 0
  4061  001338                     ___lwtoft:
  4062                           	opt stack 24
  4063                           
  4064                           ;incstack = 0
  4065  001338  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4066  00133C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4067  001340  6A03               	clrf	___ftpack@arg+2,c
  4068  001342  0E8E               	movlw	142
  4069  001344  6E04               	movwf	___ftpack@exp,c
  4070  001346  0E00               	movlw	0
  4071  001348  6E05               	movwf	___ftpack@sign,c
  4072  00134A  ECCE  F005         	call	___ftpack	;wreg free
  4073  00134E  C001  F009         	movff	?___ftpack,?___lwtoft
  4074  001352  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4075  001356  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4076  00135A  0012               	return	
  4077  00135C                     __end_of___lwtoft:
  4078                           	opt stack 0
  4079                           pclatu	equ	0xFFB
  4080                           pclath	equ	0xFFA
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           postinc0	equ	0xFEE
  4089                           fsr0h	equ	0xFEA
  4090                           fsr0l	equ	0xFE9
  4091                           wreg	equ	0xFE8
  4092                           postdec1	equ	0xFE5
  4093                           plusw1	equ	0xFE3
  4094                           fsr1h	equ	0xFE2
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           plusw2	equ	0xFDB
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function ___fttol *****************
  4103 ;; Defined at:
  4104 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\fttol.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  f1              3   38[COMRAM] float 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  lval            4   48[COMRAM] unsigned long 
  4109 ;;  exp1            1   52[COMRAM] unsigned char 
  4110 ;;  sign1           1   47[COMRAM] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  4   38[COMRAM] long 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4120 ;;      Params:         4       0       0       0       0       0       0
  4121 ;;      Locals:         6       0       0       0       0       0       0
  4122 ;;      Temps:          5       0       0       0       0       0       0
  4123 ;;      Totals:        15       0       0       0       0       0       0
  4124 ;;Total ram usage:       15 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_SetDistanceLeft
  4130 ;;		_SetDistanceRight
  4131 ;;		_SetDistanceCentral
  4132 ;;		_SetBattery
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           	psect	text25
  4137  0008F6                     __ptext25:
  4138                           	opt stack 0
  4139  0008F6                     ___fttol:
  4140                           	opt stack 25
  4141                           
  4142                           ;incstack = 0
  4143  0008F6  C029  F02B         	movff	___fttol@f1+2,??___fttol
  4144  0008FA  6A2C               	clrf	(??___fttol+1)& (0+255),c
  4145  0008FC  6A2D               	clrf	(??___fttol+2)& (0+255),c
  4146  0008FE  3428               	rlcf	___fttol@f1+1,w,c
  4147  000900  362B               	rlcf	??___fttol& (0+255),f,c
  4148  000902  E301               	bnc	u140_41
  4149  000904  802C               	bsf	(??___fttol+1)& (0+255),0,c
  4150  000906                     u140_41:
  4151  000906  502B               	movf	??___fttol,w,c
  4152  000908  6E35               	movwf	___fttol@exp1,c
  4153  00090A  5035               	movf	___fttol@exp1,w,c
  4154  00090C  A4D8               	btfss	status,2,c
  4155  00090E  D009               	goto	i2l1977
  4156  000910  0E00               	movlw	0
  4157  000912  6E27               	movwf	?___fttol,c
  4158  000914  0E00               	movlw	0
  4159  000916  6E28               	movwf	?___fttol+1,c
  4160  000918  0E00               	movlw	0
  4161  00091A  6E29               	movwf	?___fttol+2,c
  4162  00091C  0E00               	movlw	0
  4163  00091E  6E2A               	movwf	?___fttol+3,c
  4164  000920  0012               	return	
  4165  000922                     i2l1977:
  4166  000922  0E17               	movlw	23
  4167  000924  6E2B               	movwf	??___fttol& (0+255),c
  4168  000926  C027  F02C         	movff	___fttol@f1,??___fttol+1
  4169  00092A  C028  F02D         	movff	___fttol@f1+1,??___fttol+2
  4170  00092E  C029  F02E         	movff	___fttol@f1+2,??___fttol+3
  4171  000932  282B               	incf	??___fttol,w,c
  4172  000934  6E2F               	movwf	(??___fttol+4)& (0+255),c
  4173  000936  D004               	goto	i2u142_40
  4174  000938                     i2u142_45:
  4175  000938  90D8               	bcf	status,0,c
  4176  00093A  322E               	rrcf	??___fttol+3,f,c
  4177  00093C  322D               	rrcf	??___fttol+2,f,c
  4178  00093E  322C               	rrcf	??___fttol+1,f,c
  4179  000940                     i2u142_40:
  4180  000940  2E2F               	decfsz	(??___fttol+4)& (0+255),f,c
  4181  000942  D7FA               	goto	i2u142_45
  4182  000944  502C               	movf	??___fttol+1,w,c
  4183  000946  6E30               	movwf	___fttol@sign1,c
  4184  000948  8E28               	bsf	___fttol@f1+1,7,c
  4185  00094A  0EFF               	movlw	255
  4186  00094C  1627               	andwf	___fttol@f1,f,c
  4187  00094E  0EFF               	movlw	255
  4188  000950  1628               	andwf	___fttol@f1+1,f,c
  4189  000952  0E00               	movlw	0
  4190  000954  1629               	andwf	___fttol@f1+2,f,c
  4191  000956  5027               	movf	___fttol@f1,w,c
  4192  000958  6E31               	movwf	___fttol@lval,c
  4193  00095A  5028               	movf	___fttol@f1+1,w,c
  4194  00095C  6E32               	movwf	___fttol@lval+1,c
  4195  00095E  5029               	movf	___fttol@f1+2,w,c
  4196  000960  6E33               	movwf	___fttol@lval+2,c
  4197  000962  6A34               	clrf	___fttol@lval+3,c
  4198  000964  0E8E               	movlw	142
  4199  000966  5E35               	subwf	___fttol@exp1,f,c
  4200  000968  AE35               	btfss	___fttol@exp1,7,c
  4201  00096A  D016               	goto	i2l1999
  4202  00096C  5035               	movf	___fttol@exp1,w,c
  4203  00096E  0A80               	xorlw	128
  4204  000970  0F8F               	addlw	143
  4205  000972  B0D8               	btfsc	status,0,c
  4206  000974  D009               	goto	i2l1995
  4207  000976  0E00               	movlw	0
  4208  000978  6E27               	movwf	?___fttol,c
  4209  00097A  0E00               	movlw	0
  4210  00097C  6E28               	movwf	?___fttol+1,c
  4211  00097E  0E00               	movlw	0
  4212  000980  6E29               	movwf	?___fttol+2,c
  4213  000982  0E00               	movlw	0
  4214  000984  6E2A               	movwf	?___fttol+3,c
  4215  000986  0012               	return	
  4216  000988                     i2l1995:
  4217  000988  90D8               	bcf	status,0,c
  4218  00098A  3234               	rrcf	___fttol@lval+3,f,c
  4219  00098C  3233               	rrcf	___fttol@lval+2,f,c
  4220  00098E  3232               	rrcf	___fttol@lval+1,f,c
  4221  000990  3231               	rrcf	___fttol@lval,f,c
  4222  000992  3E35               	incfsz	___fttol@exp1,f,c
  4223  000994  D7F9               	goto	i2l1995
  4224  000996  D015               	goto	i2l2009
  4225  000998                     i2l1999:
  4226  000998  0E17               	movlw	23
  4227  00099A  6435               	cpfsgt	___fttol@exp1,c
  4228  00099C  D00F               	goto	i2l2007
  4229  00099E  0E00               	movlw	0
  4230  0009A0  6E27               	movwf	?___fttol,c
  4231  0009A2  0E00               	movlw	0
  4232  0009A4  6E28               	movwf	?___fttol+1,c
  4233  0009A6  0E00               	movlw	0
  4234  0009A8  6E29               	movwf	?___fttol+2,c
  4235  0009AA  0E00               	movlw	0
  4236  0009AC  6E2A               	movwf	?___fttol+3,c
  4237  0009AE  0012               	return	
  4238  0009B0                     i2l2005:
  4239  0009B0  90D8               	bcf	status,0,c
  4240  0009B2  3631               	rlcf	___fttol@lval,f,c
  4241  0009B4  3632               	rlcf	___fttol@lval+1,f,c
  4242  0009B6  3633               	rlcf	___fttol@lval+2,f,c
  4243  0009B8  3634               	rlcf	___fttol@lval+3,f,c
  4244  0009BA  0635               	decf	___fttol@exp1,f,c
  4245  0009BC                     i2l2007:
  4246  0009BC  5035               	movf	___fttol@exp1,w,c
  4247  0009BE  A4D8               	btfss	status,2,c
  4248  0009C0  D7F7               	goto	i2l2005
  4249  0009C2                     i2l2009:
  4250  0009C2  5030               	movf	___fttol@sign1,w,c
  4251  0009C4  B4D8               	btfsc	status,2,c
  4252  0009C6  D008               	goto	i2l2013
  4253  0009C8  1E34               	comf	___fttol@lval+3,f,c
  4254  0009CA  1E33               	comf	___fttol@lval+2,f,c
  4255  0009CC  1E32               	comf	___fttol@lval+1,f,c
  4256  0009CE  6C31               	negf	___fttol@lval,c
  4257  0009D0  0E00               	movlw	0
  4258  0009D2  2232               	addwfc	___fttol@lval+1,f,c
  4259  0009D4  2233               	addwfc	___fttol@lval+2,f,c
  4260  0009D6  2234               	addwfc	___fttol@lval+3,f,c
  4261  0009D8                     i2l2013:
  4262  0009D8  C031  F027         	movff	___fttol@lval,?___fttol
  4263  0009DC  C032  F028         	movff	___fttol@lval+1,?___fttol+1
  4264  0009E0  C033  F029         	movff	___fttol@lval+2,?___fttol+2
  4265  0009E4  C034  F02A         	movff	___fttol@lval+3,?___fttol+3
  4266  0009E8  0012               	return	
  4267  0009EA                     __end_of___fttol:
  4268                           	opt stack 0
  4269                           pclatu	equ	0xFFB
  4270                           pclath	equ	0xFFA
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           intcon	equ	0xFF2
  4278                           postinc0	equ	0xFEE
  4279                           fsr0h	equ	0xFEA
  4280                           fsr0l	equ	0xFE9
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           plusw1	equ	0xFE3
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           plusw2	equ	0xFDB
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function ___ftmul *****************
  4293 ;; Defined at:
  4294 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\ftmul.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  f1              3   11[COMRAM] float 
  4297 ;;  f2              3   14[COMRAM] float 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  f3_as_produc    3   21[COMRAM] unsigned um
  4300 ;;  sign            1   25[COMRAM] unsigned char 
  4301 ;;  cntr            1   24[COMRAM] unsigned char 
  4302 ;;  exp             1   20[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  3   11[COMRAM] float 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4312 ;;      Params:         6       0       0       0       0       0       0
  4313 ;;      Locals:         6       0       0       0       0       0       0
  4314 ;;      Temps:          3       0       0       0       0       0       0
  4315 ;;      Totals:        15       0       0       0       0       0       0
  4316 ;;Total ram usage:       15 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    1
  4319 ;; This function calls:
  4320 ;;		___ftpack
  4321 ;; This function is called by:
  4322 ;;		_SetDistanceLeft
  4323 ;;		_SetDistanceRight
  4324 ;;		_SetDistanceCentral
  4325 ;;		_SetBattery
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text26
  4330  0009EA                     __ptext26:
  4331                           	opt stack 0
  4332  0009EA                     ___ftmul:
  4333                           	opt stack 24
  4334                           
  4335                           ;incstack = 0
  4336  0009EA  C00E  F012         	movff	___ftmul@f1+2,??___ftmul
  4337  0009EE  6A13               	clrf	(??___ftmul+1)& (0+255),c
  4338  0009F0  6A14               	clrf	(??___ftmul+2)& (0+255),c
  4339  0009F2  340D               	rlcf	___ftmul@f1+1,w,c
  4340  0009F4  3612               	rlcf	??___ftmul& (0+255),f,c
  4341  0009F6  E301               	bnc	u122_41
  4342  0009F8  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  4343  0009FA                     u122_41:
  4344  0009FA  5012               	movf	??___ftmul,w,c
  4345  0009FC  6E15               	movwf	___ftmul@exp,c
  4346  0009FE  5015               	movf	___ftmul@exp,w,c
  4347  000A00  A4D8               	btfss	status,2,c
  4348  000A02  D007               	goto	i2l1849
  4349  000A04  0E00               	movlw	0
  4350  000A06  6E0C               	movwf	?___ftmul,c
  4351  000A08  0E00               	movlw	0
  4352  000A0A  6E0D               	movwf	?___ftmul+1,c
  4353  000A0C  0E00               	movlw	0
  4354  000A0E  6E0E               	movwf	?___ftmul+2,c
  4355  000A10  0012               	return	
  4356  000A12                     i2l1849:
  4357  000A12  C011  F012         	movff	___ftmul@f2+2,??___ftmul
  4358  000A16  6A13               	clrf	(??___ftmul+1)& (0+255),c
  4359  000A18  6A14               	clrf	(??___ftmul+2)& (0+255),c
  4360  000A1A  3410               	rlcf	___ftmul@f2+1,w,c
  4361  000A1C  3612               	rlcf	??___ftmul& (0+255),f,c
  4362  000A1E  E301               	bnc	u124_41
  4363  000A20  8013               	bsf	(??___ftmul+1)& (0+255),0,c
  4364  000A22                     u124_41:
  4365  000A22  5012               	movf	??___ftmul,w,c
  4366  000A24  6E1A               	movwf	___ftmul@sign,c
  4367  000A26  501A               	movf	___ftmul@sign,w,c
  4368  000A28  A4D8               	btfss	status,2,c
  4369  000A2A  D007               	goto	i2l1855
  4370  000A2C  0E00               	movlw	0
  4371  000A2E  6E0C               	movwf	?___ftmul,c
  4372  000A30  0E00               	movlw	0
  4373  000A32  6E0D               	movwf	?___ftmul+1,c
  4374  000A34  0E00               	movlw	0
  4375  000A36  6E0E               	movwf	?___ftmul+2,c
  4376  000A38  0012               	return	
  4377  000A3A                     i2l1855:
  4378  000A3A  501A               	movf	___ftmul@sign,w,c
  4379  000A3C  0F7B               	addlw	123
  4380  000A3E  2615               	addwf	___ftmul@exp,f,c
  4381  000A40  C00E  F01A         	movff	___ftmul@f1+2,___ftmul@sign
  4382  000A44  5011               	movf	___ftmul@f2+2,w,c
  4383  000A46  1A1A               	xorwf	___ftmul@sign,f,c
  4384  000A48  0E80               	movlw	128
  4385  000A4A  161A               	andwf	___ftmul@sign,f,c
  4386  000A4C  8E0D               	bsf	___ftmul@f1+1,7,c
  4387  000A4E  8E10               	bsf	___ftmul@f2+1,7,c
  4388  000A50  0EFF               	movlw	255
  4389  000A52  160F               	andwf	___ftmul@f2,f,c
  4390  000A54  0EFF               	movlw	255
  4391  000A56  1610               	andwf	___ftmul@f2+1,f,c
  4392  000A58  0E00               	movlw	0
  4393  000A5A  1611               	andwf	___ftmul@f2+2,f,c
  4394  000A5C  0E00               	movlw	0
  4395  000A5E  6E16               	movwf	___ftmul@f3_as_product,c
  4396  000A60  0E00               	movlw	0
  4397  000A62  6E17               	movwf	___ftmul@f3_as_product+1,c
  4398  000A64  0E00               	movlw	0
  4399  000A66  6E18               	movwf	___ftmul@f3_as_product+2,c
  4400  000A68  0E07               	movlw	7
  4401  000A6A  6E19               	movwf	___ftmul@cntr,c
  4402  000A6C                     i2l1869:
  4403  000A6C  A00C               	btfss	___ftmul@f1,0,c
  4404  000A6E  D006               	goto	i2l1873
  4405  000A70  500F               	movf	___ftmul@f2,w,c
  4406  000A72  2616               	addwf	___ftmul@f3_as_product,f,c
  4407  000A74  5010               	movf	___ftmul@f2+1,w,c
  4408  000A76  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  4409  000A78  5011               	movf	___ftmul@f2+2,w,c
  4410  000A7A  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  4411  000A7C                     i2l1873:
  4412  000A7C  90D8               	bcf	status,0,c
  4413  000A7E  320E               	rrcf	___ftmul@f1+2,f,c
  4414  000A80  320D               	rrcf	___ftmul@f1+1,f,c
  4415  000A82  320C               	rrcf	___ftmul@f1,f,c
  4416  000A84  90D8               	bcf	status,0,c
  4417  000A86  360F               	rlcf	___ftmul@f2,f,c
  4418  000A88  3610               	rlcf	___ftmul@f2+1,f,c
  4419  000A8A  3611               	rlcf	___ftmul@f2+2,f,c
  4420  000A8C  2E19               	decfsz	___ftmul@cntr,f,c
  4421  000A8E  D7EE               	goto	i2l1869
  4422  000A90  0E09               	movlw	9
  4423  000A92  6E19               	movwf	___ftmul@cntr,c
  4424  000A94                     i2l1879:
  4425  000A94  A00C               	btfss	___ftmul@f1,0,c
  4426  000A96  D006               	goto	i2l1883
  4427  000A98  500F               	movf	___ftmul@f2,w,c
  4428  000A9A  2616               	addwf	___ftmul@f3_as_product,f,c
  4429  000A9C  5010               	movf	___ftmul@f2+1,w,c
  4430  000A9E  2217               	addwfc	___ftmul@f3_as_product+1,f,c
  4431  000AA0  5011               	movf	___ftmul@f2+2,w,c
  4432  000AA2  2218               	addwfc	___ftmul@f3_as_product+2,f,c
  4433  000AA4                     i2l1883:
  4434  000AA4  90D8               	bcf	status,0,c
  4435  000AA6  320E               	rrcf	___ftmul@f1+2,f,c
  4436  000AA8  320D               	rrcf	___ftmul@f1+1,f,c
  4437  000AAA  320C               	rrcf	___ftmul@f1,f,c
  4438  000AAC  90D8               	bcf	status,0,c
  4439  000AAE  3218               	rrcf	___ftmul@f3_as_product+2,f,c
  4440  000AB0  3217               	rrcf	___ftmul@f3_as_product+1,f,c
  4441  000AB2  3216               	rrcf	___ftmul@f3_as_product,f,c
  4442  000AB4  2E19               	decfsz	___ftmul@cntr,f,c
  4443  000AB6  D7EE               	goto	i2l1879
  4444  000AB8  C016  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4445  000ABC  C017  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4446  000AC0  C018  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4447  000AC4  C015  F004         	movff	___ftmul@exp,___ftpack@exp
  4448  000AC8  C01A  F005         	movff	___ftmul@sign,___ftpack@sign
  4449  000ACC  ECCE  F005         	call	___ftpack	;wreg free
  4450  000AD0  C001  F00C         	movff	?___ftpack,?___ftmul
  4451  000AD4  C002  F00D         	movff	?___ftpack+1,?___ftmul+1
  4452  000AD8  C003  F00E         	movff	?___ftpack+2,?___ftmul+2
  4453  000ADC  0012               	return	
  4454  000ADE                     __end_of___ftmul:
  4455                           	opt stack 0
  4456                           pclatu	equ	0xFFB
  4457                           pclath	equ	0xFFA
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           postinc0	equ	0xFEE
  4466                           fsr0h	equ	0xFEA
  4467                           fsr0l	equ	0xFE9
  4468                           wreg	equ	0xFE8
  4469                           postdec1	equ	0xFE5
  4470                           plusw1	equ	0xFE3
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           indf2	equ	0xFDF
  4474                           plusw2	equ	0xFDB
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function ___ftpack *****************
  4480 ;; Defined at:
  4481 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\float.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  arg             3    0[COMRAM] unsigned um
  4484 ;;  exp             1    3[COMRAM] unsigned char 
  4485 ;;  sign            1    4[COMRAM] unsigned char 
  4486 ;; Auto vars:     Size  Location     Type
  4487 ;;		None
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  3    0[COMRAM] float 
  4490 ;; Registers used:
  4491 ;;		wreg, status,2, status,0
  4492 ;; Tracked objects:
  4493 ;;		On entry : 0/0
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4497 ;;      Params:         5       0       0       0       0       0       0
  4498 ;;      Locals:         0       0       0       0       0       0       0
  4499 ;;      Temps:          3       0       0       0       0       0       0
  4500 ;;      Totals:         8       0       0       0       0       0       0
  4501 ;;Total ram usage:        8 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		___ftadd
  4507 ;;		___ftmul
  4508 ;;		___lwtoft
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text27
  4513  000B9C                     __ptext27:
  4514                           	opt stack 0
  4515  000B9C                     ___ftpack:
  4516                           	opt stack 24
  4517                           
  4518                           ;incstack = 0
  4519  000B9C  5004               	movf	___ftpack@exp,w,c
  4520  000B9E  B4D8               	btfsc	status,2,c
  4521  000BA0  D005               	goto	i2l1683
  4522  000BA2  5001               	movf	___ftpack@arg,w,c
  4523  000BA4  1002               	iorwf	___ftpack@arg+1,w,c
  4524  000BA6  1003               	iorwf	___ftpack@arg+2,w,c
  4525  000BA8  A4D8               	btfss	status,2,c
  4526  000BAA  D00C               	goto	i2l1689
  4527  000BAC                     i2l1683:
  4528  000BAC  0E00               	movlw	0
  4529  000BAE  6E01               	movwf	?___ftpack,c
  4530  000BB0  0E00               	movlw	0
  4531  000BB2  6E02               	movwf	?___ftpack+1,c
  4532  000BB4  0E00               	movlw	0
  4533  000BB6  6E03               	movwf	?___ftpack+2,c
  4534  000BB8  0012               	return	
  4535  000BBA                     i2l1687:
  4536  000BBA  2A04               	incf	___ftpack@exp,f,c
  4537  000BBC  90D8               	bcf	status,0,c
  4538  000BBE  3203               	rrcf	___ftpack@arg+2,f,c
  4539  000BC0  3202               	rrcf	___ftpack@arg+1,f,c
  4540  000BC2  3201               	rrcf	___ftpack@arg,f,c
  4541  000BC4                     i2l1689:
  4542  000BC4  0E00               	movlw	0
  4543  000BC6  1401               	andwf	___ftpack@arg,w,c
  4544  000BC8  6E06               	movwf	??___ftpack& (0+255),c
  4545  000BCA  0E00               	movlw	0
  4546  000BCC  1402               	andwf	___ftpack@arg+1,w,c
  4547  000BCE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4548  000BD0  0EFE               	movlw	254
  4549  000BD2  1403               	andwf	___ftpack@arg+2,w,c
  4550  000BD4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4551  000BD6  5006               	movf	??___ftpack,w,c
  4552  000BD8  1007               	iorwf	??___ftpack+1,w,c
  4553  000BDA  1008               	iorwf	??___ftpack+2,w,c
  4554  000BDC  B4D8               	btfsc	status,2,c
  4555  000BDE  D00C               	goto	i2l1695
  4556  000BE0  D7EC               	goto	i2l1687
  4557  000BE2                     i2l1691:
  4558  000BE2  2A04               	incf	___ftpack@exp,f,c
  4559  000BE4  0E01               	movlw	1
  4560  000BE6  2601               	addwf	___ftpack@arg,f,c
  4561  000BE8  0E00               	movlw	0
  4562  000BEA  2202               	addwfc	___ftpack@arg+1,f,c
  4563  000BEC  0E00               	movlw	0
  4564  000BEE  2203               	addwfc	___ftpack@arg+2,f,c
  4565  000BF0  90D8               	bcf	status,0,c
  4566  000BF2  3203               	rrcf	___ftpack@arg+2,f,c
  4567  000BF4  3202               	rrcf	___ftpack@arg+1,f,c
  4568  000BF6  3201               	rrcf	___ftpack@arg,f,c
  4569  000BF8                     i2l1695:
  4570  000BF8  0E00               	movlw	0
  4571  000BFA  1401               	andwf	___ftpack@arg,w,c
  4572  000BFC  6E06               	movwf	??___ftpack& (0+255),c
  4573  000BFE  0E00               	movlw	0
  4574  000C00  1402               	andwf	___ftpack@arg+1,w,c
  4575  000C02  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4576  000C04  0EFF               	movlw	255
  4577  000C06  1403               	andwf	___ftpack@arg+2,w,c
  4578  000C08  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4579  000C0A  5006               	movf	??___ftpack,w,c
  4580  000C0C  1007               	iorwf	??___ftpack+1,w,c
  4581  000C0E  1008               	iorwf	??___ftpack+2,w,c
  4582  000C10  B4D8               	btfsc	status,2,c
  4583  000C12  D006               	goto	i2l1699
  4584  000C14  D7E6               	goto	i2l1691
  4585  000C16                     i2l1697:
  4586  000C16  0604               	decf	___ftpack@exp,f,c
  4587  000C18  90D8               	bcf	status,0,c
  4588  000C1A  3601               	rlcf	___ftpack@arg,f,c
  4589  000C1C  3602               	rlcf	___ftpack@arg+1,f,c
  4590  000C1E  3603               	rlcf	___ftpack@arg+2,f,c
  4591  000C20                     i2l1699:
  4592  000C20  BE02               	btfsc	___ftpack@arg+1,7,c
  4593  000C22  D003               	goto	i2l544
  4594  000C24  0E02               	movlw	2
  4595  000C26  6004               	cpfslt	___ftpack@exp,c
  4596  000C28  D7F6               	goto	i2l1697
  4597  000C2A                     i2l544:
  4598  000C2A  A004               	btfss	___ftpack@exp,0,c
  4599  000C2C  9E02               	bcf	___ftpack@arg+1,7,c
  4600  000C2E  90D8               	bcf	status,0,c
  4601  000C30  3204               	rrcf	___ftpack@exp,f,c
  4602  000C32  5004               	movf	___ftpack@exp,w,c
  4603  000C34  1203               	iorwf	___ftpack@arg+2,f,c
  4604  000C36  5005               	movf	___ftpack@sign,w,c
  4605  000C38  A4D8               	btfss	status,2,c
  4606  000C3A  8E03               	bsf	___ftpack@arg+2,7,c
  4607  000C3C  C001  F001         	movff	___ftpack@arg,?___ftpack
  4608  000C40  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4609  000C44  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4610  000C48  0012               	return	
  4611  000C4A                     __end_of___ftpack:
  4612                           	opt stack 0
  4613                           pclatu	equ	0xFFB
  4614                           pclath	equ	0xFFA
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodh	equ	0xFF4
  4620                           prodl	equ	0xFF3
  4621                           intcon	equ	0xFF2
  4622                           postinc0	equ	0xFEE
  4623                           fsr0h	equ	0xFEA
  4624                           fsr0l	equ	0xFE9
  4625                           wreg	equ	0xFE8
  4626                           postdec1	equ	0xFE5
  4627                           plusw1	equ	0xFE3
  4628                           fsr1h	equ	0xFE2
  4629                           fsr1l	equ	0xFE1
  4630                           indf2	equ	0xFDF
  4631                           plusw2	equ	0xFDB
  4632                           fsr2h	equ	0xFDA
  4633                           fsr2l	equ	0xFD9
  4634                           status	equ	0xFD8
  4635                           
  4636 ;; *************** function _ReadPWMMotorRight *****************
  4637 ;; Defined at:
  4638 ;;		line 38 in file "TimerPWM.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;		None
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  2    0[COMRAM] unsigned int 
  4645 ;; Registers used:
  4646 ;;		None
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4652 ;;      Params:         2       0       0       0       0       0       0
  4653 ;;      Locals:         0       0       0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0
  4655 ;;      Totals:         2       0       0       0       0       0       0
  4656 ;;Total ram usage:        2 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_isr
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text28
  4666  00139E                     __ptext28:
  4667                           	opt stack 0
  4668  00139E                     _ReadPWMMotorRight:
  4669                           	opt stack 26
  4670                           
  4671                           ;TimerPWM.c: 39: return PWMRight;
  4672                           
  4673                           ;incstack = 0
  4674  00139E  C054  F001         	movff	_PWMRight,?_ReadPWMMotorRight
  4675  0013A2  C055  F002         	movff	_PWMRight+1,?_ReadPWMMotorRight+1
  4676  0013A6  0012               	return		;funcret
  4677  0013A8                     __end_of_ReadPWMMotorRight:
  4678                           	opt stack 0
  4679                           pclatu	equ	0xFFB
  4680                           pclath	equ	0xFFA
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           intcon	equ	0xFF2
  4688                           postinc0	equ	0xFEE
  4689                           fsr0h	equ	0xFEA
  4690                           fsr0l	equ	0xFE9
  4691                           wreg	equ	0xFE8
  4692                           postdec1	equ	0xFE5
  4693                           plusw1	equ	0xFE3
  4694                           fsr1h	equ	0xFE2
  4695                           fsr1l	equ	0xFE1
  4696                           indf2	equ	0xFDF
  4697                           plusw2	equ	0xFDB
  4698                           fsr2h	equ	0xFDA
  4699                           fsr2l	equ	0xFD9
  4700                           status	equ	0xFD8
  4701                           
  4702 ;; *************** function _ReadPWMMotorLeft *****************
  4703 ;; Defined at:
  4704 ;;		line 42 in file "TimerPWM.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  2    0[COMRAM] unsigned int 
  4711 ;; Registers used:
  4712 ;;		None
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4718 ;;      Params:         2       0       0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0
  4721 ;;      Totals:         2       0       0       0       0       0       0
  4722 ;;Total ram usage:        2 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_isr
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           	psect	text29
  4732  0013A8                     __ptext29:
  4733                           	opt stack 0
  4734  0013A8                     _ReadPWMMotorLeft:
  4735                           	opt stack 26
  4736                           
  4737                           ;TimerPWM.c: 43: return PWMLeft;
  4738                           
  4739                           ;incstack = 0
  4740  0013A8  C052  F001         	movff	_PWMLeft,?_ReadPWMMotorLeft
  4741  0013AC  C053  F002         	movff	_PWMLeft+1,?_ReadPWMMotorLeft+1
  4742  0013B0  0012               	return		;funcret
  4743  0013B2                     __end_of_ReadPWMMotorLeft:
  4744                           	opt stack 0
  4745                           pclatu	equ	0xFFB
  4746                           pclath	equ	0xFFA
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           postinc0	equ	0xFEE
  4755                           fsr0h	equ	0xFEA
  4756                           fsr0l	equ	0xFE9
  4757                           wreg	equ	0xFE8
  4758                           postdec1	equ	0xFE5
  4759                           plusw1	equ	0xFE3
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           indf2	equ	0xFDF
  4763                           plusw2	equ	0xFDB
  4764                           fsr2h	equ	0xFDA
  4765                           fsr2l	equ	0xFD9
  4766                           status	equ	0xFD8
  4767                           
  4768 ;; *************** function _ADCGetOutput *****************
  4769 ;; Defined at:
  4770 ;;		line 36 in file "ADC.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;  temp            2    4[COMRAM] int 
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  2    0[COMRAM] unsigned int 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         2       0       0       0       0       0       0
  4785 ;;      Locals:         2       0       0       0       0       0       0
  4786 ;;      Temps:          2       0       0       0       0       0       0
  4787 ;;      Totals:         6       0       0       0       0       0       0
  4788 ;;Total ram usage:        6 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_isr
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text30
  4798  00137A                     __ptext30:
  4799                           	opt stack 0
  4800  00137A                     _ADCGetOutput:
  4801                           	opt stack 26
  4802                           
  4803                           ;ADC.c: 37: int temp;
  4804                           ;ADC.c: 38: temp = ADRESL;
  4805                           
  4806                           ;incstack = 0
  4807  00137A  CFC3 F005          	movff	4035,ADCGetOutput@temp	;volatile
  4808  00137E  6A06               	clrf	ADCGetOutput@temp+1,c
  4809                           
  4810                           ;ADC.c: 39: return temp + (ADRESH << 8);
  4811  001380  50C4               	movf	4036,w,c	;volatile
  4812  001382  6E04               	movwf	(??_ADCGetOutput+1)& (0+255),c
  4813  001384  6A03               	clrf	??_ADCGetOutput& (0+255),c
  4814  001386  5005               	movf	ADCGetOutput@temp,w,c
  4815  001388  2403               	addwf	??_ADCGetOutput,w,c
  4816  00138A  6E01               	movwf	?_ADCGetOutput,c
  4817  00138C  5006               	movf	ADCGetOutput@temp+1,w,c
  4818  00138E  2004               	addwfc	??_ADCGetOutput+1,w,c
  4819  001390  6E02               	movwf	?_ADCGetOutput+1,c
  4820  001392  0012               	return	
  4821  001394                     __end_of_ADCGetOutput:
  4822                           	opt stack 0
  4823                           pclatu	equ	0xFFB
  4824                           pclath	equ	0xFFA
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           postinc0	equ	0xFEE
  4833                           fsr0h	equ	0xFEA
  4834                           fsr0l	equ	0xFE9
  4835                           wreg	equ	0xFE8
  4836                           postdec1	equ	0xFE5
  4837                           plusw1	equ	0xFE3
  4838                           fsr1h	equ	0xFE2
  4839                           fsr1l	equ	0xFE1
  4840                           indf2	equ	0xFDF
  4841                           plusw2	equ	0xFDB
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           pclatu	equ	0xFFB
  4846                           pclath	equ	0xFFA
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           postinc0	equ	0xFEE
  4855                           fsr0h	equ	0xFEA
  4856                           fsr0l	equ	0xFE9
  4857                           wreg	equ	0xFE8
  4858                           postdec1	equ	0xFE5
  4859                           plusw1	equ	0xFE3
  4860                           fsr1h	equ	0xFE2
  4861                           fsr1l	equ	0xFE1
  4862                           indf2	equ	0xFDF
  4863                           plusw2	equ	0xFDB
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868                           	psect	rparam
  4869  0000                     pclatu	equ	0xFFB
  4870                           pclath	equ	0xFFA
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           intcon	equ	0xFF2
  4878                           postinc0	equ	0xFEE
  4879                           fsr0h	equ	0xFEA
  4880                           fsr0l	equ	0xFE9
  4881                           wreg	equ	0xFE8
  4882                           postdec1	equ	0xFE5
  4883                           plusw1	equ	0xFE3
  4884                           fsr1h	equ	0xFE2
  4885                           fsr1l	equ	0xFE1
  4886                           indf2	equ	0xFDF
  4887                           plusw2	equ	0xFDB
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892                           	psect	temp
  4893  00005E                     btemp:
  4894                           	opt stack 0
  4895  00005E                     	ds	1
  4896  0000                     int$flags	set	btemp
  4897                           pclatu	equ	0xFFB
  4898                           pclath	equ	0xFFA
  4899                           tblptru	equ	0xFF8
  4900                           tblptrh	equ	0xFF7
  4901                           tblptrl	equ	0xFF6
  4902                           tablat	equ	0xFF5
  4903                           prodh	equ	0xFF4
  4904                           prodl	equ	0xFF3
  4905                           intcon	equ	0xFF2
  4906                           postinc0	equ	0xFEE
  4907                           fsr0h	equ	0xFEA
  4908                           fsr0l	equ	0xFE9
  4909                           wreg	equ	0xFE8
  4910                           postdec1	equ	0xFE5
  4911                           plusw1	equ	0xFE3
  4912                           fsr1h	equ	0xFE2
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           plusw2	equ	0xFDB
  4916                           fsr2h	equ	0xFDA
  4917                           fsr2l	equ	0xFD9
  4918                           status	equ	0xFD8


Data Sizes:
    Strings     14
    Constant    0
    Data        64
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      93
    BANK0           160     24      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCDWriteString@msg	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_SetDistanceCentral
    _isr->_SetDistanceLeft
    _isr->_SetDistanceRight
    _SetDistanceRight->___fttol
    _SetDistanceLeft->___fttol
    _SetDistanceCentral->___fttol
    ___ftadd->___ftmul
    _SetBattery->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___lwtoft

Critical Paths under _main in BANK0

    _main->_LCDWriteInt
    _SetMotorRight->_SetPWMMotorRight
    _SetPWMMotorRight->___lwdiv
    _SetMotorLeft->_SetPWMMotorLeft
    _SetPWMMotorLeft->___lwdiv
    _LCDWriteString->_LCDByte
    _LCDWriteInt->_LCDByte
    _LCDWriteInt->___awdiv
    _LCDInit->_LCDByte
    _LCDByte->_LCDBusyLoop

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    7926
                                             22 BANK0      2     2      0
                            _ADCInit
                            _LCDByte
                            _LCDInit
                        _LCDWriteInt
                     _LCDWriteString
                          _MotorInit
                        _ReadBattery
                       _SetMotorLeft
                      _SetMotorRight
                       _TimerPWMInit
 ---------------------------------------------------------------------------------
 (1) _TimerPWMInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorRight                                        2     0      2     828
                                              9 BANK0      2     0      2
                   _SetPWMMotorRight
                                _abs
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorRight                                     2     0      2     504
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorLeft                                         2     0      2     828
                                              9 BANK0      2     0      2
                    _SetPWMMotorLeft
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetPWMMotorLeft                                      2     0      2     504
                                              7 BANK0      2     0      2
                            ___lwdiv
                                _abs (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _ReadBattery                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MotorInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1350
                                              8 BANK0      3     1      2
                            _LCDByte
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         14    11      3    2453
                                              8 BANK0     14    11      3
                            _LCDByte
                        _ReadBattery (ARG)
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     424
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              3     3      0    1314
                                              8 BANK0      3     3      0
                        _LCDBusyLoop
                            _LCDByte
 ---------------------------------------------------------------------------------
 (2) _LCDByte                                              5     4      1    1107
                                              3 BANK0      5     4      1
                        _LCDBusyLoop
 ---------------------------------------------------------------------------------
 (3) _LCDBusyLoop                                          3     3      0     117
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 22    22      0   33985
                                             57 COMRAM    18    18      0
                       _ADCGetOutput
                   _ReadPWMMotorLeft
                  _ReadPWMMotorRight
                         _SetBattery
                 _SetDistanceCentral
                    _SetDistanceLeft
                   _SetDistanceRight
 ---------------------------------------------------------------------------------
 (5) _SetDistanceRight                                     4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) _SetDistanceLeft                                      4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) _SetDistanceCentral                                   4     2      2    9333
                                             53 COMRAM     4     2      2
                            ___ftadd
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             12     6      6    3459
                                             26 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) _SetBattery                                           2     0      2    5874
                                             53 COMRAM     2     0      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2309
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             38 COMRAM    15    11      4
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             15     9      6    2971
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _ReadPWMMotorRight                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _ReadPWMMotorLeft                                     2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _ADCGetOutput                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _LCDByte
     _LCDBusyLoop
   _LCDInit
     _LCDBusyLoop
     _LCDByte
       _LCDBusyLoop
   _LCDWriteInt
     _LCDByte
       _LCDBusyLoop
     _ReadBattery (ARG)
     ___awdiv (ARG)
     ___awmod (ARG)
   _LCDWriteString
     _LCDByte
       _LCDBusyLoop
   _MotorInit
   _ReadBattery
   _SetMotorLeft
     _SetPWMMotorLeft
       ___lwdiv
       _abs (ARG)
     _abs
   _SetMotorRight
     _SetPWMMotorRight
       ___lwdiv
       _abs (ARG)
     _abs
   _TimerPWMInit

 _isr (ROOT)
   _ADCGetOutput
   _ReadPWMMotorLeft
   _ReadPWMMotorRight
   _SetBattery
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceCentral
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceLeft
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _SetDistanceRight
     ___ftadd
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      5F       5       59.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      5D       1       98.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BC      15        0.0%
DATA                 0      0      BC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Feb 09 18:44:42 2016

  __size_of_SetPWMMotorRight 0036                 ?_LCDBusyLoop 0001                           _GO 007E11  
               ___awdiv@sign 00A5                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                 ___ftadd@exp1 0026  
               ___ftadd@exp2 0025                 ___ftadd@sign 0024                          l201 119A  
                        l224 10AA                          l225 10AC                          l262 08F4  
                        l194 11DC                          l365 130A                          l722 0F24  
                        _GIE 007F97                 __CFG_CPB$OFF 000000                          _RC0 007C10  
                        _RC1 007C11                          _RC2 007C12                          _RC3 007C13  
                        _RC4 007C14                          _RC5 007C15                          _RD4 007C1C  
                        _RD5 007C1D                          _RD6 007C1E                 __CFG_CPD$OFF 000000  
                        _PSA 007EAB            SetMotorLeft@speed 00A9                          _abs 12E8  
                        _isr 0008              __end_of_ADCInit 1338                 __CFG_BORV$18 000000  
               ___awmod@sign 00A5    __size_of_ReadPWMMotorLeft 000A                          prod 000FF3  
                        wreg 000FE8      LCDWriteInt@field_length 00AA              __end_of_LCDByte 10DA  
            __end_of_LCDInit 0EB6                 __CFG_LVP$OFF 000000                 ?_LCDWriteInt 00A8  
                LCDByte@temp 00A7        __size_of_ADCGetOutput 001A                         ?_abs 00A0  
                       l2123 0E92                         l2131 0C4C                         l2119 0E88  
                       l2143 0C98                         l2151 0CD8                         l2063 11D0  
                       l2073 118E                         l2147 0CBC                         l2067 11E0  
                       l2181 086E                         l2173 0852                         l2149 0CD2  
                       l2077 119E                         l2183 0886                         l2167 0800  
                       l2271 0E06                         l2263 0DD8                         l2185 08B0  
                       l1721 0ED4                         l1643 10E8                         l2179 0868  
                       l1723 0EE0                         l2275 0E1C                         l2189 08CE  
                       l1733 0F16                         l1725 0EE6                         l1911 0B2E  
                       l1913 0B3A                         l1905 0B10                         l1931 0B92  
                       l1923 0B70                         l1915 0B40                         l1927 0B7E  
                       l1951 0D2C                         l1943 0D08                         l1953 0D38  
                       l1955 0D3E                         l1963 0D70                         l1947 0D18  
                       l1967 0D84                         l1959 0D62                         l1899 0AFA  
                       _ADIE 007CEE                         _ADIF 007CF6                         ?_isr 0001  
                       _ADON 007E10                         _CHS0 007E12                         _CHS1 007E13  
                       _CHS2 007E14                         _CHS3 007E15                         _ANS0 007BF0  
                       STR_1 0601                         _ANS1 007BF1                         _ANS2 007BF2  
                       _ANS3 007BF3                         _T0CS 007EAD     __size_of_SetDistanceLeft 0072  
                       u1500 118A                         u1480 11CC                         u1581 07C6  
                       u1737 0E30                         _PEIE 007F96                         i2l41 0054  
                       i2l42 00EE                         i2l43 006A                         i2l44 0080  
                       i2l45 009A                         i2l37 00F0                         i2l46 00B0  
                       i2l57 014C                         abs@a 00A0                         _main 0D8E  
               ___ftpack@arg 0001                 ___ftpack@exp 0004                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr0l 000FE9                         fsr2h 000FDA  
                       fsr1l 000FE1                         indf2 000FDF                         fsr2l 000FD9  
                       btemp 005E                         pclat 000FFA                         prodh 000FF4  
                       prodl 000FF3                         start 0188                ??_ReadBattery 00A2  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000             ADCGetOutput@temp 0005  
               ___ftmul@cntr 0019                 ___param_bank 000010                 ___ftmul@sign 001A  
               ___fttol@exp1 0035                        ??_abs 00A2                 ___fttol@lval 0031  
                      ??_isr 003A                        ?_main 0001              __end_of___awdiv 0B9C  
            __end_of___ftadd 07BC              __end_of___awmod 0D8E                 LCDInit@style 00A9  
                isr@PWMRight 0058              __end_of___ftmul 0ADE              ___awdiv@divisor 00A2  
            __end_of___fttol 09EA                        _T0PS0 007EA8                        _T0PS1 007EA9  
                      _T0PS2 007EAA              __end_of___lwdiv 0F2E                        i2l544 0C2A  
                      i2l571 067E                        i2l582 072E                        i2l591 074A  
                      i2l567 0654                 _ADCGetOutput 137A              ___awdiv@counter 00A4  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _PORTD 000F83  
                      _TRISC 000F94                        _TRISD 000F95                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
            _SetPWMMotorLeft 12B2                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                ___ftpack@sign 0005  
                      main@i 00B6                        tablat 000FF5     __end_of_SetDistanceRight 0FA0  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
             __CFG_HFOFST$ON 000000                  isr@Readport 005A               __CFG_PBADEN$ON 000000  
            __initialization 1130                 __end_of_main 0E24          __end_of_ReadBattery 139E  
                  ??_ADCInit 00A0      SetDistanceRight@lecture 0036                       ??_main 00B6  
              ___fttol@sign1 0030                __activetblptr 000002                LCDByte@isdata 00A3  
                  ??_LCDByte 00A4                    ??_LCDInit 00A8                   _SetBattery 11FA  
                     _ADCON1 000FC1                       _ADCON2 000FC0                       _ADRESH 000FC4  
                     _ADRESL 000FC3                       _T08BIT 007EAE             ___awdiv@dividend 00A0  
           __end_of___ftpack 0C4A                       u101_41 0620                       u102_41 0634  
                     u122_41 09FA                       i2l2013 09D8                       i2l2005 09B0  
                     i2l2007 09BC                       i2l2009 09C2                       i2l2231 0122  
                     i2l2215 00B8                       i2l2209 0094                       i2l2235 0130  
                     i2l2219 00C2                       u124_41 0A22                       u140_41 0906  
                     i2l2239 013E                       i2l1811 06E8                       i2l1803 06BC  
                     i2l1821 071C                       i2l1813 06F2               __CFG_WDTEN$OFF 000000  
                     i2l1823 0726                       i2l1815 06FA                       i2l1809 06DE  
                     i2l1691 0BE2                       i2l1683 0BAC                       i2l1829 0766  
                     i2l1781 0662                       i2l1695 0BF8                       i2l1687 0BBA  
                     i2l1855 0A3A                       i2l1839 0796                       i2l1697 0C16  
                     i2l1689 0BC4                       i2l1873 0A7C                       i2l1849 0A12  
                     i2l1699 0C20                       i2l1883 0AA4                       i2l1787 068C  
                     i2l1869 0A6C                       i2l1879 0A94                       i2l1977 0922  
                     i2l1995 0988                       i2l1999 0998             __end_of___lwtoft 135C  
                     _TMR0IE 007F95                       _TMR0IF 007F92                       _TMR0ON 007EAF  
                     _TRISA0 007C90                       _TRISA1 007C91                       _TRISA2 007C92  
                     _TRISA3 007C93           SetMotorRight@speed 00A9            ??_SetDistanceLeft 0038  
             __CFG_XINST$OFF 000000               _LCDWriteString 0C4A              _DistanceCentral 004C  
           _SetPWMMotorRight 127C                    ??___awdiv 00A4                    ??___ftadd 0021  
             __CFG_STVREN$ON 000000                    ??___awmod 00A4                    ??___ftmul 0012  
                  ??___fttol 002B                    ??___lwdiv 00A4         __size_of_LCDBusyLoop 0056  
                     clear_0 1136                       clear_1 1142             ___awdiv@quotient 00A6  
            ___awmod@divisor 00A2      __end_of_SetPWMMotorLeft 12E8              ___awmod@counter 00A4  
 __end_of_SetDistanceCentral 1084           __size_of_MotorInit 0006        ___ftmul@f3_as_product 0016  
           _ReadPWMMotorLeft 13A8                 LCDWriteInt@i 00B4                 LCDWriteInt@j 00B2  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8         __size_of_LCDWriteInt 013A                   __accesstop 0060  
    __end_of__initialization 1168                   ___ftadd@f1 001B                   ___ftadd@f2 001E  
     __end_of_LCDWriteString 0CEC                ___rparam_used 000001                    LCDByte@hn 00A4  
                  LCDByte@ln 00A5                ?_SetMotorLeft 00A9                  _ReadBattery 1394  
                 ___ftmul@f1 000C                   ___ftmul@f2 000F                   ___fttol@f1 0027  
             __pcstackCOMRAM 0001                 __pidataBANK0 123C                   ___lwtoft@c 0009  
                ?_SetBattery 0036                   __pbssBANK0 00B8            __end_of_MotorInit 13B8  
             ??_SetMotorLeft 00AB              ?_LCDWriteString 00A8                      _ADCInit 1314  
                  ?___ftpack 0001                ?_TimerPWMInit 0001             ?_SetPWMMotorLeft 00A7  
                  ?___lwtoft 0009                      _LCDByte 1084                      _LCDInit 0E24  
     __size_of_SetMotorRight 0042                      _PWMLeft 0052                      _Battery 00BD  
          ?_SetDistanceRight 0036                 isr@iteration 005C           ??_SetDistanceRight 0038  
                    __Hparam 0000                      __Lparam 0000                 _DistanceLeft 004E  
        __size_of_SetBattery 0042                      ___cgram 0060                      ___awdiv 0ADE  
                    ___ftadd 0610                      ___awmod 0CEC                      ___ftmul 09EA  
                    ___fttol 08F6                      ___lwdiv 0EB6                 __psmallconst 0600  
             ??_TimerPWMInit 00A0                      __pcinit 1130                   ??___ftpack 0006  
                    __ramtop 0600                      __ptext0 0D8E                      __ptext1 135C  
                    __ptext2 1176                      __ptext3 127C                      __ptext4 11B8  
                    __ptext5 12E8                      __ptext6 12B2                      __ptext7 0EB6  
                    __ptext8 1394                      __ptext9 13B2                   ??___lwtoft 000C  
               __size_of_abs 002C                 __size_of_isr 0180             ___awmod@dividend 00A0  
          SetBattery@lecture 0036     __end_of_SetPWMMotorRight 12B2              _SetDistanceLeft 0FA0  
       end_of_initialization 1168                      isr@read 004A                __Lmediumconst 0000  
          _ReadPWMMotorRight 139E                _SetMotorRight 1176     __end_of_ReadPWMMotorLeft 13B2  
         ?_ReadPWMMotorRight 0001                      postdec1 000FE5                      postinc0 000FEE  
 SetPWMMotorRight@percentage 00A7          ??_ReadPWMMotorRight 0003            LCDWriteString@msg 00A8  
       __end_of_SetMotorLeft 11FA                    _TRISDbits 000F95           _SetDistanceCentral 1012  
  __end_of_ReadPWMMotorRight 13A8                   LCDInit@__i 00AA               ?_SetMotorRight 00A9  
        ?_SetDistanceCentral 0036                 ?_ReadBattery 00A0                  ___ftmul@exp 0015  
              ??_LCDBusyLoop 00A0                   isr@PWMLeft 0056      __end_of_SetDistanceLeft 1012  
       ??_SetDistanceCentral 0038          start_initialization 1130                 ??_SetBattery 0038  
                __end_of_abs 1314                  __end_of_isr 0188                ??_LCDWriteInt 00AB  
           ??_LCDWriteString 00AA         __end_of_TimerPWMInit 137A                    _MotorInit 13B2  
         __end_of_SetBattery 123C                  __pdataBANK0 0060             __CFG_LPT1OSC$OFF 000000  
                   ?_ADCInit 0001          __end_of_LCDBusyLoop 1130                ?_ADCGetOutput 0001  
                   ?_LCDByte 00A3                     ?_LCDInit 0001            __size_of___ftpack 00AE  
                __pbssCOMRAM 004C                     LCDByte@c 00A6            __size_of___lwtoft 0024  
              __pcstackBANK0 00A0    SetDistanceCentral@lecture 0036   __size_of_ReadPWMMotorRight 000A  
           LCDWriteInt@F3445 00B8              ??_SetMotorRight 00AB          __end_of_LCDWriteInt 08F6  
           ___lwdiv@dividend 00A0            __CFG_CCP2MX$PORTC 000000                   ?_MotorInit 0001  
                  __pintcode 0008                     ?___awdiv 00A0                     ?___ftadd 001B  
                   ?___awmod 00A0                     ?___ftmul 000C                     ?___fttol 0027  
                   ?___lwdiv 00A0        __size_of_SetMotorLeft 0042    __size_of_SetDistanceRight 0072  
             ??_ADCGetOutput 0003                  __smallconst 0600             ?_SetDistanceLeft 0036  
            LCDBusyLoop@busy 00A0              LCDBusyLoop@temp 00A1             ___lwdiv@quotient 00A4  
   __size_of_SetPWMMotorLeft 0036            ?_SetPWMMotorRight 00A7           ??_SetPWMMotorRight 00A9  
               _SetMotorLeft 11B8                     i2u142_40 0940                     i2u142_45 0938  
          ?_ReadPWMMotorLeft 0001             __CFG_WDTPS$32768 000000         __size_of_ReadBattery 000A  
                _LCDBusyLoop 10DA           ??_ReadPWMMotorLeft 0003             LCDWriteString@cc 00AA  
           __size_of_ADCInit 0024                     _PWMRight 0054             __size_of_LCDByte 0056  
           __size_of_LCDInit 0092        __size_of_TimerPWMInit 001E                  _LCDWriteInt 07BC  
                  copy_data0 115C       SetDistanceLeft@lecture 0036                     __Hrparam 0000  
                ??_MotorInit 00A0                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
              _DistanceRight 0050             __size_of___awdiv 00BE             __size_of___ftadd 01AC  
           __size_of___awmod 00A2             __size_of___ftmul 00F4             __size_of___fttol 00F4  
          LCDBusyLoop@status 00A2             __size_of___lwdiv 0078                     ___ftpack 0B9C  
               _TimerPWMInit 135C                     ___lwtoft 1338              ___lwdiv@divisor 00A2  
            ___lwdiv@counter 00A6                     __ptext10 0C4A                     __ptext11 07BC  
                   __ptext20 0FA0                     __ptext12 0CEC                     __ptext21 1012  
                   __ptext13 0ADE                     __ptext30 137A                     __ptext22 0610  
                   __ptext14 0E24                     __ptext23 11FA                     __ptext15 1084  
                   __ptext24 1338                     __ptext16 10DA                     __ptext25 08F6  
                   __ptext17 1314                     __ptext26 09EA                     __ptext27 0B9C  
                   __ptext19 0F2E                     __ptext28 139E                     __ptext29 13A8  
              __size_of_main 0096         __end_of_ADCGetOutput 1394            ??_SetPWMMotorLeft 00A9  
                   int$flags 005E             _SetDistanceRight 0F2E  __size_of_SetDistanceCentral 0072  
  SetPWMMotorLeft@percentage 00A7                     intlevel2 0000               LCDWriteInt@val 00A8  
             LCDWriteInt@str 00AD            __CFG_FOSC$INTIO67 000000        __end_of_SetMotorRight 11B8  
    __size_of_LCDWriteString 00A2  
